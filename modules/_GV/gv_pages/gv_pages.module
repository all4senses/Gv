<?php

/**
 * @file
 * Module for building and managing site's pages.
 */

/**
 * Constants for ratins titles, etc.
 */
module_load_include('inc', 'gv_misc', 'inc/constants');


/**
 * Implements hook_menu().
 */
function gv_pages_menu() {

  $items['home'] = array(
    'title' => 'Home page',
    //'description' => 'Home page',
    //'page callback' => 'drupal_get_form',
    'page callback' => 'gv_pages_showPage',
    'page arguments' => array('gv_pages_home'/*$name*/, 'via_function'/* $call_type: direct_theme OR via_function */, 'gv_pages_buildHome' /*$build_function*/), //array(1),
    //'access callback' => 'gv_pages_access',
    //'access arguments' => array('home'),
    'access arguments' => array('access content'),  
    'type' => MENU_CALLBACK,
  );  
  $items['news-topics'] = array(
    'title' => 'News topics',
    'page callback' => 'gv_pages_buildNewsTopics',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  ); 
  $items['articles/tags'] = array(
    //'title' => 'Topics page',
    'page callback' => 'gv_pages_buildTopicsPage',
    'page arguments' => array('articles'),//array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  ); 
  $items['blog/tags'] = array(
    //'title' => 'Topics page',
    'page callback' => 'gv_pages_buildTopicsPage',
    'page arguments' => array('blog'),//array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  ); 
  $items['news/tags'] = array(
    //'title' => 'Topics page',
    'page callback' => 'gv_pages_buildTopicsPage',
    'page arguments' => array('news'),//array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  ); 
  
  return $items;
}


/**
 * Returns a themed News topics page.
 * 
 * Allows to use same topics for News, Articles, Blog posts, etc.
 */
function gv_pages_buildTopicsPage($content_type_label) {
  global $language;
  //$content_types = array('blog_post' => 'blog', 'news_post' => 'news', 'article' => 'articles');
  // Inverted...
  $content_types = array('blog' => 'blog_post', 'news' => 'news_post', 'articles' => 'article');
  $content_type = $content_types[$content_type_label];
  
  $topics = cache_get($content_type . '_topics_page' . $language->language);
  if (1) { //(!$topics || empty($topics->data) || $topics->expire < time()) {
    $topics = gv_misc_getTopics($content_type, $content_type_label);
    if (!$topics) {
      return NULL;
    }
    $topics = theme('gv_misc_submenuSimple', array('submenu' => array('below' => $topics), 'class' => 'topics'));
    //$page_title = '<h1 id="page-title" class="title">' . drupal_ucfirst($content_type_label) . ' tags</h1>';
    $show_all_url = '<div class="more-link">' . l(t('Show all posts'), $content_type_label) . '</div>';
    $topics = /*$page_title .*/ $topics . $show_all_url;
    // Expire = current time + 4 hours.
    cache_set($content_type . '_topics_page' . $language->language, $topics, 'cache', time() + 14400);
  }
  else {
    $topics = $topics->data;
  }
  
  if ($preface = gv_misc_getPrefaceByKey($content_type_label . '_tags') ) {
    //dpm($preface);
    //drupal_set_title($preface->title);
    if (isset($preface->metatags['title']['value']) && $preface->metatags['title']['value']) {
      drupal_set_title($preface->metatags['title']['value']);
    }
    else {
      drupal_set_title($preface->title);
    }
    
    $preface->title_no_link = TRUE;
    $preface = render(node_view($preface, 'full'));
  }
  
  return $preface . $topics; 
}


/**
 * Returns a themed News topics page.
 * 
 * Allows to use same topics for News, Articles, Blog posts, etc.
 */
function gv_pages_buildNewsTopics() {
  global $language;
  $topics = cache_get('news_topics_page' . $language->language);
  if (!$topics || empty($topics->data) || $topics->expire < time()) {
    $topics = gv_misc_getTopics('news_post', 'news');
    $topics = theme('gv_misc_submenuSimple', array('submenu' => array('below' => $topics), 'class' => 'topics'));
    // Expire = current time + 4 hours.
    cache_set('news_topics_page' . $language->language, $topics, 'cache', time() + 14400);
  }
  else {
    $topics = $topics->data;
  }
  return $topics; 
}


/**
 * Implements hook_access().
 */
function gv_pages_access($type = null) {
  switch ($type) {
    default:
      if (arg(1) == 'edit') {
        if(!user_access('administer site configuration')) {
          return false;
        }
      }
    break;
  }
  return true;
}


/**
 * Prepare data for output it via theme function
 */
function gv_pages_buildHome($name, $data) {
  $out = '';
    
  $seo_welcome_node = gv_misc_getPrefaceByKey('front');
  $seo_welcome_node->title_no_link = TRUE;
  $seo_welcome_node_view = node_view($seo_welcome_node, 'full');
  
  hide($seo_welcome_node_view['field_preface_bottom']);
  
  global $user;
  if ($user->uid == 1) {
    dpm($seo_welcome_node_view);
    $out .= render($seo_welcome_node_view);
  }
  else {
    $out .= render($seo_welcome_node_view);
  }
  
  
  
  // Content of a home page saved in db as a var.
  ////$out .= theme($name, array('data' => $data));
  
  // Get block for Latest VoIP articles (+ news, blog posts, etc).
//  $block_data = array('module' => 'views', 'delta' => 'articles-block');
//  $out .= gv_blocks_getBlockThemed($block_data);
  
  // Get block for Top pick business providers.
  $block_data = array('module' => 'views', 'delta' => 'providers-block', 'shadow' => FALSE);
  $out .= gv_blocks_getBlockThemed($block_data);
 
  // Get block for Top pick residential providers.
  $block_data = array('module' => 'views', 'delta' => 'providers-block_1', 'shadow' => FALSE); 
  $out .= gv_blocks_getBlockThemed($block_data);
  
  
  if ($user->uid == 1) {
    $out .= render($seo_welcome_node_view['field_preface_bottom']);
  }
  
  return $out;
}


/**
 * Show themed page for users or edit page for admins (with  argument /edit in url)
 */
function gv_pages_showPage($name, $call_type = 'direct_theme', $build_function = NULL) {
  if (arg(1) == 'edit') {
    return drupal_get_form($name . '_form');
  }
  else {
    $data = variable_get($name . '_form', null);
    if ($call_type == 'direct_theme') {
      return theme($name, array('data' => $data));
    }
    else {
      return $build_function($name, $data);
    }
  }
}


/**
 * Implements hook_form() for editing home page content.
 */
function gv_pages_home_form() {
    
  $data = variable_get('gv_pages_home_form');
    
  $form['home_backend'] = array(
  '#type' => 'markup',
  '#title' => t('Explain'),
  '#markup' => '<div>Some text</div>',  
  ); 
    
  $form['fieldsetblock1_title'] = array(
  '#type' => 'fieldset',
  '#title' => t('Title'),
  '#collapsible' => true,
  '#collapsed' => true,  
  ); 
    
  $form['fieldsetblock1_title']['gv_block1_title'] = array(
  '#type' => 'textfield',
  '#title' => t('Title 1'),
  '#maxlength' => 40,   
  '#description' => t('Max length of the string: 40 symbols'),    
  '#default_value' => isset($data['gv_block1_title']) ? $data['gv_block1_title'] : 'some default title',
  );
  
  $form['goto_view'] = array(
        '#markup' => '<div><a href="/">View the page</a></div>', // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  );
  
  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#weight' => 40,
  );

  $form['#redirect'] = ''; // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  
  $form['#submit'][0] = 'gv_pages_forms_submit'; // process all gv_pages forms with a single function
  $form['#validate'][0] = 'gv_pages_forms_validate';
  return $form;
}


/**
 * Custom form validating function for a submitted form data.
 */
function gv_pages_forms_validate($form, &$form_state) {
    
  foreach ($form_state['values'] as $key => $url) {
    if (preg_match('/.*_link.*_url.*/i', $key)) {
      $url = trim($url, '/');
      if (!$results = db_query("SELECT pid FROM {url_alias} WHERE (LOWER(alias) = LOWER('" . $url . "')) OR (LOWER(source) = LOWER('" . $url . "'))")->fetchField()) {
        if (!$results = db_query("SELECT path FROM {menu_router} WHERE (LOWER(path) = LOWER('" . $url . "'))")->fetchField()) {
          form_set_error($key, t('No such link on the site: ' . $url));
        }
      }
    }
  }
}


/**
 * Custom dispatching form sumbitting function for a submitted form data.
 */
function gv_pages_forms_submit($form, &$form_state) {
  gv_pages_process_form_data($form, $form_state);
  $form_state['redirect'] = $form['#redirect'];
  drupal_set_message(t('The changes have been saved.'));
}


/**
 * Custom helper form sumbitting function for a submitted form data.
 */
function gv_pages_process_form_data($form, $form_state) {
    
  $data = array();
  foreach ($form_state['values'] as $key => $value) {
    $pos = strpos($key, 'gv_');
    if ($pos !== false AND $pos == 0) {
      if (!is_array($value)) {
        $data[$key] = strip_tags($value);
      }
      else {
        $data[$key] = $value;
      }
    }
  }
 
  if (isset($_FILES['files'])) {
    $default_file_path = variable_get('file_public_path', conf_path() . '/files');
    $uploaddir = $_SERVER['DOCUMENT_ROOT'] . $default_file_path;

    foreach ($_FILES['files']['name'] as $var_name => $file_name) {
      $setToDelete = (isset($form_state['values']['del_' . $var_name]) AND $form_state['values']['del_' . $var_name]);
      if(!$file_name OR $setToDelete) {
        if ($setToDelete) {
            if ($form_state['values']['_' . $var_name]) {
              unlink($uploaddir . '/' . basename($form_state['values']['_' . $var_name]));
            }
            $data[$var_name] = '';
        }
        else {
          $data[$var_name] = isset($form_state['values']['_' . $var_name])?$form_state['values']['_' . $var_name]:''; // leave the old file
        }  
        continue;
      }

      $basename = basename($_FILES['files']['name'][$var_name]);
      move_uploaded_file($_FILES['files']['tmp_name'][$var_name], $uploaddir . '/' . $basename);
      $data[$var_name] = $default_file_path . '/' . $basename;
    }
  }
  variable_set($form['#form_id'], $data);
}


/**
 * Implements hook_theme().
 */
function gv_pages_theme($existing, $type, $theme, $path) {
  $path = drupal_get_path('module', 'gv_pages') . '/tpl';
  
  return array(
    'gv_pages_home' => array(
      'variables' => array('data' => null),
      'template' => 'gv_pages_home',
      'path' => $path,
    ),
  );
} 



/**
 * Implements hook_form_alter().
 *
 * @param array &$form
 *   Array with declared form.
 *
 * @param array &$form_state
 *   Array with current form state.
 *
 * @param string $form_id
 *   Form ID.
 *
 * @return void
 *   Return nothing.
 */
function gv_pages_form_alter(&$form, &$form_state, $form_id) {
  
  // dpm($form_id);  dpm($form);
  // $conf['locale_custom_strings_en']['old string'] = 'new string'
  
  switch ($form_id) {
    
    case 'news_post_node_form':
    case 'blog_post_node_form':
    case 'article_node_form':
        
        $form['field_a_teaser']['#access'] = FALSE;
        $form['field_main_image']['#access'] = FALSE;
      
        $form['actions']['save_draft'] = array(
          '#type' => 'submit',
          '#value' => 'Save Draft',
          '#submit' => array('node_form_submit'),
          '#weight' => 6,
        );
      
        $form['#submit'][] = 'gv_pages_submitForm_article';
        $form['#validate'][] = 'gv_pages_validateForm_article';
        
      break;
    
    
    case 'quote_node_form':
      
      //dpm($form);
      $data = unserialize($form['field_q_data']['und'][0]['value']['#default_value']);
      $form['field_q_data']['#access'] = FALSE;
      //dpm($data);
      
      $form['bottom_text'] = array(
        '#type' => 'fieldset',
        '#title' => t('Bottom text'),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
        //'#description' => t(''),
        '#weight' => 10,
        '#tree' => TRUE,
      );
            $form['bottom_text']['left_title'] = array(
              '#type' => 'textfield',
              '#title' => t('Left title'),
              //'#description' => t(''),
              '#default_value' => isset($data['bottom_text']['left_title']) ? $data['bottom_text']['left_title'] : '',
            );
            $form['bottom_text']['left_text'] = array(
              '#type' => 'textarea',
              '#title' => t('Left text'),
              //'#description' => t(''),
              '#default_value' => isset($data['bottom_text']['left_text']) ? $data['bottom_text']['left_text'] : '',
            );
      
            $form['bottom_text']['center_title'] = array(
              '#type' => 'textfield',
              '#title' => t('Center title'),
              //'#description' => t(''),
              '#default_value' => isset($data['bottom_text']['center_title']) ? $data['bottom_text']['center_title'] : '',
            );
            $form['bottom_text']['center_text'] = array(
              '#type' => 'textarea',
              '#title' => t('Сenter text'),
              //'#description' => t(''),
              '#default_value' => isset($data['bottom_text']['center_text']) ? $data['bottom_text']['center_text'] : '',
            );
            
            $form['bottom_text']['right_title'] = array(
              '#type' => 'textfield',
              '#title' => t('Right title'),
              //'#description' => t(''),
              '#default_value' => isset($data['bottom_text']['right_title']) ? $data['bottom_text']['right_title'] : '',
            );
            $form['bottom_text']['right_text'] = array(
              '#type' => 'textarea',
              '#title' => t('Right text'),
              //'#description' => t(''),
              '#default_value' => isset($data['bottom_text']['right_text']) ? $data['bottom_text']['right_text'] : '',
            );
      
      $form['#validate'][] = 'gv_pages_validateForm_quote';
      
      break;
    
    
    case 'user_profile_form':
      
      // Disallow edit own profile for a Guest user.
      global $user;
      if($user->name == 'guest') {
        drupal_goto('');
      }
      
      $form['field_u_bio']['und'][0]['#format'] = 'full_html';
      
      break;
      
      
      
      
    case 'provider_node_form':
      
      //dpm($form);

      // Fix weights of some fields.
      $form['field_p_name']['#weight'] = 1;
      
      $form['title']['#weight'] = 2;
      $form['title']['#description'] = t('Used in header of provider page');
      
      
      //$form['body']['#weight'] = 2;
      //$form['body']['und'][0]['#weight'] = 2;
      
      // Hide a placeholder field field_p_data
      $form['field_p_data']['#access'] = FALSE;
      $form['field_p_fees_save']['#access'] = FALSE;
      $form['field_p_data_quick']['#access'] = FALSE;
      
      // Fix a summary height.
      //unset($form['body']['und'][0]['summary']['#attached']['js']);
      // Fix Ckeditor intrusion results.
      if (trim($form['body']['und'][0]['summary']['#default_value']) == '<br />') {
        $form['body']['und'][0]['summary']['#default_value'] = '';
      }
      // Doesn't work.
      //$form['body']['und'][0]['summary']['#format'] = 'plain_text';
      // Doesn't work.
      //$form['body']['und'][0]['summary']['#rows'] = 3;
      
      // Add temporary fields which will be saved as aggregated data in a one real field field_p_data
      
      $p_data = unserialize($form['field_p_data']['und'][0]['value']['#default_value']);
      //$p_fees_save = unserialize($form['field_p_fees_save']['und'][0]['value']['#default_value']);
      //dpm($p_data);
      //dpm($p_fees_save);
      //$p_data_quick = unserialize($form['field_p_data_quick']['und'][0]['value']['#default_value']);
      //dpm($p_data_quick);
      
      
      $form['data_info'] = array(
        '#type' => 'fieldset',
        '#title' => t('General Provider Info'),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
        //'#description' => t(''),
        '#weight' => 10,
      );
            $form['data_info']['i_heads'] = array(
              '#type' => 'textfield',
              '#title' => t('Headquarters'),
              //'#description' => t(''),
              '#default_value' => isset($p_data['info']['i_heads']) ? $p_data['info']['i_heads'] : '',
            );
            $form['data_info']['i_founded'] = array(
              '#type' => 'textfield',
              '#title' => t('Founded In'),
              //'#description' => t(''),
              '#default_value' => isset($p_data['info']['i_founded']) ? $p_data['info']['i_founded'] : '',
            );
            $form['data_info']['i_availability'] = array(
              '#type' => 'textfield',
              '#title' => t('Service Availability'),
              //'#description' => t(''),
              '#default_value' => isset($p_data['info']['i_availability']) ? $p_data['info']['i_availability'] : '',
            );
            $form['data_info']['i_web'] = array(
              '#type' => 'textfield',
              '#title' => t('Web Site'),
              '#description' => t('Please, use a format "http://example.com" strictly!'),
              '#default_value' => isset($p_data['info']['i_web']) ? $p_data['info']['i_web'] : '',
              '#element_validate' => array('wdg_misc_elementValidate_url'),
            );
            $form['data_info']['i_web_display'] = array(
              '#type' => 'textfield',
              '#title' => t('Display Website as'),
              '#description' => t('If empty, Web Site field content will be used, without http(s)://'),
              '#default_value' => isset($p_data['info']['i_web_display']) ? $p_data['info']['i_web_display'] : '',
              '#element_validate' => array('wdg_misc_elementValidate_url'),
            );
            $form['data_info']['i_web_hide'] = array(
              '#type' => 'checkbox',
              '#title' => t('Hide Web Site'),
              '#default_value' => isset($p_data['info']['i_web_hide']) ? $p_data['info']['i_web_hide'] : 0,
            );
            /*
            $form['data_info']['i_email'] = array(
              '#type' => 'textfield',
              '#title' => t('Email'),
              //'#description' => t(''),
              '#element_validate' => array('wdg_misc_elementValidate_email'),
              '#default_value' => isset($p_data['info']['i_email']) ? $p_data['info']['i_email'] : '',
            );
            */
        
      
            
      $form['services'] = array(
        '#type' => 'fieldset',
        '#title' => t('Provider services'),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
        //'#description' => t(''),
        '#weight' => 11,
      );
            $form['services']['s_residential'] = array(
              '#type' => 'fieldset',
              '#title' => t('Residential serviсes'),
              '#collapsible' => TRUE,
              '#collapsed' => TRUE,
              //'#description' => t(''),
            );

                  $form['services']['s_residential']['re_preface_title'] = array(
                    '#type' => 'textfield',
                    '#title' => t('Preface title'),
                    //'#description' => t(''),
                    '#default_value' => isset($p_data['services']['s_residential']['re_preface_title']) ? $p_data['services']['s_residential']['re_preface_title'] : '',
                  );
                  $form['services']['s_residential']['re_preface_text'] = array(
                    '#type' => 'textarea',
                    '#title' => t('Preface text'),
                    //'#description' => t(''),
                    '#default_value' => isset($p_data['services']['s_residential']['re_preface_text']) ? $p_data['services']['s_residential']['re_preface_text'] : '',
                  );
                  
                  
                  
                  $form['services']['s_residential']['re_basicinfo_title'] = array(
                    '#type' => 'textfield',
                    '#title' => t('Basic info title'),
                    //'#description' => t(''),
                    '#default_value' => isset($p_data['services']['s_residential']['re_basicinfo_title']) ? $p_data['services']['s_residential']['re_basicinfo_title'] : '',
                  );
                  $form['services']['s_residential']['re_basicinfo_text'] = array(
                    '#type' => 'textarea',
                    '#title' => t('Basic info text'),
                    //'#description' => t(''),
                    '#default_value' => isset($p_data['services']['s_residential']['re_basicinfo_text']) ? $p_data['services']['s_residential']['re_basicinfo_text'] : '',
                  );
                  $form['services']['s_residential']['re_basicinfo_fees'] = array(
                    '#type' => 'fieldset',
                    '#collapsible' => TRUE,
                    '#collapsed' => FALSE,
                    '#title' => t('Residential service fees'),
                    //'#description' => t('Residential service fees'),
                    '#tree' => TRUE,
                  );
                      $form['services']['s_residential']['re_basicinfo_fees']['monthly_fees'] = array(
                        '#type' => 'textfield',
                        '#title' => t('Monthly fees'),
                        //'#description' => t(''),
                        '#field_prefix' => '$',
                        '#default_value' => isset($p_data['services']['s_residential']['re_basicinfo_fees']['monthly_fees']) ? $p_data['services']['s_residential']['re_basicinfo_fees']['monthly_fees'] : '',
                      );
                      $form['services']['s_residential']['re_basicinfo_fees']['setup_fees'] = array(
                        '#type' => 'textfield',
                        '#title' => t('Setup fees'),
                        //'#description' => t(''),
                        //'#field_prefix' => '$',
                        '#default_value' => isset($p_data['services']['s_residential']['re_basicinfo_fees']['setup_fees']) ? $p_data['services']['s_residential']['re_basicinfo_fees']['setup_fees'] : '',
                      );
                      $form['services']['s_residential']['re_basicinfo_fees']['shipping_fees'] = array(
                        '#type' => 'textfield',
                        '#title' => t('Shipping fees'),
                        //'#description' => t(''),
                        //'#field_prefix' => '$',
                        '#default_value' => isset($p_data['services']['s_residential']['re_basicinfo_fees']['shipping_fees']) ? $p_data['services']['s_residential']['re_basicinfo_fees']['shipping_fees'] : '',
                      );
                      $form['services']['s_residential']['re_basicinfo_fees']['cancel_fees'] = array(
                        '#type' => 'textfield',
                        '#title' => t('Cancellation fees'),
                        //'#description' => t(''),
                        '#field_prefix' => '$',
                        '#default_value' => isset($p_data['services']['s_residential']['re_basicinfo_fees']['cancel_fees']) ? $p_data['services']['s_residential']['re_basicinfo_fees']['cancel_fees'] : '',
                      );
                      $form['services']['s_residential']['re_basicinfo_fees']['longdistance_fees'] = array(
                        '#type' => 'textfield',
                        '#title' => t('Long distance fees'),
                        //'#description' => t(''),
                        //'#field_prefix' => '$',
                        '#default_value' => isset($p_data['services']['s_residential']['re_basicinfo_fees']['longdistance_fees']) ? $p_data['services']['s_residential']['re_basicinfo_fees']['longdistance_fees'] : '',
                      );
                      $form['services']['s_residential']['re_basicinfo_fees']['other_fees'] = array(
                        '#type' => 'textarea',
                        '#title' => t('Other fees'),
                        '#description' => t('Please set other fees (one per line) in the format "Fee 1 title: $0.5/hour"'),
                        //'#field_prefix' => '$',
                        '#default_value' => isset($p_data['services']['s_residential']['re_basicinfo_fees']['other_fees']) ? $p_data['services']['s_residential']['re_basicinfo_fees']['other_fees'] : '',
                      );
                    
                  
                  $form['services']['s_residential']['re_money_back_guarantee'] = array(
                    '#type' => 'textfield',
                    '#title' => t('Money Back Guarentee'),
                    //'#description' => t(''),
                    '#default_value' => isset($p_data['services']['s_residential']['re_money_back_guarantee']) ? $p_data['services']['s_residential']['re_money_back_guarantee'] : '',
                  );
                  
            
                  $form['services']['s_residential']['re_specialnotes_title'] = array(
                    '#type' => 'textfield',
                    '#title' => t('Special notes title'),
                    //'#description' => t(''),
                    '#default_value' => isset($p_data['services']['s_residential']['re_specialnotes_title']) ? $p_data['services']['s_residential']['re_specialnotes_title'] : '',
                  );
                  $form['services']['s_residential']['re_specialnotes_text'] = array(
                    '#type' => 'textarea',
                    '#title' => t('Special notes text'),
                    //'#description' => t(''),
                    '#default_value' => isset($p_data['services']['s_residential']['re_specialnotes_text']) ? $p_data['services']['s_residential']['re_specialnotes_text'] : '',
                  );
                  
                  // Move defined via admin panel fields with a taxonomy autocomplete for Features Residential tags to the corresponding fieldset.
                  $form['services']['s_residential']['field_p_re_features'] = $form['field_p_re_features'];
                  unset($form['field_p_re_features']);
                  
                  // Add tags weights editing window for residential features.
                  if(isset($p_data['services']['s_residential']['weights_re_features']) && !empty($p_data['services']['s_residential']['weights_re_features'])) {
                  
                    $form['services']['s_residential']['weights_re_features'] = array(
                      '#type' => 'fieldset',
                      '#title' => t('Features tags weights'),
                      '#collapsible' => TRUE,
                      '#collapsed' => TRUE,
                      '#tree' => TRUE,
                      //'#description' => t(''),
                      '#weight' => $form['services']['s_residential']['field_p_re_features']['#weight'] + 1,
                    );

                          foreach($p_data['services']['s_residential']['weights_re_features'] as $tid => $term) {
                            $form['services']['s_residential']['weights_re_features'][$tid] = array(
                              '#type' => 'textfield',
                              '#size' => 3,
                              '#title' => t($term['name']),
                              '#default_value' => $term['weight'],
                            );
                          }
                  }
                    
                  
            $form['services']['s_business'] = array(
              '#type' => 'fieldset',
              '#title' => t('Business serviсes'),
              '#collapsible' => TRUE,
              '#collapsed' => TRUE,
              //'#description' => t(''),
            );
                  $form['services']['s_business']['bu_preface_title'] = array(
                    '#type' => 'textfield',
                    '#title' => t('Preface title'),
                    //'#description' => t(''),
                    //'#required' => TRUE,
                    '#default_value' => isset($p_data['services']['s_business']['bu_preface_title']) ? $p_data['services']['s_business']['bu_preface_title'] : '',
                  );
                  $form['services']['s_business']['bu_preface_text'] = array(
                    '#type' => 'textarea',
                    '#title' => t('Preface text'),
                    //'#description' => t(''),
                    '#default_value' => isset($p_data['services']['s_business']['bu_preface_text']) ? $p_data['services']['s_business']['bu_preface_text'] : '',
                  );
                  
                  
                  
                  $form['services']['s_business']['bu_basicinfo_title'] = array(
                    '#type' => 'textfield',
                    '#title' => t('Basic info title'),
                    //'#description' => t(''),
                    '#default_value' => isset($p_data['services']['s_business']['bu_basicinfo_title']) ? $p_data['services']['s_business']['bu_basicinfo_title'] : '',
                  );
                  $form['services']['s_business']['bu_basicinfo_text'] = array(
                    '#type' => 'textarea',
                    '#title' => t('Basic info text'),
                    //'#description' => t(''),
                    '#default_value' => isset($p_data['services']['s_business']['bu_basicinfo_text']) ? $p_data['services']['s_business']['bu_basicinfo_text'] : '',
                  );
                  
                  
                  
                  
                  $form['services']['s_business']['bu_basicinfo_fees'] = array(
                    '#type' => 'fieldset',
                    '#collapsible' => TRUE,
                    '#collapsed' => FALSE,
                    '#title' => t('Business service fees'),
                    //'#description' => t('Business service fees'),
                    '#tree' => TRUE,
                  );
                      $form['services']['s_business']['bu_basicinfo_fees']['monthly_fees'] = array(
                        '#type' => 'textfield',
                        '#title' => t('Monthly fees'),
                        //'#description' => t(''),
                        '#field_prefix' => '$',
                        '#default_value' => isset($p_data['services']['s_business']['bu_basicinfo_fees']['monthly_fees']) ? $p_data['services']['s_business']['bu_basicinfo_fees']['monthly_fees'] : '',
                      );
                      $form['services']['s_business']['bu_basicinfo_fees']['setup_fees'] = array(
                        '#type' => 'textfield',
                        '#title' => t('Setup fees'),
                        //'#description' => t(''),
                        //'#field_prefix' => '$',
                        '#default_value' => isset($p_data['services']['s_business']['bu_basicinfo_fees']['setup_fees']) ? $p_data['services']['s_business']['bu_basicinfo_fees']['setup_fees'] : '',
                      );
                      $form['services']['s_business']['bu_basicinfo_fees']['shipping_fees'] = array(
                        '#type' => 'textfield',
                        '#title' => t('Shipping fees'),
                        //'#description' => t(''),
                        //'#field_prefix' => '$',
                        '#default_value' => isset($p_data['services']['s_business']['bu_basicinfo_fees']['shipping_fees']) ? $p_data['services']['s_business']['bu_basicinfo_fees']['shipping_fees'] : '',
                      );
                      $form['services']['s_business']['bu_basicinfo_fees']['cancel_fees'] = array(
                        '#type' => 'textfield',
                        '#title' => t('Cancellation fees'),
                        //'#description' => t(''),
                        '#field_prefix' => '$',
                        '#default_value' => isset($p_data['services']['s_business']['bu_basicinfo_fees']['cancel_fees']) ? $p_data['services']['s_business']['bu_basicinfo_fees']['cancel_fees'] : '',
                      );
                      $form['services']['s_business']['bu_basicinfo_fees']['longdistance_fees'] = array(
                        '#type' => 'textfield',
                        '#title' => t('Long distance fees'),
                        //'#description' => t(''),
                        //'#field_prefix' => '$',
                        '#default_value' => isset($p_data['services']['s_business']['bu_basicinfo_fees']['longdistance_fees']) ? $p_data['services']['s_business']['bu_basicinfo_fees']['longdistance_fees'] : '',
                      );
                      $form['services']['s_business']['bu_basicinfo_fees']['other_fees'] = array(
                        '#type' => 'textarea',
                        '#title' => t('Other fees'),
                        '#description' => t('Please set other fees (one per line) in the format "Fee 1 title: $0.5/hour"'),
                        //'#field_prefix' => '$',
                        '#default_value' => isset($p_data['services']['s_business']['bu_basicinfo_fees']['other_fees']) ? $p_data['services']['s_business']['bu_basicinfo_fees']['other_fees'] : '',
                      );
                      
                  
                  $form['services']['s_business']['bu_money_back_guarantee'] = array(
                    '#type' => 'textfield',
                    '#title' => t('Money Back Guarentee'),
                    //'#description' => t(''),
                    '#default_value' => isset($p_data['services']['s_business']['bu_money_back_guarantee']) ? $p_data['services']['s_business']['bu_money_back_guarantee'] : '',
                  );
                  
            
                  $form['services']['s_business']['bu_specialnotes_title'] = array(
                    '#type' => 'textfield',
                    '#title' => t('Special notes title'),
                    //'#description' => t(''),
                    '#default_value' => isset($p_data['services']['s_business']['bu_specialnotes_title']) ? $p_data['services']['s_business']['bu_specialnotes_title'] : '',
                  );
                  $form['services']['s_business']['bu_specialnotes_text'] = array(
                    '#type' => 'textarea',
                    '#title' => t('Special notes text'),
                    //'#description' => t(''),
                    '#default_value' => isset($p_data['services']['s_business']['bu_specialnotes_text']) ? $p_data['services']['s_business']['bu_specialnotes_text'] : '',
                  );
                  
                  $form['services']['s_business']['bu_pbxpreface_title'] = array(
                    '#type' => 'textfield',
                    '#title' => t('PBX preface title'),
                    //'#description' => t(''),
                    '#default_value' => isset($p_data['services']['s_business']['bu_pbxpreface_title']) ? $p_data['services']['s_business']['bu_pbxpreface_title'] : '',
                  );
                  $form['services']['s_business']['bu_pbxpreface_text'] = array(
                    '#type' => 'textarea',
                    '#title' => t('PBX preface text'),
                    //'#description' => t(''),
                    '#default_value' => isset($p_data['services']['s_business']['bu_pbxpreface_text']) ? $p_data['services']['s_business']['bu_pbxpreface_text'] : '',
                  );
                  
                  $form['services']['s_business']['bu_sippreface_title'] = array(
                    '#type' => 'textfield',
                    '#title' => t('SIP preface title'),
                    //'#description' => t(''),
                    '#default_value' => isset($p_data['services']['s_business']['bu_sippreface_title']) ? $p_data['services']['s_business']['bu_sippreface_title'] : '',
                  );
                  $form['services']['s_business']['bu_sippreface_text'] = array(
                    '#type' => 'textarea',
                    '#title' => t('SIP preface text'),
                    //'#description' => t(''),
                    '#default_value' => isset($p_data['services']['s_business']['bu_sippreface_text']) ? $p_data['services']['s_business']['bu_sippreface_text'] : '',
                  );
                  
                  // Move defined via admin panel fields with a taxonomy autocomplete for Features Business tags to the corresponding fieldset.
                  $form['services']['s_business']['field_p_bu_features'] = $form['field_p_bu_features'];
                  unset($form['field_p_bu_features']);
                  $form['services']['s_business']['field_p_bu_features_pbx'] = $form['field_p_bu_features_pbx'];
                  unset($form['field_p_bu_features_pbx']);
                  $form['services']['s_business']['field_p_bu_features_sip'] = $form['field_p_bu_features_sip'];
                  unset($form['field_p_bu_features_sip']);
                  
                  // Add tags weights editing window for residential features.
                  if(isset($p_data['services']['s_business']['weights_bu_features']) && !empty($p_data['services']['s_business']['weights_bu_features'])) {
                    
                    $form['services']['s_business']['weights_bu_features'] = array(
                      '#type' => 'fieldset',
                      '#title' => t('Features tags weights'),
                      '#collapsible' => TRUE,
                      '#collapsed' => TRUE,
                      '#tree' => TRUE,
                      //'#description' => t(''),
                      '#weight' => $form['services']['s_business']['field_p_bu_features']['#weight'] + 1,
                    );

                          foreach($p_data['services']['s_business']['weights_bu_features'] as $tid => $term) {
                            $form['services']['s_business']['weights_bu_features'][$tid] = array(
                              '#type' => 'textfield',
                              '#size' => 3,
                              '#title' => t($term['name']),
                              '#default_value' => $term['weight'],
                            );
                          }
                  }
                  
                  // Add tags weights editing window for PBX residential features.
                  if(isset($p_data['services']['s_business']['weights_bu_features_pbx']) && !empty($p_data['services']['s_business']['weights_bu_features_pbx'])) {
                    
                    $form['services']['s_business']['weights_bu_features_pbx'] = array(
                      '#type' => 'fieldset',
                      '#title' => t('PBX Features tags weights'),
                      '#collapsible' => TRUE,
                      '#collapsed' => TRUE,
                      '#tree' => TRUE,
                      //'#description' => t(''),
                      '#weight' => $form['services']['s_business']['field_p_bu_features_pbx']['#weight'] + 1,
                    );

                          foreach($p_data['services']['s_business']['weights_bu_features_pbx'] as $tid => $term) {
                            $form['services']['s_business']['weights_bu_features_pbx'][$tid] = array(
                              '#type' => 'textfield',
                              '#size' => 3,
                              '#title' => t($term['name']),
                              '#default_value' => $term['weight'],
                            );
                          }
                  }
                  
                        
                  // Add tags weights editing window for SIP residential features.
                  if(isset($p_data['services']['s_business']['weights_bu_features_sip']) && !empty($p_data['services']['s_business']['weights_bu_features_sip'])) {
                    
                    $form['services']['s_business']['weights_bu_features_sip'] = array(
                      '#type' => 'fieldset',
                      '#title' => t('SIP Features tags weights'),
                      '#collapsible' => TRUE,
                      '#collapsed' => TRUE,
                      '#tree' => TRUE,
                      //'#description' => t(''),
                      '#weight' => $form['services']['s_business']['field_p_bu_features_sip']['#weight'] + 1,
                    );

                          foreach($p_data['services']['s_business']['weights_bu_features_sip'] as $tid => $term) {
                            $form['services']['s_business']['weights_bu_features_sip'][$tid] = array(
                              '#type' => 'textfield',
                              '#size' => 3,
                              '#title' => t($term['name']),
                              '#default_value' => $term['weight'],
                            );
                          }
                  }

                  
            $form['services']['s_international'] = array(
              '#type' => 'fieldset',
              '#title' => t('International serviсes'),
              '#collapsible' => TRUE,
              '#collapsed' => TRUE,
              //'#description' => t(''),
            );
            
            
      $form['data_quote'] = array(
        '#type' => 'fieldset',
        '#title' => t('Quote and Its Author'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
        //'#description' => t(''),
        '#weight' => 12,
      );
            $form['data_quote']['q_text'] = array(
              '#type' => 'textarea',
              //'#type' => 'text_format',
              //'#format' => 'full_html',
                
              '#title' => t('Quote text'),
              //'#description' => t(''),
              '#default_value' => isset($p_data['quote']['q_text']) ? $p_data['quote']['q_text'] : '',
            );
            $form['data_quote']['q_author'] = array(
              '#type' => 'textfield',
              '#title' => t('Quote author'),
              //'#description' => t(''),
              '#default_value' => isset($p_data['quote']['q_author']) ? $p_data['quote']['q_author'] : '',
            );
      
            
      
      $form['#validate'][] = 'gv_pages_validateForm_provider';
      
    break;
    
  
       
    case 'preface_node_form':
/* 
      // Deny editing titles for everyone except the root.
      if(arg(1) != 'add') {
        global $user;
        if($user->uid == 1) {
          $form['title'] = array(
            '#type' => 'item',
            '#title' => t('Title'),
            '#markup' => '<div class="title">' . $form['title']['#default_value'] . '</div>',
            '#description' => t('This field can be edited only by the Root administrator. Used only as id for loading to the listing page and will be hidden on the page.'),
          );
        }
      } // End of if(arg(1) != 'add') {
*/    
      
      // Deny to change the status of the node (it should always be unpublished).
      $form['options']['#access'] = FALSE;
      // And other options.
      $form['comment_settings']['#access'] = FALSE;
      $form['revision_information']['#access'] = FALSE;
      $form['path']['#access'] = FALSE;
      
      global $user;
      if ($user->uid != 1) {
        $form['field_preface_key']['#access'] = FALSE;
      }
      
    break; // End of case 'preface_node_form':

  
    
    
  
    case 'review_node_form':
      
      // Control the editing of review pages.
      
      global $user;
      
      // Set outer fieldset with the main caption for the Submit a Review page.
      $form['#prefix'] = '<fieldset id="outer-box" class="form-wrapper"><legend><span class="fieldset-legend">' . t('Share Your Feedback - What Do You Think of Your VoIP Provider?') . '</span></legend><div class="fieldset-wrapper" style="display: block;">';
      $form['#suffix'] = '</div></fieldset>';
      
      //dpm($form);
      $form['actions']['submit']['#value'] = t('Submit Review');
      
      // Make some small corrections.
      $form['title']['#title'] = t('Review title');
      $form['title']['#weight'] = -1;
      if (!in_array('administrator', $user->roles)) {
        $form['title']['#access'] = FALSE;
      }
      
      
      if (in_array('administrator', $user->roles)) {
        $current_user_is_admin = TRUE;
      }
      else {
        $current_user_is_admin = FALSE;
      }
      
      // Convert the field_r_notapproved (if it is set) to a checkbox temporarily.
      if (isset($form['field_r_notapproved'])) {
        // Only admin can approve it.
        $form['field_r_notapproved']['#access'] = FALSE;
        if ($current_user_is_admin) {
          $form['field_r_notapproved_checkbox'] = array(
            '#type' => 'checkbox',
            '#title' => t('This review is approved'),
            '#default_value' => !$form['field_r_notapproved']['und'][0]['value']['#default_value'],
            '#weight' => 30,
          );
        }
        elseif(arg(1) != 'add') {
          $form['field_r_notapproved_info'] = array(
            '#type' => 'item',
            '#title' => t('Approval status for this review:'),
            '#markup' => $form['field_r_notapproved']['und'][0]['value']['#default_value'] ? t('Is not approved') : t('Is approved'),
            '#weight' => 30,
          );
        }
      }
      
      // Hide some fields, so that even super admin could not see and change it.
      $form['field_r_rating_overall']['#access'] = FALSE;
      $form['options']['promote']['#access'] = FALSE;
      $form['options']['sticky']['#access'] = FALSE;
      $form['revision_information']['#access'] = FALSE;
      $form['comment_settings']['#access'] = FALSE;
      $form['field_r_provider_name']['#access'] = FALSE;
      
      // Show authoring info (including a date) only for administrator.
      if (!in_array('administrator', $user->roles)) {
        $form['author']['#access'] = FALSE;
      }
//      else {
//        // Or connect datepicker to a post date field
//        $module_path = drupal_get_path('module', 'gv_pages');
//  
//        $form['#attached']['css'][] = $module_path . '/css/gv_pages.css';
//        $form['#attached']['js'][] = $module_path . '/js/gv_review_datepicker.js';
//        $form['#attached']['library'][] = array('system', 'ui.datepicker');
//      }
      
      
      
      
      // Group fields
      
      $form['about_you'] = array(
        '#type' => 'fieldset',
        '#title' => t('Step 1: Your Information'),
        //'#collapsible' => TRUE,
        //'#collapsed' => FALSE,
        '#weight' => -15,
      );
          // Rebuild fields for fname, lname and email to make it possibele to add a Title attr to a input tag.
          $fields_to_rebuild = array('field_r_fname' => FNAME_HINT, 'field_r_lname' => LNAME_HINT, 'field_r_email' => EMAIL_HINT);
          foreach ($fields_to_rebuild as $field_to_rebuild => $field_hint) {
            $temp_field = $form[$field_to_rebuild]['und'][0];
            $form['about_you'][$field_to_rebuild . '_temp'] = array(
                '#type' => 'textfield',
                '#title' => t($temp_field['#title']),
                '#default_value' => $temp_field['value']['#default_value'],
                '#description' => $temp_field['#description'],
                '#required' => $temp_field['value']['#required'],
                '#attributes' => array('title' => t($field_hint)),
            );
            $form[$field_to_rebuild]['#access'] = FALSE;
          }
          $form['about_you']['field_r_fname_temp']['#title'] = t('Your name');
          $form['about_you']['field_r_lname_temp']['#title'] = '';
          
          
          
      $form['provider'] = array(
        '#type' => 'fieldset',
        '#title' => t('Step 2: Your VoIP Provider Details'),
        //'#collapsible' => TRUE,
        //'#collapsed' => FALSE,
        '#weight' => -10,
      );
          $form['provider']['field_ref_provider'] = $form['field_ref_provider'];
          $form['provider']['field_r_oprovider'] = $form['field_r_oprovider'];
          unset($form['field_ref_provider'], $form['field_r_oprovider']);
      
          $form['field_r_data']['#access'] = FALSE;
          
          
          $lines_options = array(1 => '1 - 5', 2 => '6 - 10', 3 => '11+');
          $form['provider']['lines'] = array(
            '#type' => 'radios',
            //'#title' => t('How many lines do you have:'),
            '#options' => $lines_options,
            '#default_value' => FALSE,
            '#weight' => 10,
            '#prefix' => '<div class="label left">' . t('How many lines do you have:') . '</div>',
          );
          
          
      
          
      // Rate and vote group.
      //$rating_options = array('' => '- ' . t('Select a value') . ' -', '20' => 'Really Bad', '40' => 'Bad', '60' => 'OK', '80' => 'Good', '100' => 'Really Good');
      $rating_options = array('' => FALSE, '20' => 'Horrible', '40' => 'Bad', '60' => 'OK', '80' => 'Good', '100' => 'Excellent');
      $weight = 8;
     
      //$vote_keys = array('features', 'sound', 'rely', 'money', 'service');
      $vote_keys = array('sound' => SOUND, 'install' => INSTALL, 'service' => CUSTOMER, 'rely' => RELY, 'features' => FEATURES, 'money' => PRICE, );
      $votes = array();
      $form['ureview'] = array(
        '#type' => 'fieldset',
        '#title' => t('Step 3: Rate and Review Your VoIP Provider'),
        //'#collapsible' => TRUE,
        //'#collapsed' => FALSE,
        '#weight' => -4,
      );
          
          $form['ureview']['votes'] = array(
              '#type' => 'container',
              '#prefix' => '<div class="rate-caption"><div class="col-2">' . t('Click Stars To Start Reviewing') . '</div><div class="col-3">' . t('Rate it') . '</div></div>',
          );
          foreach ($vote_keys as $vote_key => $vote_title) {
            $form['ureview']['votes']['rating_' . $vote_key] = array(
              '#type' => 'select',
              //'#title' => t($vote_title), //t(drupal_ucfirst($vote_key) . ' Rating'),
              '#options' => $rating_options,
              '#default_value' => $rating_options[''],
              //'#weight' => $weight++,
              //'#required' => TRUE,
              '#prefix' => '<div class="vote"><div class="vote-title">' . t($vote_title) . '</div>',
              '#suffix' => '<div class="choice" id="edit-rating-' . $vote_key . '-choice">Rate it!</div></div>',
            );
//            $form['ureview']['votes']['rating_' . $vote_key . '_choice1'] = array(
//              '#markup' => '<div class="choice" id="edit-rating-' . $vote_key . '-choice">Rate it!</div>',
//              //'#weight' => $weight++,
//            );
          }
      
          //$rating_recommend_options = $rating_options = array('' => '- ' . t('Select a value') . ' -', '100' => 'Yes', '0' => 'No');
          $rating_recommend_options = $rating_options = array('100' => 'Yes', '0' => 'No');
          $form['ureview']['rating_recommend'] = array(
              //'#type' => 'select',
              '#type' => 'radios',
              //'#title' => t(RECOMMEND),
              '#options' => $rating_recommend_options,
              '#default_value' => FALSE,
              //'#weight' => $weight++,
              //'#required' => TRUE,
              '#prefix' => '<div class="label left">' . t(RECOMMEND) . '</div>',
          );
          
          // just for reference from a below call
          //$form['ureview']['rating_recommend']['#default_value'] = $recommend;
      
          $form['ureview']['pros'] = array(
            '#type' => 'textfield',
            '#title' => t('Pros'),
            '#default_value' => '',
            '#attributes' => array('title' => t(PROS_HINT)),
          );
          $form['ureview']['cons'] = array(
            '#type' => 'textfield',
            '#title' => t('Cons'),
            '#default_value' => '',
            '#attributes' => array('title' => t(CONS_HINT)),
          );
          
          
          //$form['body']['#weight'] = 2;
          $form['body']['und'][0]['value']['#rows'] = 5;
          // Unlink Ckeditor
          // Bad trial...
          //$form['body']['und'][0]['#type'] = 'textarea';
          // Good trial! :)
          ///$form['body']['und'][0]['#format'] = 'gv_full_html';
          $form['body']['und'][0]['#format'] = 'filtered_html';
          
          $form['ureview']['body'] = $form['body'];
          unset($form['body']);
          
          
      // Hide helper hidden field (for saving temporary serialized ratings data)
      $form['field_ratings_oprovider']['#access'] = FALSE;
      
      // Hide approvecode field (used for unauthorized user email approve).
      // It should be empty if a user has approved email.
      $form['field_r_approvecode']['#access'] = FALSE;
      
      
      
      if(arg(1) == 'add') {
        
        // Add a review page.
      
        // This TEMPORARY title will see only Administrators.
        if (!$current_user_is_admin) {
          $form['title']['#default_value'] = 'Unapproved review';
        }
        
        // Generate an approval code for email verification.
        if (!$user->uid) {
          $form['field_r_approvecode']['und'][0]['value']['#default_value'] = md5(time());
        }
        
        if ($user->uid) {
          // Get all additional data for first/last names extraction.
          $user = user_load($user->uid);
          // Autofill first/last names and email.
          //$form['about_you']['field_r_fname']['und'][0]['value']['#default_value'] = $user->field_u_fname['und'][0]['value'];
          //$form['about_you']['field_r_lname']['und'][0]['value']['#default_value'] = $user->field_u_lname['und'][0]['value'];
          //$form['about_you']['field_r_email']['und'][0]['value']['#default_value'] = $user->mail;
          $form['about_you']['field_r_fname_temp']['#default_value'] = $user->field_u_fname['und'][0]['value'];
          $form['about_you']['field_r_lname_temp']['#default_value'] = $user->field_u_lname['und'][0]['value'];
          $form['about_you']['field_r_email_temp']['#default_value'] = $user->mail;
          
          // Disallow to choose another email for a registered user.
          $form['about_you']['field_r_email_temp']['#access'] = FALSE;
          $form['about_you']['email_autofilled'] = array(
              '#type' => 'item',
              '#title' => t('Your email'),
              '#markup' => $user->mail,
          );

        }
//        else {
//          // Options for not logged in users.
//          $info_for_notlogged = '<fieldset id="not-logged-info" class="collapsible form-wrapper"><legend><span class="fieldset-legend"><a class="fieldset-title" href="#">' . t('You are not logged in...') . '</a></span></legend><div class="fieldset-wrapper" style="display: block;"><div>' . t('You may !login or !register to have a full control over your submitted reviews...', array('!login' => l(t('log in'), "user", array('query' => array('destination' => url($_GET['q']))) ), '!register' => l(t('register'), "user/register", array('query' => array('destination' => url($_GET['q']))) )) ) . '</div><div>' . t('Or submit a review as a guest (right below), but you will not be avle to edit or cancel it.') . '</div></div></fieldset>';
//          $form['#prefix'] = $info_for_notlogged . '<fieldset id="submit-guest" class="collapsible form-wrapper"><legend><span class="fieldset-legend"><a class="fieldset-title" href="#">' . t('Submit a review as a guest') . '</a></span></legend><div class="fieldset-wrapper" style="display: block;">';
//          $form['#suffix'] = '</div></fieldset>';
//        }
        if ($current_user_is_admin) {
          $form['about_you']['user_ip_show'] = array(
              '#type' => 'item',
              '#title' => t('User IP:'),
              '#markup' => $_SERVER['REMOTE_ADDR'],
          );
        }
        $form['user_ip'] = array(
          '#type' => 'hidden',
          '#value' => $_SERVER['REMOTE_ADDR'],
        );
        
        
        // Set a select of available providers.
        $providers['_none'] = t('- Select a value -');
        gv_misc_getProviders($providers);
        $providers[7] = t('OTHER SP');
        $form['provider']['field_ref_provider']['und']['#options'] = $providers;
        $form['provider']['field_ref_provider']['und']['#default_value'][0] = '_none';

        // Check if the review is added via a button on a provider's page.
        $provider_nid = NULL;
        if (isset($_GET['id'])) {
          $provider_nid = check_plain($_GET['id']);
          if(!isset($providers[$provider_nid])) {
            $provider_nid = NULL;
          }
          else {
            $provider_id_source = t('your choice while viewing this provider\'s page');
          }
        }
        elseif ($_SERVER['HTTP_REFERER']) {
          // If a user has clicked "Submit a review" on the Provider's page, treat it as choice of that provider.
          $refferer = explode('http://getvoip.com/', $_SERVER['HTTP_REFERER']);
          if (isset($refferer[1]) && $refferer[1]) {
            $query = db_select('url_alias', 'ua')
              ->fields('ua', array('source'))
              ->condition('alias', $refferer[1]);
            $source = $query->execute()->fetchField();
            $source = str_replace('node/', '', $source);
            if (is_numeric($source)) {
              $query = db_select('node', 'n')
                ->fields('n', array('type'))
                ->condition('nid', $source);
              $type = $query->execute()->fetchField();
              if ($type == 'provider') {
                $provider_nid = $source;
                $provider_id_source = t('the page you have been viewing when clicked a Submit review button');
              }
            }
          } // End of if (isset($refferer[1]) && $refferer[1]) {
        } // End of elseif ($_SERVER['HTTP_REFERER']) {
        
        
        // If a target provider has been defined by id from url or by referrer (previous) page,
        // set this provider as selected by default and show its info and preview.
        if ($provider_nid) {
          
          /*
          $form['provider']['id_source'] = array(
            '#markup' => '<div class="id-source">' . t('A taget provider has been chosen based on !source.', array('!source' => $provider_id_source)) . '<div>' . t('If You want to chose an other provider, please click !here.', array('!here' => l(t('here'), 'node/add/review'))) . '</div></div>',
          ); 
          
          $provider_node = node_load($provider_nid);
          $form['provider']['provider_title'] = array(
            '#type' => 'item',
            '#title' => t('A provider You have chosen'),
            '#markup' => l($provider_node->title, 'node/' . $provider_node->nid),
          ); 
          
          $provider_preview = '<div class="p-preview">' . render(node_view($provider_node, 'teaser')) . '</div>';
          $form['provider']['preview'] = array(
            '#type' => 'fieldset',
            '#title' => t('Provider preview') . ': ' . $provider_node->title,
            '#collapsible' => TRUE,
            '#collapsed' => TRUE,
          );
              $form['provider']['preview']['provider_preview'] = array(
                '#markup' => $provider_preview,
                '#weight' => -100,
              ); 
          */
          
          //$form['field_ref_provider']['und']['#options'] = array($provider_nid => $providers[$provider->nid]);
          //$form['field_r_oprovider']['und'][0]['value']['#default_value'] = $provider_nid;
          $form['provider']['field_ref_provider']['und']['#default_value'][0] = $provider_nid;
          //$form['provider']['field_ref_provider']['#access'] = FALSE;
          //$form['provider']['field_r_oprovider']['#access'] = FALSE;
          
        } // End of if($provider_nid) { // // If a target provider has been defined by id from url or by referrer (previous) page,
        
        
      } // End of if(arg(1) == 'add') {
      else {
        // Edit a review page.
        
        
        
        // Show saved it a hidden field other data
        if (isset($form['field_r_data']['und'][0]['value']['#default_value'])) {
          $other_data = unserialize($form['field_r_data']['und'][0]['value']['#default_value']);
          $form['provider']['lines']['#default_value'] = $other_data['lines'];
          $form['ureview']['pros']['#default_value'] = $other_data['pros'];
          $form['ureview']['cons']['#default_value'] = $other_data['cons'];
          
          $user_ip = isset($other_data['user_ip']) ? $other_data['user_ip'] : 'N/A';
          if ($current_user_is_admin) {
            $form['about_you']['user_ip_show'] = array(
                '#type' => 'item',
                '#title' => t('User IP:'),
                '#markup' => $user_ip,
            );
          }
          $form['user_ip'] = array(
            '#type' => 'hidden',
            '#value' => $user_ip,
          );
        }

        // Save the current email... in case it will be changes now, we could delete old it's votes connected to the old email.
        $form['email_old'] = array(
          '#type' => 'hidden',
          '#value' => $form['about_you']['field_r_email_temp']['#default_value'],
        );
        
        // Disallow to choose another email for a registered user.
        if (!$current_user_is_admin) {
          $form['about_you']['field_r_email_temp']['#access'] = FALSE;
          $form['about_you']['email_autofilled'] = array(
              '#type' => 'item',
              '#title' => t('Your email'),
              //'#markup' => $form['about_you']['field_r_email']['und'][0]['value']['#default_value'],
              '#markup' => $form['about_you']['field_r_email_temp']['#default_value'],
          );
        }
        if(!isset($form['provider']['field_ref_provider']['und']['#default_value'][0]) || $form['provider']['field_ref_provider']['und']['#default_value'][0] == '_none') {
          // If a provider has not been selected from a list,
          // then it has been set manually in the field field_r_oprovider
          
          $providers = array();
          gv_misc_getProviders($providers);
          $providers[7] = t('OTHER SP');
          
          $form['provider']['field_ref_provider']['und']['#options'] = $providers;
          $form['provider']['field_ref_provider']['und']['#default_value'][0] = 7;
          
          // Should we allow to a regular user to edit the name in the text field / reselect from the list?
          // Or once chosen it could not be changed by the user (for example, it could be changed only by an admin)?
          // Let's choose the second variant.
          if(!in_array('administrator', $user->roles)) {
            $form['provider']['field_ref_provider']['#access'] = FALSE;
            $form['provider']['field_r_oprovider']['#access'] = FALSE;  
            $form['provider']['provider_title_noedit'] = array(
              '#type' => 'item',
              '#title' => t('Your VoIP Service Provider') . ' (*)',
              '#markup' => '<div class="text">' . $form['provider']['field_r_oprovider']['und'][0]['value']['#default_value'] . '</div>',
              //'#weight' => -100,
            ); 
          }
          
          // Load saved votes from this node's field_ratings_oprovider
          $field_ratings_oprovider = unserialize($form['field_ratings_oprovider']['und'][0]['value']['#default_value']);

          foreach ($field_ratings_oprovider as $tag => $value) {
            $form['ureview']['votes']['rating_' . $tag]['#default_value'] = $value;
          }
          
          $form['ureview']['rating_recommend']['#default_value'] = $field_ratings_oprovider['recommend'];
          
        } // End of if(!isset($form['field_ref_provider']['und']['#default_value'][0]) || $form['field_ref_provider']['und']['#default_value'][0] == '_none') {
        else {
          // A provider has been selected from a list.
          
          // If this review is not approved OR this review is NOT published.
          // Load votes data from a local field_ratings_oprovider, not from Voting api tables.
          if ($form['field_r_notapproved']['und'][0]['value']['#default_value'] || !$form['options']['status']['#default_value']) {
            $saved_ratings = unserialize($form['field_ratings_oprovider']['und'][0]['value']['#default_value']);
            foreach ($saved_ratings as $tag => $value) {
              if ($tag == 'recommend') {
                $recommend = $value;
                continue;
              }
              $form['ureview']['votes']['rating_' . $tag]['#default_value'] = $value;
            }
          }
          else {
            // Else load saved votes for a provider of this review.
            $criteria = array(
              'entity_type' => 'node',
              'entity_id' => $form['provider']['field_ref_provider']['und']['#default_value'][0],
              'uid' => $form['uid']['#value'],
            );
            if ($votes = votingapi_select_votes($criteria)) {
              foreach ($votes as $vote) {
                if ($vote['tag'] == 'recommend') {
                  $recommend = $vote['value'];
                  continue;
                }
                $form['ureview']['votes']['rating_' . $vote['tag']]['#default_value'] = $vote['value'];
              }
            }
          } // End of else of if ($form['field_r_notapproved']['und'][0]['#default_value']) {
          if (isset($recommend)) {
            $form['ureview']['rating_recommend']['#default_value'] = $recommend;
          }
          
          // Show preview of the provider (as a teaser) on the edit form.
          $provider_node = node_load($form['provider']['field_ref_provider']['und']['#default_value'][0]);
          /*
          $provider_preview = '<div class="p-preview">' . render(node_view($provider_node, 'teaser')) . '</div>';
          $form['provider']['provider_preview'] = array(
              '#markup' => $provider_preview,
              '#weight' => -100,
          ); 
          */
          $form['provider']['provider_title_noedit'] = array(
            '#type' => 'item',
            '#title' => t('Your VoIP Service Provider:'),
            '#markup' => '<div class="text">' . l(html_entity_decode($provider_node->field_p_name['und'][0]['safe_value']), 'node/' . $provider_node->nid) . '</div>',
            //'#weight' => -100,
          );
          
          $form['provider']['field_ref_provider']['#access'] = FALSE;
          $form['provider']['field_r_oprovider']['#access'] = FALSE;
          
          
        } // End of A provider has been selected from a list.
        
      } // End of Edit a review page.
      
      
     
      // Add stars widgets to a Rating block
      $module_path = drupal_get_path('module', 'gv_pages');
      $module_misc_path = drupal_get_path('module', 'gv_misc');
      
      $form['#attached']['js'] = array(
        
        // Add a characters counter.
        $module_misc_path . '/js/gv_misc_charCount.js',
        'sites/all/libraries/jquery.plugins/charCount.js',
          
        // Add hints inside some fields
        $module_path . '/js/gv_review_fieldHints.js',
        'sites/all/libraries/jquery.plugins/jquery.hint-with-password.js',
          
        // Add stars widgets to a Rating block
        $module_path . '/js/gv_review_stars.js',
        'sites/all/libraries/jquery.ui.stars/jquery.ui.stars.min.js',
      );
      
      $form['#attached']['library'][] = array('system', 'ui.widget');
      
      $form['#attached']['css'] = array(
        'sites/all/libraries/jquery.ui.stars/css/jquery.ui.stars.css',
      );
      


  
  
  
  
  
      $form['#validate'][] = 'gv_pages_validateForm_review';
      $form['#submit'][] = 'gv_pages_submitForm_review';
      
      
      //dpm($form);
      
    break;
  }
}



/**
 * Custom validate of article type form.
 *
 * @param array &$form
 *   Array with declared form.
 *
 * @param array &$form_state
 *   Array with current form state.

 * @return void
 *   Return nothing.
 */
function gv_pages_validateForm_article(&$form, &$form_state) {
  
  // Define a main image and build a custom teaser.
  if ($data = gv_misc_getArticleTeaserData('all', $form_state['values']['body']['und'][0]['value'], $form_state['values']['nid']) ) {
    form_set_value($form['field_a_teaser'], array('und' => array(0 => array('value' => $data['teaser']) )), $form_state);
    form_set_value($form['field_main_image'], array('und' => array(0 => array('value' => serialize($data['main_image']) ) )), $form_state);
  }
}


/**
 * Custom validate of article type form.
 *
 * @param array &$form
 *   Array with declared form.
 *
 * @param array &$form_state
 *   Array with current form state.

 * @return void
 *   Return nothing.
 */
function gv_pages_submitForm_article(&$form, &$form_state) {

  if ($form_state['values']['op'] == 'Save Draft') {
    $form_state['values']['status'] = 0;
    drupal_set_message(t('Attention! This article is saved as draft and is not published now!'), 'warning');
      // Doesn't work
      //form_set_value($form['options'], array('status' => array('#default_value' => 0)), $form_state);
      //form_set_value($form['options']['status'], array('#default_value' => 0), $form_state);
  }
  else {
    $form_state['values']['status'] = 1;
  }
}


/**
 * Custom validate of provider type form.
 *
 * @param array &$form
 *   Array with declared form.
 *
 * @param array &$form_state
 *   Array with current form state.

 * @return void
 *   Return nothing.
 */
function gv_pages_validateForm_provider(&$form, &$form_state) {
   
  //dpm($form_state);
 
  $p_data = array();
  foreach ($form_state['values'] as $field => $value) {
    $prefix = explode('_', $field);
    switch ($prefix[0]) {
      case 'i':
          $p_data['info'][$field] = $value;
        break;
      case 'q':
          $p_data['quote'][$field] = $value;
        break;
      case 're':
          $p_data['services']['s_residential'][$field] = $value;
        break;
      case 'bu':
          $p_data['services']['s_business'][$field] = $value;
        break;
    }
  }
  
  // Save weights for Re Features (on the next editing).
  foreach ($form_state['values']['field_p_re_features']['und'] as $term) {
    // Choose every selected (with autoselect) tag.
    $p_data['services']['s_residential']['weights_re_features'][$term['tid']] = array('name' => $term['name'], 'weight' => 0);
    // Save weight if it set at the weights editing fieldset
    if(isset($form_state['values']['weights_re_features'][$term['tid']])) {
      $p_data['services']['s_residential']['weights_re_features'][$term['tid']]['weight'] = $form_state['values']['weights_re_features'][$term['tid']];
    }
  }
  // Sort tags by weights.
  if (isset($p_data['services']['s_residential']['weights_re_features'])) {
    uasort($p_data['services']['s_residential']['weights_re_features'], 'wdg_misc_sortArrayByWeight');
  }
  
  // Save weights for Bu Features (on the next editing).
  foreach ($form_state['values']['field_p_bu_features']['und'] as $term) {
    // Choose every selected (with autoselect) tag.
    $p_data['services']['s_business']['weights_bu_features'][$term['tid']] = array('name' => $term['name'], 'weight' => 0);
    // Save weight if it set at the weights editing fieldset
    if(isset($form_state['values']['weights_bu_features'][$term['tid']])) {
      $p_data['services']['s_business']['weights_bu_features'][$term['tid']]['weight'] = $form_state['values']['weights_bu_features'][$term['tid']];
    }
  }
  // Sort tags by weights.
  if (isset($p_data['services']['s_business']['weights_bu_features'])) {
    uasort($p_data['services']['s_business']['weights_bu_features'], 'wdg_misc_sortArrayByWeight');
  }
  
  // Save weights for Bu PBX Features (on the next editing).
  foreach ($form_state['values']['field_p_bu_features_pbx']['und'] as $term) {
    // Choose every selected (with autoselect) tag.
    $p_data['services']['s_business']['weights_bu_features_pbx'][$term['tid']] = array('name' => $term['name'], 'weight' => 0);
    // Save weight if it set at the weights editing fieldset
    if(isset($form_state['values']['weights_bu_features_pbx'][$term['tid']])) {
      $p_data['services']['s_business']['weights_bu_features_pbx'][$term['tid']]['weight'] = $form_state['values']['weights_bu_features_pbx'][$term['tid']];
    }
  }
  // Sort tags by weights.
  if (isset($p_data['services']['s_business']['weights_bu_features_pbx'])) {
    uasort($p_data['services']['s_business']['weights_bu_features_pbx'], 'wdg_misc_sortArrayByWeight');
  }
  
  // Save weights for Bu SIP Features (on the next editing).
  foreach ($form_state['values']['field_p_bu_features_sip']['und'] as $term) {
    // Choose every selected (with autoselect) tag.
    $p_data['services']['s_business']['weights_bu_features_sip'][$term['tid']] = array('name' => $term['name'], 'weight' => 0);
    // Save weight if it set at the weights editing fieldset
    if(isset($form_state['values']['weights_bu_features_sip'][$term['tid']])) {
      $p_data['services']['s_business']['weights_bu_features_sip'][$term['tid']]['weight'] = $form_state['values']['weights_bu_features_sip'][$term['tid']];
    }
  }
  // Sort tags by weights.
  if (isset($p_data['services']['s_business']['weights_bu_features_sip'])) {
    uasort($p_data['services']['s_business']['weights_bu_features_sip'], 'wdg_misc_sortArrayByWeight');
  }
  
  
  
  
  // Save collected data from temporary fields and weights to a real placeholder field field_p_data as a serialized data.
  form_set_value($form['field_p_data'], array('und' => array(0 => array('value' => serialize($p_data)))), $form_state);
  
  // Save collected FEES data from temporary fields to a excessive field for using it from views
  if (isset($p_data['services']['s_residential']['re_basicinfo_fees'])) {
    $p_fees_save['re'] = $p_data['services']['s_residential']['re_basicinfo_fees'];
  }
  if (isset($p_data['services']['s_business']['bu_basicinfo_fees'])) {
    $p_fees_save['bu'] = $p_data['services']['s_business']['bu_basicinfo_fees'];
  }
  if(isset($p_fees_save)) {
    form_set_value($form['field_p_fees_save'], array('und' => array(0 => array('value' => serialize($p_fees_save)))), $form_state);
    // Reset a helper session var with all fees.
    if (isset($_SESSION['all_fees'])) {
      unset($_SESSION['all_fees']);
    }
  }
  
  
  
  
  // Second trial... 
  // Save some more aggregated data to other field
  
  $p_data_quick['name'] = $form_state['values']['field_p_name']['und'][0]['value'];
  // Save collected Features and FEES data from temporary fields to a excessive field for using it from views
  $p_data_quick['re']['plan'] = isset($p_data['services']['s_residential']['re_preface_title']) ? $p_data['services']['s_residential']['re_preface_title'] : '';
  if (isset($p_data['services']['s_residential']['weights_re_features'])) {
    $count = 0;
    foreach ($p_data['services']['s_residential']['weights_re_features'] as $term_id => $term_data) {
      $p_data_quick['re']['feat'][$term_id] = $term_data['name'];
      if ($count++ > 1) {
        break;
      }
    }
  }
  $p_data_quick['bu']['plan'] = isset($p_data['services']['s_business']['bu_preface_title']) ? $p_data['services']['s_business']['bu_preface_title'] : '';
  if (isset($p_data['services']['s_business']['weights_bu_features'])) {
    $count = 0;
    foreach ($p_data['services']['s_business']['weights_bu_features'] as $term_id => $term_data) {
      $p_data_quick['bu']['feat'][$term_id] = $term_data['name'];
      if ($count++ > 1) {
        break;
      }
    }
  }
  $p_data_quick['re']['fees'] = array(
    'back' => isset($p_data['services']['s_residential']['re_money_back_guarantee']) ? $p_data['services']['s_residential']['re_money_back_guarantee'] : '',
    'monthly' => isset($p_data['services']['s_residential']['re_basicinfo_fees']['monthly_fees']) ? $p_data['services']['s_residential']['re_basicinfo_fees']['monthly_fees'] : '',
    'setup' => isset($p_data['services']['s_residential']['re_basicinfo_fees']['setup_fees']) ? $p_data['services']['s_residential']['re_basicinfo_fees']['setup_fees'] : '',
  );
  $p_data_quick['bu']['fees'] = array(
    'back' => isset($p_data['services']['s_business']['bu_money_back_guarantee']) ? $p_data['services']['s_business']['bu_money_back_guarantee'] : '',
    'monthly' => isset($p_data['services']['s_business']['bu_basicinfo_fees']['monthly_fees']) ? $p_data['services']['s_business']['bu_basicinfo_fees']['monthly_fees'] : '',
    'setup' => isset($p_data['services']['s_business']['bu_basicinfo_fees']['setup_fees']) ? $p_data['services']['s_business']['bu_basicinfo_fees']['setup_fees'] : '',
  );
  $p_data_quick['i_web'] = isset($p_data['info']['i_web']) ? $p_data['info']['i_web'] : '';
  
  if ($logo = file_load($form_state['values']['field_p_logo']['und'][0]['fid'])) {
    $p_data_quick['i_logo_uri'] = $logo->uri;  
  }
  
  //dpm($p_data_quick);
  
  form_set_value($form['field_p_data_quick'], array('und' => array(0 => array('value' => serialize($p_data_quick)))), $form_state);
//  // Reset a helper session var with all quick data.
//  if(isset($_SESSION['p_all_data_quick'])) {
//    unset($_SESSION['p_all_data_quick']);
//  }
  //gv_misc_getProvidersDataQuick('all', TRUE);
  
}


/**
 * Custom validate of review type form.
 *
 * @param array &$form
 *   Array with declared form.
 *
 * @param array &$form_state
 *   Array with current form state.

 * @return void
 *   Return nothing.
 */
function gv_pages_validateForm_review(&$form, &$form_state) {
  
  //dpm($form);
  //dpm($form_state);

  // Don't check anything if we delete the node.
  if ($form_state['submit_handlers'][0] == 'node_form_delete_submit') {
    return;
  }
    
  global $user;
  if (in_array('administrator', $user->roles)) {
    $current_is_administrator = TRUE;
  }
  else {
    $current_is_administrator = FALSE;
  }

  
  // Clear hints, if any.
  $fields_to_clear_hints = array('field_r_fname_temp' => array('hint' => FNAME_HINT, 'set' => 'about_you'), 'field_r_lname_temp' => array('hint' => LNAME_HINT, 'set' => 'about_you', 'title' => t('Last name')), 'field_r_email_temp' => array('hint' => EMAIL_HINT, 'set' => 'about_you'), 'pros' => array('hint' => PROS_HINT, 'set' => 'ureview'), 'cons' => array('hint' => CONS_HINT, 'set' => 'ureview'));
  foreach ($fields_to_clear_hints as $fname => $fdata) {
   
    if ($form_state['values'][$fname] == t($fdata['hint'])) {
      
      // This clear the field.
      $form[$fdata['set']][$fname]['#value'] = NULL;
      
      // Just in case.
      // BUT! It causes fatal eror with #parent index absence
      //form_set_value($form[$fdata['set']][$fname], array('#value' => NULL), $form_state);
      
      // Just in case on more.
      $form_state['values'][$fname] = NULL;
      
      if (isset($form[$fdata['set']][$fname]['#required']) && $form[$fdata['set']][$fname]['#required']) {
        form_set_error($fname, t('Please fill the field "' . ($form[$fdata['set']][$fname]['#title'] ? $form[$fdata['set']][$fname]['#title'] : $fdata['title'] ) . '"'));
      }
    }
    
  }
  // Doesnot affect the for after errors
  //$form_state['rebuild'] = TRUE;
  
    
   // Rebuild original fields field_r_fname, field_r_lname, field_r_email from temporary fields fields field_r_fname_temp, field_r_lname_temp, field_r_email_temp
  // Without this (with just rewriting those field with its simplified versions) Drupal will fire errors like eg Warning: array_values() expects parameter 1 to be array, string given in _field_filter_items()...)
  form_set_value($form['field_r_fname'], array('und' => array(0 => array('value' => isset($form_state['values']['field_r_fname_temp']) ? $form_state['values']['field_r_fname_temp'] : NULL ))), $form_state);
  form_set_value($form['field_r_lname'], array('und' => array(0 => array('value' => isset($form_state['values']['field_r_lname_temp']) ? $form_state['values']['field_r_lname_temp'] : NULL ))), $form_state);
  form_set_value($form['field_r_email'], array('und' => array(0 => array('value' => isset($form_state['values']['field_r_email_temp']) ? $form_state['values']['field_r_email_temp'] : NULL ))), $form_state);

  // Check if a not logged in user has entered an email which is already is taken with one of our registered user.
  if (!$current_is_administrator && !$form_state['values']['uid'] && isset($form_state['values']['field_r_email_temp']) && $form_state['values']['field_r_email_temp']) {
    //if (gv_misc_emailIsRegistered($form_state['values']['field_r_email']['und'][0]['value'])) {
    if (gv_misc_emailIsRegistered($form_state['values']['field_r_email_temp'])) {
      form_set_error('field_r_email',t('Sorry, an email You have entered is already registered in our system. If it is your email, please !login and proceed with submitting this review as a logged in user.', array('!login' => l('Log in', 'user/login', array('query' => array('destination' => url($_GET['q'])))))));
      return;
    }
  }
  
  //$rating_options = array('rating_features' => 'Features Rating', 'rating_sound' => 'Sound Rating', 'rating_rely' => 'Rely Rating', 'rating_money' => 'Money Rating', 'rating_service' => 'Service Rating', 'rating_recommend' => 'Would you recommend this VoIP provider?');
  //$rating_options = array('rating_features' => FEATURES, 'rating_sound' => SOUND, 'rating_rely' => RELY, 'rating_money' => PRICE, 'rating_service' => CUSTOMER, 'rating_recommend' => RECOMMEND);
  $rating_options = array('sound' => SOUND, 'install' => INSTALL, 'service' => CUSTOMER, 'rely' => RELY, 'features' => FEATURES, 'money' => PRICE, 'recommend' => RECOMMEND);
  
  foreach ($rating_options as $rating_option => $rating_option_title) {
    if ($form_state['values']['rating_' . $rating_option] === FALSE) {
      form_set_error($rating_option, t('Please make your choice for "' . $rating_option_title . '"'));
    }
  }
  
  
  
  if (!$form_state['values']['lines']) {
    form_set_error('lines',t('Please set a numbers of lines'));
  }
  else {
    // Save several vars in the field
    $field_r_data = serialize(array('lines' => $form_state['values']['lines'], 'pros' => $form_state['values']['pros'], 'cons' => $form_state['values']['cons'], 'user_ip' => $form_state['values']['user_ip']));
    form_set_value($form['field_r_data'], array('und' => array(0 => array('value' => $field_r_data))), $form_state);
  }
  
  
  // An Administrator MUST set the real title for the review.
  if ($current_is_administrator && !$form_state['values']['field_r_notapproved']['und'][0]['value'] && $form_state['values']['title'] == 'Unapproved review') {
    form_set_error('title',t('Please set a new title for this review'));
  }
  
  // Rebuild field_r_notapproved from the temp field field_r_notapproved_checkbox.
  if (!isset($form_state['values']['field_r_notapproved_info'])) {
    $field_r_notapproved = (isset($form_state['values']['field_r_notapproved_checkbox']) && $form_state['values']['field_r_notapproved_checkbox']) ? 0 : 1;
    form_set_value($form['field_r_notapproved'], array('und' => array(0 => array('value' => $field_r_notapproved))), $form_state);
  }
  
  // If field_ref_provider is choosen as OTHER SP, the field_r_oprovider should be set as well
  if ($form_state['values']['field_ref_provider']['und'][0]['target_id'] == 7 && !$form_state['values']['field_r_oprovider']['und'][0]['value']) {
    form_set_error('field_r_oprovider', t('Please write in the name of a Provider'));  
  }

  // Current review data and uid for defining (see below) if the author of this review has already submitted a review for a selected provider.
  $author_uid = isset($form_state['values']['uid']) ? $form_state['values']['uid'] : NULL;
  $current_review_nid = isset($form_state['values']['nid']) ? $form_state['values']['nid'] : NULL;
  $is_approved = !isset($form_state['values']['field_r_notapproved']['und'][0]['value']) || !$form_state['values']['field_r_notapproved']['und'][0]['value'];
  

  
  
  //$author_email = isset($form_state['values']['field_r_email']['und'][0]['value']) ? $form_state['values']['field_r_email']['und'][0]['value'] : NULL;
  $author_email = isset($form_state['values']['field_r_email_temp']) ? $form_state['values']['field_r_email_temp'] : NULL;
  
  
  // Prepare votes to save in a temporary field (it may be not used, but just in case and for a code simplifying).
  //$rating_options = array('features', 'sound', 'rely', 'money', 'service', 'recommend');
  $votes = array();
  foreach ($rating_options as $vote_key => $vote_title) {
    if(isset($form_state['values']['rating_' . $vote_key])) {
      $votes[$vote_key] = $form_state['values']['rating_' . $vote_key];
    }
  }
  // Save votes to the temporary votes field.
  // It maybe reset later on. But just for the sake of a code simplifying.
  // On node_presave it field may be cleared and its data will be pushed to Voting API tables.
  // OR it its data may remain, if the review is not approved OR it's for not listed provider
  form_set_value($form['field_ratings_oprovider'], array('und' => array(0 => array('value' => serialize($votes)))), $form_state);
    
  // If OTHER SP has been set.
  if($form_state['values']['field_ref_provider']['und'][0]['target_id'] == 7 && isset($form_state['values']['field_r_oprovider']['und'][0]['value']) && $form_state['values']['field_r_oprovider']['und'][0]['value']) {
    // Check if author of this review has already submitted a review for a selected provider.
    $review = gv_misc_userHasSubmittedReview(NULL, $author_uid, $author_email, $form_state['values']['field_r_oprovider']['und'][0]['value'], $current_review_nid);
  } // End of if($form_state['values']['field_ref_provider']['und'][0]['target_id'] == 7 && isset($form_state['values']['field_r_oprovider']['und'][0]['value']) && $form_state['values']['field_r_oprovider']['und'][0]['value']) {
  else {
    // Check if author of this review has already submitted a review for a selected provider.
    $review = gv_misc_userHasSubmittedReview($form_state['values']['field_ref_provider']['und'][0]['target_id'], $author_uid, $author_email, NULL, $current_review_nid);
  } // End of Or else reset the the temporary votes field.
  if ($review) {
    $text =  t('You have already submitted a review for this provider');
    if($user->uid || !$review->field_r_notapproved_value) {
      $text .= ': ' . l($review->title, 'node/' . $review->nid);
    }
    if($review->field_r_notapproved_value) {
      $text .= '. ' . t('But it\'s not yet approved by our administrators.');
    }
    form_set_error('field_ref_provider', $text);
  } // End of if ($review) {
  
}




/**
 * Custom validate of review type form.
 *
 * @param array &$form
 *   Array with declared form.
 *
 * @param array &$form_state
 *   Array with current form state.

 * @return void
 *   Return nothing.
 */
function gv_pages_validateForm_quote(&$form, &$form_state) {
  
  //dpm($form_state['values']);
  $data = serialize(array(
    'bottom_text' => $form_state['values']['bottom_text'],
  ));
  form_set_value($form['field_q_data'], array('und' => array(0 => array('value' => $data) )), $form_state);
  
}


/**
 * Custom additional submit of review type form.
 *
 * @param array &$form
 *   Array with declared form.
 *
 * @param array &$form_state
 *   Array with current form state.

 * @return void
 *   Return nothing.
 */
function gv_pages_submitForm_review(&$form, &$form_state) {
  
  global $user;
  // Just submitted new review.
  if (!isset($form_state['values']['nid']) OR !$form_state['values']['nid']) {
    $text = t('<span class="review"><span class="success">Your review has been successfully submitted. Thank you for your time and efforts in sharing your much appreciated feedback.</span> <span class="approve">It will be published as soon as our administrators have approved it.</span> <span class="contact">If we may be of any further assistance please email us at contact@getvoip.com</span>');
    // Send verification code to approve email for an unregistered user.
    if (!$form_state['values']['uid']) {
      gv_misc_sendMessage('email_verification', array('verification_code' => $form_state['values']['field_r_approvecode']['und'][0]['value'] . '=' . urlencode($form_state['values']['field_r_email']['und'][0]['value']), 'email' => $form_state['values']['field_r_email']['und'][0]['value']));
      $text .= '<div class="emailed">' . t('To assist in getting your review published faster, we have sent you an email verification with 1-click instructions for immediate publishing of your review.') . '</div>';
    }
    $text .= '</span>';
    drupal_set_message($text);
    // Notify all admins.
    gv_misc_sendMessage('new_review_admin_notify');
  } // End of if (!isset($form_state['values']['nid']) OR !$form_state['values']['nid']) {
  else {
    // clear previous votes if an email has been chabged
    // Some excessive code, that duplicates almost the same in hook_update, but only in case if an email has been changed
    if ($form_state['values']['email_old'] != $form_state['values']['field_r_email_temp']) {
      
      $provider_nid = isset($form_state['values']['field_ref_provider']['und'][0]['target_id']) ? $form_state['values']['field_ref_provider']['und'][0]['target_id'] : NULL;
      if ($provider_nid && $provider_nid != 7) {
        $saved_ratings = unserialize($form_state['values']['field_ratings_oprovider']['und'][0]['value']);
        
        $vote_keys = array('sound' => SOUND, 'install' => INSTALL, 'service' => CUSTOMER, 'rely' => RELY, 'features' => FEATURES, 'money' => PRICE, 'recommend' => RECOMMEND);
        $votes = array();
        
        foreach ($vote_keys as $vote_key => $vote_title) {
          $votes[] = array(
            'tag' => $vote_key,
            'entity_type' => 'node',
            'entity_id' => $provider_nid,
            'uid' => $form_state['values']['uid'],
            'vote_source' => $form_state['values']['email_old'],
          );
        }
        // Overall average rating.
        $votes[] = array(
          'tag' => 'overall',
          'entity_type' => 'node',
          'entity_id' => $provider_nid,
          'uid' => $form_state['values']['uid'],
          'vote_source' => $form_state['values']['email_old'],
        );
        
        // Remove (clear) this review's previous votes from a target provider calculation set.
        foreach ($votes as $c) {
          $select_votes = gv_misc_getVotesIDs($c); //votingapi_select_votes($c);
          votingapi_delete_votes($select_votes);
        }
        
      } // End of if ($provider_nid && $provider_nid != 7) {
      
    } // End of if ($form_state['values']['email_old'] != $form_state['values']['field_r_email_temp'])
    
  } // End of Else of if (!isset($form_state['values']['nid']) OR !$form_state['values']['nid']) {
  
  
  
  // Redirect doesn't work this way!
  //$form_state['redirect'] = '/'; 

  // Redirect Works! this way
  // Unregistered user cannot view any unpublished content, including just submitted (and not yet approved and not published) review.
  // So we have to redirect it to a target provider page if it's set OR to the home page.
  
  if (!$user->uid) {
    if (isset($form_state['values']['field_ref_provider']['und'][0]['target_id']) && $form_state['values']['field_ref_provider']['und'][0]['target_id']) {
      // Redirect to a target provider page, if it's set.
      $_GET['destination'] = ltrim(url('node/' . $form_state['values']['field_ref_provider']['und'][0]['target_id']), '/');
    }
    else {
      // Or reditect to the home page.
      $_GET['destination'] = '';
    }
  }
  
}


/**
 * Implements hook_node_update().
 *
 * @return void
 *   Return nothing.
 */
function gv_pages_node_update($node) {
  
  if ($node->type == 'provider') {
    
    // Reset ProvidersDataQuick in session var.
    gv_misc_getProvidersDataQuick('all', FALSE, TRUE);    
  }
}


/**
 * Implements hook_node_presave().
 *
 * @return void
 *   Return nothing.
 */
function gv_pages_node_presave($node) {
  //dpm($node);
  //dpr($node);
  //die;
  
  if ($node->type == 'review') {
    
    // Unpublish, if is not approved... and publish if approved.
    $is_approved = (isset($node->field_r_notapproved['und'][0]['value']) && $node->field_r_notapproved['und'][0]['value']) ? 0 : 1;
    if ($is_approved) {
      $node->status = 1;
    }
    else {
      $node->status = 0;
    }
    
    // Extract votes data from the local saved field.
    $saved_ratings = unserialize($node->field_ratings_oprovider['und'][0]['value']);
    $provider_nid = isset($node->field_ref_provider['und'][0]['target_id']) ? $node->field_ref_provider['und'][0]['target_id'] : NULL;
    
    
    
    // Create a votes array
    
    //$vote_keys = array('features', 'sound', 'rely', 'money', 'service', 'recommend');
    $vote_keys = array('sound' => SOUND, 'install' => INSTALL, 'service' => CUSTOMER, 'rely' => RELY, 'features' => FEATURES, 'money' => PRICE, 'recommend' => RECOMMEND);
    $votes = array();

    $overall_count = 0;
    $overall_summ = 0;
    foreach ($vote_keys as $vote_key => $vote_title) {
      $votes[] = array(
        'tag' => $vote_key,
        'entity_type' => 'node',
        'entity_id' => $provider_nid,
        'value_type' => 'percent',
        'value' => $saved_ratings[$vote_key],//$form_state['values']['rating_' . $vote_key],
        'uid' => $node->uid,
        'vote_source' => $node->field_r_email['und'][0]['value'],
      );
      $overall_count++;
      $overall_summ += $saved_ratings[$vote_key];
    }

    // Calculate overall average rating.
    $rating_overall = $overall_summ / $overall_count;
    $votes[] = array(
      'tag' => 'overall',
      'entity_type' => 'node',
      'entity_id' => $provider_nid,
      'value_type' => 'percent',
      'value' => $rating_overall,
      'uid' => $node->uid,
      'vote_source' => $node->field_r_email['und'][0]['value'],
    );
    $node->field_r_rating_overall['und'][0]['value'] = $rating_overall * 0.05;


    // If a provider was chosen from a list, save voting results to Voting API tables.
    if ($provider_nid && $provider_nid != 7) {
      
        // Remove (clear) this review's previous votes from a target provider calculation set.
        foreach ($votes as $c) {
          unset($c['value_type'], $c['value']);
          $select_votes = gv_misc_getVotesIDs($c); //votingapi_select_votes($c);
          votingapi_delete_votes($select_votes);
        }
   
        // If approved and published,
        // Add this review's votes to a target provider overall rating calculation in Voting API tables.
        if ($is_approved && $node->status) {
          votingapi_set_votes($votes, $votes);
          // Clear temporary field votes.
          $node->field_ratings_oprovider['und'][0]['value'] = '';
        }
        else {
          // Recalculate results after deleting this preview votings (above).
          // (Adding voting (above), if approved, call this function itself).
          votingapi_recalculate_results('node', $provider_nid);
        }
        
        // Save a provider name to the review
        $provider = node_load($provider_nid);
        $node->field_r_provider_name['und'][0]['value'] = $provider->field_p_name['und'][0]['value'];
    } // End of if ($provider_nid && $provider_nid != 7) {
    else {
      $node->field_r_provider_name['und'][0]['value'] = $node->field_r_oprovider['und'][0]['value'];
    }
    
    // If chosen OTHER SP (and dummy nid), replace a dummy nid with 0, 
    // as we don't want to associate this review with that dummy nid node, of course.
    // Or clear OTHER SP field.
    if ($node->field_ref_provider['und'][0]['target_id'] == 7) {
      $node->field_ref_provider['und'][0]['target_id'] = 0;
    }
    else {
      $node->field_r_oprovider['und'][0]['value'] = '';
    }
    
  } // End of if ($node->type == 'review') {
  
  //dpr($node);
  //die;
}





/**
 * Implements hook_form().
 *
 * Provider preview form for a Review page.
 * 
 * @return $form
 *   Return nothing.
 */
function gv_pages_addProviderPreview_form($node, &$form_state, $provider_nid) {
  
  $provider_node = node_load($provider_nid);
  $form['provider_set'] = array(
      '#type' => 'fieldset',
      '#title' => t('Provider description (for a quick reference)'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#weight' => -100,
  );
  $form['provider_set']['provider'] = node_view($provider_node, 'teaser');
  
          
  return $form;
}



/**
 * Implements hook_node_view().
 *
 * @return void
 *   Return nothing.
 */
function gv_pages_node_view($node, $view_mode) {

  switch ($node->type) {
    
    case 'quote':
      
      $node->q_data = unserialize($node->field_q_data['und'][0]['value']);
      
      break;
    
    
    
    
    case 'review':
      
      
      if(isset($node->field_ref_provider['und'][0]['target_id']) && $node->field_ref_provider['und'][0]['target_id']) {
        if ($view_mode == 'full') {
          // Show preview of the provider (as a teaser)
          $node->content['provider_descr'] = drupal_get_form('gv_pages_addProviderPreview_form', $node->field_ref_provider['und'][0]['target_id']);
        }
        //global $provider_url;
        //if (!$provider_url) {
          $provider = node_load($node->field_ref_provider['und'][0]['target_id']);
          $p_data = unserialize($provider->field_p_data['und'][0]['value']);
          $provider_url = $p_data['info']['i_web'];
          
          if (isset($provider->field_p_logo['und'][0]['uri']) && $provider->field_p_logo['und'][0]['uri']) {
            global $review_provider_logo_path;
            $review_provider_logo_path = gv_misc_getPathFromStreamUri($provider->field_p_logo['und'][0]['uri']);
          }
        //}
        $node->content['provider_url'] = $provider_url;
      }
      
      // Show data from field_r_oprovider, if is not set field_ref_provider
      if ( !isset($node->field_ref_provider['und'][0]['target_id']) && isset($node->field_r_oprovider['und'][0]['value']) ) {
        $node->content['field_r_oprovider']['#title'] = t('Your VoIP Service Provider') . ' (*)';
      }
      else {
        unset($node->content['field_r_oprovider']);
      }
      
      //dpm($node);
      // Show voting results for this provider and user (author of this review).
      // Take votes from a local ratings field if it's not empty.
      if (!empty($node->field_ratings_oprovider['und'][0]['value'])) {
        $votes_simple_format = unserialize($node->field_ratings_oprovider['und'][0]['value']);
        // Rebuild the array to the votes api format
        foreach ($votes_simple_format as $tag => $value) {
          $votes[] = array('tag' => $tag, 'value' => $value);
        }
      }
      else {
        // Or if the local votest field is empty, 
        // load saved votes from Voting API table.
        $criteria = array(
          'entity_type' => 'node',
          'entity_id' => $node->field_ref_provider['und'][0]['target_id'],
          'uid' => $node->uid,
          // Make it possible to count votes of several unauthorized (uid = 0, but with different emails) users.
          'vote_source' => $node->field_r_email['und'][0]['value'],
        );
        
        $votes = gv_misc_getVotesIDs($criteria); // = votingapi_select_votes($criteria);
      }
      gv_pages_addRatingsToNodeThemed($node, $votes);
      
      if (isset($node->field_r_data['und'][0]['value'])) {
        $node->content['r_data'] = unserialize($node->field_r_data['und'][0]['value']);
      }
      
      // Add a provider name in front of title
      if ($view_mode == 'full') {
        //dpm($node);
        //drupal_set_title($node->field_r_provider_name['und'][0]['safe_value'] . ': ' . $node->title);
      }
      
    break; // End of case 'review':
    
    
    
    
    
    case 'provider':
      
      if ($view_mode == 'full') {
        
        global $user;
        
        // For a registered user....
        // Add a "Add a review" button to the Provider's page 
        // OR link to review of the current user if he has already submitted a review for this Provider.
        if ($user->uid) {
          if (!$review = gv_misc_userHasSubmittedReview($node->nid, $user->uid)) {
            $node->content['add_review'] = drupal_get_form('gv_pages_addReviewButton_form', $node->nid);
          }
          else {
            $node->content['add_review'] = array(
              '#markup' => '<div class="add_review">' . t('You have already submitted a review for this provider:') . ' ' . l('"' . $review->title . '"', 'node/' . $review->nid) . '</div>',
            );
            $node->current_user_has_review = url('node/' . $review->nid);
            $node->current_user_has_review_title = $review->title;
          }
        }
        else {
          $node->content['add_review'] = drupal_get_form('gv_pages_addReviewButton_form', $node->nid);
        }

        
        // Load votes for a provider.
        $criteria = array(
          'entity_type' => 'node',
          'entity_id' => $node->nid,
          'function' => 'average',
        );
        $votes = votingapi_select_results($criteria);
        $criteria['function'] = 'count';
        $counts = votingapi_select_results($criteria);
        $node->gv_voters = isset($counts[0]['value']) ? $counts[0]['value'] : '';
        gv_pages_addRatingsToNodeThemed($node, $votes, $counts);

        
        
        // Load and show all the data from the placeholder field field_p_data serialized data
        if (isset($node->field_p_data['und'][0]['value'])) {

          $p_data = unserialize($node->field_p_data['und'][0]['value']);
          $node->p_data = $p_data;
          if ($node->field_p_types['und'][0]['value'] == 'business') {
            $node->p_type = 'bu';
          }
          else {
            $node->p_type = 're';
          }

          // General info.
          /*        
              gv_pages_addFieldToNode($node, $p_data, array('info', 'i_heads', 'Headquarters'));
              gv_pages_addFieldToNode($node, $p_data, array('info', 'i_founded', 'Founded'));
              gv_pages_addFieldToNode($node, $p_data, array('info', 'i_availability', 'Availability'));
              gv_pages_addFieldToNode($node, $p_data, array('info', 'i_web', 'Web address'));
              // Quote.
              gv_pages_addFieldToNode($node, $p_data, array('quote', 'q_text', 'q_author'));
          */


          // Services

          // Residential
          if (isset($p_data['services']['s_residential'])) {
            // Preface.
            /*
                gv_pages_addFieldToNode($node, $p_data, array('services', 's_residential', 're_preface'));
                // Basic info.
                gv_pages_addFieldToNode($node, $p_data, array('services', 's_residential', 're_basicinfo'));
                // Special notes.
                gv_pages_addFieldToNode($node, $p_data, array('services', 's_residential', 're_specialnotes'));

                // Key and normal features blocks.
                gv_pages_addFieldToNode($node, $p_data, array('services', 's_residential', 're_features'), 'key_and_normal_features_blocks');
            */

            // Remove the original taxonomy field.
            ////unset($node->content['field_p_re_features']);
          } // End of if (isset($p_data['services']['s_residential'])) {
          // Business
          if (isset($p_data['services']['s_business'])) {
            // Preface.
            /*
                gv_pages_addFieldToNode($node, $p_data, array('services', 's_business', 'bu_preface'));
                // Basic info.
                gv_pages_addFieldToNode($node, $p_data, array('services', 's_business', 'bu_basicinfo'));
                // Special notes.
                gv_pages_addFieldToNode($node, $p_data, array('services', 's_business', 'bu_specialnotes'));
                // PBX preface.
                gv_pages_addFieldToNode($node, $p_data, array('services', 's_business', 'bu_pbxpreface'));
                // SIP preface.
                gv_pages_addFieldToNode($node, $p_data, array('services', 's_business', 'bu_sippreface'));

                // Key and normal features blocks.
                gv_pages_addFieldToNode($node, $p_data, array('services', 's_business', 'bu_features'), 'key_and_normal_features_blocks');
                // PBX features block.
                gv_pages_addFieldToNode($node, $p_data, array('services', 's_business', 'bu_features_pbx', 'PBX Features'), 'other_features_block');
                // PBX features block.
                gv_pages_addFieldToNode($node, $p_data, array('services', 's_business', 'bu_features_sip', 'SIP Features'), 'other_features_block');
            */  

            // And now Remove original taxonomy fields for Business features.
            ////unset($node->content['field_p_bu_features'], $node->content['field_p_bu_features_pbx'], $node->content['field_p_bu_features_sip']);
          } // End of if (isset($p_data['services']['s_residential'])) {


        } // End of if (isset($node->field_p_data['und'][0]['value'])) {        
        
        
        // Add tabs.
        $module_path = drupal_get_path('module', 'gv_pages');
        drupal_add_library('system', 'ui.tabs');
        drupal_add_js( $module_path . '/js/gv_provider_tabs.js'); 
    
      } // End of if ($view_mode == 'full') {
        
        
    break; // End of case 'provider':
  
    
    
    
    
    case 'preface':
      
      //dpm($node);

      // Set metatags from the preface to a page where the preface is placed
      // Except of the front page, where it can be set via admin interface of the Metatags.
      if (isset($node->field_preface_key['und'][0]['safe_value']) && $node->field_preface_key['und'][0]['safe_value'] != 'front') {
        
        if (isset($node->metatags) && count($node->metatags)) {
          foreach($node->metatags as $metatag_title => $metatag_data) {
            
            // We set title while attaching a preface to a view.
            // So skip it here...
            /*
            if ($metatag_title == 'title' && !$metatag_data) {
              $metatag_data = $node->title;
            }
            */
            if ($metatag_title != 'title') {
              gv_misc_addMetatag($metatag_title, $metatag_data['value']);
            }
          }
        }
        
        if ($node->field_preface_key['und'][0]['safe_value'] == 'view-reviews-page_all_reviews') {
          
          $providers = array('' => t('- All Providers -'));
          gv_misc_getProviders($providers, 'all_including_others_from_reviews');
          
          if (isset($_GET['provider']) && isset($providers[$_GET['provider']])) {
            $provider_isset = TRUE;
          }
          else {
            $provider_isset = FALSE;
          }
          $url = '';
          foreach ($_GET as $key => $value) {
            if ($key == 'q' || $key == 'provider') {
              continue;
            }
            $url .= '&' . $key . '=' . urlencode($value);
          }
          
          //dpm($_GET);
          //dpm($providers);
          
          $node->content['select_providers'] = array(
              '#type' => 'select',
              '#title' => t('Choose a Provider'),
              '#options' => $providers,
              '#default_value' => $provider_isset ? $providers[$_GET['provider']] : $providers[''],
              '#value' => $provider_isset ? $providers[$_GET['provider']] : $providers[''],
              ////'#default_value' => 'VoIPo',
              ////'#value' => 'VoIPo',
              '#attributes' => array('id' => 'select_provider',  'onChange' => "top.location.href='http://getvoip.com/" . $_GET['q'] . "?provider=' + encodeURIComponent(document.getElementById('select_provider').options[document.getElementById('select_provider').selectedIndex].value) + '$url'"),

          ); 
          //dpm($node);
        }
        
      } // End of if ($node->field_preface_key['und'][0]['safe_value'] != 'front') {
/*      



        //doesnt
        if(isset($metatags["$enitity_id"]["title"])){
                //drupal_set_title($metatags["$enitity_id"]["title"]["value"]);
                //variable_set("head_title", $metatags["$enitity_id"]["title"]["value"]);
        }
*/      
      
      /*
       
        $tags = array(

            'DC.title' => array(
                '#tag' => 'meta',
                '#attributes' => array(
                    'name' => 'DC.title',
                    'content' => $node->title,
                ),
            ),

            'author' => array(
                '#tag' => 'meta',
                '#attributes' => array(
                    'name' => 'author',
                    'content' => $publisher_title,
                ),
            ),
            'image_src' => array(
                '#tag' => 'link', // The #tag is the html tag - <link />
                '#attributes' => array( 
                    'href' => '/' . $node->field_thumbnail['und'][0]['value'],
                    'rel' => 'image_src',
                    //'type' => 'text/css',
                ),
            ),
        );
 

        */
      
      
    break;
  
  } // End of switch ($node->type) {
  
  if ($view_mode == 'full') {
    gv_misc_addSocialShareData_toPage($node);
  }
}


/**
 * Adds field to a node from the saved data.
 */
function gv_pages_addFieldToNode($node, &$data, $options, $field_type = 'item') {

  switch ($node->type) {
    
    case 'provider':
      
      if ($options[0] == 'services') {
        switch ($field_type) {
          case 'item':
            if (isset($data['services'][$options[1]][$options[2] . '_title']) && isset($data['services'][$options[1]][$options[2] . '_text']) && $data['services'][$options[1]][$options[2] . '_title'] && $data['services'][$options[1]][$options[2] . '_text']) {
              $node->content[$options[2]] = array(
                '#type' => 'item',
                '#title' => $data['services'][$options[1]][$options[2] . '_title'],
                '#markup' => $data['services'][$options[1]][$options[2] . '_text'],
              );
            }
          break; // End of case 'item':
          
          case 'key_and_normal_features_blocks':
            // $options[1] - something like 's_residential'
            // $options[2] - something like 're_features', add here weights_ and you'll get the field in the array $data['weights_re_features']
            if (isset($data['services'][$options[1]]['weights_' . $options[2]]) && !empty($data['services'][$options[1]]['weights_' . $options[2]])) {
              $weights = $data['services'][$options[1]]['weights_' . $options[2]];
              
              // First 3 tags go to Key Features
              $node->content[$options[1] .'_features_key'] = array(
                '#type' => 'item',
                '#title' => t('Key Features'),
                '#markup' => '',
              );
              $count = 0;
              foreach ($weights as $tid => $term) {
                if ($count++ > 2) {
                  break;
                }
                $node->content[$options[1] .'_features_key']['#markup'] .= '<li>' . l(t($term['name']), 'taxonomy/term/' . $tid) . '</li>';
                unset($weights[$tid]);
              }
              $node->content[$options[1] .'_features_key']['#markup'] = '<ul>' . $node->content[$options[1] .'_features_key']['#markup'] . '</ul>';
              
              // The rest of features (if any) go to Available Features
              if(!empty($weights)) {
                $node->content[$options[1] .'_features'] = array(
                  '#type' => 'item',
                  '#title' => t('Available Features'),
                  '#markup' => '',
                );
                foreach ($weights as $tid => $term) {
                  $node->content[$options[1] .'_features']['#markup'] .= '<li>' . l(t($term['name']), 'taxonomy/term/' . $tid) . '</li>';
                }
                $node->content[$options[1] .'_features']['#markup'] = '<ul>' . $node->content[$options[1] .'_features']['#markup'] . '</ul>';
              } // End of if(!empty($weights)) {
            } // end of if (isset($data['services'][$options[1]]['weights_' . $options[2]]) && !empty($data['services'][$options[1]]['weights_' . $options[2]])) {
            
          break; // End of case 'key_and_normal_features_blocks':
          
          case 'other_features_block':
            // $options[1] - something like 's_business'
            // $options[2] - something like 'bu_features_pbx', add here weights_ and you'll get the field in the array $data['weights_bu_features_pbx']
            // $options[3] - the Title, something like PBX Features
            if (isset($data['services'][$options[1]]['weights_' . $options[2]]) && !empty($data['services'][$options[1]]['weights_' . $options[2]])) {
              
              $weights = $data['services'][$options[1]]['weights_' . $options[2]];
              
              $node->content[$options[1] . '_' . $options[2]] = array(
                '#type' => 'item',
                '#title' => t($options[3]),
                '#markup' => '',
              );
              foreach ($weights as $tid => $term) {
                $node->content[$options[1] . '_' . $options[2]]['#markup'] .= '<li>' . l(t($term['name']), 'taxonomy/term/' . $tid) . '</li>';
              }
              $node->content[$options[1] . '_' . $options[2]]['#markup'] = '<ul>' . $node->content[$options[1] . '_' . $options[2]]['#markup'] . '</ul>';

            } // end of if (isset($data['services'][$options[1]]['weights_' . $options[2]]) && !empty($data['services'][$options[1]]['weights_' . $options[2]])) {
            
          break; // End of case 'other_features_block':
        
        } // End of switch ($field_type) {
        
      } // End of if ($options[0] == 'services') {
      elseif ($options[0] == 'info') {
        if (isset($data['info'][$options[1]]) && $data['info'][$options[1]]) {
          $node->content[$options[1]] = array(
            '#type' => 'item',
            '#title' => t($options[2]),
            '#markup' => $data['info'][$options[1]],
          );
        }
      } // End of elseif ($options[0] == 'info') {
      elseif ($options[0] == 'quote') {
        if (isset($data['quote'][$options[1]]) && isset($p_data['quote'][$options[2]]) && $data['quote'][$options[1]] && $p_data['quote'][$options[2]]) {
          $node->content[$options[1]] = array(
            '#markup' => $p_data['quote'][$options[2]],
          );
          $node->content[$options[2]] = array(
            '#markup' => $p_data['quote'][$options[2]],
          );
        }
      } // End of elseif ($options[0] == 'quote') {
      
      break; // End of case 'provider':
      
  } // End of switch ($node->type) {
  
  
}


/**
 * Implements hook_node_delete().
 *
 * @return void
 *   Return nothing.
 */
function gv_pages_node_delete($node) {
  switch ($node->type) {
    case 'review':
      // Delete vote of this user for this provider, if it exists.
      if (isset($node->field_ref_provider['und'][0]['target_id'])) {
        $criteria = array(
          'entity_type' => 'node',
          'entity_id' => $node->field_ref_provider['und'][0]['target_id'],
          'uid' => $node->uid,
          'vote_source' => $node->field_r_email['und'][0]['value'],
        );
        $select_votes = gv_misc_getVotesIDs($criteria); //votingapi_select_votes($criteria);
        votingapi_delete_votes($select_votes);
        votingapi_recalculate_results('node', $node->field_ref_provider['und'][0]['target_id']);
      }
  }
}


/**
 * Append to a node (for a hook node_view) a themed set of rating votes.
 *
 * @return void
 *   Return nothing.
 */
function gv_pages_addRatingsToNodeThemed($node, $votes, $counts = NULL, $semicolon = '') {
  $overall_vote = NULL;
  if ($votes) {
    //$rating_titles = array('features' => FEATURES, 'sound' => SOUND, 'service' => CUSTOMER, 'money' => PRICE, 'rely' => RELY, 'recommend' => RECOMMEND);
    $rating_titles = array('sound' => SOUND, 'install' => INSTALL, 'service' => CUSTOMER, 'rely' => RELY, 'features' => FEATURES, 'money' => PRICE, 'overall' => OVERALL, 'recommend' => RECOMMEND);
    $node->content['gv_ratings'] = array(
        '#markup' => '',
        //'#prefix' => '<div class="gv_votes">',
        //'#suffix' => '</div>',
    );

    //Sort votes.
    foreach ($rating_titles as $rating_tag => $rating_title) {
      foreach ($votes as $vote) {
        if($vote['tag'] == $rating_tag) {
          $votes_sorted[] = $vote;
        }
      }
    }
    $zebra = 0;
    $zebra_odd = array(1,3,5,7,9);
    foreach ($votes_sorted as $key => $vote) {
      $zebra++;
      if ($vote['tag'] == 'overall') {
        $overall_vote = $vote;
        continue;
      }
      if ($vote['tag'] == 'recommend') {
        $recommend_vote = $vote;
        continue;
      }
      $node->content['gv_ratings']['#markup'] .= '<div class="gv_vote ' . (in_array($zebra, $zebra_odd) ? 'odd' : 'even') .'"><div class="title">' . t($rating_titles[$vote['tag']]) . $semicolon . '</div>' 
        // Using own theming function for fivestar (replicate of the original fivestar theme function).
        . theme('gv_misc_fivestar_static', array('rating' => $vote['value'], 'stars' => 5, 'tag' => $vote['tag'], 'widget' => array('name' => 'stars', 'css' => 'stars.css')))
        // Using the original fivestar theme function.
        //. theme('fivestar_static', array('rating' => $vote['value'], 'stars' => 5, 'tag' => $vote['tag'], 'widget' => array('name' => 'hearts', 'css' => 'hearts.css')))
        . '</div>';
    }
    
    // Voters count.
    // Has been set before, via $node->gv_voters
//    if ($counts) {
//      $node->content['gv_voters'] = array(
//          '#markup' => '<div class="voters"><div class="title">' . t('Number of Reviews') . ':</div><div class="count">' . $counts[0]['value'] . '</div></div>', // . (isset($counts[$key]['tag']) ? '<div class="gv_voters">' . t('Voters') . ': ' . $counts[$key]['value'] . '</div>' : '')
//      );
//    }
    
//    if ($overall_vote) {
//      $node->content['gv_ratings']['#markup'] .= '<div class="gv_vote overall"><div class="title">' . t(OVERALL) . $semicolon . '</div>' 
//        // Using own theming function for fivestar (replicate of the original fivestar theme function).
//        . theme('gv_misc_fivestar_static', array('rating' => $overall_vote['value'], 'stars' => 5, 'tag' => $vote['tag'], 'widget' => array('name' => 'hearts', 'css' => 'hearts.css')))
//        // Using the original fivestar theme function.
//        //. theme('fivestar_static', array('rating' => $overall_vote['value'], 'stars' => 5, 'tag' => $vote['tag'], 'widget' => array('name' => 'hearts', 'css' => 'hearts.css')))
//        . '</div>';
//    }

    // Add a caption.
    $node->content['gv_ratings']['#markup'] = '<div class="data">' . $node->content['gv_ratings']['#markup'] . '</div>';
    
    if ($overall_vote) {
      //$node->content['gv_rating_overall']['#markup'] .= '<div class="gv_vote overall"><div class="title">' . $node->field_p_name['und'][0]['safe_value'] . ' ' . t('Overall Rated') . ':</div><div>' . $overall_vote['value'] . '</div></div>';
      
      //$node->content['gv_rating_overall']['#markup'] = '<div class="count">' . number_format($overall_vote['value'] * 0.05, 1) . '</div>';
      $node->gv_rating_overall = number_format($overall_vote['value'] * 0.05, 1);
    }
    
    
    // Recommend vote.
    if (isset($recommend_vote['function'])) {
      // If it's agregated cached results (calculated via function)
      // we'll show percent of voters recomendations.
      $node->content['gv_recommend'] = array(
          '#markup' => '<div class="recommend"><div class="title">' . t('Would recommend') . ': </div><div class="data">' . $recommend_vote['value'] . '% ' . t('of all voters') . '</div></div>',
      );
    }
    else {
      $node->content['gv_recommend'] = array(
          '#markup' => '<div class="title">' . t('Recommend') . ': </div><div class="data">' . ($recommend_vote['value']?t('Yes'):t('No')) . '</div>',
      );
    }
    // In case of using the original fivestar theme function there should be connected original fivestar's css
    /*
    $path = drupal_get_path('module', 'fivestar');
    drupal_add_css($path . '/css/fivestar.css');
    drupal_add_css($path . '/widgets/hearts/hearts.css');
    */
  }
}


/**
 * Implements hook_form().
 *
 * Button for submit a review for the current provider.
 * 
 * @return $form
 *   Return nothing.
 */
function gv_pages_addReviewButton_form($node, &$form_state, $provider_nid) {
  $form['id'] = array(
      '#type' => 'hidden',
      '#value' => $provider_nid,
  );
  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Add a review'),
  ); 
  //$form['#action'] = url('node/add/review', array('query' => array('id' => $provider_nid)));
  return $form;
}


/**
 * Implements hook_form_submit().
 *
 * Append nid to url and redirect to node/add/review via GET parameter.
 * 
 * @return $form
 *   Return nothing.
 */
function gv_pages_addReviewButton_form_submit(&$form, &$form_state) {
  drupal_goto('node/add/review', array('query' => array('id' => $form_state['values']['id'])));
}