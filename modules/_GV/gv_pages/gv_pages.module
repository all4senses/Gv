<?php

/**
 * @file
 * Module for building and managing site's pages.
 */

/**
 * Implements hook_menu().
 */
function gv_pages_menu() {

  $items['home'] = array(
    'title' => 'Home page',
    'description' => 'Home page',
    //'page callback' => 'drupal_get_form',
    'page callback' => 'gv_pages_showPage',
    'page arguments' => array('gv_pages_home'/*$name*/, 'via_function'/* $call_type: direct_theme OR via_function */, 'gv_pages_buildHome' /*$build_function*/), //array(1),
    'access callback' => 'gv_pages_access',
    'access arguments' => array('home'),
    'type' => MENU_CALLBACK,
  );  
  $items['news-topics'] = array(
    'title' => 'News topics',
    'page callback' => 'gv_pages_buildNewsTopics',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  ); 
  $items['topics'] = array(
    //'title' => 'Topics page',
    'page callback' => 'gv_pages_buildTopicsPage',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  ); 
  
  return $items;
}


/**
 * Returns a themed News topics page.
 * 
 * Allows to use same topics for News, Articles, Blog posts, etc.
 */
function gv_pages_buildTopicsPage($content_type_label) {
  global $language;
  //$content_types = array('blog_post' => 'blog', 'news_post' => 'news', 'article' => 'articles');
  // Inverted...
  $content_types = array('blog' => 'blog_post', 'news' => 'news_post', 'articles' => 'article');
  $content_type = $content_types[$content_type_label];
  
  $topics = cache_get($content_type . '_topics_page' . $language->language);
  if (!$topics || empty($topics->data) || $topics->expire < time()) {
    $topics = gv_misc_getTopics($content_type, $content_type_label);
    if (!$topics) {
      return NULL;
    }
    $topics = theme('gv_misc_submenuSimple', array('submenu' => array('below' => $topics), 'class' => 'topics'));
    $page_title = '<h1 id="page-title" class="title">' . drupal_ucfirst($content_type_label) . ' topics</h1>';
    $show_all_url = '<div class="more-link">' . l(t('Show all posts'), $content_type_label) . '</div>';
    $topics = $page_title . $topics . $show_all_url;
    // Expire = current time + 4 hours.
    cache_set($content_type . '_topics_page' . $language->language, $topics, 'cache', time() + 14400);
  }
  else {
    $topics = $topics->data;
  }
  return $topics; 
}


/**
 * Returns a themed News topics page.
 * 
 * Allows to use same topics for News, Articles, Blog posts, etc.
 */
function gv_pages_buildNewsTopics() {
  global $language;
  $topics = cache_get('news_topics_page' . $language->language);
  if (!$topics || empty($topics->data) || $topics->expire < time()) {
    $topics = gv_misc_getTopics('news_post', 'news');
    $topics = theme('gv_misc_submenuSimple', array('submenu' => array('below' => $topics), 'class' => 'topics'));
    // Expire = current time + 4 hours.
    cache_set('news_topics_page' . $language->language, $topics, 'cache', time() + 14400);
  }
  else {
    $topics = $topics->data;
  }
  return $topics; 
}


/**
 * Implements hook_access().
 */
function gv_pages_access($type = null) {
  switch ($type) {
    default:
      if (arg(1) == 'edit') {
        if(!user_access('administer site configuration')) {
          return false;
        }
      }
    break;
  }
  return true;
}


/**
 * Prepare data for output it via theme function
 */
function gv_pages_buildHome($name, $data) {
  $out = NULL;
  $out = theme($name, array('data' => $data));
  
  // Get block for Latest VoIP articles (+ news, blog posts, etc).
  $block_data = array('module' => 'views', 'delta' => 'articles-block');
  $out .= gv_blocks_getBlockThemed($block_data);
  
  // Get block for Top pick business providers.
  $block_data = array('module' => 'views', 'delta' => 'providers-block');
  $out .= gv_blocks_getBlockThemed($block_data);
 
  // Get block for Top pick residential providers.
  $block_data = array('module' => 'views', 'delta' => 'providers-block_1');
  $out .= gv_blocks_getBlockThemed($block_data);
  
  return $out;
}


/**
 * Show themed page for users or edit page for admins (with  argument /edit in url)
 */
function gv_pages_showPage($name, $call_type = 'direct_theme', $build_function = NULL) {
  if (arg(1) == 'edit') {
    return drupal_get_form($name . '_form');
  }
  else {
    $data = variable_get($name . '_form', null);
    if ($call_type == 'direct_theme') {
      return theme($name, array('data' => $data));
    }
    else {
      return $build_function($name, $data);
    }
  }
}


/**
 * Implements hook_form() for editing home page content.
 */
function gv_pages_home_form() {
    
  $data = variable_get('gv_pages_home_form');
    
  $form['home_backend'] = array(
  '#type' => 'markup',
  '#title' => t('Explain'),
  '#markup' => '<div>Some text</div>',  
  ); 
    
  $form['fieldsetblock1_title'] = array(
  '#type' => 'fieldset',
  '#title' => t('Title'),
  '#collapsible' => true,
  '#collapsed' => true,  
  ); 
    
  $form['fieldsetblock1_title']['gv_block1_title'] = array(
  '#type' => 'textfield',
  '#title' => t('Title 1'),
  '#maxlength' => 40,   
  '#description' => t('Max length of the string: 40 symbols'),    
  '#default_value' => isset($data['gv_block1_title']) ? $data['gv_block1_title'] : 'some default title',
  );
  
  $form['goto_view'] = array(
        '#markup' => '<div><a href="/">View the page</a></div>', // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  );
  
  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#weight' => 40,
  );

  $form['#redirect'] = ''; // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  
  $form['#submit'][0] = 'gv_pages_forms_submit'; // process all gv_pages forms with a single function
  $form['#validate'][0] = 'gv_pages_forms_validate';
  return $form;
}


/**
 * Custom form validating function for a submitted form data.
 */
function gv_pages_forms_validate($form, &$form_state) {
    
  foreach ($form_state['values'] as $key => $url) {
    if (preg_match('/.*_link.*_url.*/i', $key)) {
      $url = trim($url, '/');
      if (!$results = db_query("SELECT pid FROM {url_alias} WHERE (LOWER(alias) = LOWER('" . $url . "')) OR (LOWER(source) = LOWER('" . $url . "'))")->fetchField()) {
        if (!$results = db_query("SELECT path FROM {menu_router} WHERE (LOWER(path) = LOWER('" . $url . "'))")->fetchField()) {
          form_set_error($key, t('No such link on the site: ' . $url));
        }
      }
    }
  }
}


/**
 * Custom dispatching form sumbitting function for a submitted form data.
 */
function gv_pages_forms_submit($form, &$form_state) {
  gv_pages_process_form_data($form, $form_state);
  $form_state['redirect'] = $form['#redirect'];
  drupal_set_message(t('The changes have been saved.'));
}


/**
 * Custom helper form sumbitting function for a submitted form data.
 */
function gv_pages_process_form_data($form, $form_state) {
    
  $data = array();
  foreach ($form_state['values'] as $key => $value) {
    $pos = strpos($key, 'gv_');
    if ($pos !== false AND $pos == 0) {
      if (!is_array($value)) {
        $data[$key] = strip_tags($value);
      }
      else {
        $data[$key] = $value;
      }
    }
  }
 
  if (isset($_FILES['files'])) {
    $default_file_path = variable_get('file_public_path', conf_path() . '/files');
    $uploaddir = $_SERVER['DOCUMENT_ROOT'] . $default_file_path;

    foreach ($_FILES['files']['name'] as $var_name => $file_name) {
      $setToDelete = (isset($form_state['values']['del_' . $var_name]) AND $form_state['values']['del_' . $var_name]);
      if(!$file_name OR $setToDelete) {
        if ($setToDelete) {
            if ($form_state['values']['_' . $var_name]) {
              unlink($uploaddir . '/' . basename($form_state['values']['_' . $var_name]));
            }
            $data[$var_name] = '';
        }
        else {
          $data[$var_name] = isset($form_state['values']['_' . $var_name])?$form_state['values']['_' . $var_name]:''; // leave the old file
        }  
        continue;
      }

      $basename = basename($_FILES['files']['name'][$var_name]);
      move_uploaded_file($_FILES['files']['tmp_name'][$var_name], $uploaddir . '/' . $basename);
      $data[$var_name] = $default_file_path . '/' . $basename;
    }
  }
  variable_set($form['#form_id'], $data);
}


/**
 * Implements hook_theme().
 */
function gv_pages_theme($existing, $type, $theme, $path) {
  $path = drupal_get_path('module', 'gv_pages') . '/tpl';
  
  return array(
    'gv_pages_home' => array(
      'variables' => array('data' => null),
      'template' => 'gv_pages_home',
      'path' => $path,
    ),
  );
} 





/**
 * Implements hook_form_alter().
 *
 * @param array &$form
 *   Array with declared form.
 *
 * @param array &$form_state
 *   Array with current form state.
 *
 * @param string $form_id
 *   Form ID.
 *
 * @return void
 *   Return nothing.
 */
function gv_pages_form_alter(&$form, &$form_state, $form_id) {
  //dpm($form_id);  dpm($form);
  switch ($form_id) {
    case 'review_node_form':
      
      $rating_options = array('' => '- ' . t('Select a value') . ' -', '20' => 'Really Bad', '40' => 'Bad', '60' => 'OK', '80' => 'Good', '100' => 'Really Good');
      $weight = 8;
     
      $vote_keys = array('features', 'sound', 'rely', 'money', 'service');
      $votes = array();
      foreach ($vote_keys as $vote_key) {
        $form['rating_' . $vote_key] = array(
          '#type' => 'select',
          '#title' => t(drupal_ucfirst($vote_key) . ' Rating'),
          '#options' => $rating_options,
          '#default_value' => $rating_options[''],
          '#weight' => $weight++,
          '#required' => TRUE,
        );
      }
      
      $rating_recommend_options = $rating_options = array('' => '- ' . t('Select a value') . ' -', '100' => 'Yes', '0' => 'No');
      $form['rating_recommend'] = array(
          '#type' => 'select',
          '#title' => t('Would you recommend this VoIP provider'),
          '#options' => $rating_recommend_options,
          '#default_value' => $rating_recommend_options[''],
          '#weight' => $weight++,
          //'#required' => TRUE,
      );
      
      // Hide helper hidden field (for saving temporary serialized ratings data)
      $form['field_ratings_oprovider']['#access'] = FALSE;
      
      if(arg(1) == 'add') {
        // Add a review page.
        $providers['_none'] = t('- Select a value -');
        gv_misc_getProviders($providers);
        $providers[7] = t('OTHER SP');
        
        $form['field_ref_provider']['und']['#options'] = $providers;
        $form['field_ref_provider']['und']['#default_value'][0] = '_none';

        // Check if the review is added via a button on a provider's page.
        $provider_nid = NULL;
        if (isset($_GET['id'])) {
          $provider_nid = check_plain($_GET['id']);
          if(!isset($providers[$provider_nid])) {
            $provider_nid = NULL;
          }
        }

        if($provider_nid) {
          $provider_node = node_load($provider_nid);
          $provider_preview = '<div class="p-preview">' . render(node_view($provider_node, 'teaser')) . '</div>';
          $form['provider_preview'] = array(
              '#markup' => $provider_preview,
              '#weight' => -100,
          ); 
          //$form['field_ref_provider']['und']['#options'] = array($provider_nid => $providers[$provider->nid]);
          //$form['field_r_oprovider']['und'][0]['value']['#default_value'] = $provider_nid;
          $form['field_ref_provider']['und']['#default_value'][0] = $provider_nid;
          $form['field_ref_provider']['#access'] = FALSE;
          $form['field_r_oprovider']['#access'] = FALSE;
        }
      }
      else {
        // Edit a review page.
        
        if(!isset($form['field_ref_provider']['und']['#default_value'][0]) || $form['field_ref_provider']['und']['#default_value'][0] == '_none') {
          // If a provider has not been selected from a list,
          // then it has been set manually in the field field_r_oprovider
          
          $providers = array();
          gv_misc_getProviders($providers);
          $providers[7] = t('OTHER SP');
          
          $form['field_ref_provider']['und']['#options'] = $providers;
          $form['field_ref_provider']['und']['#default_value'][0] = 7;
          
          // Should we allow to a regular user to edit the name in the text field / reselect from the list?
          // Or once chosen it could not be changed by the user (for example, it could be changed only by an admin)?
          // Let's choose the second variant.
          global $user;
          if(!in_array('administrator', $user->roles)) {
            $form['field_ref_provider']['#access'] = FALSE;
            $form['field_r_oprovider']['#access'] = FALSE;  
            $form['other_provider_noedit'] = array(
              '#type' => 'item',
              '#title' => t('Your VoIP Service Provider') . ' (*)',
              '#markup' => '<div class="text">' . $form['field_r_oprovider']['und'][0]['value']['#default_value'] . '</div>',
              //'#weight' => -100,
            ); 
          }
          
          // Load saved votes from this node's field_ratings_oprovider
          $field_ratings_oprovider = unserialize($form['field_ratings_oprovider']['und'][0]['value']['#default_value']);
          foreach ($field_ratings_oprovider as $tag => $value) {
            $form['rating_' . $tag]['#default_value'] = $value;
          }
          
        }
        else {
          // A provider has been selected from a list.
          
          // Load saved votes for a provider of this review.
          $criteria = array(
            'entity_type' => 'node',
            'entity_id' => $form['field_ref_provider']['und']['#default_value'][0],
            'uid' => $form['uid']['#value'],
          );
          if ($votes = votingapi_select_votes($criteria)) {
            foreach ($votes as $vote) {
              $form['rating_' . $vote['tag']]['#default_value'] = $vote['value'];
            }
          }
          
          // Show preview of the provider (as a teaser) on the edit form.
          $provider_node = node_load($form['field_ref_provider']['und']['#default_value'][0]);
          $provider_preview = '<div class="p-preview">' . render(node_view($provider_node, 'teaser')) . '</div>';
          $form['provider_preview'] = array(
              '#markup' => $provider_preview,
              '#weight' => -100,
          ); 
          $form['field_ref_provider']['#access'] = FALSE;
          $form['field_r_oprovider']['#access'] = FALSE;
        }
      }
      
      $form['#validate'][] = 'gv_pages_validateForm_review';
      $form['#validate'][] = 'gv_pages_submitForm_review';
    break;
  }
}


/**
 * Custom validate of review type form.
 *
 * @param array &$form
 *   Array with declared form.
 *
 * @param array &$form_state
 *   Array with current form state.

 * @return void
 *   Return nothing.
 */
function gv_pages_validateForm_review(&$form, &$form_state) {
  // If field_ref_provider is choosen as OTHER SP, the field_r_oprovider should be set as well
  if ($form_state['values']['field_ref_provider']['und'][0]['target_id'] == 7 && !$form_state['values']['field_r_oprovider']['und'][0]['value']) {
    form_set_error('field_r_oprovider',t('Please write in the name of a Provider'));  
  }
  
  
  // dpm($form); dpm($form_state);
  // Current review data and uid for defining (see below) if the author of this review has already submitted a review for a selected provider.
  $author_uid = isset($form_state['values']['uid']) ? $form_state['values']['uid'] : NULL;
  $current_review_nid = isset($form_state['values']['nid']) ? $form_state['values']['nid'] : NULL;
  
  // If OTHER SP has been set.
  if($form_state['values']['field_ref_provider']['und'][0]['target_id'] == 7 && isset($form_state['values']['field_r_oprovider']['und'][0]['value']) && $form_state['values']['field_r_oprovider']['und'][0]['value']) {
    // Save votes to the temporary votes field.
    $vote_keys = array('features', 'sound', 'rely', 'money', 'service', 'recommend');
    $votes = array();
    foreach ($vote_keys as $vote_key) {
      if(isset($form_state['values']['rating_' . $vote_key])) {
        $votes[$vote_key] = $form_state['values']['rating_' . $vote_key];
      }
    }
    form_set_value($form['field_ratings_oprovider'], array('und' => array(0 => array('value' => serialize($votes)))), $form_state);
    
    // Check if author of this review has already submitted a review for a selected provider.
    dpm(gv_misc_userHasSubmittedReview(NULL, $author_uid, $form_state['values']['field_r_oprovider']['und'][0]['value'], $current_review_nid));
    if ($review = gv_misc_userHasSubmittedReview(NULL, $author_uid, $form_state['values']['field_r_oprovider']['und'][0]['value'], $current_review_nid)) {
      form_set_error('field_r_oprovider', t('You have already submitted a review for this provider') . ': ' . l($review->title, 'node/' . $review->nid) );
    }
  }
  else {
    // Or else reset the the temporary votes field.
    form_set_value($form['field_ratings_oprovider'], array('und' => array(0 => array('value' => ''))), $form_state);
    
    // Check if author of this review has already submitted a review for a selected provider.
    //dpm(gv_misc_userHasSubmittedReview($form_state['values']['field_ref_provider']['und'][0]['target_id'], $author_uid));
    if ($review = gv_misc_userHasSubmittedReview($form_state['values']['field_ref_provider']['und'][0]['target_id'], $author_uid, NULL, $current_review_nid)) {
      form_set_error('field_ref_provider', t('You have already submitted a review for this provider') . ': ' . l($review->title, 'node/' . $review->nid) );
    }
  }
}


/**
 * Custom additional submit of review type form.
 *
 * @param array &$form
 *   Array with declared form.
 *
 * @param array &$form_state
 *   Array with current form state.

 * @return void
 *   Return nothing.
 */
function gv_pages_submitForm_review(&$form, &$form_state) {
  
  // If a provider has been selected from the list
  // Save votes to the votes api tables for this provider.
  if(isset($form_state['values']['field_ref_provider']['und'][0]['target_id']) && $form_state['values']['field_ref_provider']['und'][0]['target_id'] != 7) {

    $vote_keys = array('features', 'sound', 'rely', 'money', 'service', 'recommend');
    $votes = array();

    $provider_nid = $form_state['values']['field_ref_provider']['und'][0]['target_id'];
      
    foreach ($vote_keys as $vote_key) {
      $votes[] = array(
        'tag' => $vote_key,
        'entity_type' => 'node',
        'entity_id' => $provider_nid,
        'value_type' => 'percent',
        'value' => $form_state['values']['rating_' . $vote_key],
        'uid' => $form_state['values']['uid'],
      );
    }
    votingapi_set_votes($votes);
  }
}


/**
 * Implements hook_node_presave().
 *
 * @return void
 *   Return nothing.
 */
function gv_pages_node_presave($node) {
  if ($node->type == 'review') {
    // If chosen OTHER SP (and dummy nid), replace a dummy nid with 0, 
    // as we don't want to associate this review with that dummy nid node, of course.
    // Or clear OTHER SP field.
    if ($node->field_ref_provider['und'][0]['target_id'] == 7) {
      $node->field_ref_provider['und'][0]['target_id'] = 0;
    }
    else {
      $node->field_r_oprovider['und'][0]['value'] = '';
    }
  }
}


/**
 * Implements hook_node_view().
 *
 * @return void
 *   Return nothing.
 */
function gv_pages_node_view($node, $view_mode) {
  switch ($node->type) {
    case 'review':
      // Show preview of the provider (as a teaser)
      if ($view_mode == 'full') {
        if(isset($node->field_ref_provider['und'][0]['target_id']) && $node->field_ref_provider['und'][0]['target_id']) {
          $provider_node = node_load($node->field_ref_provider['und'][0]['target_id']);
          $node->content['p_provider'] = node_view($provider_node, 'teaser');
        }
      }
      // Show data from field_r_oprovider, if is not set field_ref_provider
      if ( !isset($node->field_ref_provider['und'][0]['target_id']) && isset($node->field_r_oprovider['und'][0]['value']) ) {
        $node->content['field_r_oprovider']['#title'] = t('Your VoIP Service Provider') . ' (*)';
      }
      else {
        unset($node->content['field_r_oprovider']);
      }
      
      // Show voting results for this provider and user (author of this review).
      
      if (!empty($node->field_ratings_oprovider)) {
        $votes_simple_format = unserialize($node->field_ratings_oprovider['und'][0]['value']);
        // Rebuild the array to the votes api format
        foreach ($votes_simple_format as $tag => $value) {
          $votes[] = array('tag' => $tag, 'value' => $value);
        }
      }
      else {
        // Load saved votes for a provider of this review.
        $criteria = array(
          'entity_type' => 'node',
          'entity_id' => $node->field_ref_provider['und'][0]['target_id'],
          'uid' => $node->uid,
        );
        $votes = votingapi_select_votes($criteria);
      }
      gv_pages_addRatingsToNodeThemed($node, $votes);
      
    break;
    
    
    case 'provider':
      
      if ($view_mode == 'full') {
        // Add a "Add a review" to the Provider's page 
        // OR link to review of the current user if he has already submitted a review for this Provider.
        if (!$review = gv_misc_userHasSubmittedReview($node->nid)) {
          $node->content['add_review'] = drupal_get_form('gv_pages_addReviewButton_form', $node->nid);
        }
        else {
          $node->content['user_review'] = array(
              '#markup' => t('You have already submitted a review for this provider:') . ' ' . l('"' . $review->title . '"', 'node/' . $review->nid),
          );
        }
        
        // Load saved votes for a provider of this review.
        $criteria = array(
          'entity_type' => 'node',
          'entity_id' => $node->nid,
          'function' => 'average',
        );
        
        $votes = votingapi_select_results($criteria);
        dpm($votes);
        $criteria['function'] = 'count';
        $counts = votingapi_select_results($criteria);
        dpm($counts);
        gv_pages_addRatingsToNodeThemed($node, $votes, $counts);
      }
      
      
    break;
  
  }
}



/**
 * Implements hook_node_delete().
 *
 * @return void
 *   Return nothing.
 */
function gv_pages_node_delete($node) {
  switch ($node->type) {
    case 'review':
      // Delete vote of this user for this provider, if it exists.
      if (isset($node->field_ref_provider['und'][0]['target_id'])) {
        $criteria = array(
          'entity_type' => 'node',
          'entity_id' => $node->field_ref_provider['und'][0]['target_id'],
          'uid' => $node->uid,
        );
        votingapi_delete_votes(votingapi_select_votes($criteria));
        votingapi_recalculate_results('node', $node->field_ref_provider['und'][0]['target_id']);
      }
  }
}
      

/**
 * Append to a node (for a hook node_view) a themed set of rating votes.
 *
 * @return void
 *   Return nothing.
 */
function gv_pages_addRatingsToNodeThemed($node, $votes, $counts = NULL) {
  
  if ($votes) {
    $rating_titles = array('features' => t('Features rating'), 'sound' => t('Sound quality Rating'), 'service' => t('Customer service Rating'), 'service' => t('Customer service Rating'), 'money' => t('Value for Money Rating'), 'rely' => t('Reliability Rating'), 'recommend' => t('Would you recommend this VoIP provider'));
    $node->content['gv_ratings'] = array(
        '#markup' => '',
        //'#prefix' => '<div class="gv_votes">',
        //'#suffix' => '</div>',
    );

    foreach ($votes as $key => $vote) {
      if ($vote['tag'] == 'recommend') {
        $recommend_vote = $vote;
        continue;
      }
      $node->content['gv_ratings']['#markup'] .= '<div class="gv_vote"><div class="title">' . $rating_titles[$vote['tag']] . ':</div>' 
        // Using own theming function for fivestar (replicate of the original fivestar theme function).
        . theme('gv_misc_fivestar_static', array('rating' => $vote['value'], 'stars' => 5, 'tag' => $vote['tag'], 'widget' => array('name' => 'hearts', 'css' => 'hearts.css')))
        // Using the original fivestar theme function.
        //. theme('fivestar_static', array('rating' => $vote['value'], 'stars' => 5, 'tag' => $vote['tag'], 'widget' => array('name' => 'hearts', 'css' => 'hearts.css')))
        . (isset($counts[$key]['tag']) ? '<div class="gv_voters">' . t('Voters') . ': ' . $counts[$key]['value'] . '</div>' : '')
        . '</div>';
    }
    // Recommend vote.
    $node->content['gv_recommend'] = array(
        '#markup' => '<div class="title">' . $rating_titles['recommend'] . ':</div><div class="text">' . ($recommend_vote['value']?t('No'):t('Yes')) . '</div>',
    );
    
    // If case of using the original fivestar theme function there should be connected original fivestar's css
    /*
    $path = drupal_get_path('module', 'fivestar');
    drupal_add_css($path . '/css/fivestar.css');
    drupal_add_css($path . '/widgets/hearts/hearts.css');
    */
  }
}

/**
 * Implements hook_form().
 *
 * Button for submit a review for the current provider.
 * 
 * @return $form
 *   Return nothing.
 */
function gv_pages_addReviewButton_form($node, &$form_state, $provider_nid) {
  $form['id'] = array(
      '#type' => 'hidden',
      '#value' => $provider_nid,
  );
  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Add a review'),
  ); 
  //$form['#action'] = url('node/add/review', array('query' => array('id' => $provider_nid)));
  return $form;
}


/**
 * Implements hook_form_submit().
 *
 * Append nid to url and redirect to node/add/review via GET parameter.
 * 
 * @return $form
 *   Return nothing.
 */
function gv_pages_addReviewButton_form_submit(&$form, &$form_state) {
  drupal_goto('node/add/review', array('query' => array('id' => $form_state['values']['id'])));
}