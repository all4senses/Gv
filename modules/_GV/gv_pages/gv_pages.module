<?php

/**
 * @file
 * Module for building and managing site's pages.
 */

/**
 * Constants for ratins titles, etc.
 */
module_load_include('inc', 'gv_misc', 'inc/constants');


/**
 * Implements hook_menu().
 */
function gv_pages_menu() {

  $tags_admin_types = array('topics', 'articles', 'news', 'blog');
  foreach ($tags_admin_types as $tags_admin_type) {
    $items[$tags_admin_type . '/tags-admin'] = array(
      'title' => 'Admin tags ' . $tags_admin_type,
      'description' => 'Admin tags ' . $tags_admin_type,

//      'page callback' => 'gv_pages_buildEditTagsPage',
//      'page arguments' => array($tags_admin_type),
        
      'page callback' => 'drupal_get_form',
      'page arguments' => array('gv_pages_editTagsPage_form', $tags_admin_type),

      'access callback' => 'gv_misc_userIsAdmin',
      'type' => MENU_NORMAL_ITEM,
    );
  }
  
  $items['admin/content/quote-requests'] = array(
    'title' => 'Quote Requests',
    'description' => 'Quote Requests, including captured but not submitted users data',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gv_pages_quoteRequestsList_form'),
    'access callback' => 'gv_misc_userIsAdmin',
    'type' => MENU_NORMAL_ITEM,
  );
  
  $items['admin/content/track-report'] = array(
    'title' => 'Track clicks report',
    'description' => 'Track clicks report',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gv_pages_trackClickReport_form'),
    'access callback' => 'gv_misc_userIsAdmin',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['home'] = array(
    'title' => 'Home page',
    //'description' => 'Home page',
    //'page callback' => 'drupal_get_form',
    'page callback' => 'gv_pages_showPage',
    'page arguments' => array('gv_pages_home'/*$name*/, 'via_function'/* $call_type: direct_theme OR via_function */, 'gv_pages_buildHome' /*$build_function*/), //array(1),
    //'access callback' => 'gv_pages_access',
    //'access arguments' => array('home'),
    'access arguments' => array('access content'),  
    'type' => MENU_CALLBACK,
  );
  
  
  /*
  // Deprecated.
  $items['voip-speed-test'] = array(
    'title' => 'Home page',
    'page callback' => 'gv_pages_speedTestPage',
    'access arguments' => array('access content'),  
    'type' => MENU_CALLBACK,
  );
  */
  
  /*
  $items['news-topics'] = array(
    'title' => 'News topics',
    'page callback' => 'gv_pages_buildNewsTopics',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  ); 
  
  $items['articles/tags'] = array(
    //'title' => 'Topics page',
    'page callback' => 'gv_pages_buildTopicsPage',
    'page arguments' => array('articles'),//array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  ); 
  $items['blog/tags'] = array(
    //'title' => 'Topics page',
    'page callback' => 'gv_pages_buildTopicsPage',
    'page arguments' => array('blog'),//array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
  $items['news/tags'] = array(
    //'title' => 'Topics page',
    'page callback' => 'gv_pages_buildTopicsPage',
    'page arguments' => array('news'),//array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  ); 
  */
  return $items;
}


/**
 * Track clicks report page.
 */
function gv_pages_trackClickReport_form($form, &$form_state) {
  
  //$args = arg();
  //dpm($args);
  
//  $form['emails'] = array(
//    '#type' => 'markup',
//    '#markup' => '<div class="type">' . l('Quote requests emails only', 'admin/content/quote-requests/emails') . ' - ' . l('Reviews emails', 'admin/content/quote-requests/reviews-emails') . ' - ' . l('Disqus emails', 'admin/content/quote-requests/disqus-emails') . ' - ' . l('Newsletter emails', 'admin/content/quote-requests/newsletter-emails') . '</div>'
//      . '<br/><div><strong>All Quote Requests data.</strong></div><br/><div class="email-captured">' . l('Check and email captured but not submitted requests', 'admin/content/quote-requests', array('query' => array('op' => 'email-captured'))) . '</div>',
//  );
  
  $sort = @$_GET['sort'] ? $_GET['sort'] : 'timestamp';
  
  $query = '';
  foreach ($_GET as $key => $value) {
    if ($key != 'q' && $key != 'sort' && $key != 'order') {
      $query .= ($query ? '&' : '?') . $key . '=' . $value;
    }
  }

              
  $sort_options = array('timestamp' => 'Click date', 'type' => 'Object type', 'object_name' => 'Object name', 
      'url' => 'Url', 'referer' => 'Referrer', 'click_page' => 'Click page', 'ip' => 'IP', 'uname' => 'User name');
  $start_url = $_SERVER['REDIRECT_URL'] . $query . ($query ? '&' : '?');
  
  $sort_exposed = '';
  $order = 'DESC';
  foreach($sort_options as $sort_option => $sort_title) {
    $order_marker = '';
    if ($sort_option == @$_GET['sort']) {
      if (!@$_GET['order'] || $_GET['order'] == 'DESC') {
        $current_order = 'ASC';
        $order = 'ASC';
        $order_marker = '&darr;';
      }
      else {
        $current_order = 'DESC';
        $order = 'DESC';
        $order_marker = '&uarr;';
      }
    }
    else {
      $current_order = 'DESC';
    }
    //$sort_exposed .= ' | <a href="' . $start_url . 'sort=' . $sort_option . '&order=' . $current_order . '">' . $sort_title . $order_marker . '</a>';
    $sort_links[$sort_option] = '<a href="' . $start_url . 'sort=' . $sort_option . '&order=' . $current_order . '">' . $sort_title . ' ' . $order_marker . '</a>';
  }
  
  
  $filter_by = array('provider_link' => 'Provider link', 'video_click' => 'Video link', 'all' => 'Show all');
  $filter_by_db = array('provider_link' => array('type', 'provider_link'), 'video_click' => array('type', 'video_click'), 'all' => NULL);
  $current_filter = isset($filter_by[@$_GET['filter']]) ? $_GET['filter'] : 'all';
  
  $providers['_none'] = '- All providers -';
  //gv_misc_getProviders($providers);
  gv_misc_getProvidersKeyedByName($providers);
  //dpm($providers);
  //dpm($_GET);
  $selected_provider = (!empty($_GET['provider']) && !empty($providers[$_GET['provider']])) ? $_GET['provider'] : NULL;
  
  $query = db_select('gv_track_links', 'tl')->extend('PagerDefault');
  $query->fields('tl');
  
  
  if (@$filter_by_db[$current_filter]) {
    $filter_field = $filter_by_db[$current_filter][0];
    $filter_value = $filter_by_db[$current_filter][1];
    if ($filter_field == 'type' && $filter_value == 'provider_link') {
      // add an alias.
      $or = db_or()->condition('type', 'provider_link')
                   ->condition('type', 'provider');
      $query->condition($or);
    }
    else {
      $query->condition($filter_field, $filter_value);
    }
  }
  
  if ($selected_provider) {
    $query->condition('object_name', '%%' . $selected_provider . '%%', 'LIKE');
  }
  
  $results = 
    $query
      ->orderBy($sort, $order)
      ->limit(20)
      ->execute();
  
  
  $filter_temp_get = $_GET;
  unset($filter_temp_get['q']);
  
  
  $form['header-block'] = array(
    '#type' => 'container',
  );
  
  $form['header-block']['filter'] = array(
    '#type' => 'radios',
    '#title' => t('Filter by: '),
    '#default_value' => $current_filter,
    '#options' => $filter_by,
    '#attributes' =>  array('class' =>array('filter_by'), 'onClick' => array('javascript:this.form.submit();')),
  );

  $form['header-block']['provider'] = array(
    '#type' => 'select',
    '#title' => 'Provider',
    '#default_value' => $selected_provider ? $providers[$selected_provider] : '_none',
    '#options' => $providers,
    '#attributes' =>  array('class' =>array('provider'), 'onChange' => array('javascript:this.form.submit();')),
  );
  
  
  $form['header-block']['from'] = array(
    '#type' => 'container',
  );
      $form['header-block']['from']['date_from'] = array(
        '#type' => 'textfield',
        '#title' => 'Date from:',
        '#default_value' => NULL,
      );
      $form['header-block']['from']['time_from'] = array(
        '#type' => 'textfield',
        '#title' => 'Time from:',
        '#default_value' => NULL,
      );
  $form['header-block']['to'] = array(
    '#type' => 'container',
  );
      $form['header-block']['to']['date_to'] = array(
        '#type' => 'textfield',
        '#title' => 'Date to:',
        '#default_value' => NULL,
      );
      $form['header-block']['to']['time_to'] = array(
        '#type' => 'textfield',
        '#title' => 'Time to:',
        '#default_value' => NULL,
      );
    
  
  $form['header-block']['actions'] = array(
    '#type' => 'actions',
    //'#weight' => 1,
  );
  $form['header-block']['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
  ); 
  
  
  $form['table_start'] = array(
    '#type' => 'markup',
    '#markup' => '<table class="views-table track-links"><thead><tr>
        <th>Num</th>
        <th class="date">' . $sort_links['timestamp'] . '</th>
        <th>' . $sort_links['type'] . '</th>
        <th class="name">' . $sort_links['object_name'] . '</th>
        <th class="url">' . $sort_links['url'] . '</th>
        <th class="referer">' . $sort_links['referer'] . '</th>
        <th class="page">' . $sort_links['click_page'] . '</th>
        <th>' . $sort_links['ip'] . '</th>
        <th>' . $sort_links['uname'] . '</th>'
       //.'<th class="data">Data</th>'
       .'<th>Operations</th>
      </tr></thead><tbody>',
  );
  
  
    
  $tr_class = 'even';
  foreach ($results as $key => $result) {
    
    $data = '';
    $result_data = unserialize($result->data);
    if (!empty($result_data)) {
      foreach ($result_data as $title => $value) {
        $data .= "<div>$title: $value</div>";
      }
    }

    $form['item_' . ($key + 1) . 'a'] = array(
      '#markup' => '<tr class="'. ($tr_class == 'odd' ? $tr_class = 'even' : $tr_class = 'odd') . '">
        <td>' . ($key + 1) . '</td>
        <td class="date">' . date('Y-m-d, H:i:s', $result->timestamp) . '</td>
        <td>' . $result->type . '</td>
        <td class="name">' . $result->object_name . '</td>
        <td' . ($result->url ? ' class="url"' : '') . '>' . $result->url . '</td>
        <td' . (($result->referer || !empty($result_data['referer'])) ? ' class="referer"' : '') . '>' . ($result->referer ? $result->referer : (!empty($result_data['referer']) ? $result_data['referer'] : '') ) . '</td>
        <td' . (($result->click_page || !empty($result_data['click_on_page'])) ? ' class="page"' : '') . '>' . ($result->click_page ? $result->click_page : (!empty($result_data['click_on_page']) ? $result_data['click_on_page'] : '') ) . '</td>
        <td>' . ($result->ip ? $result->ip : (!empty($result_data['user']['hostname']) ? $result_data['user']['hostname'] : '') ) . '</td>
        <td>' . ($result->uname ? $result->uname : (!empty($result_data['user']['name']) ? $result_data['user']['name'] : '') ) . '</td>',
    );
    
    
    
    
//    $delete_url = $_GET + array('op' => 'delete', 'timestamp' => $result->timestamp);
//    unset($delete_url['q']);
    
    
//    $filter_by_track_id_url = $_GET + array('op' => 'filter_by_track_id', 'track_id' => $result->track_id);
//    unset($filter_by_track_id_url['q']);
    
    $filter_by_provider_name_url = $filter_temp_get + array('provider' => urlencode(str_replace(' Video Review', '', $result->object_name)));
    
    $form['item_' . ($key + 1) . 'c'] = array(
      '#markup' => //'<td class="data">' . $data . '</td>' .
        //'<td>' . l('Delete', $_GET['q'], array('query' => $delete_url)) . '</td>' .
        '<td>' . l('Filter by this provider', $_GET['q'], array('query' => $filter_by_provider_name_url)) . '</td>' .
        '</tr>',
    );
  }

  $form['table_close'] = array(
    '#type' => 'markup',
    '#markup' => '</tbody></table></div>',
  );
  
  $form['pager'] = array(
    '#theme' => 'pager',
    //'#weight' => 5,
  );
  
  
  
  // Datepicker.

  $module_path = drupal_get_path('module', 'gv_pages');
  $form['#attached']['css'][] = $module_path . '/css/gv_pages.css';
  $form['#attached']['js'][] = $module_path . '/js/gv_track_links_datepicker.js';
  
  $form['#attached']['css'][] = 'sites/all/libraries/jquery.plugins/timepicker/jquery.timepicker.css';
  $form['#attached']['css'][] = 'sites/all/libraries/jquery.plugins/timepicker/lib/base.css';
  $form['#attached']['js'][] = 'sites/all/libraries/jquery.plugins/timepicker/jquery.timepicker.min.js';
  $form['#attached']['js'][] = 'sites/all/libraries/jquery.plugins/timepicker/lib/base.js';
  
          
  $form['#attached']['library'][] = array('system', 'ui.datepicker');
  
  
  //$form['actions']['submit']['#submit'][] = 'gv_pages_trackClickReport_formSubmit';
  //$form['#submit'][] = 'gv_pages_trackClickReport_formSubmit';
  $form['#validate'][] = 'gv_pages_trackClickReport_formValidate';
  
  
  return $form;
}


/**
 * Custom submit of a form for a Quote Requests List page.
 *
 * Provides a filtering functionality.
 * 
 * @param array &$form
 *   Array with declared form.
 *
 * @param array &$form_state
 *   Array with current form state.

 * @return void
 *   Return nothing.
 */
function gv_pages_trackClickReport_formValidate(&$form, &$form_state) {

  dpm($form_state['values']);
  $get = $_GET;
  unset($get['q']);
  if (isset($get['provider'])) {
    unset($get['provider']);
  }
  if (isset($get['date_from'])) {
    unset($get['date_from']);
  }
  if (isset($get['date_to'])) {
    unset($get['date_to']);
  }
  
  $get['filter'] = $form_state['values']['filter'];
  
  if ($form_state['values']['provider'] != '_none' && $form_state['values']['provider'] != '') {
    $get['provider'] = $form_state['values']['provider'];
  }
  
  if (!empty($form_state['values']['date_from'])) {
    $from_str = $form_state['values']['date_from'];
    dpm(strtotime($from_str));
    if (!empty($form_state['values']['time_from'])) {
      $from_str .= 'T' . $form_state['values']['time_from'];
      dpm(strtotime($form_state['values']['time_from']));
    }
    
    $from_str = str_replace('/', '-', $from_str);
    dpm($from_str);
    dpm(strtotime($from_str));
    $get['date_from'] = strtotime($from_str);
    
    dpm(date('D, d M Y H:i:s', $get['date_from']));
  }
  
  drupal_goto($_GET['q'], array('query' => $get));
}


/**
 * Ookla Speedtest page.
 * Deprecated! Used separated template of preface type: node--preface--voip-speed-test.tpl Look at template.php
 */
function gv_pages_speedTestPage_____deprecated() {
  
  drupal_set_title('VoIP Speed Test');
  
  $path_to_lib = 'sites/all/libraries/ookla/';
  //drupal_add_js($path_to_lib . 'swfobject.js');
  drupal_add_js($path_to_lib . 'browserdetect.js');
  //drupal_add_js($path_to_lib . 'deployJava.js');
  //drupal_add_js($path_to_lib . 'functions.js');
  
  $path_to_custom_js = drupal_get_path('module', 'gv_pages') . '/js/';
  drupal_add_js($path_to_custom_js . 'gv_speedtest_page.js');
  
  
// Clear Drupal way. Doesn't work.
/*
$out = '  
<div id="abovebefore">
  <!-- ANYTHING PLACED IN THIS DIV WILL SHOW UP ABOVE THE LINE QUALITY TEST BUT DISAPPEAR AFTER IT COMPLETES -->
  Edit index.html to change or remove this example content that will <strong>disappear after</strong> the test is run once.
</div>

<div id="aboveafter" style="display: none;">
  <!-- ANYTHING PLACED IN THIS DIV WILL SHOW UP ABOVE THE LINE QUALITY TEST AFTER IT COMPLETES -->
  This content will <strong>not appear until after</strong> the test is run once. Edit index.html to change or remove it.
</div>

<br/>

<div id="linequalitytest">
  The Ookla Line Quality Test requires at least version 8 of Flash. <a href="http://get.adobe.com/flashplayer/">Please update your client</a>.
</div>

          
          
<div id="speed"></div>
<div id="javaerror" style="display: none;">
   <br/>The Ookla Line Quality Test requires Java. <a href="javascript:deployJava.installLatestJRE();">Please update your client.</a><br/><br/>
</div>


          
          
          
<applet code="VoipApplet.class" archive="/sites/all/libraries/ookla/LQApplet.jar?v=1.1" width="1" height="1" mayscript id="VoipApplet" name="VoipApplet">
	<param name="bgcolor" value="ffffff">
	<param name="packetlosslength" value="100">
	<param name="tcpport" value="5060">
	<param name="udpport" value="5060">
	<param name="latencylength" value="10">
	<param name="latencypause" value="20">
	<param name="packetlosspause" value="20">
</applet>

<br/>

<div id="belowbefore">
<!-- ANYTHING PLACED IN THIS DIV WILL SHOW UP BELOW THE LINE QUALITY TEST BUT DISAPPEAR AFTER IT COMPLETES -->
This content will <strong>disappear after</strong> the test is run once. Edit index.html to change or remove it.
<br/><br/>
If you are having trouble getting things working as expected, then please see our <a href="http://wiki.ookla.com" target="_blank">documentation</a>.

</div>

<div id="belowafter" style="display: none;">
<!-- ANYTHING PLACED IN THIS DIV WILL SHOW UP BELOW THE LINE QUALITY TEST AFTER IT COMPLETES -->
Edit index.html to change or remove this example content that will <strong>not appear until after</strong> the test is run once.
</div>

';
*/


// Original.
/*
$out = '
<script type="text/javascript" src="/sites/all/libraries/ookla/swfobject.js"></script>
<script type="text/javascript" src="/sites/all/libraries/ookla/browserdetect.js"></script>
<script type="text/javascript" src="/sites/all/libraries/ookla/deployJava.js"></script>
<script type="text/javascript" src="/sites/all/libraries/ookla/functions.js"></script>

<script language="JavaScript">
<!--
function toJava(jsmethod,args) {
	var e = document.getElementById("VoipApplet");
	if (e) {
		e.fromJS(jsmethod,args);
	}
}
function fromJava(jsmethod,args) {
	setTimeout("flashCall(\'" + jsmethod + "\', \'" + args + "\')", 100);
}
function flashCall(jsmethod, args) {
	var e = document.getElementById("flashtest");
	if (e) {
		e.fromJS(jsmethod, args);
	}
}
//-->
</script>


<div id="abovebefore">
<!-- ANYTHING PLACED IN THIS DIV WILL SHOW UP ABOVE THE LINE QUALITY TEST BUT DISAPPEAR AFTER IT COMPLETES -->
Edit index.html to change or remove this example content that will <strong>disappear after</strong> the test is run once.
</div>

<div id="aboveafter" style="display: none;">
<!-- ANYTHING PLACED IN THIS DIV WILL SHOW UP ABOVE THE LINE QUALITY TEST AFTER IT COMPLETES -->
This content will <strong>not appear until after</strong> the test is run once. Edit index.html to change or remove it.
</div>

<br/>

<div id="linequalitytest">
The Ookla Line Quality Test requires at least version 8 of Flash. <a href="http://get.adobe.com/flashplayer/">Please update your client</a>.
</div>
<script type="text/javascript">
	var flashvars = {};
	var params = {
		quality: "high",
		bgcolor: "#ffffff",
		allowScriptAccess: "always"
	};
	var attributes = {
		id: "flashtest",
		name: "flashtest"
	};
	swfobject.embedSWF("/sites/all/libraries/ookla/linequalitytest.swf?v=2.1.7", "linequalitytest", "640", "400", "8.0.0", "/sites/all/libraries/ookla/expressInstall.swf", flashvars, params, attributes);
</script>
<div id="speed"></div>
<div id="javaerror" style="display: none;"><br/>The Ookla Line Quality Test requires Java. <a href="javascript:deployJava.installLatestJRE();">Please update your client.</a><br/><br/></div>

<script type="text/javascript">
     if ((BrowserDetect.browser != "Safari") && (BrowserDetect.browser != "Opera")) {
          if (deployJava.getJREs() == "") {
               var javaerror = document.getElementById("javaerror");
                  if (javaerror) {
                        javaerror.style.display = "block";
                  }
             }
        }
</script>

<applet code="VoipApplet.class" archive="/sites/all/libraries/ookla/LQApplet.jar?v=1.1" width="1" height="1" mayscript id="VoipApplet" name="VoipApplet">
	<param name="bgcolor" value="ffffff">
	<param name="packetlosslength" value="100">
	<param name="tcpport" value="5060">
	<param name="udpport" value="5060">
	<param name="latencylength" value="10">
	<param name="latencypause" value="20">
	<param name="packetlosspause" value="20">
</applet>

<br/>

<div id="belowbefore">
<!-- ANYTHING PLACED IN THIS DIV WILL SHOW UP BELOW THE LINE QUALITY TEST BUT DISAPPEAR AFTER IT COMPLETES -->
This content will <strong>disappear after</strong> the test is run once. Edit index.html to change or remove it.
<br/><br/>
If you are having trouble getting things working as expected, then please see our <a href="http://wiki.ookla.com" target="_blank">documentation</a>.

</div>

<div id="belowafter" style="display: none;">
<!-- ANYTHING PLACED IN THIS DIV WILL SHOW UP BELOW THE LINE QUALITY TEST AFTER IT COMPLETES -->
Edit index.html to change or remove this example content that will <strong>not appear until after</strong> the test is run once.
</div>
';
*/
  
  
$out = '
<script type="text/javascript" src="/sites/all/libraries/ookla/swfobject.js"></script>
<script type="text/javascript" src="/sites/all/libraries/ookla/deployJava.js"></script>
<script type="text/javascript" src="/sites/all/libraries/ookla/functions.js"></script>

<script language="JavaScript">

function toJava(jsmethod,args) {
	var e = document.getElementById("VoipApplet");
	if (e) {
		e.fromJS(jsmethod,args);
	}
}
function fromJava(jsmethod,args) {
	setTimeout("flashCall(\'" + jsmethod + "\', \'" + args + "\')", 100);
}
function flashCall(jsmethod, args) {
	var e = document.getElementById("flashtest");
	if (e) {
		e.fromJS(jsmethod, args);
	}
}

</script>


<div id="abovebefore">
<!-- ANYTHING PLACED IN THIS DIV WILL SHOW UP ABOVE THE LINE QUALITY TEST BUT DISAPPEAR AFTER IT COMPLETES -->
Edit index.html to change or remove this example content that will <strong>disappear after</strong> the test is run once.
</div>

<div id="aboveafter" style="display: none;">
<!-- ANYTHING PLACED IN THIS DIV WILL SHOW UP ABOVE THE LINE QUALITY TEST AFTER IT COMPLETES -->
This content will <strong>not appear until after</strong> the test is run once. Edit index.html to change or remove it.
</div>

<br/>

<div id="linequalitytest">
The Ookla Line Quality Test requires at least version 8 of Flash. <a href="http://get.adobe.com/flashplayer/">Please update your client</a>.
</div>


<div id="speed"></div>
<div id="javaerror" style="display: none;"><br/>The Ookla Line Quality Test requires Java. <a href="javascript:deployJava.installLatestJRE();">Please update your client.</a><br/><br/></div>



<applet code="VoipApplet.class" archive="/sites/all/libraries/ookla/LQApplet.jar?v=1.1" width="1" height="1" mayscript id="VoipApplet" name="VoipApplet">
	<param name="bgcolor" value="ffffff">
	<param name="packetlosslength" value="100">
	<param name="tcpport" value="5060">
	<param name="udpport" value="5060">
	<param name="latencylength" value="10">
	<param name="latencypause" value="20">
	<param name="packetlosspause" value="20">
</applet>

<br/>

<div id="belowbefore">
<!-- ANYTHING PLACED IN THIS DIV WILL SHOW UP BELOW THE LINE QUALITY TEST BUT DISAPPEAR AFTER IT COMPLETES -->
This content will <strong>disappear after</strong> the test is run once. Edit index.html to change or remove it.
<br/><br/>
If you are having trouble getting things working as expected, then please see our <a href="http://wiki.ookla.com" target="_blank">documentation</a>.

</div>

<div id="belowafter" style="display: none;">
<!-- ANYTHING PLACED IN THIS DIV WILL SHOW UP BELOW THE LINE QUALITY TEST AFTER IT COMPLETES -->
Edit index.html to change or remove this example content that will <strong>not appear until after</strong> the test is run once.
</div>
';



  return $out;  
}


/**
 * A form for a Quote Requests data page, including not submitted, but captured data.
 */
function gv_pages_quoteRequestsList_form($form, &$form_state) {
  
  //$args = arg();
  //dpm($args);
    
  // Show newsletter emails
  if (arg(3) == 'newsletter-emails') {
    
    $query = db_select('gv_emails_subscribed', 'e')
          ->fields('e', array('email'));
    //$query->condition('e.source', NULL);
    $email = $query->execute()->fetchField();

    $results = $query->execute();

    $emails = '<br/><div><strong>Newsletter emails.</strong></div><br/>';
    
    $count = NULL;
    $all_emails = array();
    foreach ($results as $result) {
      $all_emails[] = $result->email;
      $emails .= '<div>' . $result->email . '</div>';
      $count++;

    }
    $emails .= '<br/><div><strong>Amount of emails:</strong> ' . $count . '</div>';
    $emails .= '<br/><div style="width: 1100px;"><strong>All emails separated by commas:</strong><br/> ' . implode(', ', $all_emails) . '</div>';
  

    $form['emails'] = array(
      '#type' => 'markup',
      '#markup' => '<div class="type">' . l('All Quote requests data', 'admin/content/quote-requests') . ' - ' . l('Quote requests emails only', 'admin/content/quote-requests/emails') .  ' - ' . l('Reviews emails', 'admin/content/quote-requests/reviews-emails') . ' - ' . l('Disqus emails', 'admin/content/quote-requests/disqus-emails') . '</div><br/>' . $emails,
    );
    
    return $form;
  }
  // Show emails only.
  elseif (arg(3) == 'emails') {
    
    // Requests emails only.
    
    $query = db_select('gv_quote_requests', 'qr'); //->extend('PagerDefault');
    $query->fields('qr', array(/*'data', */'email_presented', 'timestamp'));
    $query->condition('qr.email_presented', '0', '!=');
    $query->condition('qr.email_presented', '', '!=');
    $query->isNotNull('qr.email_presented');

    $ucaptureds = 
      $query
        //->orderBy($sort, $order)
        //->limit(20)
        ->execute();

    $emails = '<br/><div><strong>Quote requests emails only.</strong></div><br/>';
//    foreach ($ucaptureds as $ucaptured) {
//      $data = unserialize($ucaptured->data);
//      $emails .= '<div>' . $data['Email'] . '</div>';
//    }
    
    
    
    $count = NULL;
    $all_emails = array();
    foreach ($ucaptureds as $ucaptured) {
      //$data = unserialize($ucaptured->data);
      
//      if (in_array($data['Email'], $all_emails) || !strpos($data['Email'], '@') || strpos($data['Email'], 'test@') !== FALSE || strpos($data['Email'], '@test') !== FALSE) {
//        continue;
//      }
      if (in_array($ucaptured->email_presented, $all_emails) || !strpos($ucaptured->email_presented, '@') || strpos($ucaptured->email_presented, 'getvoip.') !== FALSE || strpos($ucaptured->email_presented, 'test@') !== FALSE || strpos($ucaptured->email_presented, '@test') !== FALSE) {
        continue;
      }
      $all_emails[] = $ucaptured->email_presented;
      $emails .= '<div>' . $ucaptured->email_presented . '</div>';
      $count++;

    }
    $emails .= '<br/><div><strong>Amount of emails:</strong> ' . $count . '</div>';
    $emails .= '<br/><div style="width: 1100px;"><strong>All emails separated by commas:</strong><br/> ' . implode(', ', $all_emails) . '</div>';
  

    $form['emails'] = array(
      '#type' => 'markup',
      '#markup' => '<div class="type">' . l('All Quote requests data', 'admin/content/quote-requests') . ' - ' . l('Reviews emails', 'admin/content/quote-requests/reviews-emails') . ' - ' . l('Disqus emails', 'admin/content/quote-requests/disqus-emails') . ' - ' . l('Newsletter emails', 'admin/content/quote-requests/newsletter-emails') . '</div><br/>' . $emails,
    );
    
    return $form;
  }
  elseif (arg(3) == 'reviews-emails') {
    // Show reviews emails.
    $query = db_select('field_data_field_r_email', 're'); //->extend('PagerDefault');
    $query->fields('re', array('field_r_email_value'));
    
    $results = 
      $query
        //->orderBy($sort, $order)
        //->limit(20)
        ->execute();

    $emails = '<br/><div><strong>Reviews emails.</strong></div><br/>';
//    foreach ($ucaptureds as $ucaptured) {
//      $data = unserialize($ucaptured->data);
//      $emails .= '<div>' . $data['Email'] . '</div>';
//    }
    
    
    
    $count = NULL;
    $all_emails = array();
    foreach ($results as $result) {
      //$data = unserialize($ucaptured->data);
      
//      if (in_array($data['Email'], $all_emails) || !strpos($data['Email'], '@') || strpos($data['Email'], 'test@') !== FALSE || strpos($data['Email'], '@test') !== FALSE) {
//        continue;
//      }
      if (in_array($result->field_r_email_value, $all_emails) || !strpos($result->field_r_email_value, '@') || strpos($result->field_r_email_value, 'getvoip.') !== FALSE || strpos($result->field_r_email_value, 'test') !== FALSE || strpos($result->field_r_email_value, 'ruben') !== FALSE || strpos($result->field_r_email_value, 'alexxhome') !== FALSE || strpos($result->field_r_email_value, 'all4senses') !== FALSE) {
        continue;
      }
      $all_emails[] = $result->field_r_email_value;
      $emails .= '<div>' . $result->field_r_email_value . '</div>';
      $count++;

    }
    $emails .= '<br/><div><strong>Amount of emails:</strong> ' . $count . '</div>';
    $emails .= '<br/><div style="width: 1100px;"><strong>All emails separated by commas:</strong><br/> ' . implode(', ', $all_emails) . '</div>';
  

    $form['emails'] = array(
      '#type' => 'markup',
      '#markup' => '<div class="type">' . l('All Quote requests data', 'admin/content/quote-requests') . ' - ' . l('Quote requests emails only', 'admin/content/quote-requests/emails') . ' - ' . l('Disqus emails', 'admin/content/quote-requests/disqus-emails') . ' - ' . l('Newsletter emails', 'admin/content/quote-requests/newsletter-emails') . '</div><br/>' . $emails,
    );
    
    return $form;
  }
  elseif (arg(3) == 'disqus-emails') {
    // Show Disqus emails.

    $gv_disqus_users = unserialize(variable_get('gv_disqus_users', serialize(array())));
    
    $emails = '<br/><div><strong>Disqus emails.</strong></div><br/>';

    $count = NULL;
    $all_emails = array();
    foreach ($gv_disqus_users as $disqus_user) {
      $emails .= '<div>' . $disqus_user['email'] . '</div>';
      $all_emails[] = $disqus_user['email'];
      $count++;
    }
    $emails .= '<br/><div><strong>Amount of emails:</strong> ' . $count . '</div>';
    $emails .= '<br/><div style="width: 1100px;"><strong>All emails separated by commas:</strong><br/> ' . implode(', ', $all_emails) . '</div>';
  

    $form['emails'] = array(
      '#type' => 'markup',
      '#markup' => '<div class="type">' . l('All Quote requests data', 'admin/content/quote-requests') . ' - ' . l('Quote requests emails only', 'admin/content/quote-requests/emails')  . ' - ' . l('Reviews emails', 'admin/content/quote-requests/reviews-emails') . ' - ' . l('Newsletter emails', 'admin/content/quote-requests/newsletter-emails') . '</div><br/>' . $emails,
    );
    
    return $form;
  }
  
  
  
  
  // All Quote Requests Data.
  if (@$_GET['op'] == 'email-captured') {
    
    
    // Check for new captured but not sent data with emails in db, more than 1 hour old

    $query = db_select('gv_quote_requests', 'qr')
      ->fields('qr', array('data', 'ip', 'timestamp'));
    $query->condition('qr.status', 0);
    $query->condition('qr.checked', 0);
    
    
    //$query->condition('qr.email_presented', 1);
    
    $query->condition('qr.email_presented', '0', '!=');
    $query->condition('qr.email_presented', '', '!=');
    $query->isNotNull('qr.email_presented');
    
    $current_time = time();
    $query->condition('qr.timestamp', $current_time - 3600, '<'); // 1 hour old
    $not_sents = $query->execute();

    $count_emailed = 0;
    foreach ($not_sents as $not_sent) {
      
      $count_emailed++;
      
      $ucaptured = unserialize($not_sent->data);

      // Send email.
      $ucaptured_data = gv_misc_setUcapturedVariable(NULL, $ucaptured, TRUE);
      $ucaptured_data += array(
        'User IP' => $not_sent->ip,
        'Start Submission Time' => date('Y-m-d, H:i:s', $not_sent->timestamp),
      );

      $params['ucaptured_data'] = $ucaptured_data;

      global $language;
      // Normal send
      drupal_mail('gv_misc', 'request_quote_ucaptured_data', 'leads@getvoip.com', $language->language, $params);
      // Test letter to the root
      drupal_mail('gv_misc', 'request_quote_ucaptured_data', 'all4senses@gmail.com', $language->language, $params);
      
      // Update a status in DB.
      $result = db_update('gv_quote_requests')
        ->fields(array(
          'status' => 1, // Unsubmitted, sent.
          'checked' => 1, // Reviewed, because is sent.
        ))
        ->condition('timestamp', $not_sent->timestamp)
        ->execute();

    } // foreach ($not_sents as $not_sent) {

    
    
    
//    $result = db_delete('gv_quote_requests')
//      ->condition('timestamp', $_GET['timestamp'])
//      ->execute();
//    
//    if ($result) {
//      drupal_set_message('The data row with the timestamp "' . date('Y-m-d, H:i:s', $_GET['timestamp']) . '" has been deleted.');
//    }
//    else {
//      drupal_set_message('The data row with the timestamp "' . date('Y-m-d, H:i:s', $_GET['timestamp']) . '" has not been found in the database.', 'warning');
//    }
    
    drupal_set_message($count_emailed . ' captured requests have been found and emailed!', 'warning');
    
    unset($_GET['q'], $_GET['op']);
    drupal_goto(ltrim($_SERVER['REDIRECT_URL'], '/'), array('query' => $_GET));
  }
  elseif (@$_GET['op'] == 'delete' && @$_GET['timestamp']) {
    
    $result = db_delete('gv_quote_requests')
      ->condition('timestamp', $_GET['timestamp'])
      ->execute();
    
    if ($result) {
      drupal_set_message('The data row with the timestamp "' . date('Y-m-d, H:i:s', $_GET['timestamp']) . '" has been deleted.');
    }
    else {
      drupal_set_message('The data row with the timestamp "' . date('Y-m-d, H:i:s', $_GET['timestamp']) . '" has not been found in the database.', 'warning');
    }
    
    unset($_GET['q'], $_GET['op'], $_GET['timestamp']);
    drupal_goto($_SERVER['REDIRECT_URL'], array('query' => $_GET));
  }
  elseif (@$_GET['op'] == 'check' && @$_GET['timestamp']) {
    
    $result = db_update('gv_quote_requests')
      ->fields(array(
        'checked' => 1,
      ))
      ->condition('timestamp', $_GET['timestamp'])
      ->execute();
    
    if ($result) {
      drupal_set_message('The data row with the timestamp "' . date('Y-m-d, H:i:s', $_GET['timestamp']) . '" is now checked.');
    }
    else {
      drupal_set_message('Something wrong has happened while updating the row with the timestamp "' . date('Y-m-d, H:i:s', $_GET['timestamp']) . '". Check the data.', 'warning');
    }
    
    unset($_GET['q'], $_GET['op'], $_GET['timestamp']);
    drupal_goto($_SERVER['REDIRECT_URL'], array('query' => $_GET));
  }
  elseif (@$_GET['op'] == 'uncheck' && @$_GET['timestamp']) {
    
    $result = db_update('gv_quote_requests')
      ->fields(array(
        'checked' => 0,
      ))
      ->condition('timestamp', $_GET['timestamp'])
      ->execute();
    
    if ($result) {
      drupal_set_message('The data row with the timestamp "' . date('Y-m-d, H:i:s', $_GET['timestamp']) . '" is now unchecked.');
    }
    else {
      drupal_set_message('Something wrong has happened while updating the row with the timestamp "' . date('Y-m-d, H:i:s', $_GET['timestamp']) . '". Check the data.', 'warning');
    }
    
    unset($_GET['q'], $_GET['op'], $_GET['timestamp']);
    drupal_goto($_SERVER['REDIRECT_URL'], array('query' => $_GET));
  }
  
  // Remove all useless rows (without emails).
//  $current_time = time();
//  $result = db_delete('gv_quote_requests')
//    ->condition('email_presented', 0)
//    ->condition('timestamp', ($current_time - 1200), '<') // 20 min old
//    ->execute();
  
  
  
  $form['emails'] = array(
    '#type' => 'markup',
    '#markup' => '<div class="type">' . l('Quote requests emails only', 'admin/content/quote-requests/emails') . ' - ' . l('Reviews emails', 'admin/content/quote-requests/reviews-emails') . ' - ' . l('Disqus emails', 'admin/content/quote-requests/disqus-emails') . ' - ' . l('Newsletter emails', 'admin/content/quote-requests/newsletter-emails') . '</div>'
      . '<br/><div><strong>All Quote Requests data.</strong></div><br/><div class="email-captured">' . l('Check and email captured but not submitted requests', 'admin/content/quote-requests', array('query' => array('op' => 'email-captured'))) . '</div>',
  );
  
  $sort = @$_GET['sort'] ? $_GET['sort'] : 'timestamp';
  
  $query = '';
  foreach ($_GET as $key => $value) {
    if ($key != 'q' && $key != 'sort' && $key != 'order') {
      $query .= ($query ? '&' : '?') . $key . '=' . $value;
    }
  }
  
  $sort_options = array('timestamp' => 'Submission started', 'via_block' => 'Page / Block', 'status' => 'Status', 'checked' => 'Checked / Alerted', 'ip' => 'User IP');
  $start_url = $_SERVER['REDIRECT_URL'] . $query . ($query ? '&' : '?');
  
  $sort_exposed = '';
  $order = 'DESC';
  foreach($sort_options as $sort_option => $sort_title) {
    $order_marker = '';
    if ($sort_option == @$_GET['sort']) {
      if (!@$_GET['order'] || $_GET['order'] == 'DESC') {
        $current_order = 'ASC';
        $order = 'ASC';
        $order_marker = '&darr;';
      }
      else {
        $current_order = 'DESC';
        $order = 'DESC';
        $order_marker = '&uarr;';
      }
    }
    else {
      $current_order = 'DESC';
    }
    //$sort_exposed .= ' | <a href="' . $start_url . 'sort=' . $sort_option . '&order=' . $current_order . '">' . $sort_title . $order_marker . '</a>';
    $sort_links[$sort_option] = '<a href="' . $start_url . 'sort=' . $sort_option . '&order=' . $current_order . '">' . $sort_title . ' ' . $order_marker . '</a>';
  }
  
  
  $filter_by = array('with_emails' => 'Only with emails','all' => 'Show all', 'not_alerted' => 'Captured, NOT alerted', 'alerted' => 'Captured and alerted', 'submitted' => 'Submitted', 'checked' => 'Checked / Alerted', 'unchecked' => 'Not Checked / Not Alerted');
  $filter_by_db = array('with_emails' => NULL,  'all' => NULL, 'not_alerted' => array('status', 0), 'alerted' => array('status', 1), 'submitted' => array('status', 2), 'checked' => array('checked', 1), 'unchecked' => array('checked', 0));
  $current_filter = isset($filter_by[@$_GET['filter']]) ? $_GET['filter'] : 'with_emails';
  
  
  $query = db_select('gv_quote_requests', 'qr')->extend('PagerDefault');
  $query->fields('qr', array('timestamp', 'via_block', 'data', 'status', 'checked', 'ip'));
  
  
  if ($filter_by_db[$current_filter]) {
    $query->condition($filter_by_db[$current_filter][0], $filter_by_db[$current_filter][1]);
  }
  elseif ($current_filter == 'with_emails') {
    $query->condition('qr.email_presented', '0', '!=');
    $query->condition('qr.email_presented', '', '!=');
    $query->isNotNull('qr.email_presented');
  }
  $ucaptureds = 
    $query
      ->orderBy($sort, $order)
      ->limit(20)
      ->execute();
  
  
  $form['filter'] = array(
    '#type' => 'radios',
    '#title' => t('Filter by: '),
    '#default_value' => $current_filter,
    '#options' => $filter_by,
    '#attributes' =>  array('class' =>array('filter_by'), 'onClick' => array('javascript:this.form.submit();')),
  );
 
    
  $form['table_start'] = array(
    '#type' => 'markup',
    '#markup' => '<table class="views-table quote-requests"><thead><tr><th>Num</th><th>' . $sort_links['timestamp'] . '</th><th>' . $sort_links['status'] . '</th><th>' . $sort_links['via_block'] . '</th><th>' . $sort_links['checked'] . '</th><th>' . $sort_links['ip'] . '</th><th class="data">Data</th><th class="ops" style="width: 300px;">Operations</th></tr></thead><tbody>',
  );
  
  $tr_class = 'even';
  foreach ($ucaptureds as $key => $ucaptured) {
    switch ($ucaptured->status) {
      case 0:
        $status = 'Captured, NOT alerted';
        $status_class = 'not-alerted';
        break;
      case 1:
        $status = 'Captured, alerted';
        $status_class = 'alerted';
        break;
      case 2:
        $status = 'Submitted';
        $status_class = 'submitted';
        break;
    }
    $data = '';
    $ucaptured_data = unserialize($ucaptured->data);
    
    // Correct the phone field data.
    $ucaptured_data = gv_misc_setUcapturedVariable(NULL, $ucaptured_data, TRUE);
    
    //dpm($ucaptured);
    //dpm($ucaptured_data);
    
    // Fix for a strange bug, where any first nested form in this main form (nested forms here - small providers submitting forms)
    // is filtered from the outer tags <form> for some reason.
    // So here i just put a dummy form for this to save the real forms.
    $form['bug_fix'] = array('#markup' => '<form><div class="test"></div></form>',);
    
    foreach ($ucaptured_data as $title => $value) {
      if ($title == 'Submit Time' && is_numeric($value)) {
        $value = date('Y-m-d, H:i:s', $value);
      }
      elseif ($title == 'Submission Duration' && is_numeric($value)) {
        $value = number_format($value / 60, 2, '.', '') . ' min';
      }
      elseif ($title == 'sentToRemoteProviders') {
        $submissions_list = NULL;
        foreach ($value as $data_provider => $data_submitted) {
          $submissions_list .= ($submissions_list && $data_submitted ? ', ' : '') . ($data_submitted ? $data_provider : ''); 
        }
        $value = $submissions_list;
      }
      $data .= "<div>$title: $value</div>";
    }
    $form['item_' . ($key + 1) . 'a'] = array(
      '#markup' => '<tr class="'. ($tr_class == 'odd' ? $tr_class = 'even' : $tr_class = 'odd') . '"><td>' . ($key + 1) . '</td><td>' . date('Y-m-d, H:i:s', $ucaptured->timestamp) . '</td><td class="' . $status_class . '">' . $status . '</td><td>' . (empty($ucaptured->via_block) ? 'Via page' : 'Via block' ) . '</td>',
    );
    
    $delete_url = $_GET + array('op' => 'delete', 'timestamp' => $ucaptured->timestamp);
    $check_url = $_SERVER['REQUEST_URI'] . ($_SERVER['REQUEST_URI'] == $_SERVER['REDIRECT_URL'] ? '?' : '&') . 'op=check&timestamp=' . $ucaptured->timestamp;
    $uncheck_url = $_SERVER['REQUEST_URI'] . ($_SERVER['REQUEST_URI'] == $_SERVER['REDIRECT_URL'] ? '?' : '&') . 'op=uncheck&timestamp=' . $ucaptured->timestamp;
    unset($delete_url['q']);

    
    $form['item_' . ($key + 1) . 'b'] = array(
      '#type' => 'checkbox',
      '#default_value' => $ucaptured->checked,
      '#prefix' => '<td>',
      '#suffix' => '</td>',
      '#attributes' =>  array('class' =>array('checked'), 'onClick' => array('javascript:window.location.href = "http://getvoip.com' . ($ucaptured->checked ? $uncheck_url : $check_url) . '";')),
    );
    
    // Ips, User input data, Operations.
    $form['item_' . ($key + 1) . 'c'] = array(
      '#markup' => '<td>' . $ucaptured->ip . '</td><td class="data">' . $data . '</td>
          <td class="ops">' 
            . l('Delete', $_GET['q'], array('query' => $delete_url)) 
            . render(drupal_get_form('gv_misc_sendCapturedQuotesToProviders_form_' . $key, array('timestamp' => $ucaptured->timestamp, 'ip' => $ucaptured->ip, 'sentToRemoteProviders' => @$ucaptured_data['sentToRemoteProviders'], 'submission' => $ucaptured_data)))
        . '</td>'
      . '</tr>',
    );
  }

  $form['table_close'] = array(
    '#type' => 'markup',
    '#markup' => '</tbody></table></div>',
  );
  
  $form['pager'] = array(
    '#theme' => 'pager',
    //'#weight' => 5,
  );
  
  //$form['actions']['submit']['#submit'][] = 'gv_pages_quoteRequestsList_formSubmit';
  //$form['#submit'][] = 'gv_pages_quoteRequestsList_formSubmit';
  $form['#validate'][] = 'gv_pages_quoteRequestsList_formValidate';
  
  
  return $form;
}


/**
 * Custom submit of a form for a Quote Requests List page.
 *
 * Provides a filtering functionality.
 * 
 * @param array &$form
 *   Array with declared form.
 *
 * @param array &$form_state
 *   Array with current form state.

 * @return void
 *   Return nothing.
 */
function gv_pages_quoteRequestsList_formValidate(&$form, &$form_state) {

  $get = $_GET;
  unset($get['q']);
  $get['filter'] = $form_state['values']['filter'];
  
  drupal_goto($_GET['q'], array('query' => $get));
}

//function gv_pages_quoteRequestsList_formSubmit(&$form, &$form_state) {
//
//}


/**
 * Returns a themed News topics page.
 * 
 * Allows to use same topics for News, Articles, Blog posts, etc.
 */
/*
function gv_pages_buildTopicsPage($content_type_label) {
  global $language;
  //$content_types = array('blog_post' => 'blog', 'news_post' => 'news', 'article' => 'articles');
  // Inverted...
  $content_types = array('blog' => 'blog_post', 'news' => 'news_post', 'articles' => 'article');
  $content_type = $content_types[$content_type_label];
  
  $topics = cache_get($content_type . '_topics_page' . $language->language);
  if (1) { //(!$topics || empty($topics->data) || $topics->expire < time()) {
    $topics_array = gv_misc_getTopics($content_type, $content_type_label);

    if (!$topics_array) {
      return NULL;
    }
    
    // Simple List.
    // $topics = theme('gv_misc_submenuSimple', array('submenu' => array('below' => $topics_array), 'class' => 'topics'));
    // Tag cloud.
    $topics_array = tagadelic_sort_tags(tagadelic_build_weighted_tags($topics_array, 12));
    $topics = theme('gv_misc_tagadelicWeighted_acceptPredefinedTermsPaths', array('terms' => $topics_array));
  

    //$page_title = '<h1 id="page-title" class="title">' . drupal_ucfirst($content_type_label) . ' tags</h1>';
    $show_all_url = '<div class="more-link">' . l(t('Show all posts'), $content_type_label) . '</div>';
    $topics = $topics . $show_all_url; // $page_title . $topics . $show_all_url;
    // Expire = current time + 4 hours.
    cache_set($content_type . '_topics_page' . $language->language, $topics, 'cache', time() + 14400);
  }
  else {
    $topics = $topics->data;
  }
  
  if ($preface = gv_misc_getPrefaceByKey($content_type_label . '_tags') ) {
    //dpm($preface);
    //drupal_set_title($preface->title);
    if (isset($preface->metatags['title']['value']) && $preface->metatags['title']['value']) {
      drupal_set_title($preface->metatags['title']['value']);
    }
    else {
      drupal_set_title($preface->title);
    }
    
    $preface->title_no_link = TRUE;
    $preface = render(node_view($preface, 'full'));
  }
  
  return '<div class="tags">' . $preface . $topics . '</div>'; 
}
*/


/**
 * Returns a admin page of all tags of s specific content type.
 */
function gv_pages_editTagsPage_form($form, &$form_state, $content_type_label) {
  
  
  $voc_names = array('topics' => 'topics', 'blog' => 'blog_tags', 'news' => 'news_tags', 'articles' => 'articles_tags');
  
  //$content_types = array('blog' => 'blog_post', 'news' => 'news_post', 'articles' => 'article');
  //$content_type = $content_types[$content_type_label];
  //$tags_array = gv_misc_getTopics($content_type, $content_type_label, NULL, TRUE, 80);
  //$main_topics_voc = taxonomy_vocabulary_machine_name_load(TOPICS);
  
  $voc = taxonomy_vocabulary_machine_name_load($voc_names[$content_type_label]);
  
  $tags_array = array();
  $query = db_select('taxonomy_term_data', 'td')->extend('pagerDefault')->limit(80);
  $query->fields('td', array('name', 'tid', 'vid', 'description'));
  $query->leftJoin('taxonomy_index', 'ti', 'ti.tid = td.tid');
  $query->leftJoin('node', 'n', 'n.nid = ti.nid');
  //$query->where('n.nid = ti.nid AND n.type = :type', array(':type' => $content_type))
  $query->addExpression('COUNT(n.nid)', 'count');
  $query->groupBy('td.name');
  $query->condition('td.vid', $voc->vid);
  $query->orderBy('count', 'ASC');
  $results = $query->execute();

  foreach($results as $result) {
    $result->link = array('link_title' => $result->name, 'href' => 'taxonomy/term/' . $result->tid);
    $tags_array[$result->tid] = $result;
  }

  
  $content_type_label_title = ucfirst($content_type_label);
  $form['Title'] = array(
    '#markup' => $content_type_label == 'topics' 
                        ? '<h1>Main Tags holder Admin page</h1><div class="cloud-link">' . l('Blog tags admin page', 'blog/tags-admin')  . '</div><div class="cloud-link">' . l('News tags admin page', 'news/tags-admin')  . '</div><div class="cloud-link">' . l('Voip Library tags admin page', 'articles/tags-admin')  . '</div>'
                        : '<h1>' . $content_type_label_title . ' Tags Admin page</h1><div class="cloud-link">' . l($content_type_label_title . ' tags cloud page', $content_type_label . '/tags')  . '</div><div class="cloud-link">' . l('Main tags holder Admin page', 'topics/tags-admin')  . '</div>',
  );
  if (!$tags_array) {
    $form['no_results'] = array(
      '#markup' => '<div class="no-results">No tags here yet...</div>',
    ); 
  }
  else {
    $form['tags_array'] = array(
      '#type' => 'hidden',
      '#value' => serialize($tags_array),
    );
    $form['tags'] = array(
      '#type' => 'container',
      '#tree' => TRUE,
    );
    foreach ($tags_array as $tid => $tag) {
      $form['tags'][$tid] = array(
        '#type' => 'checkbox',
        '#default_value' => FALSE,
        '#title' => '<div class="tag">' . l($tag->name, $tag->link['href'], array('attributes' => array('target' => '_blank'))) . '<span class="tid">, tid =' . $tid . ',</span> <span' . ($tag->count == 1? ' class="zero"' : '') . '>' . $tag->count . '</span> posts</div>',
      );
    }
    
    if ($content_type_label != 'topics') {
      $form['more'] = array(
        '#markup' => '<div class="more-link">' . l('Show all posts...', $content_type_label) . '</div>',
      );
    }
    
    $form['select_all'] = array(
      '#markup' => '<div class="select-all" style="cursor: pointer; color: gray; margin: 0 0 20px 25px;">Select/Unselect all tags</div>',
    );
    
    $form['actions']['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Delete all selected tags'),
      '#weight' => 40,
    ); 
    
    $form['pager'] = array(
      '#type' => 'markup',
      '#markup' => theme('pager'),
    );
    
    $form['#submit'][] = 'gv_pages_editTagsPage_formSubmit';
  }
  
  
  $path_to_custom_js = drupal_get_path('module', 'gv_pages') . '/js/';
  drupal_add_js($path_to_custom_js . 'gv_selectAllTagsToDel.js');
  

  return $form; 
}


function gv_pages_editTagsPage_formSubmit($form, &$form_state) {
  
  //dpm($form); dpm($form_state['values']);
  
  $tags_array = unserialize($form_state['values']['tags_array']);
  $tags_to_delete = array();
  foreach ($form_state['values']['tags'] as $tid => $value) {
    if ($value) {
      $tags_to_delete[$tid] = $tags_array[$tid]->name;
    }
  }
  
  //dpm($tags_to_delete);
  if (!empty($tags_to_delete)) {
    foreach ($tags_to_delete as $tid => $name) {
      taxonomy_term_delete($tid);
      drupal_set_message('A tag "' . $name . '" has been deleted.');
    }
    // Clear all caches.
    drupal_flush_all_caches();
  }
}


/**
 * Returns a block with a cloud of all tags of s specific content type.
 */
function gv_pages_buildTopicsPage($content_type_label) {
  
  global $language;
  global $user;
  
  //$content_types = array('blog_post' => 'blog', 'news_post' => 'news', 'article' => 'articles');
  // Inverted...
  $content_types = array('blog' => 'blog_post', 'news' => 'news_post', 'articles' => 'article');
  $content_type = $content_types[$content_type_label];
  
  // Uncomment to use a cache.
  //$tags = cache_get($content_type . '_tags_page' . $language->language);
  
  // Comment to use a cache.
  if (1) { 
    
  // Uncomment to use a cache.
  //if (!$tags || empty($tags->data) || $tags->expire < time()) {
    
    $tags_array = gv_misc_getTopics($content_type, $content_type_label);

    if (!$tags_array) {
      return NULL;
    }
    
    // Simple List.
    // $tags = theme('gv_misc_submenuSimple', array('submenu' => array('below' => $tags_array), 'class' => 'tags'));
    // Tag cloud.
    $tags_array = tagadelic_sort_tags(tagadelic_build_weighted_tags($tags_array, 12));
    $tags = theme('gv_misc_tagadelicWeighted_acceptPredefinedTermsPaths', array('terms' => $tags_array));
  

    //$page_title = '<h1 id="page-title" class="title">' . drupal_ucfirst($content_type_label) . ' tags</h1>';
    $show_all_url = '<div class="more-link">' . l('Show all posts', $content_type_label) . '</div>';
    $tags = /*$page_title .*/ $tags . $show_all_url;
    // Expire = current time + 4 hours.
   
    // Uncomment to use a cache.
    // cache_set($content_type . '_tags_page' . $language->language, $tags, 'cache', time() + 14400);
    
  }
  else {
    $tags = $tags->data;
  }
  
  /*
  if ($preface = gv_misc_getPrefaceByKey($content_type_label . '_tags') ) {
    //dpm($preface);
    //drupal_set_title($preface->title);
    if (isset($preface->metatags['title']['value']) && $preface->metatags['title']['value']) {
      drupal_set_title($preface->metatags['title']['value']);
    }
    else {
      drupal_set_title($preface->title);
    }
    
    $preface->title_no_link = TRUE;
    $preface = render(node_view($preface, 'full'));
  }
  return '<div class="tags">' . $preface . $topics . '</div>'; 
  */
  
  return ($user->uid ? '<div class="tags-admin-link">' . l(ucfirst($content_type_label) . ' tags Admin page', $content_type_label . '/tags-admin') . '</div>' : '') . '<div class="tags">' . $tags . '</div>'; 
}




/**
 * Returns a themed News topics page.
 * 
 * Allows to use same topics for News, Articles, Blog posts, etc.
 */
/*
function gv_pages_buildNewsTopics() {
  global $language;
  $topics = cache_get('news_topics_page' . $language->language);
  if (!$topics || empty($topics->data) || $topics->expire < time()) {
    $topics = gv_misc_getTopics('news_post', 'news');
    $topics = theme('gv_misc_submenuSimple', array('submenu' => array('below' => $topics), 'class' => 'topics'));
    // Expire = current time + 4 hours.
    cache_set('news_topics_page' . $language->language, $topics, 'cache', time() + 14400);
  }
  else {
    $topics = $topics->data;
  }
  return $topics; 
}
*/

/**
 * Implements hook_access().
 */
function gv_pages_access($type = null) {
  switch ($type) {
    default:
      if (arg(1) == 'edit') {
        if(!user_access('administer site configuration')) {
          return false;
        }
      }
    break;
  }
  return true;
}


/**
 * Prepare data for output it via theme function
 */
function gv_pages_buildHome($name, $data) {
  $out = '';
  
//  global $language;
//  global $user;
//  $logged_in = $user->uid ? '1' : '0';
//  $cache_name = 'gv_home_main_content_' . $language->language . '_' . $logged_in;
//  $cache_content = cache_get($cache_name);
//
//  if ($cache_content && !empty($cache_content->data) && $cache_content->expire > time()) {
//    
//    // Because of caching, float box js is not loaded (on node_view of preface) so we load it here, just with the cached content being shown. 
//    
//    // Main share functionality
//    drupal_add_js('sites/all/libraries/jquery.plugins/socialite/socialite.min.js');
//    //drupal_add_js('sites/all/libraries/jquery.plugins/socialite/socialite.js');
//
//    $path_to_custom_js = drupal_get_path('module', 'gv_misc') . '/js/';
//    drupal_add_js($path_to_custom_js . 'addSocialite.js');
//  
//    // Floating share buttons box.
//    //drupal_add_js('sites/all/libraries/jquery.plugins/stickyfloat/stickyfloat.min.js');
//    ////drupal_add_js('sites/all/libraries/jquery.plugins/stickyfloat/stickyfloat.js');
//    drupal_add_js('sites/all/libraries/jquery.plugins/stickyfloat/stickyfloat2.js');
//    $module_path = drupal_get_path('module', 'gv_misc');
//    drupal_add_js( $module_path . '/js/gv_floatingSocials.js'); 
//        
//    return $cache_content->data;
//  }
  
    
  $seo_welcome_node = gv_misc_getPrefaceByKey('front');
  $seo_welcome_node->title_no_link = TRUE;
  $seo_welcome_node_view = node_view($seo_welcome_node, 'full');

  // hide it here because we show thr main home preface content via the highlighted refion block.
  //$out .= render($seo_welcome_node_view);

  
  
  // Content of a home page saved in db as a var.
  // $out .= theme($name, array('data' => $data));
  
  // Get block for Latest VoIP articles (+ news, blog posts, etc).
  // $block_data = array('module' => 'views', 'delta' => 'articles-block');
  // $out .= gv_blocks_getBlockThemed($block_data);
  
    
  
    
    
  // Test compare providers functionality.  
//  global $user;
//  if ($user->uid) {  
    $block_data = array('module' => 'views', 'delta' => 'providers-block_top_business_cmp', 'shadow' => FALSE);
    $out .= gv_blocks_getBlockThemed($block_data);
    
    // it's connected via php in views header
//    $module_path_pages = drupal_get_path('module', 'gv_misc');
//    drupal_add_js( $module_path_pages . '/js/gv_compareProviders.js'); 
//  }  
  
  
    
    
  // Get block for Top pick business providers.
//  $block_data = array('module' => 'views', 'delta' => 'providers-block', 'shadow' => FALSE);
//  $out .= gv_blocks_getBlockThemed($block_data);
 
  
  // Get block for Top pick residential providers.
  $block_data = array('module' => 'views', 'delta' => 'providers-block_1', 'shadow' => FALSE); 
  $out .= gv_blocks_getBlockThemed($block_data);
  

//  global $user;
//  if ($user->uid) {
    // Get block for Home Latest reviews.
    $block_data = array('module' => 'views', 'delta' => 'reviews-block_home_latest_reviews', 'shadow' => FALSE); 
    $out .= gv_blocks_getBlockThemed($block_data);

    // Home Latest blogs teasers
//    $block_data = array('module' => 'views', 'delta' => 'blog-block_home_latest_blogs_2', 'shadow' => FALSE);
//    $out .= gv_blocks_getBlockThemed($block_data);

    $out .= render($seo_welcome_node_view['field_preface_bottom']);
//  }
//  else {
//
//    $out .='<div id="bottom-with-latest-articles" class="with-articles preface">';
//
//        $out .= render($seo_welcome_node_view['field_preface_bottom']);
//
//        // Get block for All latest articles (news, blogs)Top pick residential providers.
//        //$block_data = array('module' => 'views', 'delta' => 'articles-block_home_all_latest_articles', 'shadow' => FALSE);
//        $block_data = array('module' => 'views', 'delta' => 'blog-block_home_latest_blogs', 'shadow' => FALSE);
//        $out .= gv_blocks_getBlockThemed($block_data);
//
//    $out .='<div class="bottom-clear"></div></div>';
//
//  }
  
  
  //cache_set($cache_name, $out, 'cache', time() + 14400);

  return $out;
}


/**
 * Show themed page for users or edit page for admins (with  argument /edit in url)
 */
function gv_pages_showPage($name, $call_type = 'direct_theme', $build_function = NULL) {
  if (arg(1) == 'edit') {
    return drupal_get_form($name . '_form');
  }
  else {
    $data = variable_get($name . '_form', null);
    if ($call_type == 'direct_theme') {
      return theme($name, array('data' => $data));
    }
    else {
      return $build_function($name, $data);
    }
  }
}


/**
 * Implements hook_form() for editing home page content.
 */
function gv_pages_home_form() {
    
  $data = variable_get('gv_pages_home_form');
    
  $form['home_backend'] = array(
  '#type' => 'markup',
  '#title' => t('Explain'),
  '#markup' => '<div>Some text</div>',  
  ); 
    
  $form['fieldsetblock1_title'] = array(
  '#type' => 'fieldset',
  '#title' => t('Title'),
  '#collapsible' => true,
  '#collapsed' => true,  
  ); 
    
  $form['fieldsetblock1_title']['gv_block1_title'] = array(
  '#type' => 'textfield',
  '#title' => t('Title 1'),
  '#maxlength' => 40,   
  '#description' => t('Max length of the string: 40 symbols'),    
  '#default_value' => isset($data['gv_block1_title']) ? $data['gv_block1_title'] : 'some default title',
  );
  
  $form['goto_view'] = array(
        '#markup' => '<div><a href="/">View the page</a></div>', // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  );
  
  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#weight' => 40,
  );

  $form['#redirect'] = ''; // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  
  $form['#submit'][0] = 'gv_pages_forms_submit'; // process all gv_pages forms with a single function
  $form['#validate'][0] = 'gv_pages_forms_validate';
  return $form;
}


/**
 * Custom form validating function for a submitted form data.
 */
function gv_pages_forms_validate($form, &$form_state) {
    
  foreach ($form_state['values'] as $key => $url) {
    if (preg_match('/.*_link.*_url.*/i', $key)) {
      $url = trim($url, '/');
      if (!$results = db_query("SELECT pid FROM {url_alias} WHERE (LOWER(alias) = LOWER('" . $url . "')) OR (LOWER(source) = LOWER('" . $url . "'))")->fetchField()) {
        if (!$results = db_query("SELECT path FROM {menu_router} WHERE (LOWER(path) = LOWER('" . $url . "'))")->fetchField()) {
          form_set_error($key, t('No such link on the site: ' . $url));
        }
      }
    }
  }
}


/**
 * Custom dispatching form sumbitting function for a submitted form data.
 */
function gv_pages_forms_submit($form, &$form_state) {
  gv_pages_process_form_data($form, $form_state);
  $form_state['redirect'] = $form['#redirect'];
  drupal_set_message(t('The changes have been saved.'));
}


/**
 * Custom helper form sumbitting function for a submitted form data.
 */
function gv_pages_process_form_data($form, $form_state) {
    
  $data = array();
  foreach ($form_state['values'] as $key => $value) {
    $pos = strpos($key, 'gv_');
    if ($pos !== false AND $pos == 0) {
      if (!is_array($value)) {
        $data[$key] = strip_tags($value);
      }
      else {
        $data[$key] = $value;
      }
    }
  }
 
  if (isset($_FILES['files'])) {
    $default_file_path = variable_get('file_public_path', conf_path() . '/files');
    $uploaddir = $_SERVER['DOCUMENT_ROOT'] . $default_file_path;

    foreach ($_FILES['files']['name'] as $var_name => $file_name) {
      $setToDelete = (isset($form_state['values']['del_' . $var_name]) AND $form_state['values']['del_' . $var_name]);
      if(!$file_name OR $setToDelete) {
        if ($setToDelete) {
            if ($form_state['values']['_' . $var_name]) {
              unlink($uploaddir . '/' . basename($form_state['values']['_' . $var_name]));
            }
            $data[$var_name] = '';
        }
        else {
          $data[$var_name] = isset($form_state['values']['_' . $var_name])?$form_state['values']['_' . $var_name]:''; // leave the old file
        }  
        continue;
      }

      $basename = basename($_FILES['files']['name'][$var_name]);
      move_uploaded_file($_FILES['files']['tmp_name'][$var_name], $uploaddir . '/' . $basename);
      $data[$var_name] = $default_file_path . '/' . $basename;
    }
  }
  variable_set($form['#form_id'], $data);
}


/**
 * Implements hook_theme().
 */
function gv_pages_theme($existing, $type, $theme, $path) {
  $path = drupal_get_path('module', 'gv_pages') . '/tpl';
  
  return array(
    'gv_pages_home' => array(
      'variables' => array('data' => null),
      'template' => 'gv_pages_home',
      'path' => $path,
    ),
  );
} 



/**
 * Implements hook_form_alter().
 *
 * @param array &$form
 *   Array with declared form.
 *
 * @param array &$form_state
 *   Array with current form state.
 *
 * @param string $form_id
 *   Form ID.
 *
 * @return void
 *   Return nothing.
 */
function gv_pages_form_alter(&$form, &$form_state, $form_id) {
  
   //dpm($form_id);  dpm($form);
  // $conf['locale_custom_strings_en']['old string'] = 'new string'
  
  switch ($form_id) {
    
    case 'user_login_block':
    case 'user_login':
      
      // Disable login for disabled users
      $form['#validate'][] = 'gv_pages_validateForm_disableUserLoginForDisabled';
                
      break;
    
    
    
    
    
    case 'news_post_node_form':
    case 'blog_post_node_form':
      
          // Set a select of available providers.
        $providers['_none'] = t('- Select a value -');
        gv_misc_getProviders($providers);
        $form['field_providers_mentioned']['und']['#options'] = $providers;
        
    case 'article_node_form':
      
        $extra_data = unserialize($form['field_extra_data']['und'][0]['value']['#default_value']);
        //dpm($extra_data);
        
        //dpm($form);
        
        
        if (!empty($form['field_guest_author']['und'][0]['value']['#default_value'])) {
          $guest_author = $form['field_guest_author']['und'][0]['value']['#default_value'];
        }
        else {
          $guest_author = $form['field_guest_author']['und'][0]['value']['#default_value'] = !empty($extra_data['guest_author']) ? $extra_data['guest_author'] : '';
        }
        $form['field_guest_author']['#access'] = FALSE;
        
        $form['author']['guest_author'] = array(
          '#type' => 'textfield',
          '#title' => 'Guest Post author',
          '#default_value' => $guest_author, //!empty($extra_data['guest_author']) ? $extra_data['guest_author'] : '',
        );
        
        
        // Restore aliased pdfs links, from /pdfs/ to /sites/default/files/pdfs/
        $form['body'] = gv_misc_rewriteLinks('pdfs', $form, 'back');
        
        // Hide second specific Tags field for news/blog/articles for a corresponding content type.
        global $user;
        if ($user->uid != 1) {
          switch($form['#node']->type) {
            case 'news_post':
              $form['field_tags_news']['#access'] = FALSE;
              break;
            case 'blog_post':
              $form['field_tags_blog']['#access'] = FALSE;
              break;
            case 'article':
              $form['field_tags_articles']['#access'] = FALSE;
              break;
          }
        }
      
        //$form['field_a_teaser']['und'][0]['#format'] = 'full_html';
        $form['field_a_teaser']['#access'] = FALSE;
        $form['field_main_image']['#access'] = FALSE;
        $form['field_extra_data']['#access'] = FALSE;
        
        
        if (!isset($extra_data['related_articles'])) {
          $extra_data['related_articles'] = array();
        }
        
        // Uncomment to recalculate related articles
        //$articles_by_index = gv_misc_get_relatedArticles_dividedByIndex($form['nid']['#value'], $form['type']['#value']);
        
        
        
        // Comment the next block to recalculate related articles
        foreach ($extra_data['related_articles'] as $key => $value) {
          $index = str_replace('index_', '', $key);
          foreach ($value as $key2 => $value2) {
            if (is_object($value2)) {
              $value2->nid = $key2;
            }
            $articles_by_index[$index][$key2] = $value2;
          }
        }
        
        //dpm($articles_by_index);

        
        
        if (!empty($articles_by_index)) {
          

          $form['related_articles'] = array(
            '#type' => 'fieldset',
            '#title' => 'Related articles',
            '#collapsible' => TRUE,
            '#collapsed' => TRUE,
            '#attributes' => array ('class' => array('related-articles')),
            '#tree' => TRUE,
            '#weight' => 38,
          );

          
          //dpm($articles_by_index);
          
          $recalculate_related_articles = FALSE;
            
          foreach ($articles_by_index as $index => $articles) {
            $form['related_articles']['index_' . $index] = array(
              '#type' => 'fieldset',
              '#title' => 'By ' . $index . ' tags',
              '#collapsible' => TRUE,
              '#collapsed' => TRUE,
            );

            
            foreach ($articles as $nid => $article) {
              
              if (!gv_misc_nodeExists($nid)) {
                $recalculate_related_articles = TRUE;
                continue;
              }
              
              $a = node_load($nid);
              $a->related_articles_teaser = TRUE;
              $form['related_articles']['index_' . $index][$nid] = array(
                '#type' => 'checkbox',
                '#title' => render(node_view($a, 'teaser')),
                //'#default_value' => !empty($extra_data['related_articles']['index_' . $index][$nid]) ? 1 : 0,
                '#default_value' => is_object($article) ? 1 : 0,
                '#disabled' => TRUE,
              );

            }

          }
          

          $form['related_articles']['recalculate'] = array(
            '#type' => 'checkbox',
            '#title' => 'Recalculate related articles' . ($recalculate_related_articles ? ' (some related articles have been removed)' : ''),
            '#default_value' => $recalculate_related_articles,
            '#disabled' => $recalculate_related_articles,
          );

          
          
        }

        
          

        
        
        
        
        $form['#validate'][] = 'gv_pages_validateForm_article';
                
      break;
    
    
    
    
    
    
    case 'phone_node_form':
      
      //dpm($form);
      
      $extra_data = unserialize($form['field_extra_data']['und'][0]['value']['#default_value']);
      //dpm($extra_data);
      $form['field_extra_data']['#access'] = FALSE;
      
      $form['field_p_name']['#weight'] = 1;
      
      $form['field_phone_type']['#weight'] = 2;
      $form['field_phone_type']['#suffix'] = '<div class="bottom-clear"></div>';
      
      $form['field_manufacturer']['#weight'] = 3;
      $form['field_p_image']['#weight'] = 4;
      
      $form['body']['#weight'] = 5;
      
      // Fix a summary height.
      //unset($form['body']['und'][0]['summary']['#attached']['js']);
      // Fix Ckeditor intrusion results.
      if (trim($form['body']['und'][0]['summary']['#default_value']) == '<br />') {
        $form['body']['und'][0]['summary']['#default_value'] = '';
      }
      
      
      
      $pros_and_cons_descrs = array('The good', 'The bad', 'The bottom line');
      $form['data_pros_and_cons'] = array(
        '#type' => 'fieldset',
        '#title' => t('Pros and Cons'),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
        '#tree' => TRUE,
        '#weight' => 6,
      );
      foreach($pros_and_cons_descrs as $pros_and_cons_title) {
        $form['data_pros_and_cons'][$pros_and_cons_title] = array(
          '#type' => 'textarea',
          '#title' => $pros_and_cons_title,
          '#default_value' => isset($extra_data['pros_and_cons'][$pros_and_cons_title]) ? $extra_data['pros_and_cons'][$pros_and_cons_title] : '',
        );
      }
      
      
      
      $specs = array(
        //'Manufacturer' => 'textfield', //Cisco
        //'Type' => 'textfield', //Desktop
        'Num of RJ45 Ports' => 'textfield', //2 
        'Num of Lines' => 'textfield', //4
        '3 way conference' => 'checkbox', //Yes
        'AC Power Supply Included' => 'checkbox', //No
        'Backlit-LCD' => 'checkbox', //Yes
        'Built-In Bluetooth' => 'checkbox', //No
        'Built-In WiFi' => 'checkbox', //No
        'Color Screen' => 'checkbox', //No
        'Desktop Paging' => 'checkbox', //Yes
        'Display Type' => 'textfield', //Enhanced
        'EHS Support' => 'checkbox', //No
        'Gigabit Ethernet Support' => 'checkbox', //No
        'Headset Interface' => 'textfield', //2.5mm
        'Mass Provisioning' => 'checkbox', //Yes
        'MWI Support' => 'checkbox', //Yes
        'Peripheral ports' => 'textfield', //AUX
        'PoE Compatible' => 'checkbox', //Yes
        'Protocol Supported' => 'textfield', //SIP, SPCP
        'Provisioning Method' => 'textfield', //HTTP, HTTPS, TFTP, WEB GUI
        'Sidecar Compatible' => 'checkbox', //Yes
        'Speakerphone' => 'textfield', //Full-Duplex
        'Supported Codecs' => 'textfield', //G.722, G.726, G.729 a/b, G.711 u/a law
        'Touch Screen' => 'checkbox', //No
        'Voicemail Button' => 'checkbox', //Yes
        'Wideband Voice Protocol' => 'textfield', //Cisco Wideband
      );
      
      $form['data_specs'] = array(
        '#type' => 'fieldset',
        '#title' => t('Specs'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
        '#tree' => TRUE,
        '#weight' => 10,
      );
      foreach($specs as $spec_title => $spec_field_type) {
        $form['data_specs'][$spec_title] = array(
          '#type' => $spec_field_type,
          '#title' => $spec_title,
          '#default_value' => isset($extra_data['specs'][$spec_title]) ? $extra_data['specs'][$spec_title] : ($spec_field_type == 'textfield' ? '' : FALSE),
        );
      }
      
      $form['downloads'] = array(
        '#type' => 'text_format',
        '#title' => 'Downloads',
        '#format' => 'full_html',
        '#default_value' => isset($extra_data['downloads']) ? $extra_data['downloads'] : '',
        '#weight' => 11,
      );
      
      $form['in_the_box'] = array(
        '#type' => 'text_format',
        '#title' => 'In the Box',
        '#format' => 'full_html',
        '#default_value' => isset($extra_data['in_the_box']) ? $extra_data['in_the_box'] : '',
        '#weight' => 12,
      );
      
      
      
      
          // Admin Rate and vote group.
          $rating_options = array('' => FALSE, '20' => 'Horrible', '40' => 'Bad', '60' => 'OK', '80' => 'Good', '100' => 'Excellent');
          $weight = 8;

          //$vote_keys = array('sound' => SOUND, 'install' => INSTALL, 'service' => CUSTOMER, 'rely' => RELY, 'features' => FEATURES, 'money' => PRICE);
          $vote_keys = array('performance' => PERFORMANCE, 'voice' => VOICE, 'install' => INSTALL, 'use_ease' => USE_EASE, 'durability' => DURABILITY, 'features' => FEATURES, 'price' => PRICE);

          $votes = array();
          $form['ureview'] = array(
            '#type' => 'fieldset',
            '#title' => t('Editor\'s Rating for this VoIP Phone'),
            '#weight' => 13,
          );

              $form['ureview']['votes'] = array(
                  '#type' => 'container',
                  '#prefix' => '<div class="rate-caption"><div class="col-2">' . t('Click Stars To Start Reviewing') . '</div><div class="col-3">' . t('Rate it') . '</div></div>',
              );
              foreach ($vote_keys as $vote_key => $vote_title) {
                $form['ureview']['votes']['rating_' . $vote_key] = array(
                  '#type' => 'select',
                  '#options' => $rating_options,
                  '#default_value' => $rating_options[''],
                  '#prefix' => '<div class="vote"><div class="vote-title">' . t($vote_title) . '</div>',
                  '#suffix' => '<div class="choice" id="edit-rating-' . $vote_key . '-choice">Rate it!</div></div>',
                );
              }

              $rating_recommend_options = $rating_options = array('100' => 'Yes', '0' => 'No');
              $form['ureview']['rating_recommend'] = array(
                  '#type' => 'radios',
                  '#options' => $rating_recommend_options,
                  '#default_value' => FALSE,
                  '#prefix' => '<div class="label left">' . RECOMMEND_PHONE . '</div>',
              );

              // Fill saved editor's ratings, if editing...
              if(arg(1) != 'add' && isset($extra_data['editor_ratings'])) {
                
                  foreach ($extra_data['editor_ratings'] as $tag => $value) {
                    if ($tag == 'recommend') {
                      $recommend = $value;
                      continue;
                    }
                    $form['ureview']['votes']['rating_' . $tag]['#default_value'] = $value;
                  }
                  

                  if (isset($recommend)) {
                    $form['ureview']['rating_recommend']['#default_value'] = $recommend;
                  }
              }
              elseif (arg(1) == 'add') {
                $form['ureview']['rating_recommend']['#default_value'] = TRUE;
              }
              
              $form['ureview']['rating_recommend']['#access'] = FALSE;
              
              
              // Add stars widgets to a Rating block
              $module_path = drupal_get_path('module', 'gv_pages');
              $module_misc_path = drupal_get_path('module', 'gv_misc');

              $form['#attached']['js'] = array(

                // Add stars widgets to a Rating block
                $module_path . '/js/gv_phone_review_stars.js',
                'sites/all/libraries/jquery.ui.stars/jquery.ui.stars.min.js',
              );

              $form['#attached']['library'][] = array('system', 'ui.widget');

              $form['#attached']['css'] = array(
                'sites/all/libraries/jquery.ui.stars/css/jquery.ui.stars.css',
              );


              $form['#attributes']['class'][] = 'gv-edit-review-page';

              
              
      
      $form['#validate'][] = 'gv_pages_validateForm_phone';
       
      
      break; // End of phone.
    
    
    
    
    
    case 'quote_node_form':
      
      //dpm($form);
      $data = unserialize($form['field_q_data']['und'][0]['value']['#default_value']);
      $form['field_q_data']['#access'] = FALSE;
      //dpm($data);
      
      $form['bottom_text'] = array(
        '#type' => 'fieldset',
        '#title' => t('Bottom text'),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
        //'#description' => t(''),
        '#weight' => 10,
        '#tree' => TRUE,
      );
            $form['bottom_text']['left_title'] = array(
              '#type' => 'textfield',
              '#title' => t('Left title'),
              //'#description' => t(''),
              '#default_value' => isset($data['bottom_text']['left_title']) ? $data['bottom_text']['left_title'] : '',
            );
            $form['bottom_text']['left_text'] = array(
              '#type' => 'textarea',
              '#title' => t('Left text'),
              //'#description' => t(''),
              '#default_value' => isset($data['bottom_text']['left_text']) ? $data['bottom_text']['left_text'] : '',
            );
      
            $form['bottom_text']['center_title'] = array(
              '#type' => 'textfield',
              '#title' => t('Center title'),
              //'#description' => t(''),
              '#default_value' => isset($data['bottom_text']['center_title']) ? $data['bottom_text']['center_title'] : '',
            );
            $form['bottom_text']['center_text'] = array(
              '#type' => 'textarea',
              '#title' => t('Сenter text'),
              //'#description' => t(''),
              '#default_value' => isset($data['bottom_text']['center_text']) ? $data['bottom_text']['center_text'] : '',
            );
            
            $form['bottom_text']['right_title'] = array(
              '#type' => 'textfield',
              '#title' => t('Right title'),
              //'#description' => t(''),
              '#default_value' => isset($data['bottom_text']['right_title']) ? $data['bottom_text']['right_title'] : '',
            );
            $form['bottom_text']['right_text'] = array(
              '#type' => 'textarea',
              '#title' => t('Right text'),
              //'#description' => t(''),
              '#default_value' => isset($data['bottom_text']['right_text']) ? $data['bottom_text']['right_text'] : '',
            );
      
      $form['#validate'][] = 'gv_pages_validateForm_quote';
      
      break;
    
    
    
    
    
    
    
    case 'user_profile_form':
      
      // Disallow edit own profile for a Guest user.
      global $user;
      if($user->name == 'guest') {
        drupal_goto('');
      }
      
      $form['field_u_bio']['und'][0]['#format'] = 'full_html';
      
      break;
      
      
      
      
      
      
      
      
    case 'provider_node_form':
      
      //dpm($form);

      // Fix weights of some fields.
      $form['field_p_name']['#weight'] = 1;
      
      $form['title']['#weight'] = 2;
      $form['title']['#description'] = t('Used in header of provider page');
      
      
      //$form['body']['#weight'] = 2;
      //$form['body']['und'][0]['#weight'] = 2;
      
      // Hide a placeholder field field_p_data
      $form['field_p_data']['#access'] = FALSE;
      $form['field_p_fees_save']['#access'] = FALSE;
      $form['field_p_data_quick']['#access'] = FALSE;
      
      // Fix a summary height.
      //unset($form['body']['und'][0]['summary']['#attached']['js']);
      // Fix Ckeditor intrusion results.
      if (trim($form['body']['und'][0]['summary']['#default_value']) == '<br />') {
        $form['body']['und'][0]['summary']['#default_value'] = '';
      }
      // Doesn't work.
      //$form['body']['und'][0]['summary']['#format'] = 'plain_text';
      // Doesn't work.
      //$form['body']['und'][0]['summary']['#rows'] = 3;
      
      // Add temporary fields which will be saved as aggregated data in a one real field field_p_data
      
      $p_data = unserialize($form['field_p_data']['und'][0]['value']['#default_value']);
      //$p_fees_save = unserialize($form['field_p_fees_save']['und'][0]['value']['#default_value']);
      //dpm($p_data);
      //dpm($p_fees_save);
      //$p_data_quick = unserialize($form['field_p_data_quick']['und'][0]['value']['#default_value']);
      //dpm($p_data_quick);
      
      
      $form['data_info'] = array(
        '#type' => 'fieldset',
        '#title' => t('General Provider Info'),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
        '#tree' => TRUE,
        '#weight' => 10,
      );
            $form['data_info']['i_heads'] = array(
              '#type' => 'textfield',
              '#title' => t('Headquarters'),
              '#default_value' => isset($p_data['info']['i_heads']) ? $p_data['info']['i_heads'] : '',
            );
            $form['data_info']['i_founded'] = array(
              '#type' => 'textfield',
              '#title' => t('Founded In'),
              '#default_value' => isset($p_data['info']['i_founded']) ? $p_data['info']['i_founded'] : '',
            );
            $form['data_info']['i_availability'] = array(
              '#type' => 'textfield',
              '#title' => t('Service Availability'),
              '#default_value' => isset($p_data['info']['i_availability']) ? $p_data['info']['i_availability'] : '',
            );
            $form['data_info']['i_web'] = array(
              '#type' => 'textfield',
              '#title' => t('Web Site'),
              '#description' => t('Please, use a format "http://example.com" strictly!'),
              '#default_value' => isset($p_data['info']['i_web']) ? $p_data['info']['i_web'] : '',
              '#element_validate' => array('wdg_misc_elementValidate_url'),
            );
            $form['data_info']['i_web_display'] = array(
              '#type' => 'textfield',
              '#title' => 'Display Website as',
              '#description' => 'If empty, Web Site field content will be used, without http(s)://',
              '#default_value' => isset($p_data['info']['i_web_display']) ? $p_data['info']['i_web_display'] : '',
              '#element_validate' => array('wdg_misc_elementValidate_url'),
            );
            $form['data_info']['i_web_hide'] = array(
              '#type' => 'checkbox',
              '#title' => 'Hide Web Site',
              '#default_value' => isset($p_data['info']['i_web_hide']) ? $p_data['info']['i_web_hide'] : 0,
            );
            /*
            $form['data_info']['i_email'] = array(
              '#type' => 'textfield',
              '#title' => t('Email'),
              //'#description' => t(''),
              '#element_validate' => array('wdg_misc_elementValidate_email'),
              '#default_value' => isset($p_data['info']['i_email']) ? $p_data['info']['i_email'] : '',
            );
            */
            $form['data_info']['i_phone'] = array(
              '#type' => 'text_format', 
              '#title' => 'Phone',
              '#format' => 'full_html',
              '#default_value' => isset($p_data['info']['i_phone']['value']) ? $p_data['info']['i_phone']['value'] : NULL,
            );
        
      
            
            
      
      
            
      $service_types = unserialize(SERVICE_TYPES);
      $service_descriptions = unserialize(SERVICE_DESCRIPTIONS);
      $fee_types = unserialize(FEE_TYPES);
      $load_key = 's';
      
      if (!isset($p_data['s'])) {
        $load_key = 'services';
        $old_service_types = array('re' => 's_residential', 'bu' => 's_business');
        $old_service_descriptions = array('pti' => 'preface_title', 'pte' => 'preface_text', 'biti' => 'basicinfo_title', 'bite' => 'basicinfo_text', 'snti' => 'specialnotes_title', 'snte' => 'specialnotes_text', 'mbg' => 'money_back_guarantee');
        $old_fee_types = array('mon' => 'monthly_fees', 'set' => 'setup_fees', 'shp' => 'shipping_fees', 'can' => 'cancel_fees', 'lng' => 'longdistance_fees', 'oth' => 'other_fees' );
      }
      
      //$p_data['s']['re']['pti']
      //$p_data['services']['s_residential']['re_preface_title']
      
      $form['s'] = array(
        '#type' => 'fieldset',
        '#title' => 'Provider services',
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
        '#tree' => TRUE,
        '#weight' => 12,
      );
            foreach ($service_types as $service_type_key => $service_type_title) {
              
              $form['s'][$service_type_key] = array(
                '#type' => 'fieldset',
                '#title' => "$service_type_title serviсes",
                '#collapsible' => TRUE,
                '#collapsed' => TRUE,
                '#states' => array(
                                  // Hide the this service section when a corresponding checkbox is disabled.
                                  'invisible' => array(
                                      ':input[value="' . gv_misc_refineServiceTypeKey_Reverse($service_type_key) . '"]' => array('checked' => FALSE),
                                ),
                            ),
              );
                  
              
              
              
                  // Descriptions fields
                  foreach ($service_descriptions as $service_description_key => $service_description_data) {
                    
                    if (is_array($service_description_data)) {
                      $service_description_title = $service_description_data['title'];
                      $service_description_type = $service_description_data['type'];
                    }
                    else {
                      $service_description_title = $service_description_data;
                      $service_description_type = 'textfield';
                    }
                    $service_description_title = is_array($service_description_data) ? $service_description_data['title'] : $service_description_title;
                    
                    $form['s'][$service_type_key][$service_description_key] = array(
                      '#type' => $service_description_type,
                      '#title' => $service_description_title,
                      //'#default_value' => isset($p_data['s'][$service_type_key][$service_description_key]) ? $p_data['s'][$service_type_key][$service_description_key] : '',
                      '#default_value' => $load_key == 's' 
                                           ?
                                          (isset($p_data['s'][$service_type_key][$service_description_key]) ? $p_data['s'][$service_type_key][$service_description_key] : '')
                                          //$p_data['s']['re']['pti']
                                           :
                                          ( (isset($old_service_types[$service_type_key]) && isset($old_service_descriptions[$service_description_key]) && isset($p_data['services'][$old_service_types[$service_type_key]][$service_type_key . '_' . $old_service_descriptions[$service_description_key]]) ) ? $p_data['services'][$old_service_types[$service_type_key]][$service_type_key . '_' . $old_service_descriptions[$service_description_key]] : ''),
                                          //$p_data['services']['s_residential']['re_preface_title']
                      
                    );
                    
                  }
                  
                  // Fees
                  $form['s'][$service_type_key]['fees'] = array(
                    '#type' => 'fieldset',
                    '#collapsible' => TRUE,
                    '#collapsed' => FALSE,
                    '#title' => t("$service_type_title services fees"),
                    //'#tree' => TRUE,
                  );
                      foreach ($fee_types as $fee_type_key => $fee_type_data) {
                        
                        $form['s'][$service_type_key]['fees'][$fee_type_key] = array(
                          '#type' => 'textfield',
                          '#title' => t($fee_type_data[0]),
                          '#field_prefix' => $fee_type_data[1],
                          //'#default_value' => isset($p_data['s'][$service_type_key]['fees'][$fee_type_key]) ? $p_data['s'][$service_type_key]['fees'][$fee_type_key] : '',
                          '#default_value' => $load_key == 's' 
                                              ?
                                              (isset($p_data['s'][$service_type_key]['fees'][$fee_type_key]) ? $p_data['s'][$service_type_key]['fees'][$fee_type_key] : '')
                                              // $p_data['s']['re']['fees']['mon']
                                              :
                                              ( (isset($old_service_types[$service_type_key]) && isset($p_data['services'][$old_service_types[$service_type_key]][$service_type_key . '_basicinfo_fees'][$old_fee_types[$fee_type_key]]) ) ? $p_data['services'][$old_service_types[$service_type_key]][$service_type_key . '_basicinfo_fees'][$old_fee_types[$fee_type_key]] : ''),
                        );                    // $p_data['services']['s_residential']['re_basicinfo_fees']['monthly_fees']
                        
                      }
                      
                  
                  // Move defined via admin panel fields with a taxonomy autocomplete for corresponding Features tags to the corresponding fieldset.
                  $form['s'][$service_type_key]['field_p_' . $service_type_key . '_features'] = $form['field_p_' . $service_type_key . '_features'];
                  $form['field_p_' . $service_type_key . '_features']['#access'] = FALSE;
                  
                  // Add tags weights editing window for corresponding features.
                  if ($load_key == 's' && isset($p_data['s'][$service_type_key]['weights_' . $service_type_key . '_features']) && !empty($p_data['s'][$service_type_key]['weights_' . $service_type_key . '_features'])) {
                    $features_weights = $p_data['s'][$service_type_key]['weights_' . $service_type_key . '_features'];
                    //$p_data['services']['re']['weights_re_features'];
                  }
                  elseif (isset($old_service_types[$service_type_key]) && isset($p_data['services'][$old_service_types[$service_type_key]]['weights_' . $service_type_key . '_features']) && !empty($p_data['services'][$old_service_types[$service_type_key]]['weights_' . $service_type_key . '_features'])) {
                    $features_weights = $p_data['services'][$old_service_types[$service_type_key]]['weights_' . $service_type_key . '_features'];
                    //$p_data['services']['s_residential']['weights_re_features'];
                  }
                  else {
                    $features_weights = NULL;
                  }
                  
                  if($features_weights) {
                    
                      $form['s'][$service_type_key]['weights_' . $service_type_key . '_features'] = array(
                        '#type' => 'fieldset',
                        '#title' => "$service_type_title Features tags weights",
                        '#collapsible' => TRUE,
                        '#collapsed' => TRUE,
                        //'#tree' => TRUE,
                        '#weight' => $form['s'][$service_type_key]['field_p_' . $service_type_key . '_features']['#weight'] + 1,
                      );

                            foreach($features_weights as $tid => $term) {
                              $form['s'][$service_type_key]['weights_' . $service_type_key . '_features'][$tid] = array(
                                '#type' => 'textfield',
                                '#size' => 3,
                                '#title' => $term['name'],
                                '#default_value' => $term['weight'],
                              );
                            }
                            
                  } // End of if($features_weights) {
                  
              
            } // End of foreach ($service_types as $service_type => $service_type_short) {
      
            
      
            
            
      
            
      $providers_with_options = array(
          'bu' => unserialize(PROVIDER_OPTIONS_BU),
          're' => unserialize(PROVIDER_OPTIONS_RE),
      );      
            
      foreach ($providers_with_options as $service_type_index => $provider_options_structure) {
        if ($service_type_index == 'bu') {
          $provider_options = isset($p_data['provider_options_' . $service_type_index]) ? $p_data['provider_options_' . $service_type_index] : (isset($p_data['provider_options']) ? $p_data['provider_options'] : NULL);
        }
        else {
          $provider_options = isset($p_data['provider_options_' . $service_type_index]) ? $p_data['provider_options_' . $service_type_index] : NULL;
        }

        $form['s'][$service_type_index]['provider_options_' . $service_type_index] = array(
          '#type' => 'fieldset',
          '#title' => 'Provider options (' . $service_type_index . ')',
          '#collapsible' => TRUE,
          '#collapsed' => TRUE,
          '#tree' => TRUE,
          '#weight' => 11,
        );
              $form['s'][$service_type_index]['provider_options_' . $service_type_index]['enabled'] = array(
                '#title' => 'Enable Option Tab',
                '#type' => 'checkbox',
                '#default_value' => isset($provider_options['enabled']) ? $provider_options['enabled'] : NULL,
              );

              foreach ($provider_options_structure as $options_set => $options_data) {

                    $form['s'][$service_type_index]['provider_options_' . $service_type_index][$options_set] = array(
                      '#type' => 'fieldset',
                      '#title' => $options_set,
                      '#collapsible' => TRUE,
                      '#collapsed' => TRUE,
                      '#states' => array(
                                  'invisible' => array(
                                      //':input[name="' . "provider_options_bu[enabled]" . '"]' => array('checked' => FALSE),
                                      ':input[name="' . "s[" . $service_type_index . "][provider_options_" . $service_type_index . "][enabled]" . '"]' => array('checked' => FALSE),
                                ),
                            ),
                    );


                    foreach ($options_data as $option_title => $option_type) {

                        $form['s'][$service_type_index]['provider_options_' . $service_type_index][$options_set][$option_title] = array(
                          '#title' => $option_title,
                          '#type' => $option_type,
                          '#default_value' => isset($provider_options[$options_set][$option_title]) ? $provider_options[$options_set][$option_title] : NULL,
                        );

                        if ($option_type == 'textarea') {
                          $form['s'][$service_type_index]['provider_options_' . $service_type_index][$options_set][$option_title]['#default_value'] = !empty($provider_options[$options_set][$option_title]) ? (is_array($provider_options[$options_set][$option_title]) ? $provider_options[$options_set][$option_title]['value'] : $provider_options[$options_set][$option_title]) : NULL;
                          $form['s'][$service_type_index]['provider_options_' . $service_type_index][$options_set][$option_title]['#type'] = 'text_format';
                          $form['s'][$service_type_index]['provider_options_' . $service_type_index][$options_set][$option_title]['#format'] = 'full_html';//'filtered_html'; //'gv_full_html'; 
                        }

                        if ($option_type == 'checkbox') {

                          $form['s'][$service_type_index]['provider_options_' . $service_type_index][$options_set][$option_title]['#prefix'] = '<div style="overflow: hidden;"><div style="float: left;">';
                          $form['s'][$service_type_index]['provider_options_' . $service_type_index][$options_set][$option_title]['#suffix'] = '</div>';

                          $form['s'][$service_type_index]['provider_options_' . $service_type_index][$options_set][$option_title . ' -text-'] = array(
                            //'#title' => $option_title . ' -text-',
                            '#type' => 'textfield',
                            '#default_value' => isset($provider_options[$options_set][$option_title . ' -text-']) ? $provider_options[$options_set][$option_title . ' -text-'] : NULL,

                            '#states' => array(
                                  'invisible' => array(
                                      //':input[name="' . "provider_options_" . $service_type_index . "[$options_set][$option_title]" . '"]' => array('checked' => FALSE),
                                      ':input[name="' . "s[$service_type_index][provider_options_$service_type_index][$options_set][$option_title]" . '"]' => array('checked' => FALSE),

                                ),
                            ),
                            '#attributes' => array('class' => array('-text-'), 'style' => 'background: #eee; border: none; padding: 3px;'),
                            '#prefix' => '<div style="float: left; margin-left: 20px;">',
                            '#suffix' => '</div></div>',

                          );
                        }

                    }

              }            


  //      // Find out overall rating for the provider.
  //      $criteria = array(
  //        'entity_type' => 'node',
  //        'entity_id' => $form['nid']['#value'],
  //        'function' => 'average',
  //      );
  //      $votes = votingapi_select_results($criteria);
  //     
  //      foreach ($votes as $vote) {
  //        if ($vote['tag'] == 'overall') {
  //          $form['s'][$service_type_index]['provider_options_' . $service_type_index]['Provider Info']['Overall Rating']['#default_value'] = number_format($vote['value'] * 0.05, 1);
  //          break;
  //        }
  //      }
      }
      
      
      
      
      
      
      
      
      
      
      
      
  /*    
      $provider_options_bu_structure = unserialize(PROVIDER_OPTIONS_BU);
      $provider_options_bu = isset($p_data['provider_options_bu']) ? $p_data['provider_options_bu'] : $p_data['provider_options'];
      
      $form['s']['bu']['provider_options_bu'] = array(
        '#type' => 'fieldset',
        '#title' => 'Business Provider options',
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
        '#tree' => TRUE,
        '#weight' => 11,
      );
            $form['s']['bu']['provider_options_bu']['enabled'] = array(
              '#title' => 'Enable Option Tab',
              '#type' => 'checkbox',
              '#default_value' => isset($provider_options_bu['enabled']) ? $provider_options_bu['enabled'] : NULL,
            );
            
            foreach ($provider_options_bu_structure as $options_set => $options_data) {
              
                  $form['s']['bu']['provider_options_bu'][$options_set] = array(
                    '#type' => 'fieldset',
                    '#title' => $options_set,
                    '#collapsible' => TRUE,
                    '#collapsed' => TRUE,
                    '#states' => array(
                                'invisible' => array(
                                    //':input[name="' . "provider_options_bu[enabled]" . '"]' => array('checked' => FALSE),
                                    ':input[name="' . "s[bu][provider_options_bu][enabled]" . '"]' => array('checked' => FALSE),
                              ),
                          ),
                  );
      
                  
                  foreach ($options_data as $option_title => $option_type) {
                    
                      $form['s']['bu']['provider_options_bu'][$options_set][$option_title] = array(
                        '#title' => $option_title,
                        '#type' => $option_type,
                        '#default_value' => isset($provider_options_bu[$options_set][$option_title]) ? $provider_options_bu[$options_set][$option_title] : NULL,
                      );
                      
                      if ($option_type == 'textarea') {
                        $form['s']['bu']['provider_options_bu'][$options_set][$option_title]['#default_value'] = !empty($provider_options_bu[$options_set][$option_title]) ? (is_array($provider_options_bu[$options_set][$option_title]) ? $provider_options_bu[$options_set][$option_title]['value'] : $provider_options_bu[$options_set][$option_title]) : NULL;
                        $form['s']['bu']['provider_options_bu'][$options_set][$option_title]['#type'] = 'text_format';
                        $form['s']['bu']['provider_options_bu'][$options_set][$option_title]['#format'] = 'full_html';//'filtered_html'; //'gv_full_html'; 
                      }
                      
                      if ($option_type == 'checkbox') {
                        
                        $form['s']['bu']['provider_options_bu'][$options_set][$option_title]['#prefix'] = '<div style="overflow: hidden;"><div style="float: left;">';
                        $form['s']['bu']['provider_options_bu'][$options_set][$option_title]['#suffix'] = '</div>';
                        
                        $form['s']['bu']['provider_options_bu'][$options_set][$option_title . ' -text-'] = array(
                          //'#title' => $option_title . ' -text-',
                          '#type' => 'textfield',
                          '#default_value' => isset($provider_options_bu[$options_set][$option_title . ' -text-']) ? $provider_options_bu[$options_set][$option_title . ' -text-'] : NULL,
                            
                          '#states' => array(
                                'invisible' => array(
                                    ':input[name="' . "provider_options_bu[$options_set][$option_title]" . '"]' => array('checked' => FALSE),

                              ),
                          ),
                          '#attributes' => array('class' => array('-text-'), 'style' => 'background: #eee; border: none; padding: 3px;'),
                          '#prefix' => '<div style="float: left; margin-left: 20px;">',
                          '#suffix' => '</div></div>',
                            
                        );
                      }
                    
                  }
                  
            }            
            
      
//      // Find out overall rating for the provider.
//      $criteria = array(
//        'entity_type' => 'node',
//        'entity_id' => $form['nid']['#value'],
//        'function' => 'average',
//      );
//      $votes = votingapi_select_results($criteria);
//     
//      foreach ($votes as $vote) {
//        if ($vote['tag'] == 'overall') {
//          $form['s']['bu']['provider_options_bu']['Provider Info']['Overall Rating']['#default_value'] = number_format($vote['value'] * 0.05, 1);
//          break;
//        }
//      }
            
*/            
            
            
                  
      $form['field_p_types']['#suffix'] = '<div class="bottom-clear"></div>';
      
      $form['field_p_erating']['#prefix'] = '<div id="listings">';
      //$form['field_p_erating_cc']['#suffix'] = '<div class="bottom-clear"></div></div>';
      $form['field_p_erating_re_ca']['#suffix'] = '<div class="bottom-clear"></div></div>';
      //$form['field_p_erating_smbv']['#suffix'] = '<div class="bottom-clear"></div></div>';
       
      
      // Hide smbv service checkbox and list position.
      $form['field_p_erating_smbv']['#access'] = FALSE;
      unset($form['field_p_types']['und']['#options']['smbv']);
      
          
      /*
      $form['data_quote'] = array(
        '#type' => 'fieldset',
        '#title' => t('Quote and Its Author'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
        '#tree' => TRUE,
        '#weight' => 12,
      );
            $form['data_quote']['q_text'] = array(
              '#type' => 'textarea',
              //'#type' => 'text_format',
              //'#format' => 'full_html',
                
              '#title' => t('Quote text'),
              '#default_value' => isset($p_data['quote']['q_text']) ? $p_data['quote']['q_text'] : '',
            );
            $form['data_quote']['q_author'] = array(
              '#type' => 'textfield',
              '#title' => t('Quote author'),
              '#default_value' => isset($p_data['quote']['q_author']) ? $p_data['quote']['q_author'] : '',
            );
            
        */    
            
            
            
            

      // Admin Rate and vote group.
      $rating_options = array('' => FALSE, '20' => 'Horrible', '40' => 'Bad', '60' => 'OK', '80' => 'Good', '100' => 'Excellent');
      $weight = 8;

      $vote_keys = array('sound' => SOUND, 'install' => INSTALL, 'service' => CUSTOMER, 'rely' => RELY, 'features' => FEATURES, 'money' => PRICE);
      
      $votes = array();
      $form['ereview'] = array(
        '#type' => 'fieldset',
        '#title' => 'Editor\'s Rating for this VoIP Provider',
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
        '#weight' => 11,
      );
            /*
          $form['ereview']['votes'] = array(
              '#type' => 'container',
              '#prefix' => '<div class="rate-caption"><div class="col-2">' . t('Click Stars To Start Reviewing') . '</div><div class="col-3">' . t('Rate it') . '</div></div>',
          );
          foreach ($vote_keys as $vote_key => $vote_title) {
            $form['ereview']['votes']['rating_' . $vote_key] = array(
              '#type' => 'select',
              '#options' => $rating_options,
              '#default_value' => $rating_options[''],
              '#prefix' => '<div class="vote"><div class="vote-title">' . t($vote_title) . '</div>',
              '#suffix' => '<div class="choice" id="edit-rating-' . $vote_key . '-choice">Rate it!</div></div>',
            );
          }

          $rating_recommend_options = $rating_options = array('100' => 'Yes', '0' => 'No');
          $form['ereview']['rating_recommend'] = array(
              '#type' => 'radios',
              '#options' => $rating_recommend_options,
              '#default_value' => FALSE,
              '#prefix' => '<div class="label left">' . RECOMMEND . '</div>',
          );

          // Fill saved editor's ratings, if editing...
          if(arg(1) != 'add' && isset($p_data['ereview']['editor_ratings'])) {

              foreach ($p_data['ereview']['editor_ratings'] as $tag => $value) {
                if ($tag == 'recommend') {
                  $recommend = $value;
                  continue;
                }
                $form['ereview']['votes']['rating_' . $tag]['#default_value'] = $value;
              }


              if (isset($recommend)) {
                $form['ereview']['rating_recommend']['#default_value'] = $recommend;
              }
          }
          */

          $pros_and_cons_descrs = array(/*'The good', 'The bad', */'The bottom line');
          $form['ereview']['data_pros_and_cons'] = array(
            '#type' => 'fieldset',
            '#title' => t('Pros and Cons'),
            '#collapsible' => TRUE,
            '#collapsed' => FALSE,
            '#tree' => TRUE,
            '#weight' => 6,
          );
          foreach($pros_and_cons_descrs as $pros_and_cons_title) {
            $form['ereview']['data_pros_and_cons'][$pros_and_cons_title] = array(
              '#type' => 'textarea',
              '#title' => $pros_and_cons_title,
              '#default_value' => isset($p_data['ereview']['pros_and_cons'][$pros_and_cons_title]) ? $p_data['ereview']['pros_and_cons'][$pros_and_cons_title] : '',
            );
          }


//          // Add stars widgets to a Rating block
//          $module_path = drupal_get_path('module', 'gv_pages');
//          $module_misc_path = drupal_get_path('module', 'gv_misc');
//
//          $form['#attached']['js'] = array(
//
//            // Add stars widgets to a Rating block
//            $module_path . '/js/vn_review_stars.js',
//            'sites/all/libraries/jquery.ui.stars/jquery.ui.stars.min.js',
//          );
//
//          $form['#attached']['library'][] = array('system', 'ui.widget');
//
//          $form['#attached']['css'] = array(
//            'sites/all/libraries/jquery.ui.stars/css/jquery.ui.stars.css',
//          );

          
          
          // Fields to check if we need to rebuild providers sprites with this provider logo.
          $erating_fields_names = array('field_p_erating', 'field_p_erating_residential', 'field_p_erating_sip', 'field_p_erating_pbx', 'field_p_erating_mo', 'field_p_erating_ifa', 'field_p_erating_cc', 'field_p_erating_bu_ca', 'field_p_erating_re_ca', 'field_p_erating_smbv');

          foreach ($erating_fields_names as $erating_field) {
            $erating_fields[$erating_field] = $form[$erating_field]['und'][0]['value']['#default_value'];
          }
          
          $form['erating_fields_original'] = array(
            '#type' => 'hidden',
            '#default_value' => serialize($erating_fields),
          );
          
          
          $form['#attributes']['class'][] = 'gv-edit-review-page';


            
      
      $form['#validate'][] = 'gv_pages_validateForm_provider';
      $form['#submit'][] = 'gv_pages_submitForm_provider';
      
    break;
    
    
    
    
    
    
    
  
       
    case 'preface_node_form':
/* 
      // Deny editing titles for everyone except the root.
      if(arg(1) != 'add') {
        global $user;
        if($user->uid == 1) {
          $form['title'] = array(
            '#type' => 'item',
            '#title' => t('Title'),
            '#markup' => '<div class="title">' . $form['title']['#default_value'] . '</div>',
            '#description' => t('This field can be edited only by the Root administrator. Used only as id for loading to the listing page and will be hidden on the page.'),
          );
        }
      } // End of if(arg(1) != 'add') {
*/    
      
      
      // Hide some options for all.
      $form['comment_settings']['#access'] = FALSE;
      $form['revision_information']['#access'] = FALSE;
      
      // And leave some options for the root.
      global $user;
      if ($user->uid != 1) {
        $form['field_preface_key']['#access'] = FALSE;
      }
      if (!in_array('administrator', $user->roles)) {
        // Deny to change the status of the node (it should always be unpublished).
        $form['options']['#access'] = FALSE;
        // Hide url aliasing options.
        $form['path']['#access'] = FALSE;
      }
      
      
      // Connect Ckeditor for additional fields.
      
      //$form['body']['und'][0]['#format'] = 'gv_full_html'; // link
      //$form['body']['und'][0]['#format'] = 'filtered_html'; // unlink
      $keys = element_children($form['field_preface_bottom']['und']);
      foreach ($keys as $key) {
        $form['field_preface_bottom']['und'][$key]['field_preface_b_body']['und'][0]['#format'] = 'full_html'; // link Ckeditor
      }
      
    break; // End of case 'preface_node_form':

  
    
    
    
    
    
    
    
    
    
  
    case 'review_node_form':
      
      // Control the editing of review pages.
      
      // Metatags.
      gv_misc_addMetatag('title', 'Review Your VoIP Provider');
      gv_misc_addMetatag('description', 'Share your feedback with others. Rate and review your user experience with your current VoIP Provider. Let others know.');
      gv_misc_addMetatag('keywords', 'submit voip review, review my voip provider, rate my provider, voip provider submit review');
      
      global $user;
      
      
      if (in_array('administrator', $user->roles)) {
        $current_user_is_admin = TRUE;
      }
      else {
        $current_user_is_admin = FALSE;
      }
      
      
     
      if (!$current_user_is_admin) {
        $form['title']['#access'] = FALSE;
        // Show authoring info (including a date) only for administrator.
        $form['author']['#access'] = FALSE;
      }
//      else {
//        // Or connect datepicker to a post date field
//        $module_path = drupal_get_path('module', 'gv_pages');
//  
//        $form['#attached']['css'][] = $module_path . '/css/gv_pages.css';
//        $form['#attached']['js'][] = $module_path . '/js/gv_review_datepicker.js';
//        $form['#attached']['library'][] = array('system', 'ui.datepicker');
//      }
      
      //$breadcrumb = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), 'Submit Provider Review' )));
      
      // Set outer fieldset with the main caption for the Submit a Review page.
      $form['#prefix'] = '<fieldset id="outer-box" class="form-wrapper"><legend><span class="fieldset-legend">' . t('Share Your Feedback - What Do You Think of Your VoIP Provider?') . '</span></legend><div class="fieldset-wrapper" style="display: block;">';
      $form['#suffix'] = '</div></fieldset>';
      
      //dpm($form);
      $form['actions']['submit']['#value'] = t('Submit Review');
      
      // Make some small corrections.
      $form['title']['#title'] = t('Review title');
      $form['title']['#weight'] = -1;
      
      
      
      
      
      // Convert the field_r_notapproved (if it is set) to a checkbox temporarily.
      if (isset($form['field_r_notapproved'])) {
        // Only admin can approve it.
        $form['field_r_notapproved']['#access'] = FALSE;
        if ($current_user_is_admin) {
          $form['field_r_notapproved_checkbox'] = array(
            '#type' => 'checkbox',
            '#title' => t('This review is approved'),
            '#default_value' => !$form['field_r_notapproved']['und'][0]['value']['#default_value'],
            '#weight' => 30,
          );
        }
        elseif(arg(1) != 'add') {
          $form['field_r_notapproved_info'] = array(
            '#type' => 'item',
            '#title' => t('Approval status for this review:'),
            '#markup' => $form['field_r_notapproved']['und'][0]['value']['#default_value'] ? t('Is not approved') : t('Is approved'),
            '#weight' => 30,
          );
        }
      }
      
      // Hide some fields, so that even super admin could not see and change it.
      $form['field_r_rating_overall']['#access'] = FALSE;
      $form['options']['promote']['#access'] = FALSE;
      $form['options']['sticky']['#access'] = FALSE;
      $form['revision_information']['#access'] = FALSE;
      $form['comment_settings']['#access'] = FALSE;
      $form['field_r_provider_name']['#access'] = FALSE;
      
      
      
      
      
      // Group fields
      
      $form['about_you'] = array(
        '#type' => 'fieldset',
        '#title' => 'Step 1: Your Information',
        '#weight' => -15,
      );
          // Rebuild fields for fname, lname and email to make it possibele to add a Title attr to a input tag.
          $fields_to_rebuild = array('field_r_fname' => FNAME_HINT, 'field_r_lname' => LNAME_HINT, 'field_r_email' => EMAIL_HINT);
          foreach ($fields_to_rebuild as $field_to_rebuild => $field_hint) {
            $temp_field = $form[$field_to_rebuild]['und'][0];
            $form['about_you'][$field_to_rebuild . '_temp'] = array(
                '#type' => 'textfield',
                '#title' => t($temp_field['#title']),
                '#default_value' => $temp_field['value']['#default_value'],
                '#description' => $temp_field['#description'],
                '#required' => $temp_field['value']['#required'],
                '#attributes' => array('title' => t($field_hint)),
            );
            $form[$field_to_rebuild]['#access'] = FALSE;
          }
          $form['about_you']['field_r_fname_temp']['#title'] = t('Your name');
          $form['about_you']['field_r_lname_temp']['#title'] = '';
          
          
          
      $form['provider'] = array(
        '#type' => 'fieldset',
        '#title' => 'Step 2: Your VoIP Provider Details',
        //'#collapsible' => TRUE,
        //'#collapsed' => FALSE,
        '#weight' => -10,
      );
          $form['provider']['field_ref_provider'] = $form['field_ref_provider'];
          $form['provider']['field_r_oprovider'] = $form['field_r_oprovider'];
          unset($form['field_ref_provider'], $form['field_r_oprovider']);
      
          $form['field_r_data']['#access'] = FALSE;
          
          
          $lines_options = array(1 => '1 - 5', 2 => '6 - 10', 3 => '11+');
          $form['provider']['lines'] = array(
            '#type' => 'radios',
            //'#title' => t('How many lines do you have:'),
            '#options' => $lines_options,
            '#default_value' => FALSE,
            '#weight' => 10,
            '#prefix' => '<div class="label left">How many lines do you have:</div>',
          );
          
          
      
          
      // Rate and vote group.
      //$rating_options = array('' => '- ' . t('Select a value') . ' -', '20' => 'Really Bad', '40' => 'Bad', '60' => 'OK', '80' => 'Good', '100' => 'Really Good');
      
          
      //$rating_options = array('' => FALSE, '20' => 'Horrible', '40' => 'Bad', '60' => 'OK', '80' => 'Good', '100' => 'Excellent');
      $rating_options = array(/*'' => FALSE,*/ '20' => 'Horrible', '40' => 'Bad', '60' => 'OK', '80' => 'Good', '100' => 'Excellent');
      $weight = 8;
     
      //$vote_keys = array('features', 'sound', 'rely', 'money', 'service');
      $vote_keys = array('sound' => SOUND, 'install' => INSTALL, 'service' => CUSTOMER, 'rely' => RELY, 'features' => FEATURES, 'money' => PRICE, );
      $votes = array();
      $form['ureview'] = array(
        '#type' => 'fieldset',
        '#title' => 'Step 3: Rate and Review Your VoIP Provider',
        '#weight' => -4,
      );
          
      
          $form['ureview']['u_input'] = array(
              '#type' => 'container',
          );
          
              $form['ureview']['u_input']['votes'] = array(
                  '#type' => 'container',
                  '#prefix' => '<div class="rate-caption"><div class="col-2">Click Stars To Start Reviewing</div><div class="col-3">Rate it</div></div>',
              );
              foreach ($vote_keys as $vote_key => $vote_title) {
                $form['ureview']['u_input']['votes']['rating_' . $vote_key] = array(
                  '#type' => 'select',
                  '#options' => $rating_options,
                  // Commented because caused errors on w3 html validation.
                  //'#default_value' => $rating_options[''],
                  '#prefix' => '<div class="vote"><div class="vote-title">' . $vote_title . '</div>',
                  '#suffix' => '<div class="choice" id="edit-rating-' . $vote_key . '-choice">Rate it!</div></div>',
                );
    //            $form['ureview']['votes']['rating_' . $vote_key . '_choice1'] = array(
    //              '#markup' => '<div class="choice" id="edit-rating-' . $vote_key . '-choice">Rate it!</div>',
    //              //'#weight' => $weight++,
    //            );
              }

              //$rating_recommend_options = $rating_options = array('' => '- ' . t('Select a value') . ' -', '100' => 'Yes', '0' => 'No');
              $rating_recommend_options = $rating_options = array('100' => 'Yes', '0' => 'No');
              $form['ureview']['u_input']['rating_recommend'] = array(
                  '#type' => 'radios',
                  '#options' => $rating_recommend_options,
                  '#default_value' => FALSE,
                  '#prefix' => '<div class="label left">' . RECOMMEND . '</div>',
              );

              // just for reference from a below call
              //$form['ureview']['rating_recommend']['#default_value'] = $recommend;

              $form['ureview']['u_input']['pros'] = array(
                '#type' => 'textfield',
                '#title' => 'Pros',
                '#default_value' => '',
                '#attributes' => array('title' => PROS_HINT),
              );
              $form['ureview']['u_input']['cons'] = array(
                '#type' => 'textfield',
                '#title' => 'Cons',
                '#default_value' => '',
                '#attributes' => array('title' => CONS_HINT),
              );


              //$form['body']['#weight'] = 2;
              $form['body']['und'][0]['value']['#rows'] = 5;
              // Unlink Ckeditor
              // Bad trial...
              //$form['body']['und'][0]['#type'] = 'textarea';
              // Good trial! :)
              ///$form['body']['und'][0]['#format'] = 'gv_full_html'; // link
              $form['body']['und'][0]['#format'] = 'filtered_html'; // unlink

              $form['ureview']['u_input']['body'] = $form['body'];
              unset($form['body']);

          $form['ureview']['tips'] = array(
              '#type' => 'container',
          );
            
              $form['ureview']['tips']['data'] = array(
                '#markup' => "<div id='tips-block'><div class='title'>Review Tips:</div>
<span>What do you like about your provider?</span>
<span>What do you dislike and why?</span>
<span>Talk about the advantages & disadvantages of the specific plan you have.</span>
<span>How long have you been with the provider.</span>
<span>Write as if you're literally telling a friend about the provider/service.</span>
</div>
<div id='about'><div class='title'>About Reviews:</div>
<span>We will only accept and publish honest, detailed, and appropriate reviews.</span>
<span>We will not publish reviews that use profanity. We reserve the right to refuse any review that is not verified by the reviewer.</span>
<span>Your review will be published after it's been approved by one of our editors.</span>
<span>Submissions that do not follow the above guidelines will not be posted.</span></div>",
              );
          
          
      // Hide helper hidden field (for saving temporary serialized ratings data)
      $form['field_ratings_oprovider']['#access'] = FALSE;
      
      // Hide approvecode field (used for unauthorized user email approve).
      // It should be empty if a user has approved email.
      $form['field_r_approvecode']['#access'] = FALSE;
      
      
      
      if(arg(1) == 'add') {
        
        // Add a review page.
      
        // This TEMPORARY title will see only Administrators.
        if (!$current_user_is_admin) {
          $form['title']['#default_value'] = 'Unapproved review ' . time();
        }
        
        // Generate an approval code for email verification.
        if (!$user->uid) {
          $form['field_r_approvecode']['und'][0]['value']['#default_value'] = md5(time());
        }
        
        if ($user->uid) {
          // Get all additional data for first/last names extraction.
          $user = user_load($user->uid);
          // Autofill first/last names and email.
          //$form['about_you']['field_r_fname']['und'][0]['value']['#default_value'] = $user->field_u_fname['und'][0]['value'];
          //$form['about_you']['field_r_lname']['und'][0]['value']['#default_value'] = $user->field_u_lname['und'][0]['value'];
          //$form['about_you']['field_r_email']['und'][0]['value']['#default_value'] = $user->mail;
          $form['about_you']['field_r_fname_temp']['#default_value'] = $user->field_u_fname['und'][0]['value'];
          $form['about_you']['field_r_lname_temp']['#default_value'] = $user->field_u_lname['und'][0]['value'];
          $form['about_you']['field_r_email_temp']['#default_value'] = $user->mail;
          
          // Disallow to choose another email for a registered user.
          $form['about_you']['field_r_email_temp']['#access'] = FALSE;
          $form['about_you']['email_autofilled'] = array(
              '#type' => 'item',
              '#title' => 'Your email',
              '#markup' => $user->mail,
          );

        }
//        else {
//          // Options for not logged in users.
//          $info_for_notlogged = '<fieldset id="not-logged-info" class="collapsible form-wrapper"><legend><span class="fieldset-legend"><a class="fieldset-title" href="#">' . t('You are not logged in...') . '</a></span></legend><div class="fieldset-wrapper" style="display: block;"><div>' . t('You may !login or !register to have a full control over your submitted reviews...', array('!login' => l(t('log in'), "user", array('query' => array('destination' => url($_GET['q']))) ), '!register' => l(t('register'), "user/register", array('query' => array('destination' => url($_GET['q']))) )) ) . '</div><div>' . t('Or submit a review as a guest (right below), but you will not be avle to edit or cancel it.') . '</div></div></fieldset>';
//          $form['#prefix'] = $info_for_notlogged . '<fieldset id="submit-guest" class="collapsible form-wrapper"><legend><span class="fieldset-legend"><a class="fieldset-title" href="#">' . t('Submit a review as a guest') . '</a></span></legend><div class="fieldset-wrapper" style="display: block;">';
//          $form['#suffix'] = '</div></fieldset>';
//        }
        if ($current_user_is_admin) {
          $form['about_you']['user_ip_show'] = array(
              '#type' => 'item',
              '#title' => 'User IP:',
              '#markup' => $_SERVER['REMOTE_ADDR'],
          );
        }
        $form['user_ip'] = array(
          '#type' => 'hidden',
          '#value' => $_SERVER['REMOTE_ADDR'],
        );
        
        
        // Set a select of available providers.
        $providers['_none'] = '- Select a value -';
        gv_misc_getProviders($providers);
        $providers[41] = 'OTHER SP';
        $form['provider']['field_ref_provider']['und']['#options'] = $providers;
        $form['provider']['field_ref_provider']['und']['#default_value'][0] = '_none';

        // Check if the review is added via a button on a provider's page.
        $provider_nid = NULL;
        if (isset($_GET['id'])) {
          $provider_nid = check_plain($_GET['id']);
          if(!isset($providers[$provider_nid])) {
            $provider_nid = NULL;
          }
          else {
            $provider_id_source = 'your choice while viewing this provider\'s page';
          }
        }
        elseif ($_SERVER['HTTP_REFERER']) {
          // If a user has clicked "Submit a review" on the Provider's page, treat it as choice of that provider.
          $refferer = explode('http://getvoip.com/', $_SERVER['HTTP_REFERER']);
          if (isset($refferer[1]) && $refferer[1]) {
            $query = db_select('url_alias', 'ua')
              ->fields('ua', array('source'))
              ->condition('alias', $refferer[1]);
            $source = $query->execute()->fetchField();
            $source = str_replace('node/', '', $source);
            if (is_numeric($source)) {
              $query = db_select('node', 'n')
                ->fields('n', array('type'))
                ->condition('nid', $source);
              $type = $query->execute()->fetchField();
              if ($type == 'provider') {
                $provider_nid = $source;
                $provider_id_source = 'the page you have been viewing when clicked a Submit review button';
              }
            }
          } // End of if (isset($refferer[1]) && $refferer[1]) {
        } // End of elseif ($_SERVER['HTTP_REFERER']) {
        
        
        // If a target provider has been defined by id from url or by referrer (previous) page,
        // set this provider as selected by default and show its info and preview.
        if ($provider_nid) {
          
          /*
          $form['provider']['id_source'] = array(
            '#markup' => '<div class="id-source">' . t('A taget provider has been chosen based on !source.', array('!source' => $provider_id_source)) . '<div>' . t('If You want to chose an other provider, please click !here.', array('!here' => l(t('here'), 'node/add/review'))) . '</div></div>',
          ); 
          
          $provider_node = node_load($provider_nid);
          $form['provider']['provider_title'] = array(
            '#type' => 'item',
            '#title' => t('A provider You have chosen'),
            '#markup' => l($provider_node->title, 'node/' . $provider_node->nid),
          ); 
          
          $provider_preview = '<div class="p-preview">' . render(node_view($provider_node, 'teaser')) . '</div>';
          $form['provider']['preview'] = array(
            '#type' => 'fieldset',
            '#title' => t('Provider preview') . ': ' . $provider_node->title,
            '#collapsible' => TRUE,
            '#collapsed' => TRUE,
          );
              $form['provider']['preview']['provider_preview'] = array(
                '#markup' => $provider_preview,
                '#weight' => -100,
              ); 
          */
          
          //$form['field_ref_provider']['und']['#options'] = array($provider_nid => $providers[$provider->nid]);
          //$form['field_r_oprovider']['und'][0]['value']['#default_value'] = $provider_nid;
          $form['provider']['field_ref_provider']['und']['#default_value'][0] = $provider_nid;
          //$form['provider']['field_ref_provider']['#access'] = FALSE;
          //$form['provider']['field_r_oprovider']['#access'] = FALSE;
          
        } // End of if($provider_nid) { // // If a target provider has been defined by id from url or by referrer (previous) page,
        
        
      } // End of if(arg(1) == 'add') {
      else {
        
        
        // Edit a review page.
        
        
        // Show saved it a hidden field other data
        if (isset($form['field_r_data']['und'][0]['value']['#default_value'])) {
          $other_data = unserialize($form['field_r_data']['und'][0]['value']['#default_value']);
          $form['provider']['lines']['#default_value'] = $other_data['lines'];
          $form['ureview']['u_input']['pros']['#default_value'] = $other_data['pros'];
          $form['ureview']['u_input']['cons']['#default_value'] = $other_data['cons'];
          
          $user_ip = isset($other_data['user_ip']) ? $other_data['user_ip'] : 'N/A';
          if ($current_user_is_admin) {
            $form['about_you']['user_ip_show'] = array(
                '#type' => 'item',
                '#title' => 'User IP:',
                '#markup' => $user_ip,
            );
          }
          $form['user_ip'] = array(
            '#type' => 'hidden',
            '#value' => $user_ip,
          );
        }

        // Save the current email... in case it will be changes now, we could delete old it's votes connected to the old email.
        $form['email_old'] = array(
          '#type' => 'hidden',
          '#value' => $form['about_you']['field_r_email_temp']['#default_value'],
        );
        
        // Disallow to choose another email for a registered user.
        if (!$current_user_is_admin) {
          $form['about_you']['field_r_email_temp']['#access'] = FALSE;
          $form['about_you']['email_autofilled'] = array(
              '#type' => 'item',
              '#title' => 'Your email',
              //'#markup' => $form['about_you']['field_r_email']['und'][0]['value']['#default_value'],
              '#markup' => $form['about_you']['field_r_email_temp']['#default_value'],
          );
        }
        if(!isset($form['provider']['field_ref_provider']['und']['#default_value'][0]) || $form['provider']['field_ref_provider']['und']['#default_value'][0] == '_none') {
          // If a provider has not been selected from a list,
          // then it has been set manually in the field field_r_oprovider
          
          $providers = array();
          gv_misc_getProviders($providers);
          $providers[41] = 'OTHER SP';
          
          $form['provider']['field_ref_provider']['und']['#options'] = $providers;
          $form['provider']['field_ref_provider']['und']['#default_value'][0] = 41;
          
          // Should we allow to a regular user to edit the name in the text field / reselect from the list?
          // Or once chosen it could not be changed by the user (for example, it could be changed only by an admin)?
          // Let's choose the second variant.
          if(!in_array('administrator', $user->roles)) {
            $form['provider']['field_ref_provider']['#access'] = FALSE;
            $form['provider']['field_r_oprovider']['#access'] = FALSE;  
            $form['provider']['provider_title_noedit'] = array(
              '#type' => 'item',
              '#title' => 'Your VoIP Service Provider (*)',
              '#markup' => '<div class="text">' . $form['provider']['field_r_oprovider']['und'][0]['value']['#default_value'] . '</div>',
              //'#weight' => -100,
            ); 
          }
          
          // Load saved votes from this node's field_ratings_oprovider
          $field_ratings_oprovider = unserialize($form['field_ratings_oprovider']['und'][0]['value']['#default_value']);

          foreach ($field_ratings_oprovider as $tag => $value) {
            $form['ureview']['u_input']['votes']['rating_' . $tag]['#default_value'] = $value;
          }
          
          $form['ureview']['u_input']['rating_recommend']['#default_value'] = $field_ratings_oprovider['recommend'];
          
        } // End of if(!isset($form['field_ref_provider']['und']['#default_value'][0]) || $form['field_ref_provider']['und']['#default_value'][0] == '_none') {
        else {
          // A provider has been selected from a list.
          
          // If this review is not approved OR this review is NOT published.
          // Load votes data from a local field_ratings_oprovider, not from Voting api tables.
          if ($form['field_r_notapproved']['und'][0]['value']['#default_value'] || !$form['options']['status']['#default_value']) {
            $saved_ratings = unserialize($form['field_ratings_oprovider']['und'][0]['value']['#default_value']);
            foreach ($saved_ratings as $tag => $value) {
              if ($tag == 'recommend') {
                $recommend = $value;
                continue;
              }
              $form['ureview']['u_input']['votes']['rating_' . $tag]['#default_value'] = $value;
            }
          }
          else {
            // Else load saved votes for a provider of this review.
            $criteria = array(
              'entity_type' => 'node',
              'entity_id' => $form['provider']['field_ref_provider']['und']['#default_value'][0],
              'uid' => $form['uid']['#value'],
              // Make it possible to count votes of several unauthorized (uid = 0, but with different emails) users.
              'vote_source' => $form['about_you']['field_r_email_temp']['#default_value'],
            );
            
            $votes = gv_misc_getVotesIDs($criteria); // = votingapi_select_votes($criteria)
            
            if ($votes) {
              foreach ($votes as $vote) {
                if ($vote['tag'] == 'recommend') {
                  $recommend = $vote['value'];
                  continue;
                }
                $form['ureview']['u_input']['votes']['rating_' . $vote['tag']]['#default_value'] = $vote['value'];
              }
            }
          } // End of else of if ($form['field_r_notapproved']['und'][0]['#default_value']) {
          if (isset($recommend)) {
            $form['ureview']['u_input']['rating_recommend']['#default_value'] = $recommend;
          }
          
          // Show preview of the provider (as a teaser) on the edit form.
          $provider_node = node_load($form['provider']['field_ref_provider']['und']['#default_value'][0]);
          /*
          $provider_preview = '<div class="p-preview">' . render(node_view($provider_node, 'teaser')) . '</div>';
          $form['provider']['provider_preview'] = array(
              '#markup' => $provider_preview,
              '#weight' => -100,
          ); 
          */
          $form['provider']['provider_title_noedit'] = array(
            '#type' => 'item',
            '#title' => 'Your VoIP Service Provider:',
            '#markup' => '<div class="text">' . l(html_entity_decode($provider_node->field_p_name['und'][0]['safe_value']), 'node/' . $provider_node->nid) . '</div>',
            //'#weight' => -100,
          );
          
          $form['provider']['field_ref_provider']['#access'] = FALSE;
          $form['provider']['field_r_oprovider']['#access'] = FALSE;
          
          
        } // End of A provider has been selected from a list.
        
      } // End of Edit a review page.
      
      
      
      // Add stars widgets to a Rating block
      $module_path = drupal_get_path('module', 'gv_pages');
      $module_misc_path = drupal_get_path('module', 'gv_misc');
      
      $form['#attached']['js'] = array(

        // Add a characters counter.
        //$module_misc_path . '/js/gv_misc_charCount.js',
        //'sites/all/libraries/jquery.plugins/charCount.js',

        // Add hints inside some fields
        $module_path . '/js/gv_review_fieldHints.js',

        // Add stars widgets to a Rating block
        $module_path . '/js/gv_review_stars.js',
        'sites/all/libraries/jquery.ui.stars/jquery.ui.stars.min.js',
      );

      $form['#attached']['library'][] = array('system', 'ui.widget');

      $form['#attached']['css'] = array(
        'sites/all/libraries/jquery.ui.stars/css/jquery.ui.stars.css',
      );

      
      

  
      $form['#attributes']['class'][] = 'gv-edit-review-page';
  
      $form['#validate'][] = 'gv_pages_validateForm_review';
      $form['#submit'][] = 'gv_pages_submitForm_review';
      
      
      //dpm($form);
      
    break; // End of Review of provider
    
    
    
    
    
    
    
    
    
    
    
    case 'phone_review_node_form':
//      die;
//      break;
      
      // Control the editing of phone review pages.
      
      
      // Metatags.
      gv_misc_addMetatag('title', 'Submit VoIP Phone Review');
      gv_misc_addMetatag('description', 'Share your VoIP phone experience with others. Use this quick form to submit your review and share your feedback');
      gv_misc_addMetatag('keywords', 'submit phone reviews, phone reviews from users');
      
      
      
      global $user;
      
      
      if (in_array('administrator', $user->roles)) {
        $current_user_is_admin = TRUE;
      }
      else {
        $current_user_is_admin = FALSE;
      }
      
      
     
      if (!$current_user_is_admin) {
        $form['title']['#access'] = FALSE;
        // Show authoring info (including a date) only for administrator.
        $form['author']['#access'] = FALSE;
      }
     
      
      //$breadcrumb = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), 'Submit Phone Review' )));
      
      // Set outer fieldset with the main caption for the Submit a Review page.
      $form['#prefix'] = '<fieldset id="outer-box" class="form-wrapper"><legend><span class="fieldset-legend">' . t('Share Your Feedback - What Do You Think of this VoIP Phone?') . '</span></legend><div class="fieldset-wrapper" style="display: block;">';
      $form['#suffix'] = '</div></fieldset>';
      
      //dpm($form);
      $form['actions']['submit']['#value'] = t('Submit Review');
      
      // Make some small corrections.
      $form['title']['#title'] = t('Review title');
      $form['title']['#weight'] = 100;
      
      
      
      
      
      // Convert the field_r_notapproved (if it is set) to a checkbox temporarily.
      if (isset($form['field_r_notapproved'])) {
        // Only admin can approve it.
        $form['field_r_notapproved']['#access'] = FALSE;
        if ($current_user_is_admin) {
          $form['field_r_notapproved_checkbox'] = array(
            '#type' => 'checkbox',
            '#title' => t('This review is approved'),
            '#default_value' => !$form['field_r_notapproved']['und'][0]['value']['#default_value'],
            '#weight' => 30,
          );
        }
        elseif(arg(1) != 'add') {
          $form['field_r_notapproved_info'] = array(
            '#type' => 'item',
            '#title' => t('Approval status for this review:'),
            '#markup' => $form['field_r_notapproved']['und'][0]['value']['#default_value'] ? t('Is not approved') : t('Is approved'),
            '#weight' => 30,
          );
        }
      }
      
      // Hide some fields, so that even super admin could not see and change it.
      $form['field_r_rating_overall']['#access'] = FALSE;
      $form['options']['promote']['#access'] = FALSE;
      $form['options']['sticky']['#access'] = FALSE;
      $form['revision_information']['#access'] = FALSE;
      $form['comment_settings']['#access'] = FALSE;
      $form['field_p_name']['#access'] = FALSE;
      
      
      
      
      
      // Group fields
      
      $form['about_you'] = array(
        '#type' => 'fieldset',
        '#title' => t('Step 1: Your Information'),
        '#weight' => -15,
      );
          // Rebuild fields for fname, lname and email to make it possibele to add a Title attr to a input tag.
          $fields_to_rebuild = array('field_r_fname' => FNAME_HINT, /*'field_r_lname' => LNAME_HINT,*/ 'field_r_email' => EMAIL_HINT);
          foreach ($fields_to_rebuild as $field_to_rebuild => $field_hint) {
            $temp_field = $form[$field_to_rebuild]['und'][0];
            $form['about_you'][$field_to_rebuild . '_temp'] = array(
                '#type' => 'textfield',
                '#title' => t($temp_field['#title']),
                '#default_value' => $temp_field['value']['#default_value'],
                '#description' => $temp_field['#description'],
                '#required' => $temp_field['value']['#required'],
                '#attributes' => array('title' => t($field_hint)),
            );
            $form[$field_to_rebuild]['#access'] = FALSE;
          }
          //$form['about_you']['field_r_fname_temp']['#title'] = t('Your name');
          //$form['about_you']['field_r_lname_temp']['#title'] = '';
          
          
        
      $form['phone'] = array(
        '#type' => 'fieldset',
        '#title' => t('Step 2: Your VoIP Phone Details'),
        //'#collapsible' => TRUE,
        //'#collapsed' => FALSE,
        '#weight' => -10,
      );
          $form['phone']['field_ref_phone'] = $form['field_ref_phone'];
          unset($form['field_ref_phone']);
      
          $form['field_r_data']['#access'] = FALSE;
          
          
          
          
          
          
//          $lines_options = array(1 => '1 - 5', 2 => '6 - 10', 3 => '11+');
//          $form['phone']['lines'] = array(
//            '#type' => 'radios',
//            //'#title' => t('How many lines do you have:'),
//            '#options' => $lines_options,
//            '#default_value' => FALSE,
//            '#weight' => 100,
//            '#prefix' => '<div class="label left">' . t('How many lines do you have:') . '</div>',
//          );
          
          
      
      
          
                
          
      // Rate and vote group.
      $rating_options = array('' => FALSE, '20' => 'Horrible', '40' => 'Bad', '60' => 'OK', '80' => 'Good', '100' => 'Excellent');
      $weight = 8;
     
      //$vote_keys = array('sound' => SOUND, 'install' => INSTALL, 'service' => CUSTOMER, 'rely' => RELY, 'features' => FEATURES, 'money' => PRICE);
      $vote_keys = array('performance' => PERFORMANCE, 'voice' => VOICE, 'install' => INSTALL, 'use_ease' => USE_EASE, 'durability' => DURABILITY, 'features' => FEATURES, 'price' => PRICE);
      
      $votes = array();
      $form['ureview'] = array(
        '#type' => 'fieldset',
        '#title' => t('Step 3: Rate and Review Your VoIP Phone'),
        '#weight' => -9,
      );
          
          $form['ureview']['votes'] = array(
              '#type' => 'container',
              '#prefix' => '<div class="rate-caption"><div class="col-2">' . t('Click Stars To Start Reviewing') . '</div><div class="col-3">' . t('Rate it') . '</div></div>',
          );
          foreach ($vote_keys as $vote_key => $vote_title) {
            $form['ureview']['votes']['rating_' . $vote_key] = array(
              '#type' => 'select',
              '#options' => $rating_options,
              '#default_value' => $rating_options[''],
              '#prefix' => '<div class="vote"><div class="vote-title">' . t($vote_title) . '</div>',
              '#suffix' => '<div class="choice" id="edit-rating-' . $vote_key . '-choice">Rate it!</div></div>',
            );
          }
      
          $rating_recommend_options = $rating_options = array('100' => 'Yes', '0' => 'No');
          $form['ureview']['rating_recommend'] = array(
              '#type' => 'radios',
              '#options' => $rating_recommend_options,
              '#default_value' => FALSE,
              '#prefix' => '<div class="label left">' . RECOMMEND_PHONE . '</div>',
          );
          
          // just for reference from a below call
          //$form['ureview']['rating_recommend']['#default_value'] = $recommend;
      
          
          
          
          
          
//          $form['ureview']['pros'] = array(
//            '#type' => 'textfield',
//            '#title' => t('Pros'),
//            '#default_value' => '',
//            '#attributes' => array('title' => t(PROS_HINT)),
//          );
//          $form['ureview']['cons'] = array(
//            '#type' => 'textfield',
//            '#title' => t('Cons'),
//            '#default_value' => '',
//            '#attributes' => array('title' => t(CONS_HINT)),
//          );
          
          
          
          
          
          
          
          //$form['body']['#weight'] = 2;
          $form['body']['und'][0]['value']['#rows'] = 5;
          // Unlink Ckeditor
          // Bad trial...
          //$form['body']['und'][0]['#type'] = 'textarea';
          // Good trial! :)
          ///$form['body']['und'][0]['#format'] = 'gv_full_html'; // link
          $form['body']['und'][0]['#format'] = 'filtered_html'; // unlink
          
          $form['ureview']['body'] = $form['body'];
          unset($form['body']);
          
      
      // Hide approvecode field (used for unauthorized user email approve).
      // It should be empty if a user has approved email.
      $form['field_r_approvecode']['#access'] = FALSE;
      
      
      
      if(arg(1) == 'add') {
        
        // Add a phone review page.
      
        // This TEMPORARY title will see only Administrators.
        if (!$current_user_is_admin) {
          $form['title']['#default_value'] = 'Unapproved review ' . time();
        }
        
        // Generate an approval code for email verification.
        if (!$user->uid) {
          $form['field_r_approvecode']['und'][0]['value']['#default_value'] = md5(time());
        }
        
        if ($user->uid) {
          // Get all additional data for first/last names extraction.
          $user = user_load($user->uid);
          // Autofill first/last names and email.
          //$form['about_you']['field_r_fname']['und'][0]['value']['#default_value'] = $user->field_u_fname['und'][0]['value'];
          //$form['about_you']['field_r_lname']['und'][0]['value']['#default_value'] = $user->field_u_lname['und'][0]['value'];
          //$form['about_you']['field_r_email']['und'][0]['value']['#default_value'] = $user->mail;
          $form['about_you']['field_r_fname_temp']['#default_value'] = $user->field_u_fname['und'][0]['value'];
          //////$form['about_you']['field_r_lname_temp']['#default_value'] = $user->field_u_lname['und'][0]['value'];
          $form['about_you']['field_r_email_temp']['#default_value'] = $user->mail;
          
          // Disallow to choose another email for a registered user.
          $form['about_you']['field_r_email_temp']['#access'] = FALSE;
          $form['about_you']['email_autofilled'] = array(
              '#type' => 'item',
              '#title' => t('Your email'),
              '#markup' => $user->mail,
          );

        }
//        else {
//          // Options for not logged in users.
//          $info_for_notlogged = '<fieldset id="not-logged-info" class="collapsible form-wrapper"><legend><span class="fieldset-legend"><a class="fieldset-title" href="#">' . t('You are not logged in...') . '</a></span></legend><div class="fieldset-wrapper" style="display: block;"><div>' . t('You may !login or !register to have a full control over your submitted reviews...', array('!login' => l(t('log in'), "user", array('query' => array('destination' => url($_GET['q']))) ), '!register' => l(t('register'), "user/register", array('query' => array('destination' => url($_GET['q']))) )) ) . '</div><div>' . t('Or submit a review as a guest (right below), but you will not be avle to edit or cancel it.') . '</div></div></fieldset>';
//          $form['#prefix'] = $info_for_notlogged . '<fieldset id="submit-guest" class="collapsible form-wrapper"><legend><span class="fieldset-legend"><a class="fieldset-title" href="#">' . t('Submit a review as a guest') . '</a></span></legend><div class="fieldset-wrapper" style="display: block;">';
//          $form['#suffix'] = '</div></fieldset>';
//        }
        if ($current_user_is_admin) {
          $form['about_you']['user_ip_show'] = array(
              '#type' => 'item',
              '#title' => t('User IP:'),
              '#markup' => $_SERVER['REMOTE_ADDR'],
          );
        }
        $form['user_ip'] = array(
          '#type' => 'hidden',
          '#value' => $_SERVER['REMOTE_ADDR'],
        );
        
        
        // Set a select of available phones.
        // As we use the entityReference field for phones and use only existing phones nodes
        // we can just use prefilled field data.
        //////////$phones['_none'] = t('- Select a value -');
        ///////////gv_misc_getPhones($phones);
        // $phones[41] = t('OTHER SP'); // we don't use it for phones. just for providers.
        ////$form['phone']['field_ref_phone']['und']['#options'] = $phones;
        ////$form['phone']['field_ref_phone']['und']['#default_value'][0] = '_none';
        $phones = $form['phone']['field_ref_phone']['und']['#options'];
        
        // Check if the review is added via a button on a phone's page.
        $phone_nid = NULL;
        if (isset($_GET['id'])) {
          $phone_nid = check_plain($_GET['id']);
          if(!isset($phones[$phone_nid])) {
            $phone_nid = NULL;
          }
          else {
            $phone_id_source = t('your choice while viewing this phone\'s page');
          }
        }
        elseif ($_SERVER['HTTP_REFERER']) {
          // If a user has clicked "Submit a review" on the phone's page, treat it as choice of that phone.
          $refferer = explode('http://getvoip.com/', $_SERVER['HTTP_REFERER']);
          if (isset($refferer[1]) && $refferer[1]) {
            $query = db_select('url_alias', 'ua')
              ->fields('ua', array('source'))
              ->condition('alias', $refferer[1]);
            $source = $query->execute()->fetchField();
            $source = str_replace('node/', '', $source);
            if (is_numeric($source)) {
              $query = db_select('node', 'n')
                ->fields('n', array('type'))
                ->condition('nid', $source);
              $type = $query->execute()->fetchField();
              if ($type == 'phone') {
                $phone_nid = $source;
                $phone_id_source = t('the page you have been viewing when clicked a Submit review button');
              }
            }
          } // End of if (isset($refferer[1]) && $refferer[1]) {
        } // End of elseif ($_SERVER['HTTP_REFERER']) {
        
        
        // If a target phone has been defined by id from url or by referrer (previous) page,
        // set this phone as selected by default and show its info and preview.
        if ($phone_nid) {
          
          /*
          $form['phone']['id_source'] = array(
            '#markup' => '<div class="id-source">' . t('A taget phone has been chosen based on !source.', array('!source' => $phone_id_source)) . '<div>' . t('If You want to chose an other phone, please click !here.', array('!here' => l(t('here'), 'node/add/phone_review'))) . '</div></div>',
          ); 
          
          $phone_node = node_load($phone_nid);
          $form['phone']['phone_title'] = array(
            '#type' => 'item',
            '#title' => t('A phone You have chosen'),
            '#markup' => l($phone_node->title, 'node/' . $phone_node->nid),
          ); 
          
          $phone_preview = '<div class="p-preview">' . render(node_view($phone_node, 'teaser')) . '</div>';
          $form['phone']['preview'] = array(
            '#type' => 'fieldset',
            '#title' => t('Phone preview') . ': ' . $phone_node->title,
            '#collapsible' => TRUE,
            '#collapsed' => TRUE,
          );
              $form['phone']['preview']['phone_preview'] = array(
                '#markup' => $phone_preview,
                '#weight' => -100,
              ); 
          */
          
          //$form['field_ref_phone']['und']['#options'] = array($phone_nid => $phones[$phone->nid]);
          $form['phone']['field_ref_phone']['und']['#default_value'][0] = $phone_nid;
          //$form['phone']['field_ref_phone']['#access'] = FALSE;
          
        } // End of if($phone_nid) { // // If a target phone has been defined by id from url or by referrer (previous) page,
        
        
      } // End of if(arg(1) == 'add') {
      else {
        
        
        // Edit a Phone review page.
        
        
        
        // Show saved it a hidden field other data
        if (isset($form['field_r_data']['und'][0]['value']['#default_value'])) {
          $other_data = unserialize($form['field_r_data']['und'][0]['value']['#default_value']);
          
          
          
          
//          $form['phone']['lines']['#default_value'] = $other_data['lines'];
//          $form['ureview']['pros']['#default_value'] = $other_data['pros'];
//          $form['ureview']['cons']['#default_value'] = $other_data['cons'];
          
          
          
          
          $user_ip = isset($other_data['user_ip']) ? $other_data['user_ip'] : 'N/A';
          if ($current_user_is_admin) {
            $form['about_you']['user_ip_show'] = array(
                '#type' => 'item',
                '#title' => t('User IP:'),
                '#markup' => $user_ip,
            );
          }
          $form['user_ip'] = array(
            '#type' => 'hidden',
            '#value' => $user_ip,
          );
        }

        // Save the current email... in case it will be changes now, we could delete old it's votes connected to the old email.
        $form['email_old'] = array(
          '#type' => 'hidden',
          '#value' => $form['about_you']['field_r_email_temp']['#default_value'],
        );
        
        // Disallow to choose another email for a registered user.
        if (!$current_user_is_admin) {
          $form['about_you']['field_r_email_temp']['#access'] = FALSE;
          $form['about_you']['email_autofilled'] = array(
              '#type' => 'item',
              '#title' => t('Your email'),
              '#markup' => $form['about_you']['field_r_email_temp']['#default_value'],
          );
        }
        
          
        // If this review is not approved OR this review is NOT published.
        // Load votes data from a local field $other_data['saved_ratings'] (field_r_data), not from Voting api tables.
        if ($form['field_r_notapproved']['und'][0]['value']['#default_value'] || !$form['options']['status']['#default_value']) {
          $saved_ratings = $other_data['saved_ratings'];
          foreach ($saved_ratings as $tag => $value) {
            if ($tag == 'recommend') {
              $recommend = $value;
              continue;
            }
            $form['ureview']['votes']['rating_' . $tag]['#default_value'] = $value;
          }
        }
        else {
          // Else load saved votes for a phone of this review.
          $criteria = array(
            'entity_type' => 'node',
            'entity_id' => $form['phone']['field_ref_phone']['und']['#default_value'][0],
            'uid' => $form['uid']['#value'],
            // Make it possible to count votes of different unauthorized (uid = 0, but with different emails) users.
            'vote_source' => $form['about_you']['field_r_email_temp']['#default_value'],
          );

          $votes = gv_misc_getVotesIDs($criteria); // = votingapi_select_votes($criteria)

          if ($votes) {
            foreach ($votes as $vote) {
              if ($vote['tag'] == 'recommend') {
                $recommend = $vote['value'];
                continue;
              }
              $form['ureview']['votes']['rating_' . $vote['tag']]['#default_value'] = $vote['value'];
            }
          }
        } // End of else of if ($form['field_r_notapproved']['und'][0]['#default_value']) {
        if (isset($recommend)) {
          $form['ureview']['rating_recommend']['#default_value'] = $recommend;
        }

        // Show preview of the phone (as a teaser) on the edit form.
        $phone_node = node_load($form['phone']['field_ref_phone']['und']['#default_value'][0]);
        /*
        $provider_preview = '<div class="p-preview">' . render(node_view($provider_node, 'teaser')) . '</div>';
        $form['provider']['provider_preview'] = array(
            '#markup' => $provider_preview,
            '#weight' => -100,
        ); 
        */
        $form['phone']['phone_title_noedit'] = array(
          '#type' => 'item',
          '#title' => t('Your VoIP Phone:'),
          '#markup' => '<div class="text">' . l(html_entity_decode($phone_node->field_p_name['und'][0]['safe_value']), 'node/' . $phone_node->nid) . '</div>',
          //'#weight' => -100,
        );

        $form['phone']['field_ref_phone']['#access'] = FALSE;

        
      } // End of Edit a review page.
      
      
      
      // Add stars widgets to a Rating block
      $module_path = drupal_get_path('module', 'gv_pages');
      $module_misc_path = drupal_get_path('module', 'gv_misc');
      
      $form['#attached']['js'] = array(

        // Add a characters counter.
        //$module_misc_path . '/js/gv_misc_charCount.js',
        //'sites/all/libraries/jquery.plugins/charCount.js',

        // Add hints inside some fields
        $module_path . '/js/gv_review_fieldHints.js',

        // Add stars widgets to a Rating block
        $module_path . '/js/gv_phone_review_stars.js',
        'sites/all/libraries/jquery.ui.stars/jquery.ui.stars.min.js',
      );

      $form['#attached']['library'][] = array('system', 'ui.widget');

      $form['#attached']['css'] = array(
        'sites/all/libraries/jquery.ui.stars/css/jquery.ui.stars.css',
      );

      
      

  
      $form['#attributes']['class'][] = 'gv-edit-review-page';
  
      $form['#validate'][] = 'gv_pages_validateForm_phoneReview';
      $form['#submit'][] = 'gv_pages_submitForm_phoneReview';
      
      
      //dpm($form);
      
    break; // End of Phone review node edit.
    
    
  } // End of switch ($form_id) {
  
  
  // Add a Save Draft and Invisible buttons.
  switch ($form_id) {
    
    case 'news_post_node_form':
    case 'blog_post_node_form':
    case 'article_node_form':
    case 'provider_node_form':
    case 'phone_node_form':
      
        $form['actions']['submit']['#value'] = 'Save & Publish';
      
        $form['actions']['save_draft'] = array(
          '#type' => 'submit',
          '#value' => 'Save Draft',
          '#submit' => array('node_form_submit'),
          '#weight' => 6,
        );
      
        if (isset($form['field_invisible'])) {
          
          $form['field_invisible']['#access'] = FALSE;
          
          $form['actions']['published_but_invisible'] = array(
            '#type' => 'submit',
            '#value' => 'Published, but invisible in lists',
            '#submit' => array('node_form_submit'),
            '#weight' => 7,
          );
        }
      
        $form['#submit'][] = 'gv_pages_submitForm_saveDraft';
        //$form['#validate'][] = 'gv_pages_validateForm_saveDraft';
        
        break;
      
  } // End of switch ($form_id) { // Save Draft button
  
}


/**
 * Disable user login for disabled users.
 *
 * @param array &$form
 *   Array with declared form.
 *
 * @param array &$form_state
 *   Array with current form state.

 * @return void
 *   Return nothing.
 */
function gv_pages_validateForm_disableUserLoginForDisabled(&$form, &$form_state) {
  
  //dpm($form_state); dpm($form);
  
  if (!empty($form_state['uid']) && $u = user_load($form_state['uid'])) {
    if (in_array('disabled', $u->roles)) {
      form_set_error('name',t('Sorry, but Your account is blocked. Please contact administrator to unblock it.'));
    }
  }
}


/**
 * Custom validate of article type form.
 *
 * @param array &$form
 *   Array with declared form.
 *
 * @param array &$form_state
 *   Array with current form state.

 * @return void
 *   Return nothing.
 */
function gv_pages_validateForm_article(&$form, &$form_state) {

  // Copy tags from the Main Tag field to a specific field news/blog/article tags for a corresponding content type.
  switch ($form_state['values']['type']) {
    case 'news_post':
      $vid = 4;
      $voc_name = 'news_tags';
      $target_field = 'field_tags_news';
      break;
    case 'blog_post':
      $vid = 5;
      $voc_name = 'blog_tags';
      $target_field = 'field_tags_blog';
      break;
    case 'article':
      $vid = 6;
      $voc_name = 'articles_tags';
      $target_field = 'field_tags_articles';
      break;
  }

  $tags['und'] = array();
  foreach ($form_state['values']['field_topics']['und'] as $test_term) {
    $all_vocs_terms = taxonomy_get_term_by_name($test_term['name']);
    $found = FALSE;
    foreach ($all_vocs_terms as $term) {
      // 4 - voc News tags.
      if ($term->vid == $vid) {
        // Term exists in the News vocabulary.
        $tags['und'][] = (array) $term;
        $found = TRUE;
        break;
      }
    }
    if (!$found) {
      $tags['und'][] = array(
        'tid' => 'autocreate',
        'vid' => $vid,
        'name' => $test_term['name'],
        'vocabulary_machine_name' => $voc_name,
      );
    }
  }
  form_set_value($form[$target_field], $tags, $form_state);
  
  // Replace real links /sites/default/files/pdfs/ with /pdfs/
//  global $user;
//  if ($user->uid == 1 && $new_body = gv_misc_rewriteLinks('pdfs', $form_state)) {
//    form_set_value($form['body'], $new_body, $form_state);
//  }
  
  // Define a main image and build a custom teaser.
  $teaser_data = gv_misc_getArticleTeaserData('all', $form_state['values']['body']['und'][0]['value'], $form_state['values']['nid']);

 //dpm($form_state['values']);
 //dpm($form_state['values']);
 //dpm($form);
  
//  $pin_article_to = array();
//  if (!empty($form_state['values']['pin_article_to'])) {
//    foreach ($form_state['values']['pin_article_to'] as $pin_to => $value) {
//      if ($value) {
//        $pin_article_to[] = $pin_to;
//      }
//    }
//  }
  
  
  form_set_value($form['field_a_teaser'], array('und' => array(0 => array('value' => $teaser_data['teaser'], 'format' => 'full_html') )), $form_state);
  form_set_value($form['field_main_image'], array('und' => array(0 => array('value' => serialize($teaser_data['main_image']), 'format' => 'full_html') )), $form_state);
  
  $old_extra_data = unserialize($form_state['values']['field_extra_data']['und'][0]['value']);

  $extra_data = array(
    'title' => htmlspecialchars_decode($form_state['values']['title'], ENT_QUOTES), 
    'teaser_block' => $teaser_data['teaser_block'], 
    'teaser_home' => $teaser_data['teaser_home'],
    'teaser_side_block' => $teaser_data['teaser_side_block'],
    'side_block_main_image' => $teaser_data['side_block_main_image'],
      
    'teaser_only' => $teaser_data['teaser_only'],
    'teaser_main_image' => $teaser_data['teaser_main_image'],
      
      
    // Don't recalculate related articles..
    'related_articles' => $old_extra_data['related_articles'], //@$form_state['values']['related_articles'],
    // If related articles should be recalculated, set timestamp to 0, what will make existing related articles expired.
    'related_articles_timestamp' => (@$form_state['values']['related_articles']['recalculate'] ? 0 : $old_extra_data['related_articles_timestamp']), //time(),
  );
  
  // Define and refine main image value for checked related articles.
  // But only in case if we recalculate related articles (look above at $old_extra_data)
  /*
  foreach ($extra_data['related_articles'] as $index => $group) {
    
    foreach ($group as $nid => $checked) {
      
      if (!$checked) {
        continue;
      }
      
      $query = db_select('node', 'n')
        ->fields('n', array('title'));
      $query->join('field_data_field_main_image', 'mi', 'mi.entity_id = n.nid');
      $query->fields('mi', array('field_main_image_value'));
      $query->condition('n.nid', $nid);

      if ($result = $query->execute()->fetchObject()) {
        $result->field_main_image_value = unserialize($result->field_main_image_value);
        if(!empty($result->field_main_image_value)) {
          $result->field_main_image_value['src_themed_related'] = image_style_url('related_article_thumb', $result->field_main_image_value['uri']);
        }
        $extra_data['related_articles'][$index][$nid] = $result;
      }

    }
  }
  */
  
  //dpm($extra_data);                
                  
                  
                  
                  
  
  if (!empty($form_state['values']['guest_author'])) {
    $extra_data['guest_author'] = $form_state['values']['guest_author'];
  }
  
  //form_set_value($form['field_extra_data'], array('und' => array(0 => array('value' => serialize(array('pin_article_to' => $pin_article_to, 'title' => $form_state['values']['title'], 'teaser_block' => $data['teaser_block'], 'teaser_home' => $data['teaser_home'])), 'format' => 'full_html') )), $form_state);
  //form_set_value($form['field_extra_data'], array('und' => array(0 => array('value' => serialize(array('title' => $form_state['values']['title'], 'teaser_block' => $data['teaser_block'], 'teaser_home' => $data['teaser_home'])), 'format' => 'full_html') )), $form_state);
  form_set_value($form['field_extra_data'], array('und' => array(0 => array('value' => serialize($extra_data), 'format' => 'full_html') )), $form_state);
  
}




/**
 * Custom validate of article type form.
 *
 * @param array &$form
 *   Array with declared form.
 *
 * @param array &$form_state
 *   Array with current form state.

 * @return void
 *   Return nothing.
 */
//function gv_pages_validateForm_saveDraft(&$form, &$form_state) {
//  drupal_set_message('xxx', 'warning');
////  dpm($form);
//  dpm($form_state['values']);
//}


/**
 * Custom validate of article type form.
 *
 * @param array &$form
 *   Array with declared form.
 *
 * @param array &$form_state
 *   Array with current form state.

 * @return void
 *   Return nothing.
 */
function gv_pages_submitForm_saveDraft(&$form, &$form_state) {

 
   //drupal_set_message('...', 'warning');
   
//    drupal_set_message('status before = ' . $form_state['build_info']['args'][0]->status, 'warning');
//    drupal_set_message('status after = ' . $form_state['values']['status'], 'warning');
//    drupal_set_message('op = ' . $form_state['values']['op'], 'warning');
  

//  global $user;
//  if ($user->uid == 1) {
//    dpr($form);
//    dpr($form_state);
//    exit;
//  }
  
          
  //dpm($form_state['values']);
  //dpm($form_state['build_info']['args']);
  
  
  if ($form_state['values']['op'] == 'Save & Publish' && @$form_state['build_info']['args'][0]->status == 0) {
    // NOT publish ---> Publish
    drupal_set_message('NOT publish ---> Publish', 'warning');

    $form_state['values']['status'] = 1;
    
    if (isset($form['field_invisible'])) {
      form_set_value($form['field_invisible'], array('und' => array(0 => array('value' => 0) )), $form_state);
    }
    
    drupal_set_message(t('This article is now published!'), 'warning');
    $status_changed = TRUE;
    
    //$alias = pathauto_create_alias('node', 'return', 'node/' . $form_state['values']['nid'], array('node' => $form['#node']), $form['#node']->type);
    gv_misc_disqusUpdateNodeThread_ifChangedLocally($form['#node'], $form_state['values']);
  
  }
  if ($form_state['values']['op'] == 'Save & Publish' && @$form_state['build_info']['args'][0]->field_invisible['und'][0]['value'] == 1) {
    // NOT publish ---> Publish
    drupal_set_message('Invisible in lists ---> Visible', 'warning');

    $form_state['values']['status'] = 1;
    
    if (isset($form['field_invisible'])) {
      form_set_value($form['field_invisible'], array('und' => array(0 => array('value' => 0) )), $form_state);
    }
    
    drupal_set_message(t('This article is now published!'), 'warning');
    $status_changed = TRUE;
  }
  elseif (($form_state['values']['op'] == 'Save Draft' ||  $form_state['values']['status'] == 0) && @$form_state['build_info']['args'][0]->status == 1) {
    // Publish ---> NOT publish
    drupal_set_message('Publish ---> NOT publish', 'warning');
    
    $form_state['values']['status'] = 0;
    
    drupal_set_message(t('Attention! This article is saved as draft and is not published now!'), 'warning');
    $status_changed = TRUE;
  }
  elseif ($form_state['values']['op'] == 'Published, but invisible in lists') {

    //dpm($form_state['values']);
    
    form_set_value($form['field_invisible'], array('und' => array(0 => array('value' => 1) )), $form_state);
    
    $form_state['values']['status'] = 1;
    drupal_set_message(t('Attention! This article is saved as  Unpublished, but visible now!'), 'warning');
    //$status_changed = TRUE;
    
    // Update remote Disqus data if the node is publishing (though invisible) after being unpublished.
    if (@$form_state['build_info']['args'][0]->status == 0) {
      gv_misc_disqusUpdateNodeThread_ifChangedLocally($form['#node'], $form_state['values']);
    }
    
  }
  elseif (!$form_state['values']['nid'] || @$form_state['build_info']['args'][0]->field_show_in_block['und'][0]['value'] != @$form_state['values']['field_show_in_block']['und'][0]['value'] || $form_state['values']['op'] == 'Delete') {
    $status_changed = TRUE;
  }
  else {
    $status_changed = FALSE;
  }
  
  //if ($status_changed) 
  {
    // Clear the views cache.
    ///////drupal_flush_all_caches(); // This would clear a Boost cache as well.
    ///////drupal_set_message('All caches has been flushed!', 'warning');
    //
    //
    //
    // So we clear here only a views caches.
//    cache_clear_all('*', 'cache_views', TRUE);
//    cache_clear_all('*', 'cache_views_data', TRUE);
//    drupal_set_message('A cache has been flushed.', 'warning');
  }

//  if ($form_state['values']['op'] == 'Save Draft') {
//    $form_state['values']['status'] = 0;
//    drupal_set_message(t('Attention! This article is saved as draft and is not published now!'), 'warning');
//      // Doesn't work
//      //form_set_value($form['options'], array('status' => array('#default_value' => 0)), $form_state);
//      //form_set_value($form['options']['status'], array('#default_value' => 0), $form_state);
//  }
//  else {
//    $form_state['values']['status'] = 1;
//  }
  
  
}


/**
 * Custom validate of Phone type form.
 *
 * @param array &$form
 *   Array with declared form.
 *
 * @param array &$form_state
 *   Array with current form state.

 * @return void
 *   Return nothing.
 */
function gv_pages_validateForm_phone(&$form, &$form_state) {
  //dpm($form_state);
  
  $rating_options = array('performance' => PERFORMANCE, 'voice' => VOICE, 'install' => INSTALL, 'use_ease' => USE_EASE, 'durability' => DURABILITY, 'features' => FEATURES, 'price' => PRICE, 'recommend' => RECOMMEND_PHONE);
  
  // Check if all editor's votes (ratings) fields are set.
  foreach ($rating_options as $rating_option => $rating_option_title) {
    if ($form_state['values']['rating_' . $rating_option] === FALSE && $rating_option != 'recommend') {
      form_set_error($rating_option, t('Please make your choice for "' . $rating_option_title . '"'));
    }
  }
  
  // Prepare editor votes (ratings) to save in the extra field.
  $votes = array();
  $overall_count = 0;
  $overall_summ = 0;
  
  foreach ($rating_options as $vote_key => $vote_title) {
    
    if(isset($form_state['values']['rating_' . $vote_key])) {
      $votes[$vote_key] = $form_state['values']['rating_' . $vote_key];
      if ($vote_key == 'recommend') {
        continue;
      }
      $overall_count++;
      $overall_summ += $form_state['values']['rating_' . $vote_key];
    }
  }
  // Calculate the overall average editor's rating.
  $editor_rating_overall = $overall_summ / $overall_count;
  
  
  
  // Set an image for sharing.
  $photo = file_load($form_state['values']['field_p_image']['und'][0]['fid']);
  if ($photo) {
    $share_src_themed = gv_misc_getShareSrcThemed_fromUri($photo->uri);
  }
  
  
  $extra_data = array('share_src_themed' => $share_src_themed, 'editor_rating_overall' => $editor_rating_overall, 'editor_ratings' => $votes, 'specs' => $form_state['values']['data_specs'], 'pros_and_cons' => $form_state['values']['data_pros_and_cons'], 'downloads' => $form_state['values']['downloads']['value'], 'in_the_box' => $form_state['values']['in_the_box']['value']);
  // Save collected data from temporary fields and weights to a real placeholder field field_p_data as a serialized data.
  form_set_value($form['field_extra_data'], array('und' => array(0 => array('value' => serialize($extra_data)))), $form_state);
}


/**
 * Custom validate of provider type form.
 *
 * @param array &$form
 *   Array with declared form.
 *
 * @param array &$form_state
 *   Array with current form state.

 * @return void
 *   Return nothing.
 */
function gv_pages_validateForm_provider(&$form, &$form_state) {
   
  //dpm($form_state['values']);
   
  $p_data['info'] = $form_state['values']['data_info'];
  //$p_data['quote'] = $form_state['values']['data_quote'];
  
  //$p_data['provider_options_bu'] = $form_state['values']['provider_options_bu'];
  $p_data['provider_options_bu'] = $form_state['values']['s']['bu']['provider_options_bu'];
  unset($form_state['values']['s']['bu']['provider_options_bu']);
  $p_data['provider_options_re'] = $form_state['values']['s']['re']['provider_options_re'];
  unset($form_state['values']['s']['re']['provider_options_re']);
  
  //dpm($p_data['provider_options_bu']);
  //dpm($form_state['values']);
  
  
  
  
  
  
  
  
  
  
  // Prepare for providers logos sprites regeneration.
  // They will be regenerated (if needed) in hook_node_update / hook_node_insert.

  $last_erating_fields_different = NULL;
  $erating_fields_before = unserialize($form_state['values']['erating_fields_original']);
  
  // Find out if some of listing fields have been changed.
  foreach($erating_fields_before as $erating_field_title => $erating_field_before) {
    $erating_fields_submitted[$erating_field_title] = $form_state['values'][$erating_field_title]['und'][0]['value'];
    if ($erating_field_before != $form_state['values'][$erating_field_title]['und'][0]['value']) {
      $last_erating_fields_different[] = $erating_field_title;
    }
  }

  /*
      if (empty($last_erating_fields_different)) {
        dpm('No changed listing fields this time!');
      }
      else {
        dpm($last_erating_fields_different);
      }
  */
  
  $p_data['last_erating_fields_different'] = $last_erating_fields_different;
  
  
  

  if ($logo = file_load($form_state['values']['field_p_logo']['und'][0]['fid'])) {
    $p_data['logo']['i_logo_uri'] = $logo->uri;
    $p_data['logo']['i_logo_alt'] = $form_state['values']['field_p_logo']['und'][0]['alt'];
    $p_data['logo']['i_logo_title'] = $form_state['values']['field_p_logo']['und'][0]['title'];
  }
  
  /*
  //$rating_options = array('performance' => PERFORMANCE, 'voice' => VOICE, 'install' => INSTALL, 'use_ease' => USE_EASE, 'durability' => DURABILITY, 'features' => FEATURES, 'price' => PRICE, 'recommend' => RECOMMEND_PHONE);
  $rating_options = array('sound' => SOUND, 'install' => INSTALL, 'service' => CUSTOMER, 'rely' => RELY, 'features' => FEATURES, 'money' => PRICE, 'recommend' => RECOMMEND);  
  
  // Check if all editor's votes (ratings) fields are set.
  foreach ($rating_options as $rating_option => $rating_option_title) {
    if ($form_state['values']['rating_' . $rating_option] === FALSE) {
      form_set_error($rating_option, t('Please make your choice for "' . $rating_option_title . '"'));
    }
  }
  
  // Prepare editor votes (ratings) to save in the extra field.
  $votes = array();
  $overall_count = 0;
  $overall_summ = 0;
  foreach ($rating_options as $vote_key => $vote_title) {
    if(isset($form_state['values']['rating_' . $vote_key])) {
      $votes[$vote_key] = $form_state['values']['rating_' . $vote_key];
      $overall_count++;
      $overall_summ += $form_state['values']['rating_' . $vote_key];
    }
  }
  // Calculate the overall average editor's rating.
  $editor_rating_overall = $overall_summ / $overall_count;
  */
  
  $p_data['ereview'] = array(
    //'editor_rating_overall' => $editor_rating_overall, 
    //'editor_ratings' => $votes, 
    'pros_and_cons' => $form_state['values']['data_pros_and_cons'],
  );
  
  
  
  
  
  
  
  foreach ($form_state['values']['s'] as $service_type_short => $value) {
   
     // Restore an original features field.
    form_set_value($form['field_p_' . $service_type_short . '_features'], $form_state['values']['s'][$service_type_short]['field_p_' . $service_type_short . '_features'], $form_state);
  
    $p_data['s'][$service_type_short] = $value;
    // Initially unset Features and its Weights
    unset($p_data['s'][$service_type_short]['field_p_' . $service_type_short . '_features']);
    if (isset($p_data['s'][$service_type_short]['weights_' . $service_type_short . '_features'])) {
      unset($p_data['s'][$service_type_short]['weights_' . $service_type_short . '_features']);
    }
    
    // Save weights for Re Features (on the next editing).
    foreach ($form_state['values']['s'][$service_type_short]['field_p_' . $service_type_short . '_features']['und'] as $term) {
      // Choose every selected (with autoselect) tag.
      $p_data['s'][$service_type_short]['weights_' . $service_type_short . '_features'][$term['tid']] = array('name' => $term['name'], 'weight' => 0);
    
      // Save weight if it set at the weights editing fieldset
      if(isset($form_state['values']['s'][$service_type_short]['weights_' . $service_type_short . '_features'][$term['tid']])) {
        $p_data['s'][$service_type_short]['weights_' . $service_type_short . '_features'][$term['tid']]['weight'] = $form_state['values']['s'][$service_type_short]['weights_' . $service_type_short . '_features'][$term['tid']];
      }
    }
    // Sort tags by weights.
    if (isset($p_data['s'][$service_type_short]['weights_' . $service_type_short . '_features'])) {
      uasort($p_data['s'][$service_type_short]['weights_' . $service_type_short . '_features'], 'wdg_misc_sortArrayByWeight');
    }

    // Save collected FEES data from temporary fields to a excessive field for using it from views
    $p_fees_save[$service_type_short] = $p_data['s'][$service_type_short]['fees'];
   
  }

  
  
  if ($logo) {
    
    $p_data['share_src_themed'] = gv_misc_getShareSrcThemed_fromUri($logo->uri);
    /*
    
    // Define share pic.
    $image_size = getimagesize(ltrim(gv_misc_getPathFromStreamUri($logo->uri), '/'));
    // Image for sharing.
    if ($image_size[0] / $image_size[1] > 1) {
      // Too wide. will not be cutted.
      $p_data['share_src_themed'] = image_style_url('share_wide', $logo->uri);
    }
    elseif ($image_size[1] / $image_size[0] < 1) {
      // Too tall. will not be cutted.
      $p_data['share_src_themed'] = image_style_url('share_tall', $logo->uri);
    }
    else {
      //Normal image, will not be cutted.
      $p_data['share_src_themed'] = image_style_url('share', $logo->uri);
    }
    */
  }
  
 
  // Second trial... 
  // Save some more aggregated data to other field
  $p_data_quick['name'] = $form_state['values']['field_p_name']['und'][0]['value'];
  
  $p_data_quick['i_web'] = isset($p_data['info']['i_web']) ? $p_data['info']['i_web'] : '';
  $p_data_quick['i_web_ts'] = gv_misc_getTrackingUrl_trackingSubpath_byNid($form_state['values']['nid']);
  
  $p_data_quick['i_availability'] = $p_data['info']['i_availability'];
  $p_data_quick['i_phone'] = isset($p_data['info']['i_phone']['value']) ? $p_data['info']['i_phone']['value'] : '';

  
  
  
  // Prepare details exerpt field for Providers page.
  $p_data_quick['details'] =  trim(drupal_substr(strip_tags($form_state['values']['body']['und'][0]['value']), 0, 200));  
  
  if (!empty($p_data_quick['details'])) {
    $last_pos = strrpos($p_data_quick['details'], ' ');
    $p_data_quick['details'] = substr_replace($p_data_quick['details'], '... ', $last_pos);
    $p_data_quick['details'] .= l('Read More', 'node/' . $form_state['values']['nid'], array('attributes' => array('class' => array('more'))));
    //$p_data_quick['details'] = substr_replace ($p_data_quick['details'], '...' . l(t('Read More'), 'node/' . $form_state['values']['nid'], array('attributes' => array('class' => array('more')))) , $last_pos, strlen($matches[1]));
  }
  else {
    $p_data_quick['details'] = l('Read a Review', 'node/' . $form_state['values']['nid'], array('attributes' => array('class' => array('more'))));
  }
  
  
    // Logo has been defined above.
  if ($logo) {
    $p_data_quick['i_logo_uri'] = $logo->uri;
    $p_data_quick['i_logo_alt'] = $form_state['values']['field_p_logo']['und'][0]['alt'];
    $p_data_quick['i_logo_title'] = $form_state['values']['field_p_logo']['und'][0]['title'];
  }
  
  $p_data_quick['the_bottom_line'] = $p_data['ereview']['pros_and_cons']['The bottom line'];
  
  
  //$p_data['provider_options_re']
  $provider_options_to_quick_save = unserialize(PROVIDER_OPTIONS_TO_QUICK_SAVE);
  $map_options_keys_to_provider_types_key = array(
      'bu' => 'provider_options_bu',
      're' => 'provider_options_re',
  );
  
  foreach ($p_data['s'] as $service_type_short => $service) {
    
    // Save some options to quick save.
    if (isset($map_options_keys_to_provider_types_key[$service_type_short]) && isset($p_data[$map_options_keys_to_provider_types_key[$service_type_short]]) && isset($provider_options_to_quick_save[$service_type_short]) ) {
      //dpm($p_data[$map_options_keys_to_provider_types_key[$service_type_short]]);
      foreach ($provider_options_to_quick_save[$service_type_short] as $option_name_to_save) {
        // try to find a specific option among several subarrays of the options array.
        foreach ($p_data[$map_options_keys_to_provider_types_key[$service_type_short]] as $section_key => $section_options) {
          if (isset($section_options[$option_name_to_save])) {
            //$p_data_quick[$service_type_short]['options'][$option_name_to_save] = $section_options[$option_name_to_save];
            
            if (!empty($section_options[$option_name_to_save . ' -text-'])) {
              $p_data_quick[$service_type_short]['options'][$option_name_to_save] = $section_options[$option_name_to_save . ' -text-'];
            }
            else {      
              $p_data_quick[$service_type_short]['options'][$option_name_to_save] = $section_options[$option_name_to_save];
            }
            
          }
        }
      }
    }
    
    
    // Save collected Features and FEES data from temporary fields to a excessive field for using it from views
    $p_data_quick[$service_type_short]['plan'] = isset($service['pti']) ? $service['pti'] : '';
    $p_data_quick[$service_type_short]['fl'] = isset($service['fl']) ? $service['fl'] : '';
    
    // YouTube video ID
    if (isset($service['vr-y']) && $service['vr-y']) {
      // Allow to enter direct YouTube url and then parse it to save just a video ID.
      if (preg_match('|^.*v=(.*)&.*$|', $service['vr-y'], $matches)) {
        $p_data_quick[$service_type_short]['vr-y'] = $matches[1];
        // Replace url with id to save in this field... so the next edit session a user will see a video id, not url
        $p_data['s'][$service_type_short]['vr-y'] = $matches[1];
      }
      else {
        $p_data_quick[$service_type_short]['vr-y'] = $service['vr-y'];
      }
    }
    
    $p_data_quick[$service_type_short]['fees'] = array(
      'back' => isset($service['mbg']) ? $service['mbg'] : '',
      'monthly' => isset($service['fees']['mon']) ? $service['fees']['mon'] : '',
      'setup' => isset($service['fees']['set']) ? $service['fees']['set'] : '',
    );
    
    if (isset($service['weights_' . $service_type_short . '_features'])) {
      $count = 0;
      foreach ($service['weights_' . $service_type_short . '_features'] as $term_id => $term_data) {
        $p_data_quick[$service_type_short]['feat'][$term_id] = $term_data['name'];
        if ($count++ > 1) {
          break;
        }
      }
    } // End of if (isset($service['weights_' . $service_type_short . 're_features'])) {
    
  } // foreach ($p_data['s'] as $service_type_short => $service) {
  
  
  // Save collected data from temporary fields and weights to a real placeholder field field_p_data as a serialized data.
  form_set_value($form['field_p_data'], array('und' => array(0 => array('value' => serialize($p_data)))), $form_state);
  
  // Before saving, remove unused services from quick data fields.
  foreach ($form_state['values']['field_p_types']['und'] as $used_type) {
    // Collect used services keys.
    $used_service_type_keys[] = gv_misc_refineServiceTypeKey($used_type['value']);
  }
  foreach ($p_fees_save as $key => $value) {
    // If it is a service key and it's  not used.
    if (!in_array($key, $used_service_type_keys)) {
      unset($p_fees_save[$key], $p_data_quick[$key]);
    }
  }
  
  // Save collected FEES data from temporary fields to a excessive field for using it from views
  form_set_value($form['field_p_fees_save'], array('und' => array(0 => array('value' => serialize($p_fees_save)))), $form_state);
  // Reset a helper session var with all fees.
  if (isset($_SESSION['all_fees'])) {
    unset($_SESSION['all_fees']);
  }

  form_set_value($form['field_p_data_quick'], array('und' => array(0 => array('value' => serialize($p_data_quick)))), $form_state);
//  //Reset a helper session var with all quick data.
//  if(isset($_SESSION['p_all_data_quick'])) {
//    unset($_SESSION['p_all_data_quick']);
//  }
//  //gv_misc_getProvidersDataQuick('all', TRUE);
  
  // Reset the providers_table saved generated view for the /providers page
  variable_del('gv_providers_table');
  
}


/**
 * Custom validate of review type form.
 *
 * @param array &$form
 *   Array with declared form.
 *
 * @param array &$form_state
 *   Array with current form state.

 * @return void
 *   Return nothing.
 */
function gv_pages_validateForm_quote(&$form, &$form_state) {
  
  //dpm($form_state['values']);
  $data = serialize(array(
    'bottom_text' => $form_state['values']['bottom_text'],
  ));
  form_set_value($form['field_q_data'], array('und' => array(0 => array('value' => $data) )), $form_state);
  
}


/**
 * Custom validate of a Phone review type form.
 *
 * @param array &$form
 *   Array with declared form.
 *
 * @param array &$form_state
 *   Array with current form state.

 * @return void
 *   Return nothing.
 */
function gv_pages_validateForm_phoneReview(&$form, &$form_state) {
  
  //dpm($form); dpm($form_state);

  // Don't check anything if we delete the node.
  if ($form_state['submit_handlers'][0] == 'node_form_delete_submit') {
    return;
  }
    
  global $user;
  if (in_array('administrator', $user->roles)) {
    $current_is_administrator = TRUE;
  }
  else {
    $current_is_administrator = FALSE;
  }

  
  // Clear hints, if any.
  $fields_to_clear_hints = array('field_r_fname_temp' => array('hint' => FNAME_HINT, 'set' => 'about_you'), /*'field_r_lname_temp' => array('hint' => LNAME_HINT, 'set' => 'about_you', 'title' => t('Last name')), 'pros' => array('hint' => PROS_HINT, 'set' => 'ureview'), 'cons' => array('hint' => CONS_HINT, 'set' => 'ureview'),*/ 'field_r_email_temp' => array('hint' => EMAIL_HINT, 'set' => 'about_you'));
  foreach ($fields_to_clear_hints as $fname => $fdata) {
   
    if ($form_state['values'][$fname] == t($fdata['hint'])) {
      
      // This clear the field.
      $form[$fdata['set']][$fname]['#value'] = NULL;
      
      // Just in case.
      // BUT! It causes fatal eror with #parent index absence
      //form_set_value($form[$fdata['set']][$fname], array('#value' => NULL), $form_state);
      
      // Just in case on more.
      $form_state['values'][$fname] = NULL;
      
      if (isset($form[$fdata['set']][$fname]['#required']) && $form[$fdata['set']][$fname]['#required']) {
        form_set_error($fname, t('Please fill the field "' . ($form[$fdata['set']][$fname]['#title'] ? $form[$fdata['set']][$fname]['#title'] : $fdata['title'] ) . '"'));
      }
    }
    
  }
  // Doesnot affect the for after errors
  //$form_state['rebuild'] = TRUE;
  
    
  // Rebuild original fields field_r_fname, field_r_lname, field_r_email from temporary fields fields field_r_fname_temp, field_r_lname_temp, field_r_email_temp
  // Without this (with just rewriting those field with its simplified versions) Drupal will fire errors like eg Warning: array_values() expects parameter 1 to be array, string given in _field_filter_items()...)
  form_set_value($form['field_r_fname'], array('und' => array(0 => array('value' => isset($form_state['values']['field_r_fname_temp']) ? $form_state['values']['field_r_fname_temp'] : NULL ))), $form_state);
  ////form_set_value($form['field_r_lname'], array('und' => array(0 => array('value' => isset($form_state['values']['field_r_lname_temp']) ? $form_state['values']['field_r_lname_temp'] : NULL ))), $form_state);
  form_set_value($form['field_r_email'], array('und' => array(0 => array('value' => isset($form_state['values']['field_r_email_temp']) ? $form_state['values']['field_r_email_temp'] : NULL ))), $form_state);

  // Check if a not logged in user has entered an email which is already is taken with one of our registered user.
  if (!$current_is_administrator && !$form_state['values']['uid'] && isset($form_state['values']['field_r_email_temp']) && $form_state['values']['field_r_email_temp']) {
    //if (gv_misc_emailIsRegistered($form_state['values']['field_r_email']['und'][0]['value'])) {
    if (gv_misc_emailIsRegistered($form_state['values']['field_r_email_temp'])) {
      form_set_error('field_r_email',t('Sorry, an email You have entered is already registered in our system. If it is your email, please !login and proceed with submitting this review as a logged in user.', array('!login' => l('Log in', 'user/login', array('query' => array('destination' => url($_GET['q'])))))));
      return;
    }
  }

  
  
  // An Administrator MUST set the real title for the review.
  //if ($current_is_administrator && !$form_state['values']['field_r_notapproved']['und'][0]['value'] && $form_state['values']['title'] == 'Unapproved review') {
  if ($current_is_administrator && !$form_state['values']['field_r_notapproved']['und'][0]['value'] && strpos($form_state['values']['title'], 'Unapproved review') !== FALSE) {
    form_set_error('title', 'Please set a new title for this review');
  }
  
  // Rebuild field_r_notapproved from the temp field field_r_notapproved_checkbox.
  if (!isset($form_state['values']['field_r_notapproved_info'])) {
    $field_r_notapproved = (isset($form_state['values']['field_r_notapproved_checkbox']) && $form_state['values']['field_r_notapproved_checkbox']) ? 0 : 1;
    form_set_value($form['field_r_notapproved'], array('und' => array(0 => array('value' => $field_r_notapproved))), $form_state);
  }
  
  
      
  //$rating_options = array('sound' => SOUND, 'install' => INSTALL, 'service' => CUSTOMER, 'rely' => RELY, 'features' => FEATURES, 'money' => PRICE, 'recommend' => RECOMMEND);
  $rating_options = array('performance' => PERFORMANCE, 'voice' => VOICE, 'install' => INSTALL, 'use_ease' => USE_EASE, 'durability' => DURABILITY, 'features' => FEATURES, 'price' => PRICE, 'recommend' => RECOMMEND_PHONE);
  
  foreach ($rating_options as $rating_option => $rating_option_title) {
    if ($form_state['values']['rating_' . $rating_option] === FALSE) {
      form_set_error($rating_option, t('Please make your choice for "' . $rating_option_title . '"'));
    }
  }
  
  // Prepare votes to save in a temporary field (it may be not used, but just in case and for a code simplifying).
  $votes = array();
  foreach ($rating_options as $vote_key => $vote_title) {
    if(isset($form_state['values']['rating_' . $vote_key])) {
      $votes[$vote_key] = $form_state['values']['rating_' . $vote_key];
    }
  }
  // Save votes to the temporary votes at r_data field.
  // It maybe reset later on. But just for the sake of a code simplifying.
  // On node_presave it field may be cleared and its data will be pushed to Voting API tables.
  // OR it its data may remain, if the review is not approved OR it's for not listed provider
  
//  if (!$form_state['values']['lines']) {
//    form_set_error('lines',t('Please set a numbers of lines'));
//  }
//  else {
    // Save several vars in the field
    $field_r_data = serialize(array('saved_ratings' => $votes, /*'lines' => $form_state['values']['lines'], 'pros' => $form_state['values']['pros'], 'cons' => $form_state['values']['cons'],*/ 'user_ip' => $form_state['values']['user_ip']));
    form_set_value($form['field_r_data'], array('und' => array(0 => array('value' => $field_r_data))), $form_state);
//  }

  
  
  
  // Current review data and uid for defining (see below) if the author of this review has already submitted a review for a selected phone.
  $author_uid = isset($form_state['values']['uid']) ? $form_state['values']['uid'] : NULL;
  $current_review_nid = isset($form_state['values']['nid']) ? $form_state['values']['nid'] : NULL;
  $is_approved = !isset($form_state['values']['field_r_notapproved']['und'][0]['value']) || !$form_state['values']['field_r_notapproved']['und'][0]['value'];
  $author_email = isset($form_state['values']['field_r_email_temp']) ? $form_state['values']['field_r_email_temp'] : NULL;
  
  // Check if author of this review has already submitted a review for a selected provider.
  $review = gv_misc_userHasSubmittedReview($form_state['values']['field_ref_phone']['und'][0]['target_id'], $author_uid, $author_email, NULL, $current_review_nid);

  if ($review) {
    $text =  t('You have already submitted a review for this phone');
    if($user->uid || !$review->field_r_notapproved_value) {
      $text .= ': ' . l($review->title, 'node/' . $review->nid);
    }
    if($review->field_r_notapproved_value) {
      $text .= '. ' . t('But it\'s not yet approved by our administrators.');
    }
    form_set_error('field_ref_phone', $text);
  } // End of if ($review) {
  
}





/**
 * Custom validate of review type form.
 *
 * @param array &$form
 *   Array with declared form.
 *
 * @param array &$form_state
 *   Array with current form state.

 * @return void
 *   Return nothing.
 */
function gv_pages_validateForm_review(&$form, &$form_state) {
  
  //dpm($form); dpm($form_state);

  // Don't check anything if we delete the node.
  if ($form_state['submit_handlers'][0] == 'node_form_delete_submit') {
    return;
  }
    
  global $user;
  if (in_array('administrator', $user->roles)) {
    $current_is_administrator = TRUE;
  }
  else {
    $current_is_administrator = FALSE;
  }

  
  // Clear hints, if any.
  $fields_to_clear_hints = array('field_r_fname_temp' => array('hint' => FNAME_HINT, 'set' => 'about_you'), 'field_r_lname_temp' => array('hint' => LNAME_HINT, 'set' => 'about_you', 'title' => t('Last name')), 'field_r_email_temp' => array('hint' => EMAIL_HINT, 'set' => 'about_you'), 'pros' => array('hint' => PROS_HINT, 'set' => 'ureview'), 'cons' => array('hint' => CONS_HINT, 'set' => 'ureview'));
  foreach ($fields_to_clear_hints as $fname => $fdata) {
   
    if ($form_state['values'][$fname] == t($fdata['hint'])) {
      
      // This clear the field.
      $form[$fdata['set']][$fname]['#value'] = NULL;
      
      // Just in case.
      // BUT! It causes fatal eror with #parent index absence
      //form_set_value($form[$fdata['set']][$fname], array('#value' => NULL), $form_state);
      
      // Just in case on more.
      $form_state['values'][$fname] = NULL;
      
      if (isset($form[$fdata['set']][$fname]['#required']) && $form[$fdata['set']][$fname]['#required']) {
        form_set_error($fname, t('Please fill the field "' . ($form[$fdata['set']][$fname]['#title'] ? $form[$fdata['set']][$fname]['#title'] : $fdata['title'] ) . '"'));
      }
    }
    
  }
  // Doesnot affect the for after errors
  //$form_state['rebuild'] = TRUE;
  
    
   // Rebuild original fields field_r_fname, field_r_lname, field_r_email from temporary fields fields field_r_fname_temp, field_r_lname_temp, field_r_email_temp
  // Without this (with just rewriting those field with its simplified versions) Drupal will fire errors like eg Warning: array_values() expects parameter 1 to be array, string given in _field_filter_items()...)
  form_set_value($form['field_r_fname'], array('und' => array(0 => array('value' => isset($form_state['values']['field_r_fname_temp']) ? $form_state['values']['field_r_fname_temp'] : NULL ))), $form_state);
  form_set_value($form['field_r_lname'], array('und' => array(0 => array('value' => isset($form_state['values']['field_r_lname_temp']) ? $form_state['values']['field_r_lname_temp'] : NULL ))), $form_state);
  form_set_value($form['field_r_email'], array('und' => array(0 => array('value' => isset($form_state['values']['field_r_email_temp']) ? $form_state['values']['field_r_email_temp'] : NULL ))), $form_state);

  // Check if a not logged in user has entered an email which is already is taken with one of our registered user.
  if (!$current_is_administrator && !$form_state['values']['uid'] && isset($form_state['values']['field_r_email_temp']) && $form_state['values']['field_r_email_temp']) {
    //if (gv_misc_emailIsRegistered($form_state['values']['field_r_email']['und'][0]['value'])) {
    if (gv_misc_emailIsRegistered($form_state['values']['field_r_email_temp'])) {
      form_set_error('field_r_email',t('Sorry, an email You have entered is already registered in our system. If it is your email, please !login and proceed with submitting this review as a logged in user.', array('!login' => l('Log in', 'user/login', array('query' => array('destination' => url($_GET['q'])))))));
      return;
    }
  }
  
  //$rating_options = array('rating_features' => 'Features Rating', 'rating_sound' => 'Sound Rating', 'rating_rely' => 'Rely Rating', 'rating_money' => 'Money Rating', 'rating_service' => 'Service Rating', 'rating_recommend' => 'Would you recommend this VoIP provider?');
  //$rating_options = array('rating_features' => FEATURES, 'rating_sound' => SOUND, 'rating_rely' => RELY, 'rating_money' => PRICE, 'rating_service' => CUSTOMER, 'rating_recommend' => RECOMMEND);
  $rating_options = array('sound' => SOUND, 'install' => INSTALL, 'service' => CUSTOMER, 'rely' => RELY, 'features' => FEATURES, 'money' => PRICE, 'recommend' => RECOMMEND);
  
  foreach ($rating_options as $rating_option => $rating_option_title) {
    if ($form_state['values']['rating_' . $rating_option] === FALSE) {
      form_set_error($rating_option, t('Please make your choice for "' . $rating_option_title . '"'));
    }
  }
  
  
  
  if (!$form_state['values']['lines']) {
    form_set_error('lines',t('Please set a numbers of lines'));
  }
  else {
    // Save several vars in the field
    $field_r_data = serialize(array('lines' => $form_state['values']['lines'], 'pros' => $form_state['values']['pros'], 'cons' => $form_state['values']['cons'], 'user_ip' => $form_state['values']['user_ip']));
    form_set_value($form['field_r_data'], array('und' => array(0 => array('value' => $field_r_data))), $form_state);
  }
  
  
  // An Administrator MUST set the real title for the review.
  
  //if ($current_is_administrator && !$form_state['values']['field_r_notapproved']['und'][0]['value'] && $form_state['values']['title'] == 'Unapproved review') {
  if ($current_is_administrator && !$form_state['values']['field_r_notapproved']['und'][0]['value'] && strpos($form_state['values']['title'], 'Unapproved review') !== FALSE) {
    form_set_error('title',t('Please set a new title for this review'));
  }
  
  // Rebuild field_r_notapproved from the temp field field_r_notapproved_checkbox.
  if (!isset($form_state['values']['field_r_notapproved_info'])) {
    $field_r_notapproved = (isset($form_state['values']['field_r_notapproved_checkbox']) && $form_state['values']['field_r_notapproved_checkbox']) ? 0 : 1;
    form_set_value($form['field_r_notapproved'], array('und' => array(0 => array('value' => $field_r_notapproved))), $form_state);
  }
  
  // If field_ref_provider is choosen as OTHER SP, the field_r_oprovider should be set as well
  if ($form_state['values']['field_ref_provider']['und'][0]['target_id'] == 41 && !$form_state['values']['field_r_oprovider']['und'][0]['value']) {
    form_set_error('field_r_oprovider', t('Please write in the name of a Provider'));  
  }

  // Current review data and uid for defining (see below) if the author of this review has already submitted a review for a selected provider.
  $author_uid = isset($form_state['values']['uid']) ? $form_state['values']['uid'] : NULL;
  $current_review_nid = isset($form_state['values']['nid']) ? $form_state['values']['nid'] : NULL;
  $is_approved = !isset($form_state['values']['field_r_notapproved']['und'][0]['value']) || !$form_state['values']['field_r_notapproved']['und'][0]['value'];
  

  
  
  //$author_email = isset($form_state['values']['field_r_email']['und'][0]['value']) ? $form_state['values']['field_r_email']['und'][0]['value'] : NULL;
  $author_email = isset($form_state['values']['field_r_email_temp']) ? $form_state['values']['field_r_email_temp'] : NULL;
  
  
  // Prepare votes to save in a temporary field (it may be not used, but just in case and for a code simplifying).
  //$rating_options = array('features', 'sound', 'rely', 'money', 'service', 'recommend');
  $votes = array();
  foreach ($rating_options as $vote_key => $vote_title) {
    if(isset($form_state['values']['rating_' . $vote_key])) {
      $votes[$vote_key] = $form_state['values']['rating_' . $vote_key];
    }
  }
  // Save votes to the temporary votes field.
  // It maybe reset later on (in node_save hook). But just for the sake of a code simplifying.
  // On node_presave it field may be cleared and its data will be pushed to Voting API tables.
  // OR it its data may remain, if the review is not approved OR it's for not listed provider
  form_set_value($form['field_ratings_oprovider'], array('und' => array(0 => array('value' => serialize($votes)))), $form_state);
    
  // If OTHER SP has been set.
  if($form_state['values']['field_ref_provider']['und'][0]['target_id'] == 41 && isset($form_state['values']['field_r_oprovider']['und'][0]['value']) && $form_state['values']['field_r_oprovider']['und'][0]['value']) {
    // Check if author of this review has already submitted a review for a selected provider.
    $review = gv_misc_userHasSubmittedReview(NULL, $author_uid, $author_email, $form_state['values']['field_r_oprovider']['und'][0]['value'], $current_review_nid);
  } // End of if($form_state['values']['field_ref_provider']['und'][0]['target_id'] == 41 && isset($form_state['values']['field_r_oprovider']['und'][0]['value']) && $form_state['values']['field_r_oprovider']['und'][0]['value']) {
  else {
    // Check if author of this review has already submitted a review for a selected provider.
    $review = gv_misc_userHasSubmittedReview($form_state['values']['field_ref_provider']['und'][0]['target_id'], $author_uid, $author_email, NULL, $current_review_nid);
  } // End of Or else reset the the temporary votes field.
  if ($review) {
    $text =  t('You have already submitted a review for this provider');
    if($user->uid || !$review->field_r_notapproved_value) {
      $text .= ': ' . l($review->title, 'node/' . $review->nid);
    }
    if($review->field_r_notapproved_value) {
      $text .= '. ' . t('But it\'s not yet approved by our administrators.');
    }
    form_set_error('field_ref_provider', $text);
  } // End of if ($review) {
  
}


/**
 * Custom additional submit of a Phone review type form.
 *
 * @param array &$form
 *   Array with declared form.
 *
 * @param array &$form_state
 *   Array with current form state.

 * @return void
 *   Return nothing.
 */
function gv_pages_submitForm_phoneReview(&$form, &$form_state) {
  
  global $user;
  // Just submitted new review.
  if (!isset($form_state['values']['nid']) OR !$form_state['values']['nid']) {
    $text = t('<span class="review"><span class="success">Your review has been successfully submitted. Thank you for your time and efforts in sharing your much appreciated feedback.</span> <span class="approve">It will be published as soon as our administrators have approved it.</span> <span class="contact">If we may be of any further assistance please email us at contact@getvoip.com</span>');
    // Send verification code to approve email for an unregistered user.
    if (!$form_state['values']['uid']) {
      gv_misc_sendMessage('email_verification', array('verification_code' => $form_state['values']['field_r_approvecode']['und'][0]['value'] . '=' . urlencode($form_state['values']['field_r_email']['und'][0]['value']), 'email' => $form_state['values']['field_r_email']['und'][0]['value']));
      $text .= '<div class="emailed">' . t('To assist in getting your review published faster, we have sent you an email verification with 1-click instructions for immediate publishing of your review.') . '</div>';
    }
    $text .= '</span>';
    drupal_set_message($text);

    // Notify all admins.
    $phone_name = $form_state['complete form']['phone']['field_ref_phone']['und']['#options'][$form_state['values']['field_ref_phone']['und'][0]['target_id']];
    
    gv_misc_sendMessage('new_phone_review_admin_notify', array('phone_name' => $phone_name));
  } // End of if (!isset($form_state['values']['nid']) OR !$form_state['values']['nid']) {
  else {
    // clear previous votes if an email has been changed
    // Some excessive code, that duplicates almost the same in hook_update, but only in case if an email has been changed
    if ($form_state['values']['email_old'] != $form_state['values']['field_r_email_temp']) {
      
      $phone_nid = isset($form_state['values']['field_ref_phone']['und'][0]['target_id']) ? $form_state['values']['field_ref_phone']['und'][0]['target_id'] : NULL;

      //$saved_ratings = unserialize($form_state['values']['field_ratings_oprovider']['und'][0]['value']);
      $r_data = unserialize($form_state['values']['field_r_data']['und'][0]['value']);
      $saved_ratings = $r_data['saved_ratings'];

      //$vote_keys = array('sound' => SOUND, 'install' => INSTALL, 'service' => CUSTOMER, 'rely' => RELY, 'features' => FEATURES, 'money' => PRICE, 'recommend' => RECOMMEND);
      $vote_keys = array('performance' => PERFORMANCE, 'voice' => VOICE, 'install' => INSTALL, 'use_ease' => USE_EASE, 'durability' => DURABILITY, 'features' => FEATURES, 'price' => PRICE, 'recommend' => RECOMMEND_PHONE);
      
      $votes = array();

      foreach ($vote_keys as $vote_key => $vote_title) {
        $votes[] = array(
          'tag' => $vote_key,
          'entity_type' => 'node',
          'entity_id' => $phone_nid,
          'uid' => $form_state['values']['uid'],
          'vote_source' => $form_state['values']['email_old'],
        );
      }
      // Overall average rating.
      $votes[] = array(
        'tag' => 'overall',
        'entity_type' => 'node',
        'entity_id' => $phone_nid,
        'uid' => $form_state['values']['uid'],
        'vote_source' => $form_state['values']['email_old'],
      );

      // Remove (clear) this review's previous votes from a target phone calculation set.
      foreach ($votes as $c) {
        $select_votes = gv_misc_getVotesIDs($c); //votingapi_select_votes($c);
        votingapi_delete_votes($select_votes);
      }
        

      
    } // End of if ($form_state['values']['email_old'] != $form_state['values']['field_r_email_temp'])
    
  } // End of Else of if (!isset($form_state['values']['nid']) OR !$form_state['values']['nid']) {
  
  
  
  // Redirect doesn't work this way!
  //$form_state['redirect'] = '/'; 

  // Redirect Works! this way
  // Unregistered user cannot view any unpublished content, including just submitted (and not yet approved and not published) review.
  // So we have to redirect it to a target provider page if it's set OR to the home page.
  
  if (!$user->uid) {
    if (isset($form_state['values']['field_ref_phone']['und'][0]['target_id']) && $form_state['values']['field_ref_phone']['und'][0]['target_id']) {
      // Redirect to a target phone page, if it's set.
      $_GET['destination'] = ltrim(url('node/' . $form_state['values']['field_ref_phone']['und'][0]['target_id']), '/');
    }
    else {
      // Or reditect to the home page.
      $_GET['destination'] = '';
    }
  }
  
  //dpm($form_state['values']);
}


/**
 * Custom additional submit of provider type form.
 *
 * @param array &$form
 *   Array with declared form.
 *
 * @param array &$form_state
 *   Array with current form state.

 * @return void
 *   Return nothing.
 */
function gv_pages_submitForm_provider(&$form, &$form_state) {
  
//  // Prepare for providers logos sprites regeneration.
//  // They will be regenerated (if needed) in hook_node_update / hook_node_insert.
//
//  //dpm($form_state['values']);
//  
//  $last_erating_fields_different = NULL;
//
//  $erating_fields_before = unserialize($form_state['values']['erating_fields_original']);
//
//  //dpm($erating_fields_before);
//  
//  // Find out if some of listing fields have been changed.
//  foreach($erating_fields_before as $erating_field_title => $erating_field_before) {
//    $erating_fields_submitted[$erating_field_title] = $form_state['values'][$erating_field_title]['und'][0]['value'];
//    if ($erating_field_before != $form_state['values'][$erating_field_title]['und'][0]['value']) {
//      $last_erating_fields_different[] = $erating_field_title;
//    }
//  }
//
////      if (empty($last_erating_fields_different)) {
////        dpm('No changed listing fields this time!');
////      }
////      else {
////        dpm($last_erating_fields_different);
////      }
//
//  
//  $p_data = unserialize($form['field_p_data']['und'][0]['value']['#value']);
//  //dpm($form['field_p_data']['und'][0]['value']);
//  dpm($p_data);
//  $p_data['last_erating_fields_different'] = $last_erating_fields_different;
//  form_set_value($form['field_p_data'], array('und' => array(0 => array('value' => serialize($p_data)))), $form_state);
}


/**
 * Custom additional submit of review type form.
 *
 * @param array &$form
 *   Array with declared form.
 *
 * @param array &$form_state
 *   Array with current form state.

 * @return void
 *   Return nothing.
 */
function gv_pages_submitForm_review(&$form, &$form_state) {
  
  global $user;
  // Just submitted new review.
  if (!isset($form_state['values']['nid']) OR !$form_state['values']['nid']) {
    $text = '<span class="review"><span class="success">Your review has been successfully submitted. Thank you for your time and efforts in sharing your much appreciated feedback.</span> <span class="approve">It will be published as soon as our administrators have approved it.</span> <span class="contact">If we may be of any further assistance please email us at contact@getvoip.com</span>';
    // Send verification code to approve email for an unregistered user.
    if (!$form_state['values']['uid']) {
      gv_misc_sendMessage('email_verification', array('verification_code' => $form_state['values']['field_r_approvecode']['und'][0]['value'] . '=' . urlencode($form_state['values']['field_r_email']['und'][0]['value']), 'email' => $form_state['values']['field_r_email']['und'][0]['value']));
      $text .= '<div class="emailed">To assist in getting your review published faster, we have sent you an email verification with 1-click instructions for immediate publishing of your review.</div>';
    }
    $text .= '</span>';
    drupal_set_message($text);

//    $provider_nid = isset($node->field_ref_provider['und'][0]['target_id']) ? $node->field_ref_provider['und'][0]['target_id'] : NULL;
//    
//    // Save a provider name to the review
//    if ($provider_nid && $provider_nid != 41) {
//      $provider = node_load($provider_nid);
//      $node->field_r_provider_name['und'][0]['value'] = $provider->field_p_name['und'][0]['value'];
//    } 
//    else {
//      $node->field_r_provider_name['und'][0]['value'] = $node->field_r_oprovider['und'][0]['value'];
//    }
//    
    
    
    
    // Notify all admins.
//    if ($form_state['values']['field_r_oprovider']['und'][0]['value']) {
//      $provider_name = $form_state['values']['field_r_oprovider']['und'][0]['value'];
//    }
//    else {
//      $provider_name = $form_state['complete form']['provider']['field_ref_provider']['und']['#options'][$form_state['values']['field_ref_provider']['und'][0]['target_id']];
//    }
//    
//    gv_misc_sendMessage('new_review_admin_notify', array('provider_name' => $provider_name));
    
    
    
    
    // Notify all admins. Improved version.
    $spam = FALSE;
    if ($form_state['values']['field_r_oprovider']['und'][0]['value'] && $form_state['complete form']['provider']['field_ref_provider']['und']['#options'][$form_state['values']['field_ref_provider']['und'][0]['target_id']] == 'OTHER SP') {
      $provider_name = $form_state['values']['field_r_oprovider']['und'][0]['value'];
    }
    else {
      $provider_name = $form_state['complete form']['provider']['field_ref_provider']['und']['#options'][$form_state['values']['field_ref_provider']['und'][0]['target_id']];
      if (!empty($form_state['values']['field_r_oprovider']['und'][0]['value'])) {
        $spam = TRUE;
      }
    }
    
    
    //watchdog('Capture review submission values', print_r($form_state['values'], TRUE) . ', $_server -------> '. print_r($_SERVER, TRUE), NULL, WATCHDOG_WARNING);
    gv_misc_sendMessage('new_review_admin_notify', array('provider_name' => $provider_name, 'review' => $form_state['values']['body']['und'][0]['value'], 'spam' => $spam));
    
  } // End of if (!isset($form_state['values']['nid']) OR !$form_state['values']['nid']) {
  else {
    // clear previous votes if an email has been chabged
    // Some excessive code, that duplicates almost the same in hook_update, but only in case if an email has been changed
    if ($form_state['values']['email_old'] != $form_state['values']['field_r_email_temp']) {
      
      $provider_nid = isset($form_state['values']['field_ref_provider']['und'][0]['target_id']) ? $form_state['values']['field_ref_provider']['und'][0]['target_id'] : NULL;
      if ($provider_nid && $provider_nid != 41) {
        $saved_ratings = unserialize($form_state['values']['field_ratings_oprovider']['und'][0]['value']);
        
        $vote_keys = array('sound' => SOUND, 'install' => INSTALL, 'service' => CUSTOMER, 'rely' => RELY, 'features' => FEATURES, 'money' => PRICE, 'recommend' => RECOMMEND);
        $votes = array();
        
        foreach ($vote_keys as $vote_key => $vote_title) {
          $votes[] = array(
            'tag' => $vote_key,
            'entity_type' => 'node',
            'entity_id' => $provider_nid,
            'uid' => $form_state['values']['uid'],
            'vote_source' => $form_state['values']['email_old'],
          );
        }
        // Overall average rating.
        $votes[] = array(
          'tag' => 'overall',
          'entity_type' => 'node',
          'entity_id' => $provider_nid,
          'uid' => $form_state['values']['uid'],
          'vote_source' => $form_state['values']['email_old'],
        );
        
        // Remove (clear) this review's previous votes from a target provider calculation set.
        foreach ($votes as $c) {
          $select_votes = gv_misc_getVotesIDs($c); //votingapi_select_votes($c);
          votingapi_delete_votes($select_votes);
        }
        
      } // End of if ($provider_nid && $provider_nid != 41) {
      
    } // End of if ($form_state['values']['email_old'] != $form_state['values']['field_r_email_temp'])
    
  } // End of Else of if (!isset($form_state['values']['nid']) OR !$form_state['values']['nid']) {
  
  
  
  // Redirect doesn't work this way!
  //$form_state['redirect'] = '/'; 

  // Redirect Works! this way
  // Unregistered user cannot view any unpublished content, including just submitted (and not yet approved and not published) review.
  // So we have to redirect it to a target provider page if it's set OR to the home page.
  
  if (!$user->uid) {
    if (isset($form_state['values']['field_ref_provider']['und'][0]['target_id']) && $form_state['values']['field_ref_provider']['und'][0]['target_id']) {
      // Redirect to a target provider page, if it's set.
      $_GET['destination'] = ltrim(url('node/' . $form_state['values']['field_ref_provider']['und'][0]['target_id']), '/');
    }
    else {
      // Or reditect to the home page.
      $_GET['destination'] = '';
    }
  }
  
}


/**
 * Implements hook_node_update().
 *
 * @return void
 *   Return nothing.
 */
function gv_pages_node_update($node) {
  //dpm($node);
  if ($node->type == 'provider') {
    
    // Reset a cache because without it the DB now contains the old data (before the node save).
    entity_get_controller('node')->resetCache(array($node->nid));
      
    // Reset ProvidersDataQuick in session var.
    ///gv_misc_getProvidersDataQuick('all', FALSE, TRUE);   

    // OR BETTER:
    // Reset only a current provider data.
    gv_misc_getProvidersDataQuick('all', FALSE, FALSE, $node->nid);
    
    // Regenerate providers logos sprites (if needed). The data was prepared in gv_pages_submitForm_provider(&$form, &$form_state)
    $p_data = unserialize($node->field_p_data['und'][0]['value']);
    if (!empty($p_data['last_erating_fields_different'])) {
      gv_misc_rebuildProvidersLogosSprites($p_data['last_erating_fields_different']);
    }

  }
}


/**
 * Implements hook_node_presave().
 *
 * @return void
 *   Return nothing.
 */
function gv_pages_node_presave($node) {
  //dpm($node);
  //dpr($node);
  //die;
  
  if ($node->type == 'review') {
    
    // Unpublish, if is not approved... and publish if approved.
    $is_approved = (isset($node->field_r_notapproved['und'][0]['value']) && $node->field_r_notapproved['und'][0]['value']) ? 0 : 1;
    if ($is_approved) {
      $node->status = 1;
    }
    else {
      $node->status = 0;
    }
    
    // Extract votes data from the local saved field.
    $saved_ratings = unserialize($node->field_ratings_oprovider['und'][0]['value']);
    $provider_nid = isset($node->field_ref_provider['und'][0]['target_id']) ? $node->field_ref_provider['und'][0]['target_id'] : NULL;
    
    
    
    // Create a votes array
    
    //$vote_keys = array('features', 'sound', 'rely', 'money', 'service', 'recommend');
    $vote_keys = array('sound' => SOUND, 'install' => INSTALL, 'service' => CUSTOMER, 'rely' => RELY, 'features' => FEATURES, 'money' => PRICE, 'recommend' => RECOMMEND);
    $votes = array();

    $overall_count = 0;
    $overall_summ = 0;
    foreach ($vote_keys as $vote_key => $vote_title) {
      $votes[] = array(
        'tag' => $vote_key,
        'entity_type' => 'node',
        'entity_id' => $provider_nid,
        'value_type' => 'percent',
        'value' => $saved_ratings[$vote_key],//$form_state['values']['rating_' . $vote_key],
        'uid' => $node->uid,
        'vote_source' => $node->field_r_email['und'][0]['value'],
      );
      $overall_count++;
      $overall_summ += $saved_ratings[$vote_key];
    }

    // Calculate overall average rating.
    $rating_overall = $overall_summ / $overall_count;
    $votes[] = array(
      'tag' => 'overall',
      'entity_type' => 'node',
      'entity_id' => $provider_nid,
      'value_type' => 'percent',
      'value' => $rating_overall,
      'uid' => $node->uid,
      'vote_source' => $node->field_r_email['und'][0]['value'],
    );
    $node->field_r_rating_overall['und'][0]['value'] = $rating_overall * 0.05;


    // If a provider was chosen from a list, save voting results to Voting API tables.
    if ($provider_nid && $provider_nid != 41) {
      
        // Remove (clear) this review's previous votes from a target provider calculation set.
        foreach ($votes as $c) {
          unset($c['value_type'], $c['value']);
          $select_votes = gv_misc_getVotesIDs($c); //votingapi_select_votes($c);
          votingapi_delete_votes($select_votes);
        }
   
        // If approved and published,
        // Add this review's votes to a target provider overall rating calculation in Voting API tables.
        if ($is_approved && $node->status) {
          votingapi_set_votes($votes, $votes);
          // Clear temporary field votes.
          $node->field_ratings_oprovider['und'][0]['value'] = '';
        }
        else {
          // Recalculate results after deleting this preview votings (above).
          // (Adding voting (above), if approved, call this function itself).
          votingapi_recalculate_results('node', $provider_nid);
        }
        
        // Save a provider name to the review
        $provider = node_load($provider_nid);
        $node->field_r_provider_name['und'][0]['value'] = $provider->field_p_name['und'][0]['value'];
    } // End of if ($provider_nid && $provider_nid != 41) {
    else {
      $node->field_r_provider_name['und'][0]['value'] = $node->field_r_oprovider['und'][0]['value'];
    }
    
    // If chosen OTHER SP (and dummy nid), replace a dummy nid with 0, 
    // as we don't want to associate this review with that dummy nid node, of course.
    // Or clear OTHER SP field.
    if ($node->field_ref_provider['und'][0]['target_id'] == 41) {
      $node->field_ref_provider['und'][0]['target_id'] = 0;
    }
    else {
      $node->field_r_oprovider['und'][0]['value'] = '';
    }
    
  } // End of if ($node->type == 'review') {
  
  
  
  
  
  
  
  
  elseif ($node->type == 'phone_review') {
    
    // Unpublish, if is not approved... and publish if approved.
    $is_approved = (isset($node->field_r_notapproved['und'][0]['value']) && $node->field_r_notapproved['und'][0]['value']) ? 0 : 1;
    if ($is_approved) {
      $node->status = 1;
    }
    else {
      $node->status = 0;
    }
    
    // Extract votes data from the local saved field.
    //$saved_ratings = unserialize($node->field_ratings_oprovider['und'][0]['value']);
    $r_data = unserialize($node->field_r_data['und'][0]['value']);
    $saved_ratings = $r_data['saved_ratings'];
    $phone_nid = isset($node->field_ref_phone['und'][0]['target_id']) ? $node->field_ref_phone['und'][0]['target_id'] : NULL;
    
    
    
    // Create a votes array
    
    //$vote_keys = array('sound' => SOUND, 'install' => INSTALL, 'service' => CUSTOMER, 'rely' => RELY, 'features' => FEATURES, 'money' => PRICE, 'recommend' => RECOMMEND);
    $vote_keys = array('performance' => PERFORMANCE, 'voice' => VOICE, 'install' => INSTALL, 'use_ease' => USE_EASE, 'durability' => DURABILITY, 'features' => FEATURES, 'price' => PRICE, 'recommend' => RECOMMEND_PHONE);
    $votes = array();

    $overall_count = 0;
    $overall_summ = 0;
    foreach ($vote_keys as $vote_key => $vote_title) {
      $votes[] = array(
        'tag' => $vote_key,
        'entity_type' => 'node',
        'entity_id' => $phone_nid,
        'value_type' => 'percent',
        'value' => $saved_ratings[$vote_key],//$form_state['values']['rating_' . $vote_key],
        'uid' => $node->uid,
        'vote_source' => $node->field_r_email['und'][0]['value'],
      );
      $overall_count++;
      $overall_summ += $saved_ratings[$vote_key];
    }

    // Calculate overall average rating.
    $rating_overall = $overall_summ / $overall_count;
    $votes[] = array(
      'tag' => 'overall',
      'entity_type' => 'node',
      'entity_id' => $phone_nid,
      'value_type' => 'percent',
      'value' => $rating_overall,
      'uid' => $node->uid,
      'vote_source' => $node->field_r_email['und'][0]['value'],
    );
    $node->field_r_rating_overall['und'][0]['value'] = $rating_overall * 0.05;


    // Save voting results to Voting API tables.

      
        // Remove (clear) this review's previous votes from a target phone calculation set.
        foreach ($votes as $c) {
          unset($c['value_type'], $c['value']);
          $select_votes = gv_misc_getVotesIDs($c); //votingapi_select_votes($c);
          votingapi_delete_votes($select_votes);
        }
   
        // If approved and published,
        // Add this review's votes to a target phone overall rating calculation in Voting API tables.
        if ($is_approved && $node->status) {
          votingapi_set_votes($votes, $votes);
          // Clear temporary field votes.
          //$node->field_ratings_oprovider['und'][0]['value'] = '';
          $r_data['saved_ratings'] = '';
          $node->field_r_data['und'][0]['value'] = serialize($r_data);
        }
        else {
          // Recalculate results after deleting this preview votings (above).
          // (Adding voting (above), if approved, call this function itself).
          votingapi_recalculate_results('node', $phone_nid);
        }
        
        // Save a phone name to the review
        $phone = node_load($phone_nid);
        $node->field_p_name['und'][0]['value'] = $phone->field_p_name['und'][0]['value'];

    
  } // End of if ($node->type == 'phone_review') {
  
  
  
}





/**
 * Implements hook_form().
 *
 * Provider preview form for a Review page.
 * 
 * @return $form
 *   Return nothing.
 */
function gv_pages_addProviderPreview_form($node, &$form_state, $provider_nid) {
  
  $provider_node = node_load($provider_nid);
  $form['provider_set'] = array(
      '#type' => 'fieldset',
      '#title' => t('Provider description (for a quick reference)'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#weight' => -100,
  );
  $form['provider_set']['provider'] = node_view($provider_node, 'teaser');
  
  return $form;
}


/**
 * Implements hook_node_view().
 *
 * @return void
 *   Return nothing.
 */
function gv_pages_node_view($node, $view_mode) {

  switch ($node->type) {
    
    case 'article':
    case 'blog_post':
    case 'news_post':
           
      if ($view_mode != 'full') {
        return;
      }
      
      
      global $user;
      if (isset($_GET['disqus'])) {
        $disqusRemote = gv_misc_disqusGetThreadDetails($node->nid);
        
        if (!$disqusRemote->code) {
          $updateData = array();
          
          $decoded_right_title = htmlspecialchars_decode($node->disqus['title'], ENT_QUOTES);
          if ($disqusRemote->response->title != $decoded_right_title) {
//            dpm('Remote title: ' . $disqusRemote->response->title);
//            dpm('Right title: ' . $decoded_right_title);
            
            $updateData['title'] = $decoded_right_title;
          }
          if ($disqusRemote->response->link != $node->disqus['url']) {
//            dpm('Remote link: ' . $disqusRemote->response->link);
//            dpm('Right link: ' . $node->disqus['url']);
            
            $updateData['url'] = $node->disqus['url'];
          }
          
          
          if (!empty($updateData)) {
            
            //dpm($disqusRemote);
            $message = (!empty($updateData['title']) ? 'An Old title "' . $disqusRemote->response->title . '". A new one "' . $updateData['title'] . '"' : '') . (!empty($updateData['title']) && !empty($updateData['url']) ? '.

      ' : '') . (!empty($updateData['url']) ? 'An Old url "' . $disqusRemote->response->link . '". A new one "' . $updateData['url'] . '".' : '') . ' You may save this article as draft and then publish it again to fix all the differences.';

            drupal_set_message($message, 'warning');
           
          }
          else {
            drupal_set_message('Remote Dusqus data is the same as the local one.');
          }
        }
      }
      
      
      // Add ColorBox OR just JS popup functionality for sharing links.
      gv_misc_loadPopupForShareLinks();
      
      
      
      
      
      // Create audio widgets for mp3 files links.
      
      $mp3_presents = FALSE;
      
      /*
       
      // Variant 1 - with DOMDocument.

        $dom = new DOMDocument;
        $dom->loadHTML($node->body['und'][0]['value']);
        $links = $dom->getElementsByTagName('a');
        if (strpos($link->getAttribute('href'), '.mp3') !== false) {
          $parent = $link->parentNode;
          $element = $dom->createElement('div');
          $element->setAttribute('class', 'ui360');
          $element->appendChild($link);
          $parent->appendChild($element);
          $mp3_presents = TRUE;
        }
        

      // Variant 2 - with preg_replace

      //preg_match('/(<a.*href="(.*\.mp3)".*<\/a>)/sim', $str, $result);
      //preg_match('/(<a.*href="(.*\.mp3)".*<\/a>)/iU', $str, $result);
       
      */
      
      $original_body = !empty($node->content['body'][0]['#markup']) ? $node->content['body'][0]['#markup'] : @$node->body['und'][0]['value'];
      $new_body = preg_replace('/(<a.*\.mp3.*<\/a>)/iU', '<div class="ui360">$1</div>', $original_body);
      if ($new_body != $original_body) {
        $node->content['body'][0]['#markup'] = $node->body['und'][0]['value'] = $new_body;
        $mp3_presents = TRUE;
      }

      if ($mp3_presents) {

        /*
        // Variant 1 - with DOMDocument.

          $node->body['und'][0]['value'] = $dom->saveHTML($dom->documentElement);
          $node->body['und'][0]['value'] = str_replace(array('<html><body>', '</body></html>'), '', $node->body['und'][0]['value']);
          $node->content['body'][0]['#markup'] = $node->body['und'][0]['value'];
        */
        
        drupal_add_js('sites/all/libraries/audio/soundmanager2/script/soundmanager2.js', array('every_page' => FALSE, 'preprocess' => FALSE));
        drupal_add_js('sites/all/libraries/audio/soundmanager2/demo/360-player/script/berniecode-animator.js', array('every_page' => FALSE, 'preprocess' => FALSE));
        drupal_add_js('sites/all/libraries/audio/soundmanager2/demo/360-player/script/360player.js', array('every_page' => FALSE, 'preprocess' => FALSE));
        drupal_add_css('sites/all/libraries/audio/soundmanager2/demo/360-player/360player.css', array('every_page' => FALSE, 'preprocess' => FALSE)); //drupal_add_css('sites/all/libraries/audio/soundmanager2/demo/360-player/360player.css', array('preprocess' => FALSE)); // array('group' => CSS_THEME, 'preprocess' => FALSE)

//        $path_to_module = drupal_get_path('module', 'gv_misc');
//        drupal_add_js($path_to_module . '/js/gv_addSoundManagerSettings.js');
        
//        drupal_add_js('soundManager.setup({
//            // path to directory containing SM2 SWF
//            url: "/sites/all/libraries/audio/soundmanager2/swf/"
//          });', 'inline');
        
        drupal_add_js('soundManager.setup({
            // path to directory containing SM2 SWF
            url: "/sites/all/libraries/audio/soundmanager2/swf"
          });', 'inline');
        
      }
      
      
      
      
      
      
      // Set Related articles section data.
      global $user;
      if ($user->uid) {
        
        //gv_misc_addRelatedArticlesToNode($node);
        
        /*
        
        $max_articles_on_front = 4;
        $extra_data = unserialize(@$node->field_extra_data['und'][0]['value']);
        
        //dpm($extra_data);
        
        //'related_articles_timestamp' => time()
        
        // If the article hasn't been yet resaved with set related artivles
        // we then set it here by default the first 4 most relative articles from all found related articles.
        
        //$time_elapsed = time() - @$extra_data['related_articles_timestamp'];
        //dpm('$time_elapsed = ' . $time_elapsed);
        
        if (!isset($extra_data['related_articles']) || (isset($extra_data['related_articles']) && (time() - @$extra_data['related_articles_timestamp']) > (3600*24*3) ) ) // 60s*60 = 3600s = 1h     //Comment this line to ignore srelected by admin related articled.
        {
          //dpm('Recaclulate related...');
          
          $articles_by_index = gv_misc_get_relatedArticles_dividedByIndex($node->nid, $node->type);
          if (!empty($articles_by_index)) {
          
            // Recreate $extra_data['related_articles'] element
            $related_count = 0;
            foreach ($articles_by_index as $index => $data) {
              foreach ($data as $related_nid => $related_article) {
                
                //if (gv_misc_articleHasMainImageField($related_nid)) 
                {
                  
                  
                  $query = db_select('node', 'n')
                    ->fields('n', array('title'));
                  $query->join('field_data_field_main_image', 'mi', 'mi.entity_id = n.nid');
                  $query->fields('mi', array('field_main_image_value'));
                  $query->condition('n.nid', $related_article->nid);

                  if ($result = $query->execute()->fetchObject()) {
                
                    $result->field_main_image_value = unserialize($result->field_main_image_value);
                    if(!empty($result->field_main_image_value)) {
                      $result->field_main_image_value['src_themed_related'] = image_style_url('related_article_thumb', $result->field_main_image_value['uri']);
                    }
                    $extra_data['related_articles']['index_'. $index][$related_article->nid] = $result;
                    
                    if ($related_count++ >= $max_articles_on_front - 1) {
                      break 2;
                    }
                    
                  }
                  
//                  $extra_data['related_articles']['index_'. $index][$related_article->nid] = 1;
//                  if ($related_count++ >= $max_articles_on_front - 1) {
//                    break 2;
//                  }
                  
                }
              }
            }
            $extra_data['related_articles_timestamp'] = time();
            
            //dpm($extra_data);
            // Save found related articles to the article's extra_data field to set it as default related articles.
            // After that there will not be need to recalculate it avery time the article being viewed.
            
            gv_misc_fieldSave('extra_data', $node->nid, serialize($extra_data), 'node', $node->type);
            
          }

        }
        
        if (!isset($extra_data['related_articles'])) {
          $extra_data['related_articles'] = array();
        }
        foreach ($extra_data['related_articles'] as $group) {
          foreach ($group as $nid => $checked) {

            
            if ($checked) {
              
              if (is_int($checked)) {

                $query = db_select('node', 'n')
                  ->fields('n', array('title'));

                $query->join('field_data_field_main_image', 'mi', 'mi.entity_id = n.nid');
                $query->fields('mi', array('field_main_image_value'));

                $query->condition('n.nid', $nid);

                
                // Skip articles without thumbnails.
//                if ($result = $query->execute()->fetchObject()) {
//
//                  $result->field_main_image_value = unserialize($result->field_main_image_value);
//                  if(!empty($result->field_main_image_value)) {
//                    $result->field_main_image_value['src_themed'] = image_style_url('related_article_thumb', $result->field_main_image_value['uri']);
//                    $node->related_articles[$nid] = $result;
//                    if (--$max_articles < 1) {
//                      break 2;
//                    }
//                  }
//                }


                if ($result = $query->execute()->fetchObject()) {

                  $result->field_main_image_value = unserialize($result->field_main_image_value);
                  if(!empty($result->field_main_image_value)) {
                    $result->field_main_image_value['src_themed_related'] = image_style_url('related_article_thumb', $result->field_main_image_value['uri']);
                  }
                  $node->related_articles[$nid] = $result;

                  if (--$max_articles_on_front < 1) {
                    break 2;
                  }
                }
              } // End of if_int
              else {
                
                $node->related_articles[$nid] = $checked;
                if (--$max_articles_on_front < 1) {
                  break 2;
                }
                
              }
              
              
            }
          }
        }
        */
      } // End of $user->uid.
      
      break; // End of quote.
      
      
      
      
      
      
      
      
      
    case 'quote':
      
      if ($view_mode != 'full') {
        return;
      }
      
      $node->q_data = unserialize($node->field_q_data['und'][0]['value']);
      
      // Redirect old versions Quote pages to the latest version.
      global $user;
      if (!$user->uid && (!strpos($node->title, 'Quote page v3') && !strpos($node->title, 'Quote page v4'))) {
        drupal_goto('compare-voip-solutions', array(), 301);
      }
      
      
      break; // End of quote.
    
    
    
    
    case 'review': // Provider's review
      
      
      if(isset($node->field_ref_provider['und'][0]['target_id']) && $node->field_ref_provider['und'][0]['target_id']) {
        
//        // Show preview of the provider (as a teaser)
//        if ($view_mode == 'full') {
//          $node->content['provider_descr'] = drupal_get_form('gv_pages_addProviderPreview_form', $node->field_ref_provider['und'][0]['target_id']);
//        }

        $provider = node_load($node->field_ref_provider['und'][0]['target_id']);
        $p_data = unserialize($provider->field_p_data['und'][0]['value']);
        $provider_url = $p_data['info']['i_web'];

        
        // Define a pic for share
        global $review_share_src_themed;
        if (isset($p_data['share_src_themed']) && $p_data['share_src_themed']) {
          $review_share_src_themed = $p_data['share_src_themed'];
        }
        elseif (isset($provider->field_p_logo['und'][0]['uri']) && $provider->field_p_logo['und'][0]['uri']) {
          $review_share_src_themed = gv_misc_getPathFromStreamUri($provider->field_p_logo['und'][0]['uri']);
        }

        $node->content['provider_url'] = $provider_url;
      }
      
      // Show data from field_r_oprovider, if is not set field_ref_provider
      if ( !isset($node->field_ref_provider['und'][0]['target_id']) && isset($node->field_r_oprovider['und'][0]['value']) ) {
        $node->content['field_r_oprovider']['#title'] = t('Your VoIP Service Provider') . ' (*)';
      }
      else {
        unset($node->content['field_r_oprovider']);
      }
      
      // Show voting results for this provider and user (author of this review).
      // Take votes from a local ratings field if it's not empty.
      if (!empty($node->field_ratings_oprovider['und'][0]['value'])) {
        $votes_simple_format = unserialize($node->field_ratings_oprovider['und'][0]['value']);
        // Rebuild the array to the votes api format
        foreach ($votes_simple_format as $tag => $value) {
          $votes[] = array('tag' => $tag, 'value' => $value);
        }
      }
      else {
        // Or if the local votest field is empty, 
        // load saved votes from Voting API table.
        $criteria = array(
          'entity_type' => 'node',
          'entity_id' => $node->field_ref_provider['und'][0]['target_id'],
          'uid' => $node->uid,
          // Make it possible to count votes of several unauthorized (uid = 0, but with different emails) users.
          'vote_source' => $node->field_r_email['und'][0]['value'],
        );
        $votes = gv_misc_getVotesIDs($criteria); // = votingapi_select_votes($criteria);
      }
      
      gv_pages_addRatingsToNodeThemed($node, $votes);
      
      if (isset($node->field_r_data['und'][0]['value'])) {
        $node->content['r_data'] = unserialize($node->field_r_data['und'][0]['value']);
      }
      
//      // Add a provider name in front of title
//      if ($view_mode == 'full') {
//        drupal_set_title($node->field_r_provider_name['und'][0]['safe_value'] . ': ' . $node->title);
//      }
      
    break; // End of case 'review':
    
    
    
    
    
    
    case 'phone_review':
      
      
      if(isset($node->field_ref_phone['und'][0]['target_id']) && $node->field_ref_phone['und'][0]['target_id']) {
        
//        // Show preview of the phone (as a teaser)
//        if ($view_mode == 'full') {
//          $node->content['phone_descr'] = drupal_get_form('gv_pages_addPhonePreview_form', $node->field_ref_phone['und'][0]['target_id']);
//        }

        $phone = node_load($node->field_ref_phone['und'][0]['target_id']);
        $extra_data = unserialize($phone->field_extra_data['und'][0]['value']);
        
        // Define a pic for share
        global $review_share_src_themed;
        if (isset($extra_data['share_src_themed']) && $extra_data['share_src_themed']) {
          $review_share_src_themed = $extra_data['share_src_themed'];
        }
        elseif (isset($phone->field_p_image['und'][0]['uri']) && $phone->field_p_image['und'][0]['uri']) {
          $review_share_src_themed = gv_misc_getPathFromStreamUri($phone->field_p_image['und'][0]['uri']);
        }

      }
      
      if (isset($node->field_r_data['und'][0]['value'])) {
        $r_data = unserialize($node->field_r_data['und'][0]['value']);
        $node->content['r_data'] = $r_data;
      }
      
      // Show voting results for this phone and user (author of this review).
      // Take votes from a local ratings field if it's not empty.
      
      if (!empty($r_data['saved_ratings'])) {
        $votes_simple_format = $r_data['saved_ratings'];
        // Rebuild the array to the votes api format
        foreach ($votes_simple_format as $tag => $value) {
          $votes[] = array('tag' => $tag, 'value' => $value);
        }
      }
      else {
        // Or if the local votest field is empty, 
        // load saved votes from Voting API table.
        $criteria = array(
          'entity_type' => 'node',
          'entity_id' => $node->field_ref_phone['und'][0]['target_id'],
          'uid' => $node->uid,
          // Make it possible to count votes of several unauthorized (uid = 0, but with different emails) users.
          'vote_source' => $node->field_r_email['und'][0]['value'],
        );
        $votes = gv_misc_getVotesIDs($criteria); // = votingapi_select_votes($criteria);
      }
      
      gv_pages_addPhoneRatingsToNodeThemed($node, $votes);
      
//      // Add a provider name in front of title
//      if ($view_mode == 'full') {
//        drupal_set_title($node->field_p_name['und'][0]['safe_value'] . ': ' . $node->title);
//      }
      
    break; // End of case 'phone_review':
    
    
    
    
    
    case 'provider':
      
      if ($view_mode == 'full') {
        
        global $user;
        
        // For a registered user....
        // Add a "Add a review" button to the Provider's page 
        // OR link to review of the current user if he has already submitted a review for this Provider.
        if ($user->uid) {
          if (!$review = gv_misc_userHasSubmittedReview($node->nid, $user->uid)) {
            $node->content['add_review'] = drupal_get_form('gv_pages_addReviewButton_form', $node->nid);
          }
          else {
            $node->content['add_review'] = array(
              '#markup' => '<div class="add_review">' . t('You have already submitted a review for this provider:') . ' ' . l('"' . $review->title . '"', 'node/' . $review->nid) . '</div>',
            );
            $node->current_user_has_review = url('node/' . $review->nid);
            $node->current_user_has_review_title = $review->title;
          }
        }
        else {
          $node->content['add_review'] = drupal_get_form('gv_pages_addReviewButton_form', $node->nid);
        }

        
        // Load votes for a provider.
        $criteria = array(
          'entity_type' => 'node',
          'entity_id' => $node->nid,
          'function' => 'average',
        );
        $votes = votingapi_select_results($criteria);
        $criteria['function'] = 'count';
        $counts = votingapi_select_results($criteria);
        
        $node->gv_recommends = gv_misc_getVotesRecommendPosVsNeg($node->nid);
        
        $node->gv_voters = isset($counts[0]['value']) ? $counts[0]['value'] : '';
        gv_pages_addRatingsToNodeThemed($node, $votes, $counts);

        
        
        // Load and show all the data from the placeholder field field_p_data serialized data
        if (isset($node->field_p_data['und'][0]['value'])) {

          $p_data = unserialize($node->field_p_data['und'][0]['value']);
          $node->p_data = $p_data;
        } // End of if (isset($node->field_p_data['und'][0]['value'])) {        
        
        
        // Add tabs.
        drupal_add_library('system', 'ui.tabs');
        $module_path_pages = drupal_get_path('module', 'gv_pages');
        drupal_add_js( $module_path_pages . '/js/gv_addTabs.js'); 
        // set a user referer.
        //$module_path_misc = drupal_get_path('module', 'gv_misc');
        //drupal_add_js( $module_path_misc . '/js/gv_setReferer.js'); 
    
      } // End of if ($view_mode == 'full') {
        
        
    break; // End of case 'provider':
  
    
    
    
    case 'phone':
      
      $extra_data = unserialize($node->field_extra_data['und'][0]['value']);
      $node->extra_data = $extra_data;
          
      if ($view_mode == 'full') {
      
          // Add ColorBox OR just JS popup functionality for sharing links.
          gv_misc_loadPopupForShareLinks();
      
          // Set pros and cons.
          //$node->pros_and_cons = $extra_data['pros_and_cons'];


          // Phone specs

          // Add a Manufacturer and a type first.
          $node->specs = '<tr><td class="title">Manufacturer</td><td class="value">' . $node->field_manufacturer['und'][0]['taxonomy_term']->name . '</td></tr>';
          if (isset($node->field_phone_type['und'][0])) {
            $phone_types = '';
            foreach ($node->field_phone_type['und'] as $phone_type) {
              $phone_types .= $phone_types ? ', ' . $phone_type['value'] : $phone_type['value'];
            }
            $node->specs .= '<tr><td class="title">Phone type</td><td class="value">' . $phone_types . '</td></tr>';
          }



          foreach ($extra_data['specs'] as $spec_title => $spec_value) {
            $spec_title = str_replace('Num ', '# ', $spec_title);
            $spec_value = (is_int($spec_value) ? ($spec_value ? 'Yes' : 'No') : ($spec_value ? $spec_value : 'N/A'));
            $node->specs .= '<tr><td class="title">' . $spec_title . '</td><td class="value">' . $spec_value . '</td></tr>';
          }
          $node->specs = '<table class="specs"><tbody>' . $node->specs . '</tbody></table>';



          // Load votes for a phone.
          $criteria = array(
            'entity_type' => 'node',
            'entity_id' => $node->nid,
            'function' => 'average',
          );
          $votes = votingapi_select_results($criteria);
          $criteria['function'] = 'count';
          $counts = votingapi_select_results($criteria);
          $node->gv_voters = isset($counts[0]['value']) ? $counts[0]['value'] : '';
          gv_pages_addPhoneRatingsToNodeThemed($node, $votes, $counts);

          // Get Editor's ratings
          $votes_simple_format = $extra_data['editor_ratings'];
          
          // Rebuild the array to the votes api format
          $votes = array();
          foreach ($votes_simple_format as $tag => $value) {
            $votes[] = array('tag' => $tag, 'value' => $value);
          }
          $editor = new stdClass;
          gv_pages_addPhoneRatingsToNodeThemed($editor, $votes);
          $node->editor = $editor;

          // Get users reviews.
          $view_name = 'phone_reviews'; 
          $display_name = 'block_phone_reviews';
          $view = views_get_view($view_name);

          $viewsFilterOptions_nodeNid = array('id' => 'field_ref_phone_target_id', 'value' => array('value' => $node->nid));
          $view->add_item($display_name, 'filter', 'field_data_field_ref_phone', 'field_ref_phone_target_id', $viewsFilterOptions_nodeNid);

          $results = $view->preview($display_name);
          if ($view->result) {
            $node->userReviews = $results;
          }
          else {
            $node->userReviews = NULL;
          }
          
          //global $user;
          //if ($_SERVER['REMOTE_ADDR'] == '91.200.156.91') {
            $node->addPhoneReviewForm = render(drupal_get_form('gv_pages_addPhoneReview_form', $node));
          //}


          // Add tabs handling.
          $module_path = drupal_get_path('module', 'gv_pages');
          drupal_add_library('system', 'ui.tabs');
          drupal_add_js( $module_path . '/js/gv_addTabs.js'); 
          
          gv_misc_addZoomableImagesJs();
          
      } // End of if ($view_mode == 'full') 
      
    break; // End of phone.
  
  
  
    
    case 'preface':
      
      $preface_key = @$node->field_preface_key['und'][0]['value'];
      
      // Disable ?page* links for /sitemap.
      if (@$_SERVER['REDIRECT_URL'] == '/sitemap' && $_SERVER['REQUEST_URI'] != '/sitemap') {
        //drupal_not_found();
        gv_misc_drupal_not_found();
        drupal_exit();
      }
      
      if ($preface_key) {
        // Load Colorbox plugin to show YouTube videos in a popup windows
        // But just for some pages, where links to those videos are presented.
        $pages_with_video_to_popup = array('front', 'page-compare-business-voip-providers', 'page-compare-residential-voip-providers', 'page-compare-sip-voip-providers', 'page-compare-ifa-voip-providers', 'residential-reviews');
        if (in_array($preface_key, $pages_with_video_to_popup)) {
          gv_misc_loadColorboxForVideoLinks();
        }
        
      }
      
      
      // Set metatags from the preface to a page where the preface is placed
      // Except of the front page, where it can be set via admin interface of the Metatags.
      // AND except of published prefaces, because thier metatags will be pulled automatically!

      if (isset($node->metatags) && count($node->metatags) && !$node->status) {
        
        //dpm($node->metatags);
        
        foreach($node->metatags as $metatag_title => $metatag_data) {

          // We set title while attaching a preface to a view.
          // So skip it here...
          /*
          if ($metatag_title == 'title' && !$metatag_data) {
            $metatag_data = $node->title;
          }
          */
          /*
          if ($metatag_title != 'title') {
            gv_misc_addMetatag($metatag_title, $metatag_data['value']);
          }
          */
          gv_misc_addMetatag($metatag_title, $metatag_data['value']);

        }
          /*
          if (isset($node->field_preface_key['und'][0]['safe_value']) && $node->field_preface_key['und'][0]['safe_value'] == 'front') {
            gv_misc_addMetatag('canonical', NULL, 'http://getvoip.com');
            gv_misc_addMetatag('shortlink', NULL, 'http://getvoip.com');
          }
          */
      }

/*      

        //doesnt
        if(isset($metatags["$enitity_id"]["title"])){
                //drupal_set_title($metatags["$enitity_id"]["title"]["value"]);
                //variable_set("head_title", $metatags["$enitity_id"]["title"]["value"]);
        }
*/      
      
      /*
       
        $tags = array(

            'DC.title' => array(
                '#tag' => 'meta',
                '#attributes' => array(
                    'name' => 'DC.title',
                    'content' => $node->title,
                ),
            ),

            'author' => array(
                '#tag' => 'meta',
                '#attributes' => array(
                    'name' => 'author',
                    'content' => $publisher_title,
                ),
            ),
            'image_src' => array(
                '#tag' => 'link', // The #tag is the html tag - <link />
                '#attributes' => array( 
                    'href' => '/' . $node->field_thumbnail['und'][0]['value'],
                    'rel' => 'image_src',
                    //'type' => 'text/css',
                ),
            ),
        );
 

        */
      
      
      
    break;
  
  } // End of switch ($node->type) {
  
  if ($view_mode == 'full') {
    gv_misc_addSocialShareData_toPage($node);
    
    // Floating Share buttons, applied to already initialized social buttons block
    /* .
    $types_with_floating_share = array ('article', 'blog_post', 'news_post'); //, 'preface', 'provider', 'phone'
    if (in_array($node->type, $types_with_floating_share)) {
      
        // Floating share buttons box.
        //drupal_add_js('sites/all/libraries/jquery.plugins/stickyfloat/stickyfloat.min.js');
        ////drupal_add_js('sites/all/libraries/jquery.plugins/stickyfloat/stickyfloat.js');
        drupal_add_js('sites/all/libraries/jquery.plugins/stickyfloat/stickyfloat2.js');
        $module_path = drupal_get_path('module', 'gv_misc');
        drupal_add_js( $module_path . '/js/gv_floatingSocials.js'); 
    }
    */
  }
}


/**
 * Adds field to a node from the saved data.
 */
/*
function gv_pages_addFieldToNode($node, &$data, $options, $field_type = 'item') {

  switch ($node->type) {
    
    case 'provider':
      
      if ($options[0] == 'services') {
        switch ($field_type) {
          case 'item':
            if (isset($data['services'][$options[1]][$options[2] . '_title']) && isset($data['services'][$options[1]][$options[2] . '_text']) && $data['services'][$options[1]][$options[2] . '_title'] && $data['services'][$options[1]][$options[2] . '_text']) {
              $node->content[$options[2]] = array(
                '#type' => 'item',
                '#title' => $data['services'][$options[1]][$options[2] . '_title'],
                '#markup' => $data['services'][$options[1]][$options[2] . '_text'],
              );
            }
          break; // End of case 'item':
          
          case 'key_and_normal_features_blocks':
            // $options[1] - something like 's_residential'
            // $options[2] - something like 're_features', add here weights_ and you'll get the field in the array $data['weights_re_features']
            if (isset($data['services'][$options[1]]['weights_' . $options[2]]) && !empty($data['services'][$options[1]]['weights_' . $options[2]])) {
              $weights = $data['services'][$options[1]]['weights_' . $options[2]];
              
              // First 3 tags go to Key Features
              $node->content[$options[1] .'_features_key'] = array(
                '#type' => 'item',
                '#title' => t('Key Features'),
                '#markup' => '',
              );
              $count = 0;
              foreach ($weights as $tid => $term) {
                if ($count++ > 2) {
                  break;
                }
                $node->content[$options[1] .'_features_key']['#markup'] .= '<li>' . l(t($term['name']), 'taxonomy/term/' . $tid) . '</li>';
                unset($weights[$tid]);
              }
              $node->content[$options[1] .'_features_key']['#markup'] = '<ul>' . $node->content[$options[1] .'_features_key']['#markup'] . '</ul>';
              
              // The rest of features (if any) go to Available Features
              if(!empty($weights)) {
                $node->content[$options[1] .'_features'] = array(
                  '#type' => 'item',
                  '#title' => t('Available Features'),
                  '#markup' => '',
                );
                foreach ($weights as $tid => $term) {
                  $node->content[$options[1] .'_features']['#markup'] .= '<li>' . l(t($term['name']), 'taxonomy/term/' . $tid) . '</li>';
                }
                $node->content[$options[1] .'_features']['#markup'] = '<ul>' . $node->content[$options[1] .'_features']['#markup'] . '</ul>';
              } // End of if(!empty($weights)) {
            } // end of if (isset($data['services'][$options[1]]['weights_' . $options[2]]) && !empty($data['services'][$options[1]]['weights_' . $options[2]])) {
            
          break; // End of case 'key_and_normal_features_blocks':
          
          case 'other_features_block':
            // $options[1] - something like 's_business'
            // $options[2] - something like 'bu_features_pbx', add here weights_ and you'll get the field in the array $data['weights_bu_features_pbx']
            // $options[3] - the Title, something like PBX Features
            if (isset($data['services'][$options[1]]['weights_' . $options[2]]) && !empty($data['services'][$options[1]]['weights_' . $options[2]])) {
              
              $weights = $data['services'][$options[1]]['weights_' . $options[2]];
              
              $node->content[$options[1] . '_' . $options[2]] = array(
                '#type' => 'item',
                '#title' => t($options[3]),
                '#markup' => '',
              );
              foreach ($weights as $tid => $term) {
                $node->content[$options[1] . '_' . $options[2]]['#markup'] .= '<li>' . l(t($term['name']), 'taxonomy/term/' . $tid) . '</li>';
              }
              $node->content[$options[1] . '_' . $options[2]]['#markup'] = '<ul>' . $node->content[$options[1] . '_' . $options[2]]['#markup'] . '</ul>';

            } // end of if (isset($data['services'][$options[1]]['weights_' . $options[2]]) && !empty($data['services'][$options[1]]['weights_' . $options[2]])) {
            
          break; // End of case 'other_features_block':
        
        } // End of switch ($field_type) {
        
      } // End of if ($options[0] == 'services') {
      elseif ($options[0] == 'info') {
        if (isset($data['info'][$options[1]]) && $data['info'][$options[1]]) {
          $node->content[$options[1]] = array(
            '#type' => 'item',
            '#title' => t($options[2]),
            '#markup' => $data['info'][$options[1]],
          );
        }
      } // End of elseif ($options[0] == 'info') {
      elseif ($options[0] == 'quote') {
        if (isset($data['quote'][$options[1]]) && isset($p_data['quote'][$options[2]]) && $data['quote'][$options[1]] && $p_data['quote'][$options[2]]) {
          $node->content[$options[1]] = array(
            '#markup' => $p_data['quote'][$options[2]],
          );
          $node->content[$options[2]] = array(
            '#markup' => $p_data['quote'][$options[2]],
          );
        }
      } // End of elseif ($options[0] == 'quote') {
      
      break; // End of case 'provider':
      
  } // End of switch ($node->type) {
  
  
}
*/

/**
 * Implements hook_node_delete().
 *
 * @return void
 *   Return nothing.
 */
function gv_pages_node_delete($node) {
  switch ($node->type) {
    case 'review':
      // Delete vote of this user for this provider, if it exists.
      if (isset($node->field_ref_provider['und'][0]['target_id'])) {
        $criteria = array(
          'entity_type' => 'node',
          'entity_id' => $node->field_ref_provider['und'][0]['target_id'],
          'uid' => $node->uid,
          'vote_source' => $node->field_r_email['und'][0]['value'],
        );
        $select_votes = gv_misc_getVotesIDs($criteria); //votingapi_select_votes($criteria);
        votingapi_delete_votes($select_votes);
        votingapi_recalculate_results('node', $node->field_ref_provider['und'][0]['target_id']);
      }
      
      break;
      
    case 'phone_review':
      // Delete vote of this user for this phone, if it exists.
      if (isset($node->field_ref_phone['und'][0]['target_id'])) {
        $criteria = array(
          'entity_type' => 'node',
          'entity_id' => $node->field_ref_phone['und'][0]['target_id'],
          'uid' => $node->uid,
          'vote_source' => $node->field_r_email['und'][0]['value'],
        );
        $select_votes = gv_misc_getVotesIDs($criteria); //votingapi_select_votes($criteria);
        votingapi_delete_votes($select_votes);
        votingapi_recalculate_results('node', $node->field_ref_phone['und'][0]['target_id']);
      }
      
      break;
  }
  
  cache_clear_all('*', 'cache_views', TRUE);
  cache_clear_all('*', 'cache_views_data', TRUE);
  drupal_set_message(t('A cache has been flushed.'), 'warning');
}


/**
 * Append to a Phone OR Phone review node (for a hook node_view) a themed set of rating votes.
 *
 * @return void
 *   Return nothing.
 */
function gv_pages_addPhoneRatingsToNodeThemed($node, $votes, $counts = NULL, $semicolon = '') {
  //dpm($votes);
  
  $overall_vote = NULL;
  
  if ($votes) {
    
    //$rating_titles = array('sound' => SOUND, 'install' => INSTALL, 'service' => CUSTOMER, 'rely' => RELY, 'features' => FEATURES, 'money' => PRICE, 'overall' => OVERALL, 'recommend' => RECOMMEND);
    $rating_titles = array('performance' => PERFORMANCE, 'voice' => VOICE, 'install' => INSTALL, 'use_ease' => USE_EASE, 'durability' => DURABILITY, 'features' => FEATURES, 'price' => PRICE, 'overall' => OVERALL, 'recommend' => RECOMMEND_PHONE);
  
    
    $node->content['gv_ratings'] = array(
        '#markup' => '',
        //'#prefix' => '<div class="gv_votes">',
        //'#suffix' => '</div>',
    );

    //Sort votes.
    foreach ($rating_titles as $rating_tag => $rating_title) {
      foreach ($votes as $vote) {
        if($vote['tag'] == $rating_tag) {
          $votes_sorted[] = $vote;
        }
      }
    }
    
    $zebra = 0;
    $zebra_odd = array(1,3,5,7,9);
    foreach ($votes_sorted as $key => $vote) {
      $zebra++;
      if ($vote['tag'] == 'overall') {
        $overall_vote = $vote;
        continue;
      }
      if ($vote['tag'] == 'recommend') {
        $recommend_vote = $vote;
        continue;
      }
      $node->content['gv_ratings']['#markup'] .= '<div class="gv_vote ' . (in_array($zebra, $zebra_odd) ? 'odd' : 'even') .'"><div class="title">' . t($rating_titles[$vote['tag']]) . $semicolon . '</div>' 
        // Using own theming function for fivestar (replicate of the original fivestar theme function).
        . theme('gv_misc_fivestar_static', array('rating' => $vote['value'], 'stars' => 5, 'tag' => $vote['tag'], 'widget' => array('name' => 'stars', 'css' => 'stars.css')))
        // Using the original fivestar theme function.
        //. theme('fivestar_static', array('rating' => $vote['value'], 'stars' => 5, 'tag' => $vote['tag'], 'widget' => array('name' => 'hearts', 'css' => 'hearts.css')))
        . '</div>';
    }
    
    // Voters count.
    // Has been set before, via $node->gv_voters

    // Add a caption.
    $node->content['gv_ratings']['#markup'] = '<div class="data">' . $node->content['gv_ratings']['#markup'] . '</div>';
    
    if ($overall_vote) {
      $node->gv_rating_overall = number_format($overall_vote['value'] * 0.05, 1);
    }
    
    // Recommend vote.
    if (isset($recommend_vote['function'])) {
      // If it's agregated cached results (calculated via function)
      // we'll show percent of voters recomendations.
      //$node->gv_recommend = number_format($recommend_vote['value'], 1, '.', '');
      $node->gv_recommend = number_format($recommend_vote['value'], 0);
    }
    else {
      $node->gv_recommend = $recommend_vote['value'] ? t('Yes') : t('No');
    }
  }
}


/**
 * Append to a node (for a hook node_view) a themed set of rating votes.
 *
 * @return void
 *   Return nothing.
 */
function gv_pages_addRatingsToNodeThemed($node, $votes, $counts = NULL, $semicolon = '') {
  $overall_vote = NULL;
  if ($votes) {
    //$rating_titles = array('features' => FEATURES, 'sound' => SOUND, 'service' => CUSTOMER, 'money' => PRICE, 'rely' => RELY, 'recommend' => RECOMMEND);
    $rating_titles = array('sound' => SOUND, 'install' => INSTALL, 'service' => CUSTOMER, 'rely' => RELY, 'features' => FEATURES, 'money' => PRICE, 'overall' => OVERALL, 'recommend' => RECOMMEND);
    $node->content['gv_ratings'] = array(
        '#markup' => '',
        //'#prefix' => '<div class="gv_votes">',
        //'#suffix' => '</div>',
    );

    //Sort votes.
    foreach ($rating_titles as $rating_tag => $rating_title) {
      foreach ($votes as $vote) {
        if($vote['tag'] == $rating_tag) {
          $votes_sorted[] = $vote;
        }
      }
    }
    
    $zebra = 0;
    $zebra_odd = array(1,3,5,7,9);
    foreach ($votes_sorted as $key => $vote) {
      $zebra++;
      if ($vote['tag'] == 'overall') {
        $overall_vote = $vote;
        continue;
      }
      if ($vote['tag'] == 'recommend') {
        $recommend_vote = $vote;
        continue;
      }
      $node->content['gv_ratings']['#markup'] .= '<div class="gv_vote ' . (in_array($zebra, $zebra_odd) ? 'odd' : 'even') .'"><div class="title">' . t($rating_titles[$vote['tag']]) . $semicolon . '</div>' 
        // Using own theming function for fivestar (replicate of the original fivestar theme function).
        . theme('gv_misc_fivestar_static', array('rating' => $vote['value'], 'stars' => 5, 'tag' => $vote['tag'], 'widget' => array('name' => 'stars', 'css' => 'stars.css')))
        // Using the original fivestar theme function.
        //. theme('fivestar_static', array('rating' => $vote['value'], 'stars' => 5, 'tag' => $vote['tag'], 'widget' => array('name' => 'hearts', 'css' => 'hearts.css')))
        . '</div>';
    }
    
    // Voters count.
    // Has been set before, via $node->gv_voters
//    if ($counts) {
//      $node->content['gv_voters'] = array(
//          '#markup' => '<div class="voters"><div class="title">' . t('Number of Reviews') . ':</div><div class="count">' . $counts[0]['value'] . '</div></div>', // . (isset($counts[$key]['tag']) ? '<div class="gv_voters">' . t('Voters') . ': ' . $counts[$key]['value'] . '</div>' : '')
//      );
//    }
    
//    if ($overall_vote) {
//      $node->content['gv_ratings']['#markup'] .= '<div class="gv_vote overall"><div class="title">' . t(OVERALL) . $semicolon . '</div>' 
//        // Using own theming function for fivestar (replicate of the original fivestar theme function).
//        . theme('gv_misc_fivestar_static', array('rating' => $overall_vote['value'], 'stars' => 5, 'tag' => $vote['tag'], 'widget' => array('name' => 'hearts', 'css' => 'hearts.css')))
//        // Using the original fivestar theme function.
//        //. theme('fivestar_static', array('rating' => $overall_vote['value'], 'stars' => 5, 'tag' => $vote['tag'], 'widget' => array('name' => 'hearts', 'css' => 'hearts.css')))
//        . '</div>';
//    }

    // Add a caption.
    $node->content['gv_ratings']['#markup'] = '<div class="data">' . $node->content['gv_ratings']['#markup'] . '</div>';
    
    if ($overall_vote) {
      //$node->content['gv_rating_overall']['#markup'] .= '<div class="gv_vote overall"><div class="title">' . $node->field_p_name['und'][0]['safe_value'] . ' ' . t('Overall Rated') . ':</div><div>' . $overall_vote['value'] . '</div></div>';
      
      //$node->content['gv_rating_overall']['#markup'] = '<div class="count">' . number_format($overall_vote['value'] * 0.05, 1) . '</div>';
      $node->gv_rating_overall = number_format($overall_vote['value'] * 0.05, 1);
    }
    
    
    // Recommend vote.
    if (isset($recommend_vote['function'])) {
      // If it's agregated cached results (calculated via function)
      // we'll show percent of voters recomendations.
      /*
      $node->content['gv_recommend'] = array(
          '#markup' => '<div class="recommend"><div class="title">' . t('Would recommend') . ': </div><div class="data">' . $recommend_vote['value'] . '% ' . t('of all voters') . '</div></div>',
      );
      */
      //$node->gv_recommend = number_format($recommend_vote['value'], 1, '.', '');
      $node->gv_recommend = number_format($recommend_vote['value'], 0);
    }
    else {
      /*
      $node->content['gv_recommend'] = array(
          '#markup' => '<div class="title">' . t('Recommend') . ': </div><div class="data">' . ($recommend_vote['value']?t('Yes'):t('No')) . '</div>',
      );
      */
      $node->gv_recommend = $recommend_vote['value'] ? t('Yes') : t('No');
    }
    // In case of using the original fivestar theme function there should be connected original fivestar's css
    /*
    $path = drupal_get_path('module', 'fivestar');
    drupal_add_css($path . '/css/fivestar.css');
    drupal_add_css($path . '/widgets/hearts/hearts.css');
    */
  }
}


/**
 * Implements hook_form().
 *
 * Button for submit a review for the current provider.
 * 
 * @return $form
 *   Return nothing.
 */
function gv_pages_addReviewButton_form($node, &$form_state, $provider_nid) {
  $form['id'] = array(
      '#type' => 'hidden',
      '#value' => $provider_nid,
  );
  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Add a review'),
  ); 
  //$form['#action'] = url('node/add/review', array('query' => array('id' => $provider_nid)));
  return $form;
}


/**
 * Implements hook_form_submit().
 *
 * Append nid to url and redirect to node/add/review via GET parameter.
 * 
 * @return $form
 *   Return nothing.
 */
function gv_pages_addReviewButton_form_submit(&$form, &$form_state) {
  drupal_goto('node/add/review', array('query' => array('id' => $form_state['values']['id'])));
}


/**
 * Implements hook_form().
 *
 * Add a phone review form for the main phone page.
 * 
 * @return $form
 *   Return nothing.
 */
function gv_pages_addPhoneReview_form($form, &$form_state, $node) {
  
  global $user;
  $user = user_load($user->uid);
  
  $form['phone_nid'] = array(
    '#type' => 'hidden',
    '#value' => $node->nid,
  );
  $form['phone_model'] = array(
    '#type' => 'hidden',
    '#value' => $node->field_p_name['und'][0]['value'],
  );
  
  
  
  $form['user'] = array(
    '#type' => 'container',
    '#attributes' => array('class' => array('review-userblock')),
  );
  
  $form['user']['caption'] = array(
    '#markup' => '<div class="caption">' . ($node->userReviews ? 'Submit Your Review:' : 'Be the First to Review!') . '</div>',
  );
  
  $form['user']['name'] = array(
    '#type' => 'textfield',
    '#title' => 'Your Name / Nickname',
    '#default_value' => $user->uid ? $user->field_u_fname['und'][0]['value'] : NULL,
    //'#description' => '',
    '#required' => TRUE,
    '#attributes' => array('title' => 'Your Name / Nickname'),
  );
  
  $form['user']['email'] = array(
    '#type' => 'textfield',
    '#title' => 'Your Email',
    '#default_value' => $user->uid ? $user->mail : NULL,
    //'#description' => '',
    '#required' => TRUE,
    //'#access' => $user->uid ? FALSE : TRUE,
    '#attributes' => array('title' => 'Your Email'),
  );
  
//  if ($user->uid) {
//    $form['user']['email_autofilled'] = array(
//      '#type' => 'item',
//      '#title' => t('Your Email'),
//      '#markup' => $user->mail,
//    );
//  }
    
          
  // Rate and vote group.
  $rating_options = array('' => FALSE, '20' => 'Horrible', '40' => 'Bad', '60' => 'OK', '80' => 'Good', '100' => 'Excellent');
  $vote_keys = array('performance' => PERFORMANCE, 'voice' => VOICE, 'install' => INSTALL, 'use_ease' => USE_EASE, 'durability' => DURABILITY, 'features' => FEATURES, 'price' => PRICE);

  $votes = array();

  $form['ureview'] = array(
    '#type' => 'container',
  );
  
  $form['ureview']['votes'] = array(
    '#type' => 'container',
    '#prefix' => '<div class="rate-caption"><div class="col-2">' . t('Click Stars To Start Reviewing') . '</div><div class="col-3">' . t('Rate it') . '</div></div>',
    //'#tree' => TRUE, 
  );
      foreach ($vote_keys as $vote_key => $vote_title) {
        $form['ureview']['votes']['rating_' . $vote_key] = array(
          '#type' => 'select',
          '#options' => $rating_options,
          '#default_value' => $rating_options[''],
          '#prefix' => '<div class="vote"><div class="vote-title">' . t($vote_title) . '</div>',
          '#suffix' => '<div class="choice" id="edit-rating-' . $vote_key . '-choice">Rate it!</div></div>',
        );
      }

  $rating_recommend_options = $rating_options = array('100' => 'Yes', '0' => 'No');
  $form['ureview']['rating_recommend'] = array(
    '#type' => 'radios',
    '#options' => $rating_recommend_options,
    '#default_value' => FALSE,
    '#prefix' => '<div class="recommend-block"><div class="label left">' . RECOMMEND_PHONE . '</div>',
    '#suffix' => '</div>',
    '#required' => TRUE,
  );

  $form['ureview']['review'] = array(
    '#type' => 'text_format',
    '#title' => 'Your Review',
    '#format' => 'filtered_html',
    '#rows' => $user->uid ? 8 : 4, // 4 for the case with captcha
    '#default_value' => '',
    '#required' => TRUE,
  );
  
  
  // Generate an approval code for email verification, only for not registered users.
  $form['field_r_approvecode'] = array(
    '#type' => 'hidden',
    '#default_value' => $user->uid ? '' : md5(time()),
  );
 
  $form['user_ip'] = array(
    '#type' => 'hidden',
    '#value' => $_SERVER['REMOTE_ADDR'],
  );
  
  


  // Add stars widgets to a Rating block
  $module_path = drupal_get_path('module', 'gv_pages');

  $form['#attached']['js'] = array(

    // Add hints inside some fields
    $module_path . '/js/gv_review_fieldHints.js',

    // Add stars widgets to a Rating block
    $module_path . '/js/gv_phone_review_stars.js',
    'sites/all/libraries/jquery.ui.stars/jquery.ui.stars.min.js',
  );

  $form['#attached']['library'][] = array('system', 'ui.widget');

  $form['#attached']['css'] = array(
    'sites/all/libraries/jquery.ui.stars/css/jquery.ui.stars.css',
  );

  // Use defined styles for reviews.
  $form['#attributes']['class'][] = 'gv-edit-review-page';

  
  
  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit Review'),
  ); 
  
  // Send a user to the right tab with a reviews.
  $form['#action'] = url('node/' . $node->nid, array('fragment' => 'user-reviews'));
  
  return $form;
}


/**
 * Implements hook_form_validate().
 *
 * @return $form
 *   Return nothing.
 */
function gv_pages_addPhoneReview_form_validate(&$form, &$form_state) {

  //drupal_set_message('In Validate!', 'warning');
  //dpm($form_state['values']);
    
  global $user;
  
  // Clear hints, if any.
  $fields_to_clear_hints = array('name' => array('hint' => 'Your Name / Nickname'), 'email' => array('hint' => 'Your Email'));
  foreach ($fields_to_clear_hints as $fname => $fdata) {
   
    if ($form_state['values'][$fname] == $fdata['hint']) {
      
      // This clear the field.
      $form[$fname]['#value'] = NULL;
      
      // Just in case.
      // BUT! It causes fatal eror with #parent index absence
      //form_set_value($form[$fdata['set']][$fname], array('#value' => NULL), $form_state);
      
      // Just in case on more.
      $form_state['values'][$fname] = NULL;
      
      if (isset($form[$fname]['#required']) && $form[$fname]['#required']) {
        form_set_error($fname, t('Please fill the field "' . ($form[$fname]['#title'] ? $form[$fname]['#title'] : $fdata['title'] ) . '"'));
      }
    }
    
  }

  // Check if a not logged in user has entered an email which is already is taken with one of our registered user.
  if (!$user->uid && isset($form_state['values']['email']) && $form_state['values']['email']) {
    if (gv_misc_emailIsRegistered($form_state['values']['email'])) {
      form_set_error('email',t('Sorry, an email You have entered is already registered in our system. If it is your email, please !login and proceed with submitting this review as a logged in user.', array('!login' => l('Log in', 'user/login', array('query' => array('destination' => url($_GET['q'])))))));
      return;
    }
  }

  $rating_options = array('performance' => PERFORMANCE, 'voice' => VOICE, 'install' => INSTALL, 'use_ease' => USE_EASE, 'durability' => DURABILITY, 'features' => FEATURES, 'price' => PRICE, 'recommend' => RECOMMEND_PHONE);
  foreach ($rating_options as $rating_option => $rating_option_title) {
    if ($form_state['values']['rating_' . $rating_option] === FALSE) {
      form_set_error($rating_option, t('Please make your choice for "' . $rating_option_title . '"'));
    }
  }
  
  // Check if an author of this review has already submitted a review for a selected phone.
  $review = gv_misc_userHasSubmittedReview($form_state['values']['phone_nid'], $user->uid, $form_state['values']['email'], NULL, NULL);

  if ($review) {
    $text =  t('You have already submitted a review for this phone');
    if($user->uid || !$review->field_r_notapproved_value) {
      $text .= ': ' . l($review->title, 'node/' . $review->nid);
    }
    if($review->field_r_notapproved_value) {
      $text .= '. ' . t('But it\'s not yet approved by our administrators.');
    }
    form_set_error('field_ref_phone', $text);
  } // End of if ($review) {
  
}


/**
 * Implements hook_form_submit().
 *
 * @return $form
 *   Return nothing.
 */
function gv_pages_addPhoneReview_form_submit(&$form, &$form_state) {
  
  //drupal_set_message('On Submit, Ok!', 'warning');
  
  gv_pages_createNode_phoneReview($form_state);
}


/**
 * Create a phone_review node programmatically.
 *
 * @return $form
 *   Return nothing.
 */
function gv_pages_createNode_phoneReview($form_state) {
  
  global $user;
  
  $node = new stdClass();
  $node->type = 'phone_review';
  node_object_prepare($node);
  
  $node->title = 'Unapproved review ' . time();
  $node->language = LANGUAGE_NONE;
  $node->uid = $user->uid;
  $node->status = 0;
  $node->promote = 0;
  $node->sticky = 0;
  $node->comment = 0;
  
  $node->body[$node->language][0] = $form_state['values']['review'];
  $node->body[$node->language][0]['summary'] = '';
  $node->body[$node->language][0]['safe_summary'] = '';
  $node->body[$node->language][0]['safe_value'] = check_plain($form_state['values']['review']['value']);
  
  $user_mail = $user->uid ? $user->mail : $form_state['values']['email'];
  $node->field_r_email[$node->language][0] = array(
    'value' => $user_mail,
    'safe_value' => check_plain($user_mail),
    'format' => NULL,
  );
  $node->field_r_fname[$node->language][0] = array(
    'value' => $form_state['values']['name'],
    'safe_value' => check_plain($form_state['values']['name']),
    'format' => NULL,
  );
  
  $node->field_r_notapproved[$node->language][0]['value'] = 1;
  $node->field_r_rating_overall[$node->language][0]['value'] = NULL;
  $node->field_ref_phone[$node->language][0]['target_id'] = $form_state['values']['phone_nid'];
  
  $node->field_r_approvecode[$node->language][0] = array(
    'value' => $form_state['values']['field_r_approvecode'],
    'safe_value' => check_plain($form_state['values']['field_r_approvecode']),
    'format' => NULL,
  );
  
  $node->field_p_name[$node->language][0] = array(
    'value' => $form_state['values']['phone_model'],
    'safe_value' => check_plain($form_state['values']['phone_model']),
    'format' => NULL,
  );
  
  
  // Prepare votes to save in a temporary field (it may be not used, but just in case and for a code simplifying).
  $rating_options = array('performance' => PERFORMANCE, 'voice' => VOICE, 'install' => INSTALL, 'use_ease' => USE_EASE, 'durability' => DURABILITY, 'features' => FEATURES, 'price' => PRICE, 'recommend' => RECOMMEND_PHONE);
  $votes = array();
  foreach ($rating_options as $vote_key => $vote_title) {
    if(isset($form_state['values']['rating_' . $vote_key])) {
      $votes[$vote_key] = $form_state['values']['rating_' . $vote_key];
    }
  }
  // Save votes to the temporary votes at r_data field.
  // It maybe reset later on. But just for the sake of a code simplifying.
  // On node_presave it field may be cleared and its data will be pushed to Voting API tables.
  // OR it its data may remain, if the review is not approved OR it's for not listed provider

  // Save several vars in the field
  $field_r_data = serialize(array('saved_ratings' => $votes, 'user_ip' => $form_state['values']['user_ip']));
  
  $node->field_r_data[$node->language][0] = array(
    'value' => $field_r_data,
    'safe_value' => check_plain($field_r_data),
    'format' => NULL,
  );
  
  
  if ($node = node_submit($node)) {
    node_save($node);
    //drupal_set_message('Saved, Ok!', 'warning');
    
    
    // Show a Success message and Send notifications.
    $text = t('<span class="review"><span class="success">Your review has been successfully submitted. Thank you for your time and efforts in sharing your much appreciated feedback.</span> <span class="approve">It will be published as soon as our administrators have approved it.</span> <span class="contact">If we may be of any further assistance please email us at contact@getvoip.com</span>');
    // Send verification code to approve email for an unregistered user.
    if (!$user->uid) {
      gv_misc_sendMessage('email_verification', array('verification_code' => $form_state['values']['field_r_approvecode'] . '=' . urlencode($form_state['values']['email']), 'email' => $form_state['values']['email']));
      $text .= '<div class="emailed">' . t('To assist in getting your review published faster, we have sent you an email verification with 1-click instructions for immediate publishing of your review.') . '</div>';
    }
    $text .= '</span>';
    drupal_set_message($text);

    // Notify all admins.
    gv_misc_sendMessage('new_phone_review_admin_notify', array('phone_name' => $form_state['values']['phone_model']));
  }
  
}
