<?php

/**
 * @file
 * Module contained miscelanious helper functions and hooks.
 */


/**
 * Constants for ratins titles, etc.
 */
module_load_include('inc', 'gv_misc', 'inc/constants');


/**
 * Implements hook_menu().
 */
function gv_misc_menu() {
 
  gv_misc_setPagesToShow410($items);
  
  // Get conferences autocomplete ajax
  $items['get-conferences-ac'] = array(
    'title' => 'Get conferences autocomplete ajax',
    'page callback' => 'gv_misc_getConferences_autocomplete_ajax',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
  $items['get-popup-on-exit-intent'] = array(
    'title' => 'Pop up iframe for exit intent',
    'page callback' => 'gv_misc_getPopupOnExitIntent_iframe',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
  $items['get-sectionarticles'] = array(
    'title' => 'Get Section Articles',
    'page callback' => 'gv_misc_get_sectionArticles_ajax',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
  $items['r-share'] = array(
    'title' => 'Share reviews',
    'page callback' => 'gv_misc_rShareReviews_rest',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
  $items['securimage_show'] = array(
    'title' => 'Securimage',
    'page callback' => 'gv_misc_securimage_show_ajax',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
  $items['check_ctcaptcha'] = array(
    'title' => 'Check CT Captcha',
    'page callback' => 'gv_misc_checkCtCaptcha_ajax',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  
  
  $items['cc'] = array(
    'title' => 'Flush the cache and redirect to the Home page',
    'page callback' => 'gv_misc_flushCache',
    //'access arguments' => array('access content'),
    'access callback' => 'gv_misc_userIsAdmin',
    'type' => MENU_CALLBACK,
  );
  
  
  $items['click'] = array(
    'title' => 'Track a click',
    'page callback' => 'gv_misc_trackClick_ajax',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
  $items['go/%'] = array(
    'title' => 'Redirect to an external link',
    'page callback' => 'gv_misc_goToExternalUrl2',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
  // Old version, left for old existing links.
  $items['goto'] = array(
    'title' => 'Redirect to an external link',
    'page callback' => 'gv_misc_goToExternalUrl',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  ); 
  
   
  
  
  
  $items['referer'] = array(
    'title' => 'Set user external referer',
    'page callback' => 'gv_misc_setReferer_ajax',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  ); 
  
  
  
  
  $items['lead-route'] = array(
    'title' => 'Lead Route',
    'page callback' => 'gv_misc_leadRoute_REST_IN',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
  
  $items['request'] = array(
    'title' => 'Make a request',
    'page callback' => 'gv_misc_makeRequest_ajax',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  ); 
  
  
   
  
  $items['get-disqus-users'] = array(
    'title' => 'Get new Disqus users',
    'page callback' => 'gv_misc_disqus_getNewUsers',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  ); 
  
  $items['get/iframe/business-voip-chart'] = array(
    'title' => 'Top Business VoIP Providers',
    'page callback' => 'gv_misc_getIframe_TopProvidersBu',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
  $items['get/iframe/sip-voip-chart'] = array(
    'title' => 'Top SIP VoIP Providers',
    'page callback' => 'gv_misc_getIframe_TopProvidersSIP',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
  $items['get/iframe/quote-request-block'] = array(
    'title' => 'Quote Request Block',
    'page callback' => 'gv_misc_getIframe_QuoteRequestBlock',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
  $items['get/iframe/exitIntent_lpV4'] = array(
    'title' => 'Quote Request Block',
    'page callback' => 'gv_misc_getIframe_exitIntent_lpV4',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
  
  $items['iframe-test'] = array(
    'page callback' => 'gv_misc_testPage_iframe',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
  $items['iframe-test/sip'] = array(
    'page callback' => 'gv_misc_testPage_iframe_sip',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
  /*
  $items['request-test'] = array(
    'page callback' => 'gv_misc_testPage_requestTest',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  */

  $items['request/capture'] = array(
    'title' => 'Capture users data on the fly before submitting a request',
    'page callback' => 'gv_misc_makeRequestCapture_ajax',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
    
  $items['test'] = array(
    'title' => 'Test page',
    'page callback' => 'gv_misc_testPage',
    //'access arguments' => array('administer content'),
    'access arguments' => array('administer taxonomy'), 
    'type' => MENU_CALLBACK,
  );
  
  $items['test-jive-original-form'] = array(
    'title' => 'Test page Jive submission Original Form',
    'page callback' => 'gv_misc_testPage_Jive_submissionOriginalForm',
    //'access arguments' => array('administer content'),
    'access arguments' => array('access content'), 
    'type' => MENU_CALLBACK,
  );
  
  
  
  $items['admin/content/rebuild-providers-sprites'] = array(
    'title' => 'Regenerate providers sprites',
    'page callback' => 'gv_misc_rebuildProvidersLogosSprites',
    //'access arguments' => array('administer content'),
    'access callback' => 'gv_misc_userIsAdmin',
    'type' => MENU_NORMAL_ITEM,
  );
  
  $items['admin/content/reviews-to-approve'] = array(
    'title' => 'Reviews to Approve',
    'page callback' => 'gv_misc_gotoReviewsToApprove',
    //'access arguments' => array('administer content'),
    'access callback' => 'gv_misc_userIsAdmin',
    'type' => MENU_NORMAL_ITEM,
  );
  
  $items['admin/content/phone-reviews-to-approve'] = array(
    'title' => 'Phone reviews to Approve',
    'page callback' => 'gv_misc_gotoPhoneReviewsToApprove',
    //'access arguments' => array('administer content'),
    'access callback' => 'gv_misc_userIsAdmin',
    'type' => MENU_NORMAL_ITEM,
  );
  
  $items['approve/%/%'] = array(
    'title' => 'Approve content',
    'page callback' => 'gv_misc_approveContent',
    'page arguments' => array(1,2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
  
  $items['update-cached-sip-page'] = array(
    'title' => 'Update Boost cached SIP page',
    'page callback' => 'gv_misc_updateCachedSIPpage',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  ); 
  $items['update-cached-sip-page-ajax'] = array(
    'title' => 'Update Boost cached SIP page, to be called via ajax',
    'page callback' => 'gv_misc_updateCachedSIPpage_ajax',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  ); 
 
  
   $items['update-cached-ppc-page'] = array(
    'title' => 'Update Boost cached PPC page',
    'page callback' => 'gv_misc_updateCachedPPCpage',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  ); 
  $items['update-cached-ppc-page-ajax'] = array(
    'title' => 'Update Boost cached PPC page, to be called via ajax',
    'page callback' => 'gv_misc_updateCachedPPCpage_ajax',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
  return $items;
}


/**
 * Implementation of hook_file_insert().
 * 
 * Try to optimize images on upload.
 * 
 */
function gv_misc_file_insert($file) {
  
  //$file_data = print_r($file, TRUE);
  //gv_misc_sendMessage('new_file_was_uploaded', array('report' => $file_data));
  
  // Write to log.file
  //exec('echo "$(date ' . "'+%Y-%m-%d %H:%M:%S'" . ') ---->UPLOAD--->'. escapeshellarg($file->uri) . '" >>~/gv_image_optimize.log');
  
  // Settings on this page http://getvoip.com/admin/config/media/image-toolkit
  /*
  /usr/local/bin/advpng
  /usr/bin/optipng
  /usr/bin/pngcrush
  
  /usr/bin/jpegtran
  /usr/local/bin/jfifremove
  */
  
//  global $user;
//  if ($user->uid != 1) {
//    return;
//  }
  
  
  gv_misc_imageOptimizeOnServer(array('uri' => $file->uri, 'filemime' => $file->filemime));
  
  /*
  // Code example from the image_optimize.module
  $dst = drupal_realpath($file->uri);
  //gv_misc_sendMessage('new_file_was_uploaded', array('report' => 'dst: ' . $dst));
  
  switch ($file->filemime) {
    case 'image/png':
      if ($cmd = variable_get('imageapi_optimize_optipng', '')) { // /usr/bin/optipng, should be installed in system
        exec("$cmd -o5 -quiet ". escapeshellarg($dst));
      }
      if ($cmd = variable_get('imageapi_optimize_pngcrush', '')) {
        $temp = drupal_realpath(drupal_tempnam('temporary://', 'file'));
        exec("$cmd -rem alla -reduce -brute -q ". escapeshellarg($dst) ." ". escapeshellarg($temp) ." && mv ". escapeshellarg($temp) ." ". escapeshellarg($dst));
      }
      if ($cmd = variable_get('imageapi_optimize_advpng', '')) {
        exec("$cmd -z4q ". escapeshellarg($dst), $return, $output);
      }
      break;

    case 'image/jpeg':
      if ($cmd = variable_get('imageapi_optimize_jpegtran', '')) { // /usr/bin/jpegtran, should be installed in system
        _imageapi_optimize_exec("$cmd -copy none -optimize -progressive ". escapeshellarg($dst), $dst);
      }
      if ($cmd = variable_get('imageapi_optimize_jfifremove', '')) {
        _imageapi_optimize_exec("$cmd < ". escapeshellarg($dst), $dst);
      }
      break;
  }
  */
  
  
}


/**
 * 
 * Try to optimize an image with applications installed on the server.
 * 
 * Depends on the imageapi_optimize module.
 * 
 */
function gv_misc_imageOptimizeOnServer($file) {
  // Code example from the image_optimize.module
  $dst = drupal_realpath($file['uri']);
  //gv_misc_sendMessage('new_file_was_uploaded', array('report' => 'dst: ' . $dst));
  
  switch ($file['filemime']) {
    case 'image/png':
      if ($cmd = variable_get('imageapi_optimize_optipng', '')) { // /usr/bin/optipng, should be installed in system
        exec("$cmd -o5 -quiet ". escapeshellarg($dst));
      }
      if ($cmd = variable_get('imageapi_optimize_pngcrush', '')) {
        $temp = drupal_realpath(drupal_tempnam('temporary://', 'file'));
        exec("$cmd -rem alla -reduce -brute -q ". escapeshellarg($dst) ." ". escapeshellarg($temp) ." && mv ". escapeshellarg($temp) ." ". escapeshellarg($dst));
      }
      if ($cmd = variable_get('imageapi_optimize_advpng', '')) {
        exec("$cmd -z4q ". escapeshellarg($dst), $return, $output);
      }
      break;

    case 'image/jpeg':
      if ($cmd = variable_get('imageapi_optimize_jpegtran', '')) { // /usr/bin/jpegtran, should be installed in system
        _imageapi_optimize_exec("$cmd -copy none -optimize -progressive ". escapeshellarg($dst), $dst);
      }
      if ($cmd = variable_get('imageapi_optimize_jfifremove', '')) {
        _imageapi_optimize_exec("$cmd < ". escapeshellarg($dst), $dst);
      }
      break;
  }

}


/**
 * Implementation of hook_query_alter().
 * 
 * Hide articles with a flag Invisible in lists from articles lists.
 * 
 */
function gv_misc_query_alter(QueryAlterableInterface $query) {
  
  // hasTag
  // https://drupal.org/node/310077
  // https://drupal.org/node/2086801#comment-7851281
  // 
  // Works with db.
  // https://api.drupal.org/api/drupal/includes%21database%21database.inc/group/database/7
  // https://api.drupal.org/api/drupal/includes%21database%21database.inc/function/db_or/7
  // https://drupal.org/node/310086
  
  
  
  // Custom queries.
  // 
  //if ($query->hasTag('a4s')) {
  if ($query->hasAllTags('a4s', 'articles')) {
    
    /*
      dpm('has a4s tag!');

      $fields =& $query->getFields();
      $expressions =& $query->getExpressions();
      $tables =& $query->getTables();
      $order =& $query->getOrderBy();
      $having =& $query->havingConditions();
    */
    $where =& $query->conditions();
    
    /*
      dpm($tables);
      dpm($fields);
      dpm($where);
    */
    
    // Define if we have to add our new condition to exclude NOT IN LIST articles.
    // Only for specified content types.
    $types_to_apply_condition = array('blog_post', 'news_post', 'article');
    $wheres = array_intersect_key($where, element_children($where));
    $apply_condition = FALSE;
    foreach ($wheres as $w) {
      if ($w['field'] == 'n.type' && in_array($w['value'], $types_to_apply_condition)) {
        $apply_condition = TRUE;
      }
    }
    
    if ($apply_condition) {
      $query->leftJoin('field_data_field_invisible', 'i', "i.entity_id = n.nid");
      $or = db_or()->isNull('i.field_invisible_value')->condition('i.field_invisible_value', 0);
      $query->condition($or);
    }

  }
  
   
  
  // Views queries.      
  if ($query->hasAnyTag('views_blog', 'views_news', 'views_articles')) {
  //if ($query->hasTag('views')) {
    
    /*
    
    dpm('has views tag!');
    dpm($query);
    
    $fields =& $query->getFields();
    $expressions =& $query->getExpressions();
    $tables =& $query->getTables();
    $order =& $query->getOrderBy();
    $where =& $query->conditions();
    $having =& $query->havingConditions();
    
    dpm($tables);
    dpm($fields);
    dpm($where);
    
    dpm($expressions);
    dpm($order);
    dpm($having);
    */
    
    $query->leftJoin('field_data_field_invisible', 'i', "i.entity_id = node.nid");
    $or = db_or()->isNull('i.field_invisible_value')->condition('i.field_invisible_value', 0);
    $query->condition($or);
  }
  
}

/**
 * Iframe page that pops up on exit intent.
 * 
 * Depracated, used inline div instead for colorbox.
 * 
 */
function gv_misc_getIframe_exitIntent_lpV4() {

//  $block_data = array('module' => 'views', 'delta' => 'providers-block_p_bu_page', 'shadow' => FALSE);
//  gv_misc_loadColorboxForVideoLinks();
//
//  $block_data['no_subject'] = TRUE;
//  $out = gv_blocks_getBlockThemed($block_data);
//  
  
  $out = '
    <div id="line-1">Do You Want To Save BIG On</div>
    <div id="line-2">Reliable Business Phone Service?</div>
    
    <div id="line-3">Get voice, fax, text and conferencing</div>
    <div id="line-4">in one phone system for $19/mo.</div>
    
    <a href="/business" id="yes" target="_top">YES</a>
    <div id="no" onclick="window.parent.postMessage(' . "'close', '*'" . ');">NO - I like overpaying for my old phone service.</div>
';
  
  return $out;
}


/**
 * Iframe page that pops up on exit intent.
 * 
 * TEST block.
 * 
 */
function gv_misc_getPopupOnExitIntent_iframe() {
  $block_data = array('module' => 'views', 'delta' => 'providers-block_top_bu_ar_cmp', 'shadow' => FALSE/*, 'subject' => 'Top Business VoIP Providers Reviews'*/);
  $out = gv_blocks_getBlockThemed($block_data);
  echo $out;
}


/**
 * Define pages (urls) that should be shown as Gone 410 (instead of 404)
 */
function gv_misc_setPagesToShow410(&$items) {
  
  $pages410 = unserialize(PAGES_410);
  // best-voip-service-providers is now best-voip-service-providers-old OR node/453
  
  
  foreach ($pages410 as $page) {
    $items[$page] = array(
      'title' => 'The Page is Gone (410)',
      'page callback' => 'gv_misc_410gone',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
    );
  }
 
}


/**
 * Return 410 gone for the current page.
 */
function gv_misc_410gone() {
  gv_misc_drupal_410_gone();
  drupal_exit();
}


/**
 * Implements hook_boost_is_cacheable().
 *
 * Disable caching for 410 gone pages to preserv the server response.
 * 
 * @return $parts
 */
//function gv_misc_boost_is_cacheable($parts, $request_type = 'normal') {
//
//  $pages410 = unserialize(PAGES_410);
//  
//  if (in_array($_GET['q'], $pages410)) {
//    $parts['is_cacheable'] = FALSE;
//    $parts['is_cacheable_reason'] = 'This page is gone. No cache for preserving the page status 410 gone.';
//  }
//  
//  return $parts;
//}



/**
 * Custom page not found 410.
 * Fix for a standard drupal_not_found
 */
function gv_misc_drupal_410_gone() {
  
  
  // Disable boost caching for custom gv page not found pages.
  // First part, initialization.
  // See the second part at gv_misc_process_html(),
  // where $_boost variable  will be corrected to prevent the current page caching.
  global $gv_page_not_found;
  $gv_page_not_found = TRUE;
  
  
  
  
  
  // Emit the correct charset HTTP header, but not if the page callback
  // result is NULL, since that likely indicates that it printed something
  // in which case, no further headers may be sent, and not if code running
  // for this page request has already set the content type header.

  drupal_add_http_header('Content-Type', 'text/html; charset=utf-8');

  // Send appropriate HTTP-Header for browsers and search engines.
  global $language;
  drupal_add_http_header('Content-Language', $language->language);

  drupal_add_http_header('Status', '410 Gone');

  watchdog('page is gone', check_plain($_GET['q']), NULL, WATCHDOG_WARNING);

  // Check for and return a fast 404 page if configured.
  ////drupal_fast_404();

  // Keep old path for reference, and to allow forms to redirect to it.
  if (!isset($_GET['destination'])) {
    $_GET['destination'] = $_GET['q'];
  }

  $path = drupal_get_normal_path(variable_get('site_404', ''));
  if ($path && $path != $_GET['q']) {
    // Custom 404 handler. Set the active item in case there are tabs to
    // display, or other dependencies on the path.
    menu_set_active_item($path);
    $return = menu_execute_active_handler($path, FALSE);
  }

  if (empty($return) || $return == MENU_NOT_FOUND || $return == MENU_ACCESS_DENIED) {
    // Standard 404 handler.
    ////drupal_set_title(t('Page not found'));
    ////$return = t('The requested page "@path" could not be found.', array('@path' => request_uri()));
    
    drupal_set_title('Page Is Gone');
    
    $return = gv_mics_page404CustomContent();

    
  }

  
  drupal_set_page_content($return);
  $page = element_info('page');
  print drupal_render_page($page);

  // Perform end-of-request tasks.
  drupal_page_footer();
}



function gv_mics_page404CustomContent() {
  
    $sitemap_body = cache_get('gv_sitemap_body');
    if (!$sitemap_body || empty($sitemap_body->data)) {
      $key = 'view-sitemap-page';
      $query = db_select('node', 'n');
      $query->join('field_data_field_preface_key', 'pk', "pk.entity_id = n.nid"); 
      $query->join('field_data_body', 'fb', "fb.entity_id = n.nid"); 
      $query->fields('fb', array('body_value'))
            ->condition('n.type', 'preface')
            ->condition('pk.field_preface_key_value', $key);
      $sitemap_body = $query->execute()->fetchField(); 

      // Remove preface text from a Sitemap body.
      if(preg_match('/.*(<table.*)/s', $sitemap_body, $matches)) {
        $sitemap_body = $matches[1];
      }
            
      cache_set('gv_sitemap_body', $sitemap_body);
    }
    else {
      $sitemap_body = $sitemap_body->data;
    }
    
    $page404_body = cache_get('gv_page404');
    if (!$page404_body || empty($page404_body->data)) {
      $key = 'page-not-found';
      $query = db_select('node', 'n');
      $query->join('field_data_field_preface_key', 'pk', "pk.entity_id = n.nid"); 
      $query->join('field_data_body', 'fb', "fb.entity_id = n.nid"); 
      $query->fields('fb', array('body_value'))
            ->condition('n.type', 'preface')
            ->condition('pk.field_preface_key_value', $key);
      $page404_body = $query->execute()->fetchField(); 

      cache_set('gv_page404', $page404_body);
    }
    else {
      $page404_body = $page404_body->data;
    }
    
    return '<div class="main-content page404"> 
      <div class="content page preface">' . $page404_body 
            . gv_blocks_getBlockThemed(array('module' => 'search', 'delta' => 'search-form', 'no_subject' => TRUE, 'class' => 'search-on-404', 'shadow' => FALSE)) 
            . '<br/><p>Or, try one of the links below.</p>'
            . '<div class="sitemap field-name-body">' . $sitemap_body . '</div>
      </div>
  </div>';

}



/**
 * Return section articles via ajax request.. 
 */
function gv_misc_get_sectionArticles_ajax() {
  $status = TRUE;
  $output = '';
  
  $post = array();
  foreach ($_POST as $key => $value) {
    $post[$key] = check_plain(strip_tags($value));
  }

  if ($post['op'] != 'get' || empty($post['section'])) {
    return FALSE;
  }
  
  $articles = gv_misc_get_sectionArticles($post['section']);
  
  drupal_json_output(array('status' => $status, 'articles' => $articles));
}


/**
 * Return section articles. 
 */
function gv_misc_get_sectionArticles($section, $limit = NULL) {
    
    global $language;
    $cache_name = 'gv_section_' . $section . '_' . $limit;

    $cache_content = cache_get($cache_name);
    if ($cache_content && !empty($cache_content->data) && $cache_content->expire > time()) {
      return $cache_content->data;
    }

  
  
    $articles = NULL;
    
    $query = db_select('field_data_field_funnel_sections', 's')
        ->fields('s', array('entity_id'));
    $query->leftJoin('node', 'n', 'n.nid = s.entity_id ');
    $query->fields('n', array('title'));
    
    $query->condition('n.status', 1);
    $query->condition('field_funnel_sections_value', $section);
    $query->orderBy('title', 'asc');
    if ($limit) {
      $query->range(0, $limit);
    }
    $result = $query->execute()->fetchAllAssoc('entity_id');
    
    $max_len = 37;
    
    if (!empty($result)) {
      foreach ($result as $nid => $article) {
        $len = strlen($article->title);
        if ($len > $max_len) {
          $title = drupal_substr($article->title, 0, $max_len);
          $last_pos = strrpos($title, ' ');
          $title = substr_replace($title, '...', $last_pos);
          $articles .= '<div class="article">' . l($title, 'node/' . $article->entity_id, array('attributes' => array('title' => $article->title))) . '</div>';
        }
        else {
          $articles .= '<div class="article">' . l($article->title, 'node/' . $article->entity_id) . '</div>';
        }
      }
      $articles = '<div class="articles">' . $articles . '</div>';
    }
    
    cache_set($cache_name, $articles, 'cache', time() + 14400);
    
    return $articles;
}


/**
 * Test page function for url /test. 
 */
function gv_misc_getOlderUrlForSharing($current_url) {

  $older_urls = array(
      '/business' => '/compare-business-voip-providers',
      //'/hosted-pbx' => '/hosted-pbx-providers',
      //'/sip-trunking' => '/sip-trunking-providers',
      '/residential' => '/compare-residential-voip-providers',
      //'/reviews/business' => '/business-voip-reviews',
      //'/reviews/residential' => '/residential-voip-reviews',
      //'/reviews/phone' => '/voip-phone-reviews',
      //'/fax' => '/internet-fax-service-providers',
      //'/canada'=> '/canada-voip',
      //'/speed-test-tool' => '/voip-speed-test',
  );
  
  if (isset($older_urls[$current_url])) {
    return $older_urls[$current_url];
  }
  else {
    return $current_url;
  }
  
}


/**
 * Check if the submission already has been sent with such an email.
 */
function gv_misc_isSubmissionAlreadySent($email) {
      
    $query = db_select('gv_quote_requests', 'qr')
      ->fields('qr', array('ip', 'status', 'email_presented'));
    
    $query->condition('qr.status', 2);
    $query->condition('qr.email_presented', $email);
    $not_sents = $query->execute()->fetchAllAssoc('ip');
    if (!empty($not_sents)) {
      return TRUE;
    }
    else {
      return FALSE;
    }
}


/**
 * Disqus update a thread title.
 */
function gv_misc_disqusUpdateThread($threadId, $data = array()) {
   // threadId must be the internal Disqus ID
        // Use the 'threads/details' endpoint to get the Disqus thread ID using an identifier or URL

  //$oldTitle = 'The Top 100 VoIP Experts to Follow on Twitter';
  //$newTitle = 'The Top 50 VoIP Experts to Follow on Twitter';
  //$threadId = '1868907483';
  $api = 'IlTOWiFAZGYxGCUdjCEMQqzTRVl9hpG7f9KrSAkSqcbFDH4duZADgQUy0asDTHOW'; // Secret key.
  $shortname = 'getvoip';
  
//        $api = '<secret key goes here>';
//        $accessToken = '<your default access token>';
  $fields_string = ''; // DO NOT EDIT

  // set POST variables
  $url = 'https://disqus.com/api/3.0/threads/update.json';

  $fields = array(
    'api_secret' => urlencode($api),
    //'access_token' => $accessToken,
    'thread' => $threadId,
    //'title' => urlencode($newTitle),
    'forum' => $shortname,
  );
  
  if (!empty($data['title'])) {
    $fields['title'] = urlencode($data['title']);
  }
  if (!empty($data['url'])) {
    $fields['url'] = urlencode($data['url']);
  }

  foreach($fields as $key=>$value) { $fields_string .= $key.'='.$value.'&'; }
  rtrim($fields_string,'&');
  $ch = curl_init();
  curl_setopt($ch,CURLOPT_URL,$url);
  curl_setopt($ch,CURLOPT_POST,count($fields));
  curl_setopt($ch,CURLOPT_POSTFIELDS,$fields_string);

  // indicates that we want the response back rather than just returning a "TRUE" string
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
  $result = curl_exec($ch);
  curl_close($ch);

  // Show new information
  //var_dump($result);
  //dpm($result);
  return json_decode($result);
  //return $result;
}


/**
 * Disqus get a thread details.
 */
function gv_misc_disqusGetThreadDetails($nid = NULL, $thread = NULL, $threadIdType = 'thread:ident') {
  
  if ($nid) {
    $thread = 'node/' . $nid;
  }
  // construct the query with our apikey and the query we want to make
  // Change api_key to api_secret when using your secret key

//                DIFFERENT TYPES OF THREAD LOOKUPS:
//                1. By DISQUS thread ID (default): thread=%s — thread IDs are universally unique in DISQUS, so you can remove 'forum' param if you like
//                2. By identifier: thread:ident=%s — requires the forum parameter
//                3. By URL: thread:link=%s — requires the forum parameter



  //$key="<api key>"; // Requires a registered DISQUS API application. Create one (free) at http://disqus.com/api/applications/
  //$key = "IlTOWiFAZGYxGCUdjCEMQqzTRVl9hpG7f9KrSAkSqcbFDH4duZADgQUy0asDTHOW"; // Secret key.
  $key = 'LTxXVkhAehxdgzsFbolUXSTosneekOOuwWrpx1okk8LHaW5APx4yVcXDP0zwapS5'; // Public key.
  ///$thread="1888015311";
  ////$thread = 'http://getvoip.com/blog/2013/10/17/the-top-100-voip-experts-to-follow-on-twitter';
  //$thread = 'node/1644'; // identifier

          
  $forum = "getvoip";


  ///$endpoint = 'http://disqus.com/api/3.0/threads/details.json?api_key='.urlencode($key).'&forum='.$forum.'&thread='.urlencode($thread);
  ////$endpoint = 'http://disqus.com/api/3.0/threads/details.json?api_key='.urlencode($key).'&forum='.$forum.'&thread:link='.urlencode($thread);
  $endpoint = 'http://disqus.com/api/3.0/threads/details.json?api_key=' . urlencode($key) . '&forum=' . $forum . "&$threadIdType=" . urlencode($thread);


  $session = curl_init($endpoint);
  // indicates that we want the response back rather than just returning a "TRUE" string
  curl_setopt($session, CURLOPT_RETURNTRANSFER, true);
  $result = curl_exec($session);
  curl_close($session);

  // show the response in the browser
  //var_dump($result);
  return json_decode($result);
}


/**
 * Disqus update a node's remote Disqus thread if something has changed.
 */
function gv_misc_disqusUpdateNodeThread_ifChangedLocally($node, $form_state_values, $nid = NULL) {
  
  if (!$node) {
    $node = node_load($nid);
  }

  
  if ($form_state_values['path']['pathauto']) {
    // If an alias should be generated by pathautho, get it to send it to Disqus.
    module_load_include('inc', 'pathauto');
    $alias = pathauto_create_alias('node', 'return', 'node/' . $node->nid, array('node' => $node), $node->type);
    //dpm($alias);
  }
  else {
    $alias = $form_state_values['path']['alias'];
  }
  
  
  $local_url = 'http://getvoip.com/' . $alias; // $node->disqus['url']
  
  if ($disqusRemote = gv_misc_disqusGetThreadDetails($node->nid)) {
    
    //dpm($disqusRemote);

    $threadId = $disqusRemote->response->id;

    $updateData = array();

    if (!$disqusRemote->code) {
      $decoded_right_title = htmlspecialchars_decode($form_state_values['title'], ENT_QUOTES);
      if ($disqusRemote->response->title != $decoded_right_title) {
        //dpm('Remote title: ' . $disqusRemote->response->title);
        //dpm('Right title: ' . $form_state_values['title']);

        $updateData['title'] = $decoded_right_title;
      }
      if ($disqusRemote->response->link != $local_url) {
        //dpm('Remote link: ' . $disqusRemote->response->link);
        //dpm('Right link: ' . $local_url);

        $updateData['url'] = $local_url;
      }


      if (!empty($updateData)) {
        $result = gv_misc_disqusUpdateThread($disqusRemote->response->id, $updateData);
        //dpm($result);
        if (!$result->code) {
          //dpm('Successfully changed remote Disqus data.');
          $message = (!empty($updateData['title']) ? 'An Old title "' . $disqusRemote->response->title . '" has changed to a new one "' . $updateData['title'] . '"' : '') . (!empty($updateData['title']) && !empty($updateData['url']) ? '.

  ' : '') . (!empty($updateData['url']) ? 'An Old url "' . $disqusRemote->response->link . '" has changed to a new one "' . $updateData['url'] . '"' : '');

        drupal_set_message('Successfully changed remote Disqus data:


  ' . $message);
        }
        else {
          //dpm('Some error hase occured while changing remote Disqus data.');
          drupal_set_message('Some error hase occured while changing remote Disqus data:


  ' . $result->response);
        }
      }
  //    else 
  //      {
  //      dpm('No changes in remote Disqus data.');
  //    }

    }

  }
}


/**
 * Test page function for url /test. 
 */
function gv_misc_testPage() {
  $out = '<div>'; //'<div>Start test...</div>';

  
  //gv_misc_rShareReviews_testPage();
  
  
  // Disqus API test
  /*
  //$user_api_key = 'PYSnoPKBQs9Xip75kj2f7UeXnyARoC8XbK67HKfpcBP9IojdH1dRcKRzuSuMirNg';
  
  
  //$threadId = '1868907483';
  //$threadId = 'node/1644';
  //$nid = 1644;
  
//  $oldTitle = 'The Top 100 VoIP Experts to Follow on Twitter';
//  $newTitle = 'The Top 50 VoIP Experts to Follow on Twitter';
  
  //$nid = 1502;
  
  
//  $result = gv_misc_disqusGetThreadDetails($nid); 
//  $threadId = $result->response->id;
  
//  $oldTitle = 'Potential Problems with PoE Switches &amp; Adapters';
//  $newTitle = 'Power Over Ethernet Guide - 7 Potential Issues';
//  $oldUrl = 'http://getvoip.com/blog/2013/05/28/potential-problems-with-poe-switches-adapters';
//  $newUrl = 'http://getvoip.com/blog/2013/05/28/power-over-ethernet-guide-7-potential-issues';
  
  //$oldUrl = 'http://getvoip.com/blog/2013/07/18/comprehensive-guide-to-using-skype-in-the-classroom';
  //$newUrl = 'http://getvoip.com/blog/2013/07/22/skype-in-the-classroom-comprehensive-guide';
  
  
  $nid = 1547;
  
  $node = node_load($nid);
  $disqusRemote = gv_misc_disqusGetThreadDetails($node->nid);
  dpm($disqusRemote);
  
  $threadId = $disqusRemote->response->id;
  
  $updateData = array();

  if (!$disqusRemote->code) {
    if ($disqusRemote->response->title != $node->disqus['title']) {
      dpm('Remote title: ' . $disqusRemote->response->title);
      dpm('Right title: ' . $node->disqus['title']);
      
      $updateData['title'] = $node->disqus['title'];
    }
    if ($disqusRemote->response->link != $node->disqus['url']) {
      dpm('Remote link: ' . $disqusRemote->response->link);
      dpm('Right link: ' . $node->disqus['url']);
      
      $updateData['url'] = $node->disqus['url'];
    }
   
    if (!empty($updateData)) {
      $result = gv_misc_disqusUpdateThread($disqusRemote->response->id, $updateData);
      dpm($result);
      if (!$result->code) {
        dpm('Successfully changed remote Disqus data.');
      }
      else {
        dpm('Some error hase occured while changing remote Disqus data.');
      }
    }
    else {
      dpm('No changes.');
    }
    
  }
  */
  
  /*
  $query = db_select('node', 'n');
  $query->join('field_data_field_extra_data', 'd', 'd.entity_id = n.nid');
  $query->fields('d', array('field_extra_data_value', 'entity_id'));
  $query->fields('n', array('title'));
  $query->condition('n.type', array('article', 'blog_post', 'news_post'), 'IN');  
  $articles_data = $query->execute()->fetchAllAssoc('entity_id');
  
  foreach ($articles_data as $index => $data) {
    $articles_data[$index]->field_extra_data_value = unserialize($data->field_extra_data_value);
    if (empty($articles_data[$index]->field_extra_data_value['guest_author'])) {
      unset($articles_data[$index]);
    }
  }
    
  dpm($articles_data);
  */
  
  
  /*
  $view_name = 'providers'; 
  $display_name = 'block_top_bu_cmp_wide';
  $view = views_get_view($view_name);

  $filters = $view->get_items('filter', $display_name);
  //dpm($filters);

  foreach ($filters as $name => $data) {
    if (@$data['ui_name'] == 'sps') {

      $filters[$name]['php_filter'] = str_replace(" gv_misc_getProviderQuickData('sps',", " !gv_misc_getProviderQuickData('sps',", $filters[$name]['php_filter']);
    
      //$view->set_item($display_name, "filter", $sps_filter, NULL); // Delete filter.
      $view->set_item($display_name, "filter", $name, $filters[$name]);

      //$filters = $view->get_items('filter', $display_name);
      //dpm($filters);

      $result = $view->preview($display_name);
      $out .= $result;
      //dpm($view->result);
      break;
    }
  }
  */
  
  /*
  dpm('Time: ' . date('m\/d\/Y H:i:s', time()));
  dpm('Now: ' . date('m\/d\/Y H:i:s', strtotime('now')));
  dpm('yesterday: ' . date('m\/d\/Y H:i:s', strtotime('yesterday')));
  dpm('today: ' . date('m\/d\/Y H:i:s', strtotime('today')));
  dpm('last week: ' . date('m\/d\/Y H:i:s', strtotime('last week')));
  
  dpm('this month: ' . date('m\/d\/Y H:i:s', strtotime(date('m\/01\/Y 00\:00\:00', time()))));
  dpm('last month: ' . date('m\/d\/Y H:i:s', strtotime('last month')));
  
  dpm('last day: ' . date('m\/d\/Y H:i:s', strtotime('last day')));
  dpm('last 7 days: ' . date('m\/d\/Y H:i:s', strtotime('-7 days')));
*/
  
  /*
  $output = "
#block-gv-blocks-request-quote-v6 .result .guide{position: relative; color: black; font-size: 14px; left: 0; padding: 040px 0 0 0; top: 0; width: 200px; background: none;}
#block-gv-blocks-request-quote-v6 .phone-pic{background: url(/sites/all/themes/gv_orange/css/images/sprite-04.png) no-repeat -4px -246px transparent; position: absolute; right: 10px; top: 97px; width: 90px; height: 80px;}
#block-gv-blocks-request-quote-v6 #personal_data .phone-pic{background: url('images/sprite-04.png') no-repeat -4px -246px transparent; position: absolute; right: 0; top: 60px; width: 90px; height: 80px;}
#block-gv-blocks-request-quote-v6 .result .guide img{width: 80px; padding: 0 63px; margin: 2px 0 0 0;}
";
  
  $output = preg_replace('|sites\/all\/themes\/gv_orange\/css\/images|s', 'images/theme', $output);
  //$output = preg_replace('|\(images|s', '(/images/theme', $output);
  //$output = preg_replace('|\(\"images|s', '("/images/theme', $output);
  $output = preg_replace('|\(\'images|s', '(\'/images/theme', $output);
  */
  
  
  /*
  $output = 'sites/default/files/yyy/xxx.png, sites/default/files/zzz.png';
  // $body_full_markup = preg_replace('/<img[^>]+>/i', '', $body_full_markup);
  $output = preg_replace('|sites\/default\/files\/([^\/]*\.)|s', 'images/content/all/$1', $output);
  dpm($output);
  */
  
  
  /*
  $query = db_select('node', 'n')
      ->fields('n', array('nid', 'title'));

  $query->leftJoin('field_data_field_extra_data', 'ed', 'ed.entity_id = n.nid');
  $query->fields('ed', array('field_extra_data_value'));

  $query->leftJoin('field_data_body', 'b', 'b.entity_id = n.nid');
  //$query->addField('b', 'body_value', 'teaser');
  $query->fields('b', array('body_value'));

  $query->condition('n.type', array('article', 'blog_post', 'news_post'), 'IN');
  $query->orderBy('nid');

  //if ($result = $query->execute()->fetchAllAssoc('nid')) {
  if ($result = $query->execute()->fetchAll()) {
    //dpm($result);
    
    $out_array = array();
    
    for($i = 851; $i <= 1000; $i++) {
      
      if (!isset($result[$i])) {
        continue;
      }
      $result[$i]->extra_data = unserialize($result[$i]->field_extra_data_value);
      
      
      

      $out_array[$i] = $result[$i];
      
      $node = new stdClass();
      $node->field_extra_data['und'][0]['value'] = $result[$i]->field_extra_data_value;
      $node->body['und'][0]['value'] = $result[$i]->body_value;//gv_pages_convertBeautifulUrls('from_beautiful_to_originals', $result[$i]->body_value);
      $node->nid = $result[$i]->nid;
      $node->title = $result[$i]->title;
    
      $out_array[$i]->new_extra_data = gv_misc_updateArticleExtraData($node, TRUE, 1390188453);
      
      $out_array[$i]->new_body = gv_pages_convertBeautifulUrls('from_originals_to_beautiful', $result[$i]->body_value);
      
      gv_misc_fieldBodyUpdate($out_array[$i]->nid, $out_array[$i]->new_body);
      //break;
    }
    //dpm(time());
    dpm($out_array);
    
    
//    $node = $result[5];
//    dpm($node);
//    gv_misc_fieldBodyUpdate($node->nid, $node->new_body);
  }
  
  */
  
  //$result = gv_misc_calculateDataForRelatedArticlesBlock($result->title, $result->teaser, unserialize($result->field_extra_data_value), $result->created, array('title_not_normalized' => TRUE, 'body_not_stripped' => TRUE));

  
  //dpm(__FUNCTION__);
  
  // $body_full_markup = preg_replace('/<img[^>]+>/i', '', $body_full_markup);
  
  /*
  $output = 'blog/123';
  //$output = preg_replace('|blog\/([^\/]*)|s', 'blog?page=$1', $output);
  $output = preg_replace('|blog\/([0-9])$|s', 'blog?page=$1', $output);
  dpm($output);
  $output = 'blog/1s23/32d1';
  //$output = preg_replace('|blog\/([^\/]*)|s', 'blog?page=$1', $output);
  $output = preg_replace('|blog\/([0-9])$|s', 'blog?page=$1', $output);
  dpm($output);
  */
  
  
  
  /*
  $file_default_scheme = file_default_scheme();
  $default_file_path = variable_get('file_' . $file_default_scheme . '_path', conf_path() . '/files');


//  $file_local = $default_file_path . '/temp/aaa_' . $key_0 . '.jpg';
//  $file_local_abs = DRUPAL_ROOT . '/' . $file_local;
  
  $image_styled_url = 'sites/default/files/styles/as_featured_in_sideblock/public/a/polycom-logo-h-cmyk_highres.jpg';
  $file_local_abs = DRUPAL_ROOT . '/' . $image_styled_url;

  $image_styled_url_full = 'http://getvoip.com/' . $image_styled_url;

  if (!$output = gv_misc_curl_file_from_remote_site_likeBrowser($image_styled_url_full, $file_local_abs)) {
    dpm('--- Got file ' . $image_styled_url_full);
  }
  else {
    dpm('--- No file ' . $image_styled_url_full . ' ----- RESULT: ' . $output);
  }
  */
  
  
  /*
  $to_delete = 'sites/default/files/styles/article_thumbnail_side_block/public/xo.gif';// 'sites/default/files/styles/article_thumbnail_h/public/viatalk_vs_vonage.jpg';
  
  if (file_exists($to_delete)) {
    dpm($to_delete);
    unlink($to_delete);
  }
  */
  
  
     
     
     
     /*
     if (empty($post) 
      || empty($post['source'])
      //|| empty($post['phones_amt'])
      || (isset($post['phones_amt']) && !$post['phones_amt'])
      //|| !isset($post['q_for']) || !$post['q_for']
      //|| !isset($post['buying_time']) || !$post['buying_time']
      || ( (isset($post['firstname']) && !$post['firstname']) || (isset($post['lastname']) && !$post['lastname']) || (isset($post['name']) && !$post['name']) )
      || ( strpos(@$post['firstname'], '/')  || strpos(@$post['lastname'], '/') || strpos(@$post['name'], '/') ) // name contains /, like in urls
      || (empty($post['email']) || !strpos($post['email'], '@') )
      || ( (empty($post['phone_1']) || empty($post['phone_2']) || empty($post['phone_3'])) && empty($post['phone']) )
     ) {
    $output = t('<div class="not-verified"><p class="error">The form is not filled!</p><p>Please, reload the page and try again.</p></div>'); 
  }
  */
  
/*
           $submission = array(
        'Phones needed' => isset($post['phones_amt']) ? $post['phones_amt'] : 'xxxxxxxxxxxxxxxxx',
        'Quote for' => isset($post['q_for']) ? $post['q_for'] : 'yyyyy',
        'Quote type' => isset($post['q_type']) ? $post['q_type'] : '',
        'Buying Time Frame' => (isset($post['buying_time']) && $post['buying_time']) ? $post['buying_time'] : 'ASAP',
        //'Buying Time Frame' => isset($post['buying_time']) ? $post['buying_time'] : '',
        'Connection type' => isset($post['connection']) ? $post['connection'] : '',
          
        'Industry' => isset($post['industry']) ? $post['industry'] : '',
        'Employees amount' => isset($post['employees_amt']) ? $post['employees_amt'] : '',
        
        'First Name' => isset($post['firstname']) ? $post['firstname'] : '',
        'Last Name' => isset($post['lastname']) ? $post['lastname'] : '',
        'Name' => isset($post['name']) ? $post['name'] : '', 
          
        'Company' => isset($post['company']) ? $post['company'] : '',
        'Website' => isset($post['website']) ? $post['website'] : '',
        'Email' => $post['email'],
        'Phone #' => @$phone,
        'Notes' => isset($post['notes']) ? $post['notes'] : '',
          
        'Source' => @$post['source'],
        'Version' => @$post['version'],
        
        'Goal' => isset($post['goal']) ? $post['goal'] : 'quote',
        
        //'Sumbission page' => $post['url'],
        'sentToRemoteProviders' => array(),
      );   
           */
  
  /*
  
  //$url = 'http://getvoip.com/lead-route?phones_amt=22&q_for=zzzzz';
  $url = 'http://getvoip.com/lead-route';
  
  
  
  
     $post = array(
        'source' => 'partner',
        'version' => 'partner_name_unique',
        'goal' => 'quote',
        'token' => 'getvoip_partner',
        'phones_amt' => '1 - 4',
        'q_type' => 'Both phones and service',
        'firstname' => 'User first name',
        'lastname' => 'User last name',
        'email' => 'unique@user.email',
        'phone' => '1374678736',
      );
     
  // GET.
  $curl = curl_init();
  curl_setopt($curl, CURLOPT_URL, $url);
  curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
  curl_setopt($curl, CURLOPT_TIMEOUT, 300);
  
  // If POST.
    curl_setopt($curl, CURLOPT_POST, TRUE);
    curl_setopt($curl, CURLOPT_POSTFIELDS, $post);
  
  $data_from = curl_exec($curl);
  curl_close($curl);
  
  dpm($data_from);
  
  */
  
   
  
  /*
  $post['term'] = 'Web';
  $vid = 8;
    
    $query = db_select('taxonomy_term_data', 't');
    $query->fields('t', array('tid', 'name'));
    $query->condition('t.vid', $vid);
    $query->condition('t.name', '%' . db_like($post['term']) . '%', 'LIKE');
//    $query->leftJoin('field_data_field_invisible', 'i', 'i.entity_id = n.nid');
//    $query->condition('i.field_invisible_value', 1, '!='); 
    $query->orderBy('t.name', 'ASC');
    // 4 pages
    //$query->range(0, 8);
    // 3 pages
    //$query->range(0, 6);

    $query->range(0, 9);


    $out_array = $query->execute()->fetchAllAssoc('tid');
    
    dpm($out_array);
    */
  
  
  // Doc on group_concast
  /*
   http://drupal.stackexchange.com/questions/39672/drupal-dynamic-query-with-group-concat

http://www.percona.com/blog/2013/10/22/the-power-of-mysqls-group_concat/

http://www.zimplicit.se/en/knowledge/mysql-group-concat-join-select

http://stackoverflow.com/questions/276927/can-i-concatenate-multiple-mysql-rows-into-one-field




http://drupal.stackexchange.com/questions/19032/d7-bug-with-db-select-addexpression-and-having-conditions
http://drupal.stackexchange.com/questions/100229/what-is-the-difference-between-havingcondition-and-having
http://drupal.stackexchange.com/questions/33609/how-to-write-a-drupal-7-query-with-count-and-having-properties

http://bugs.mysql.com/bug.php?id=3543

http://stackoverflow.com/questions/19311679/sql-group-concat-and-subquery

http://www.dbforums.com/showthread.php?1655801-Subquerry-inside-GROUP_CONCAT

http://forums.devshed.com/mysql-help-4/howto-count-items-group_concat-812213.html

   */
  /*
  $post['term'] = 'Web';
  $query = db_select('node', 'n');
  $query->fields('n', array('nid', 'title'));
  $query->condition('n.status', 1);
  $query->condition('n.type', 'conference', '=');
  $query->condition('n.title', '%' . db_like($post['term']) . '%', 'LIKE');
  $query->leftJoin('field_data_field_state', 'st', 'st.entity_id = n.nid');
  $query->fields('st', array('field_state_value'));
  $query->leftJoin('field_data_field_conf_city', 'ci', 'ci.entity_id = n.nid');
  $query->fields('ci', array('field_conf_city_value'));
  $query->leftJoin('field_data_field_conf_date', 'da', 'da.entity_id = n.nid');
  $query->fields('da', array('field_conf_date_value'));
  
  
  $query->leftJoin('taxonomy_index', 'ti', 'ti.nid = n.nid');
  
  $query->groupBy('n.nid');
  //$query->addExpression("GROUP_CONCAT(ti.tid SEPARATOR ', ')", 'terms');
  //$query->addExpression("GROUP_CONCAT(CONCAT( 'tid:', ti.tid, 'x' ) SEPARATOR ', ')", 'terms');
  //$query->addExpression("GROUP_CONCAT( (SELECT name FROM taxonomy_term_data AS td WHERE td.tid = ti.tid) SEPARATOR ', ')", 'terms');
  $query->addExpression("GROUP_CONCAT( CONCAT( (SELECT name FROM taxonomy_term_data AS td WHERE td.tid = ti.tid), ':', ti.tid) SEPARATOR ';')", 'terms');
  
  //CONCAT( (SELECT name FROM taxonomy_term_data AS td WHERE td.tid = ti.tid), ':', ti.tid)
  
  $query->orderBy('n.title', 'ASC');
  $query->range(0, 9);


  if ($result = $query->execute()->fetchAllAssoc('nid')) {
    dpm($result);
  }
  */
  
  /*
  $post['term'] = 'User Experience';
  
  $query = db_select('taxonomy_term_data', 'td');
  $query->condition('td.name', $post['term'], '=');
  $query->leftJoin('taxonomy_index', 't', 't.tid = td.tid');
  
  $query->leftJoin('node', 'n', 'n.nid = t.nid');
  $query->fields('n', array('nid', 'title'));
  $query->condition('n.status', 1);
  $query->condition('n.type', 'conference', '=');
  //$query->condition('n.title', '%' . db_like($post['term']) . '%', 'LIKE');
  $query->leftJoin('field_data_field_state', 'st', 'st.entity_id = n.nid');
  $query->fields('st', array('field_state_value'));
  $query->leftJoin('field_data_field_conf_city', 'ci', 'ci.entity_id = n.nid');
  $query->fields('ci', array('field_conf_city_value'));
  $query->leftJoin('field_data_field_conf_date', 'da', 'da.entity_id = n.nid');
  $query->fields('da', array('field_conf_date_value'));

  $query->leftJoin('taxonomy_index', 'ti', 'ti.nid = n.nid');


  $query->groupBy('n.nid');
  // V0
  // Works!
  //$query->addExpression("GROUP_CONCAT(ti.tid SEPARATOR ',')", 'terms');
  // Works!
  //$query->addExpression("GROUP_CONCAT(CONCAT( 'tid:', ti.tid, 'x' ) SEPARATOR ', ')", 'terms');
  // V1
  // Works!
  $query->addExpression("GROUP_CONCAT( (SELECT name FROM taxonomy_term_data AS td WHERE td.tid = ti.tid) SEPARATOR ',')", 'terms');
  // V2
  // Works excellently!
  //$query->addExpression("GROUP_CONCAT( CONCAT( (SELECT name FROM taxonomy_term_data AS td WHERE td.tid = ti.tid), ':', ti.tid) SEPARATOR ';')", 'terms');

  $query->orderBy('n.title', 'ASC');
  $query->range(0, 9);




  if ($result = $query->execute()->fetchAllAssoc('nid')) {
   dpm($result);
  }
  */
 /*
  $out = '<div class="md-modal md-effect-6" id="modal-6">
			<div class="md-content">
				<h3>Modal Dialog</h3>
				<div>
					<p>This is a modal window. You can do the following things with it:</p>
					<ul>
						<li><strong>Read:</strong> modal windows will probably tell you something important so don\'t forget to read what they say.</li>
						<li><strong>Look:</strong> a modal window enjoys a certain kind of attention; just look at it and appreciate its presence.</li>
						<li><strong>Close:</strong> click on the button below to close the modal.</li>
					</ul>
					<button class="md-close">Close me!</button>
				</div>
			</div>
		</div>';
  */
  
  /*
  $query = db_select('field_config', 'fc');
    $query->fields('fc', array('data'));
    $query->condition('fc.field_name', 'field_state');
    
    $result = $query->execute()->fetchField();
     dpm(unserialize($result));     
          
   */
  
  ///file_put_contents(DRUPAL_ROOT . '/tmp/gv_requests.log', date('m-d-Y H:i:s', time()) . ' -> ' . $_SERVER['REQUEST_URI'], FILE_APPEND | LOCK_EX);
  
  
  //$out = '<iframe src="//fast.wistia.net/embed/iframe/32l4uklpln" allowtransparency="true" frameborder="0" scrolling="no" class="wistia_embed" name="wistia_embed" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width="640" height="360"></iframe>';
  
 /*
  module_load_include('inc', 'phpexcel');
  
  // The path to the excel file
  $path = 'tmp/conf_31.xls';
  
  $path = 'tmp/Conference_Expo v2.xlsx';
  //$path = 'tmp/Conference_Expo v2_2.xls';
  
  
  $result = phpexcel_import($path);
  
  dpm($result);
  if (is_array($result)) {
    drupal_set_message(t("We did it !"));
  }
  else {
    drupal_set_message(t("Oops ! An error occured !"), 'error');
  }
  */
  /*
  $str = date_parse("2006-12-12 10:00:00.5");
  dpm($str);
  
  $str = date_parse("September 9-11, 2015");
  dpm($str);
     
  */
  
  //unlink('cache/normal/getvoip.com/ppc/business-voip___.html');
  
  //dpm(glob("cache/normal/getvoip.com/ppc/business-voip*.html"));
  //array_map('unlink', glob("cache/normal/getvoip.com/ppc/business-voip*.html"));
  
/*
    // March 3, 2015
// October 3-7, 2015
// September 28-October 1, 2015

  $dates = 'October 3-7, 2015';
  
  //dpm($dates = gv_misc_parseDateRange($dates));
  
  dpm($dates = gv_misc_parseDateRange('March 3, 2015'));
  dpm($dates = gv_misc_parseDateRange('October 3-7, 2015'));
  dpm($dates = gv_misc_parseDateRange('September 28-October 1, 2015'));
  */
  
  
  /*
  $query = db_select('node', 'n')
    ->fields('n', array('title', 'nid', 'type'));
  //$query->fields('mi', array('field_main_image_value'));
  $query->condition('n.type', 'conference');

  $results = $query->execute()->fetchAllAssoc('nid');
  
  dpm($results);
  */
  
  /*
   $query = db_select('node', 'n')
    ->fields('n', array('nid'));
  //$query->fields('mi', array('field_main_image_value'));
  $query->condition('n.type', 'conference');

  $results = $query->execute()->fetchCol();
  
  dpm($results);
 
  node_delete_multiple($results);
 
 
  $query = db_select('node', 'n')
    ->fields('n', array('nid'));
  //$query->fields('mi', array('field_main_image_value'));
  $query->condition('n.type', 'conference');

  $results = $query->execute()->fetchCol();
  
  dpm($results);
 */
  
  /*
  $dates = gv_misc_dateRangeFormatter('2015-01-06 00:00:00', '2015-01-09 00:00:00');
  dpm($dates);
  */
  
  
  
  
  /*
//  $source = 'public://p/logos/CorvisaCloud-logo.jpg';
//  $image = image_load($source);
//  
//  dpm($image);
  
  $source = 'sites/default/files/p/logos/CorvisaCloud-logo.jpg';
  $dest_jpeg = 'sites/default/files/p/logos/CorvisaCloud-logo_2.jpg';
  $dest_jpeg_100 = 'sites/default/files/p/logos/CorvisaCloud-logo_3.jpg';
  $dest_png = 'sites/default/files/p/logos/CorvisaCloud-logo_2.png';
  
  $image = image_load($source);
  
  dpm($image);
  
  $width = 128;
  $height = 60;
  $res = image_gd_create_tmp($image, $width, $height);

  if (!imagecopyresampled($res, $image->resource, 0, 0, 0, 0, $width, $height, $image->info['width'], $image->info['height'])) {
    dpm('Error');
  }
  
  dpm($res);

  
  // Save a new sprite file.
  imagejpeg($res, $dest_jpeg);
  imagejpeg($res, $dest_jpeg_100, 100);
  imagepng($res, $dest_png);
    
    
//  imagedestroy($image->resource);
//  // Update image object.
//  $image->resource = $res;
//  $image->info['width'] = $width;
//  $image->info['height'] = $height;
    
  */
  
  
  
  gv_misc_saleseforce_gv_test(array());
  
  $out .= '...ok';
  
  
  return $out . '</div>';// . '<br><div>End of Test</div>';
}



/*
 *   Parses dates in formats: 
 * 
 *   March 3, 2015
 *   October 3-7, 2015
 *   September 28-October 1, 2015
 * 
 */
function gv_misc_parseDateRange($dates) {
  
  $dates_str_original = $dates;
  
  if (!strpos($dates, ',')) {
    return NULL;
  }
  
  $dates = explode(',', $dates);
  // $dates[0] = 'October 3-7', $dates[1] = ' 2015'
  
  $year = trim($dates[1]); // '2015'
  if(!is_numeric($year)) {
    return NULL;
  }
  $date_first['year'] = $date_second['year'] = $year;
  
  if (strpos($dates[0], '-')) {
    
    // 'October 3-7' OR 'September 28-October 1'
    
    $dates = explode('-', $dates[0]);
    
    if (is_numeric(trim($dates[1]))) {
      // $dates[0] = 'October 3', $dates[1] = '7'
      $date_second['day'] = trim($dates[1]); // '7'
      $dates = explode(' ', trim($dates[0]));
      // $dates[0] = 'October', $dates[1] = '3'
      $date_first['day'] = trim($dates[1]); // '3'
      $date_first['month'] = $date_second['month'] = trim($dates[0]); // 'October'
    } // End of if (is_numeric(trim($dates[1]))) {
    else {
      // $dates[0] = 'September 28', $dates[1] = 'October 1'
      $date_tmp = explode(' ', trim($dates[0]));
      $date_first['day'] = trim($date_tmp[1]); // '28'
      $date_first['month'] = trim($date_tmp[0]); // 'September'
      
      $date_tmp = explode(' ', trim($dates[1]));
      if (!isset($date_tmp[1])) {
        drupal_set_message('Bad date structure - ' . $dates_str_original . ' -', 'warning');
        return NULL;
      }
      $date_second['day'] = trim($date_tmp[1]); // '1'
      $date_second['month'] = trim($date_tmp[0]); // 'October'
    }
  } // End of if (strpos($dates[0], '-')) {
  else {
    // 'March 3'
    $dates = explode(' ', trim($dates[0]));
    // $dates[0] = 'March', $dates[1] = '3'
    $date_first['day'] = trim($dates[1]); // '3'
    $date_first['month'] = trim($dates[0]); // 'March'
    $date_second = $date_first;
  }
  
  
  return array('first' => $date_first, 'second' => $date_second);
}


/**
 * Test page function for testing Jive original form.
 */
function gv_misc_testPage_Jive_submissionOriginalForm() {
  $out = '<div>'; //'<div>Start test...</div>';

  
  
  $out = '<form action="https://www.salesforce.com/servlet/servlet.WebToLead?encoding=UTF-8" method="POST">

<input type=hidden name="oid" value="00D50000000JVXK">
<input type=hidden name="retURL" value="http://">

<label for="first_name">First Name</label><input  id="first_name" maxlength="40" name="first_name" size="20" type="text" /><br>

<label for="last_name">Last Name</label><input  id="last_name" maxlength="80" name="last_name" size="20" type="text" /><br>

<label for="company">Company</label><input  id="company" maxlength="40" name="company" size="20" type="text" /><br>

<label for="email">Email</label><input  id="email" maxlength="80" name="email" size="20" type="text" /><br>

<label for="phone">Phone</label><input  id="phone" maxlength="40" name="phone" size="20" type="text" /><br>

<label for="lead_source">Lead Source</label><select  id="lead_source" name="lead_source"><option value="GetVoIP Lead">GetVoIP Lead</option>
</select><br>

Lead Tier:<input id="00N50000002p9b2" maxlength="50" name="00N50000002p9b2" size="20" type="text" /><br>

<label for="description">Description</label><textarea name="description"></textarea><br>
<input type="submit" name="submit">

</form>';
  
  
  $out .= '<br><br><div style="font-weight: bold;">The form source</div><div>'
          
          . htmlentities('<form action="https://www.salesforce.com/servlet/servlet.WebToLead?encoding=UTF-8" method="POST">

<input type=hidden name="oid" value="00D50000000JVXK">
<input type=hidden name="retURL" value="http://">

<label for="first_name">First Name</label><input  id="first_name" maxlength="40" name="first_name" size="20" type="text" /><br>

<label for="last_name">Last Name</label><input  id="last_name" maxlength="80" name="last_name" size="20" type="text" /><br>

<label for="company">Company</label><input  id="company" maxlength="40" name="company" size="20" type="text" /><br>

<label for="email">Email</label><input  id="email" maxlength="80" name="email" size="20" type="text" /><br>

<label for="phone">Phone</label><input  id="phone" maxlength="40" name="phone" size="20" type="text" /><br>

<label for="lead_source">Lead Source</label><select  id="lead_source" name="lead_source"><option value="GetVoIP Lead">GetVoIP Lead</option>
</select><br>

Lead Tier:<input  id="00N50000002p9b2" maxlength="50" name="00N50000002p9b2" size="20" type="text" /><br>

<label for="description">Description</label><textarea name="description"></textarea><br>
<input type="submit" name="submit">

</form>



----

Instructions

Please map as follows:

Phones needed = Lead Tier
Quote type = Description
Buying Time Frame = Description
First Name = first_name
Last Name = last_name
Company = company
Second point of contact = Description
Email = email
Phone # = phone

"Lead Source" is a fixed value.'
          . '</div>');
  
  
  return $out . '</div>';// . '<br><div>End of Test</div>';
}


/**
 * Test function for shareReviews.
 */
function gv_misc_rShareReviews_testPage() {
  
  $query = db_select('node', 'n');
  $query->leftJoin('field_data_field_p_name', 'pn', 'pn.entity_id = n.nid');
  $query->fields('pn', array('field_p_name_value'));
  $query->condition('n.type', 'provider')
        ->condition('n.status', 1); 

  $query->leftJoin('field_data_field_r_provider_name', 'rpn', 'rpn.field_r_provider_name_value = pn.field_p_name_value');
  $query->join('node', 'rn', 'rn.nid = rpn.entity_id AND rn.status = 1');
  //$query->condition('rn.status', 1); 

  $query->distinct();
          
  $query->orderBy('field_p_name_value');
  $providers = $query->execute()->fetchCol();

  dpm($providers);
  
  foreach ($providers as $provider_name) {
    $query = db_select('field_data_field_r_provider_name', 'rpn');
    $query->leftJoin('node', 'n', 'n.nid = rpn.entity_id');
    $query->fields('n', array('changed'));
    $query->fields('rpn', array('entity_id'));
    $query->condition('rpn.field_r_provider_name_value', $provider_name)
          ->condition('n.status', 1);
    //$providers[$provider_name] = $query->execute()->fetchAllAssoc('n.nid');
    $result = $query->execute()->fetchAllAssoc('entity_id');
    if (!empty($result)) {
      $r_providers[$provider_name] = $result;
      //$providers[$provider_name]['count'] = count($result);
    }
  }

  dpm($r_providers);
  
  
  $post['op'] = 'get all reviews changed after...';
  $post['changed_after'] = '1367242095';
  
  $query = db_select('node', 'n');
  $query->leftJoin('field_data_field_r_provider_name', 'rpn', 'rpn.entity_id = n.nid');

  //$query->fields('rpn', array('entity_id', 'field_r_provider_name_value'));
  $query->addField('rpn', 'field_r_provider_name_value', 'pname');
  $query->addField('rpn', 'entity_id', 'nid');
  $query->addField('n', 'changed');

  $query->condition('n.type', 'review')
        ->condition('n.status', 1); 

  if ($post['op'] == 'get all reviews changed after...') {
    $query->condition('changed', $post['changed_after'], '>');
  }

  $query->orderBy('field_r_provider_name_value');
  //$out = $query->execute()->fetchAllAssoc('entity_id');
  $out = $query->execute()->fetchAllAssoc('nid');

  foreach ($out as $key => $value) {
    unset($out[$key]->nid);
  }

  dpm($out);
  

}


/**
 * Share reviews with partners sites.
 */
function gv_misc_rShareReviews_rest() {
  
  $out = NULL;
  $error = FALSE;
  
  $allowed_remote_servers = array('50.62.82.224' /* voiprater.com */);
  
  global $user;
  watchdog('Request for reviews', check_plain($_GET['q']) . ' '. print_r($_SERVER, TRUE) . ' ' . print_r($user, TRUE), NULL, WATCHDOG_WARNING);
  
  
  //if (!in_array($_SERVER['HTTP_X_FORWARDED_FOR'], $allowed_remote_servers)) {
  if (!in_array($_SERVER['REMOTE_ADDR'], $allowed_remote_servers)) {
    exit('Access denied for your IP!');
  }
  
  
  $post = array();
  foreach ($_POST as $key => $value) {
    $post[$key] = check_plain(strip_tags($value));
  }

  switch ($post['op']) {
    
    case 'get providers having reviews':
    case 'get providers having reviews changed after...':
      
      $query = db_select('node', 'n');
      $query->leftJoin('field_data_field_p_name', 'pn', 'pn.entity_id = n.nid');
      $query->fields('pn', array('field_p_name_value'));
      $query->condition('n.type', 'provider')
            ->condition('n.status', 1); 

      $query->leftJoin('field_data_field_r_provider_name', 'rpn', 'rpn.field_r_provider_name_value = pn.field_p_name_value');
      
      if ($post['op'] == 'get providers having reviews changed after...') {
        $query->join('node', 'rn', 'rn.nid = rpn.entity_id AND rn.status = 1 AND rn.changed > ' . $post['changed_after']);
      }
      else {
        $query->join('node', 'rn', 'rn.nid = rpn.entity_id AND rn.status = 1');
      }
      
      $query->distinct();

      $query->orderBy('field_p_name_value');
      
      $out = $query->execute()->fetchCol();

      break;
    
    
    
    case 'get all reviews':
    case 'get all reviews changed after...':
      
      $query = db_select('node', 'n');
      $query->leftJoin('field_data_field_r_provider_name', 'rpn', 'rpn.entity_id = n.nid');

      //$query->fields('rpn', array('entity_id', 'field_r_provider_name_value'));
      $query->addField('rpn', 'field_r_provider_name_value', 'pname');
      $query->addField('rpn', 'entity_id', 'nid');
      $query->addField('n', 'changed');

      $query->condition('n.type', 'review')
            ->condition('n.status', 1); 
      
      if ($post['op'] == 'get all reviews changed after...') {
        $query->condition('changed', $post['changed_after'], '>');
      }
      
      $query->orderBy('field_r_provider_name_value');
      //$out = $query->execute()->fetchAllAssoc('entity_id');
      $out = $query->execute()->fetchAllAssoc('nid');

      foreach ($out as $key => $value) {
        unset($out[$key]->nid);
      }
      
      break;
    
    
    
    case 'get all reviews grouped by providers':
    case 'get all reviews grouped by providers changed after...':
      
      $query = db_select('node', 'n');
      $query->leftJoin('field_data_field_p_name', 'pn', 'pn.entity_id = n.nid');
      $query->fields('pn', array('field_p_name_value'));
      $query->condition('n.type', 'provider')
            ->condition('n.status', 1); 

      $query->leftJoin('field_data_field_r_provider_name', 'rpn', 'rpn.field_r_provider_name_value = pn.field_p_name_value');
      
      if ($post['op'] == 'get all reviews grouped by providers changed after...') {
        $query->join('node', 'rn', 'rn.nid = rpn.entity_id AND rn.status = 1 AND rn.changed > ' . $post['changed_after']);
      }
      else {
        $query->join('node', 'rn', 'rn.nid = rpn.entity_id AND rn.status = 1');
      }
      
      $query->distinct();

      $query->orderBy('field_p_name_value');
      $providers = $query->execute()->fetchCol();

      foreach ($providers as $provider_name) {
        $query = db_select('field_data_field_r_provider_name', 'rpn');
        $query->leftJoin('node', 'n', 'n.nid = rpn.entity_id');
        $query->fields('n', array('changed'));
        //$query->fields('rpn', array('entity_id'));
        $query->addField('rpn', 'entity_id', 'nid');
        $query->condition('rpn.field_r_provider_name_value', $provider_name)
              ->condition('n.status', 1);
        
        if ($post['op'] == 'get all reviews grouped by providers changed after...') {
          $query->condition('changed', $post['changed_after'], '>');
        }

        $result = $query->execute()->fetchAllAssoc('nid');
        if (!empty($result)) {
          $r_providers[$provider_name] = $result;
          //$providers[$provider_name]['count'] = count($result);
          
          foreach ($r_providers[$provider_name] as $key => $value) {
            unset($r_providers[$provider_name][$key]->nid);
          }
        }
      }    
      $out = $r_providers;
      break;
    
    
      
    case 'get provider reviews':
    case 'get provider reviews changed after...':
      
      $query = db_select('field_data_field_r_provider_name', 'rpn');
      $query->leftJoin('node', 'n', 'n.nid = rpn.entity_id');
      $query->fields('n', array('changed'));
      //$query->fields('rpn', array('entity_id'));
      $query->addField('rpn', 'entity_id', 'nid');
      $query->condition('rpn.field_r_provider_name_value', $post['pname'])
            ->condition('n.status', 1);

      if ($post['op'] == 'get provider reviews changed after...') {
        $query->condition('changed', $post['changed_after'], '>');
      }

      //$result = $query->execute()->fetchAllAssoc('entity_id');
      $result = $query->execute()->fetchAllAssoc('nid');
      if (!empty($result)) {
        $out = $result;
        
        foreach ($out as $key => $value) {
          unset($out[$key]->nid);
        }
      }

      break;
    
      
      
    case 'get review by nid':
      
      $query = db_select('node', 'n');
        $query->fields('n', array('nid', 'changed', 'uid'));
      $query->leftJoin('field_data_field_r_provider_name', 'rpn', 'rpn.entity_id = n.nid');
        $query->addField('rpn', 'field_r_provider_name_value', 'pname');
      
      $query->leftJoin('field_data_field_p_name', 'pn', 'pn.field_p_name_value = rpn.field_r_provider_name_value');
        $query->addField('pn', 'entity_id', 'p_nid');
        
      $query->leftJoin('field_data_body', 'b', 'b.entity_id = n.nid');
        $query->addField('b', 'body_value', 'review');
      $query->leftJoin('field_data_field_r_fname', 'fn', 'fn.entity_id = n.nid');
        $query->addField('fn', 'field_r_fname_value', 'fname');
      $query->leftJoin('field_data_field_r_lname', 'ln', 'ln.entity_id = n.nid');
        $query->addField('ln', 'field_r_lname_value', 'lname');
      $query->leftJoin('field_data_field_r_email', 'm', 'm.entity_id = n.nid');
        $query->addField('m', 'field_r_email_value', 'r_email');  
      $query->leftJoin('field_data_field_r_data', 'd', 'd.entity_id = n.nid');
        $query->addField('d', 'field_r_data_value', 'r_data');  
      $query->leftJoin('field_data_field_r_rating_overall', 'ro', 'ro.entity_id = n.nid');
        $query->addField('ro', 'field_r_rating_overall_value', 'rating_overall');  
       
      $query->leftJoin('field_data_field_r_notapproved', 'na', 'na.entity_id = n.nid');
        $query->addField('na', 'field_r_notapproved_value', 'r_notapproved');
      
      $query->leftJoin('field_data_field_ratings_oprovider', 'op', 'op.entity_id = n.nid');
        $query->addField('op', 'field_ratings_oprovider_value', 'ratings_oprovider');
      
        
       
            
      $query->condition('n.nid', $post['nid']);

      $review = $query->execute()->fetchObject();
      $review->r_data = unserialize($review->r_data);
              
      $criteria = array(
        'entity_type' => 'node',
        //'entity_id' => $review->field_ref_provider['und'][0]['target_id'],
        'entity_id' => $review->p_nid,
        //'uid' => $node->uid,
        'uid' => $review->uid,
        // Make it possible to count votes of several unauthorized (uid = 0, but with different emails) users.
        //'vote_source' => $node->field_r_email['und'][0]['value'],
        'vote_source' => $review->r_email,
      );
      $votes = gv_misc_getVotesIDs($criteria); // = votingapi_select_votes($criteria);
      gv_pages_addRatingsToNodeThemed($node, $votes);

      $review->votes = $votes;
      
      if (!empty($review)) {
        $out = $review;
      }
      
      break;
    
    
    
    default:
      $out = 'Invalid operation request! Please try another one.';
      $error = TRUE;
      break;
  }
  
  drupal_json_output(array('out' => $out, 'error' => $error));
}


/**
 * Bulk Replace titles metatags.
 */
function gv_misc_bulkReplaceTitlesMetatags() {

  $query = db_select('node', 'n');
  $query->fields('n', array('nid', 'title', 'type'));
  $query->leftJoin('metatag', 'm', 'm.entity_id = n.nid');
  $query->fields('m', array('data'));
  $query->condition('n.status', 1);
  $nodes = $query->execute()->fetchAllAssoc('nid');

  //dpm($nodes);
  
  
  foreach ($nodes as $nid => $node) {
    $nodes[$nid]->metatag = unserialize($node->data);
    unset($nodes[$nid]->data);
    
    // Replace '| GetVoIP.com' with '| GetVoIP'
//    if(empty($nodes[$nid]->metatag['title']['value']) || strpos($nodes[$nid]->metatag['title']['value'], '| GetVoIP.com') === FALSE) {
//      unset($nodes[$nid]);
//    }
//    else {
//      $nodes[$nid]->metatag['title']['value'] = str_replace('| GetVoIP.com', '| GetVoIP', $nodes[$nid]->metatag['title']['value']);
//    }
    
    
    // Replace title without '| GetVoIP.com' with title with '| GetVoIP'
//    if(empty($nodes[$nid]->metatag['title']['value']) || strpos($nodes[$nid]->metatag['title']['value'], '| GetVoIP') !== FALSE || strpos($nodes[$nid]->metatag['title']['value'], '[') !== FALSE) {
//      unset($nodes[$nid]);
//    }
//    else {
//      $nodes[$nid]->metatag['title']['value'] = $nodes[$nid]->metatag['title']['value'] . ' | GetVoIP';
//    }
    
    // Replace '| GetVoIP' with '[site:name]'
//    if(empty($nodes[$nid]->metatag['title']['value']) || strpos($nodes[$nid]->metatag['title']['value'], '| GetVoIP') === FALSE) {
//      unset($nodes[$nid]);
//    }
//    else {
//      $nodes[$nid]->metatag['title']['value'] = str_replace('| GetVoIP', '| [site:name]', $nodes[$nid]->metatag['title']['value']);
//    }
    
    // Replace '| GetVoIP' with '[site:name]'
    if(empty($nodes[$nid]->metatag['title']['value']) || strpos($nodes[$nid]->metatag['title']['value'], '| [site:name]') === FALSE) {
      unset($nodes[$nid]);
    }
    else {
      $nodes[$nid]->metatag['title']['value'] = str_replace('| [site:name]', '- [site:name]', $nodes[$nid]->metatag['title']['value']);
    }

  }
  
  //dpm($nodes);
  
  foreach ($nodes as $nid => $node) {
    $data = serialize($node->metatag);
    //dpm($nodes[$nid]);
    
    db_update('metatag')
        ->fields(array(
          'data' => $data,
        ))
        ->condition('entity_id', $nid)
        ->execute();
    //break;
  }
  
       
}
  

/**
 * Bulk Replace an alias of nodes.
 */
function gv_misc_bulkReplaceAliases() {
  
  
  $query = db_select('node', 'n');
  $query->fields('n', array('nid', 'title'));
  $query->condition('n.type', 'article');
  $nodes = $query->execute()->fetchAllAssoc('nid');

  
  
  foreach ($nodes as $nid => $node) {
    $query = db_select('url_alias', 'a');
    $query->condition('a.source', 'node/' . $nid);
    $query->fields('a', array('alias'));
    $nodes[$nid]->alias = $query->execute()->fetchField();
  }
  
  foreach ($nodes as $nid => $node) {
    
    if (strpos($node->alias, 'what-is-voip') === FALSE) {
      dpm('Wrong Alias for ' . $node->nid);
      continue;
    }
    
    
    
    
    $old_alias = $node->alias;
    $new_alias = str_replace('what-is-voip', 'library', $old_alias);
    
    $redirect = new stdClass();
    redirect_object_prepare($redirect);
    $redirect->source = $old_alias;
    $redirect->redirect = 'node/' . $nid;
    $redirect->language = 'und';
    $hash = redirect_hash($redirect);

    
    db_update('url_alias')
        ->fields(array(
          'alias' => $new_alias,
        ))
        ->condition('source', 'node/' . $nid)
        ->execute();
  
    $query = db_select('redirect', 'r');
    $query->condition('r.source', $old_alias);
    $query->fields('r', array('redirect'));
    $redirect_existing = $query->execute()->fetchField();
    if ($redirect_existing) {
      continue;
    }
    
   
    $redirect_object = array(
      'hash' => $hash,
      'type' => 'redirect',
      'uid' => 1,
      'source' => $old_alias,
      'source_options' => serialize(array()),
      'redirect' => 'node/' . $nid,
      'redirect_options' => serialize(array()),
      'language' => 'und',
      'status_code' => 0,
      'count' => 0,
      'access' => 0
    );
    
    db_insert('redirect')
        ->fields($redirect_object)
        ->execute();
  }
  
}


/**
 * Implements hook_flush_caches(). 
 */
function gv_misc_flush_caches() {
  
  // Remove all minified files from jsmin-gv folder.
  // Uncomment in case of changing any js on the site.
  
   // No need to delete files as they are deleted on rebuilding after gv_minified_js variable reset.
  /*
  $dir = 'sites/default/files/jsmin-gv';
  $objects = scandir($dir);
  foreach ($objects as $object) {
    if ($object != "." && $object != "..") {
      unlink($dir . "/" . $object);
    }
  }
  */
  // Uncomment in case of changing any js on the site.
  variable_del('gv_minified_js');
  
  
  
  variable_del('gv_altered_css');
  
  //gv_misc_recalculateReviewsAmount();
  variable_del('gv_allReviewsAmount');
  
}


/**
 * Recalculate the reviews amount.
 */
function gv_misc_recalculateReviewsAmount() {
  /*
  $query = db_select('votingapi_vote', 'v');
  $query->condition('v.value_type', 'percent')
        ->condition('v.tag', 'overall');
  //$votes = $query->execute();
  $countQuery = $query->countQuery();
  $num_votes = $countQuery->execute()->fetchField();
  variable_set('gv_allReviewsAmount', $num_votes + 100);
  */
  
  $query = db_select('node', 'n');
  $query->condition('n.type', 'review');
  $query->condition('n.status', 1);
  $query->addTag('a4s');
  $query->addTag('reviews');
  //$votes = $query->execute();
  $countQuery = $query->countQuery();
  $num_votes = $countQuery->execute()->fetchField();
  variable_set('gv_allReviewsAmount', $num_votes);
  
  return $num_votes;
}


/**
 * Returns a captcha image.
 */
function gv_misc_securimage_show_ajax() {

  //require_once dirname(__FILE__) . '/securimage.php';
  
  // http://www.phpcaptcha.org/documentation/setting-options/
  
  require_once '/home/gvadmin/public_html/sites/all/libraries/jquery.plugins/securimage/securimage.php';

  //$img = new Securimage(array('captcha_type' => Securimage::SI_CAPTCHA_MATHEMATIC /* use math captcha */));
  $img = new Securimage();
  
  $img->code_length = 3;
  $img->num_lines = 0;
  // white bg
  $img->image_bg_color = new Securimage_Color('#ffffff');
  $img->text_color = new Securimage_Color('#000000');
  
  
  //$img->noise_color = new Securimage_Color('#ffffff');
  $img->noise_level = 0;
          
  $img->perturbation = 0.1; // 0.75 default


  $img->show();  // outputs the image and content headers to the browser
}


/**
 * Returns json result data with OK or error.
 */
function gv_misc_checkCtCaptcha_ajax() {
  $status = TRUE;
  $output = '';
  
  $post = array();
  foreach ($_POST as $key => $value) {
    $post[$key] = check_plain(strip_tags($value));
  }

  if ($post['op'] == 'get') {
    $cap = $_SESSION['securimage_code_value']['default'];
  }
  else {
    $cap = NULL;
  }
  
  drupal_json_output(array('status' => $status, 'cap' => $cap));
}


/**
 * Implements hook_url_outbound_alter().
 */
function gv_misc_url_outbound_alter(&$path, &$options, $original_path) {
  // Create the path /contact-us from /contact
//  if (preg_match('|^contact$|', $path, $matches)) {
//    $path = 'contact-us';
//  }
//  else

  
  //if (!empty($options['attributes']['rel'])) 
//  global $user;
//  if ($path == 'http://click.websitegear.com/track/1883449')
//  {
//    //$options['attributes']['rel'] = 'nofollow';
//    //dpm($path);
//    //dpm($options);
//    //unset($options['attributes']['rel']);
//    $options['attributes']['rel'] = 'yyy';
//    //$options['attributes']['target'] = '_parent';
//    $options['fragment'] = 'zzz';
//    //dpm($options);
//  }
  
  if ($path == 'node/add/review') {
    $path = 'voip-provider-submit-user-review';
  }
  elseif ($path == 'node/add/phone-review') {
    $path = 'voip-phone-submit-user-review';
  }
  elseif (preg_match('|^sites\/default\/files\/pdfs\/(.*)|', $path, $matches)) {
    //$path = 'sites/default/files/pdfs/voipe911-advisory.pdf';
    $path = 'pdfs/' . $matches[1];
  }
  
}


/**
 * Implements hook_url_inbound_alter().
 */
function gv_misc_url_inbound_alter(&$path, $original_path, $path_language) {
//Create the path /contact-us from /contact
//if (preg_match('|^contact-us$|', $path, $matches)) {
//  $path = 'contact';
//}
//else
  if ($path == 'voip-provider-submit-user-review') {
    $path = 'node/add/review';
  }
  elseif ($path == 'voip-phone-submit-user-review') {
    $path = 'node/add/phone-review';
  }
//  else {
//    if (strpos($path, 'theme/images/') !== FALSE) {
//      //dpm($path);
//      $path = str_replace('theme/images/', 'sites/all/themes/gv_orange/css/images/',$path );
//    }
//  }
//  elseif (preg_match('|^pdfs\/(.*)|', $path, $matches)) {
//    //$path = 'pdfs/voipe911-advisory.pdf';
//    $path = 'sites/default/files/pdfs/' . $matches[1];
//    //$path = '';
//  }
}


/**
 * Implements Hook Process Html.
 * 
 */
function gv_misc_process_html(&$vars) {
  
  // Disable boost caching for custom gv page not found pages.
  // First part, initialization.
  // See the second part at gv_misc_preprocess_page(),
  // where $_boost variable  will be corrected to prevent the current page caching.
  global $_boost;
  global $gv_page_not_found;

  if ($gv_page_not_found) {
    $_boost['cache_this'] = FALSE;
  }

  // Uncomment to minify.
  //return;
  
  // Minify html on the fly.
  
  global $user;
  // We do not minify the code for logged in users and for quote landing and final pages.
  if (!$user->uid && @$_SERVER['REQUEST_URI'] != '/compare-voip-solutions-final' && @$_SERVER['REQUEST_URI'] != '/compare-voip-solutions') {
    
      // Minify a Html Page content.
      $vars['page'] = preg_replace(
        array(
          '/ {2,}/',
          '/<!--.*?-->|\t|(?:\r?\n[ \t]*)+/s',
        ),
        array(
          ' ',
          '',
        ),
        $vars['page']
      );

  }
  
  //dpm($vars['page']);
  
  
  // Rewrite urls in the content to make them more short and beautifull
  // .htaccess should contain back decoding code for these encoded urls.
  
  /*
  
    # Back decode changed (in function gv_misc_process_html(&$vars) ) urls.

    RewriteRule ^images/theme/(.*) sites/all/themes/gv_orange/css/images/$1

    RewriteRule ^images/logos/sprites/(.*) sites/default/files/p/$1
    RewriteRule ^images/logos/chart/(.*) sites/default/files/styles/logo_provider_chart_main/public/p/logos/$1
    RewriteRule ^images/logos/page/(.*) sites/default/files/styles/logo_provider_page/public/p/logos/$1
    RewriteRule ^images/providerwebsite/(.*) sites/default/files/styles/image_provider_page/public/p/images/$1
    RewriteRule ^images/logos/featured-in/(.*) sites/default/files/styles/as_featured_in_sideblock/public/a/$1
    RewriteRule ^images/thumb-h/(.*) sites/default/files/styles/article_thumbnail_h/public/$1
    RewriteRule ^images/thumb-v/(.*) sites/default/files/styles/article_thumbnail_v/public/$1
    RewriteRule ^images/thumb-related/(.*) sites/default/files/styles/related_article_thumb_sideblock/public/$1
    RewriteRule ^images/posts/(.*) sites/default/files/$1
  
  */
  
  // Disable rewriting for edit mode.
  /*
  $edit_page = (arg(2) == 'edit' ? TRUE : FALSE);
  if ($_GET['q'] != 'node/566' && $_GET['q'] != 'node/1626' && !$edit_page) {
    
    //$vars['page'] = preg_replace('|sites\/default\/files\/p\/logos|s', 'images/providers/logos', $vars['page']);
    //$vars['page'] = preg_replace('|sites\/default\/files\/p\/images|s', 'images/providers', $vars['page']);

    
    // Performance and xdebug.
    // http://stackoverflow.com/questions/7336862/could-preg-replace-be-causing-a-heavy-enough-load-to-cause-502s
    
    $vars['page'] = preg_replace(
          array(
            '|sites\/default\/files\/([^\/]*\.)|s',
            # RewriteRule ^images/content/all/(.*) sites/default/files/$1

            '|sites\/default\/files\/styles\/related_article_thumb_sideblock\/public\/|s',
            # RewriteRule ^images/content/thumb-related/(.*) sites/default/files/styles/related_article_thumb_sideblock/public/$1

            '|sites\/default\/files\/styles\/article_thumbnail_h\/public\/|s',
            # RewriteRule ^images/content/thumb-h/(.*) sites/default/files/styles/article_thumbnail_h/public/$1

            '|sites\/default\/files\/styles\/article_thumbnail_v\/public\/|s',
            # RewriteRule ^images/content/thumb-v/(.*) sites/default/files/styles/article_thumbnail_v/public/$1

            '|sites\/default\/files\/styles\/as_featured_in_sideblock\/public\/a\/|s',
            # RewriteRule ^images/providers/logos/featured-in/(.*) sites/default/files/styles/as_featured_in_sideblock/public/a/$1

            '|sites\/default\/files\/styles\/logo_provider_page\/public\/p\/logos\/|s',
            # RewriteRule ^images/providers/logos/page/(.*) sites/default/files/styles/logo_provider_page/public/p/logos/$1

            '|sites\/default\/files\/styles\/image_provider_page\/public\/p\/images\/|s',
            # RewriteRule ^images/providers/site/(.*) sites/default/files/styles/image_provider_page/public/p/images/$1

            '|sites\/default\/files\/p\/|s',
            # RewriteRule ^images/providers/logos/sprites/(.*) sites/default/files/p/$1
              
            '|sites\/default\/files\/styles\/logo_provider_chart_main\/public\/p\/logos\/|s',
            # RewriteRule ^images/providers/logos/chart/(.*) sites/default/files/styles/logo_provider_chart_main/public/p/logos/$1
            
            '|sites\/all\/themes\/gv_orange\/css\/images\/|s', 
            # RewriteRule ^images/theme/(.*) sites/all/themes/gv_orange/css/images/$1
          ), 
          array(
            'images/posts/$1',
            'images/thumb-related/',
            'images/thumb-h/',
            'images/thumb-v/',
            'images/logos/featured-in/',
            'images/logos/page/',
            'images/providerwebsite/',
            'images/logos/sprites/',
            'images/logos/chart/',
            'images/theme/',
          ), 

          $vars['page']);

  }
  */
  
}


/**
 * Implementing hook_css_alter
 * @param $css
 * 
 * GV Change long image files paths to short aliases...
 */
function gv_misc_css_alter(&$css) {
  
  //dpm($css);
  
  // Rewrite urls in the content to make them more short and beautifull
  // .htaccess should contain back decoding code for these encoded urls.
  
  $gv_altered_css = variable_get('gv_altered_css', array());
  
  $css_files_to_alter = array('sites/all/themes/gv_orange/css/custom.css', 'sites/all/themes/gv_orange/css/iframes-n-quotes.css');
    
  $changes = FALSE;
  foreach ($css_files_to_alter as $source_fpath_short) {
  
    if (!isset($css[$source_fpath_short]) || in_array($source_fpath_short, $gv_altered_css)) {
      continue;
    }
    
    
    
    //$source_fpath_short = 'sites/all/themes/gv_orange/css/custom.css';
    $source_fpath = DRUPAL_ROOT . '/' . $source_fpath_short;
      
    if ($output = file_get_contents($source_fpath)) {
      
      /*
      $output = preg_replace('|sites\/all\/themes\/gv_orange\/css\/images\/|s', 'images/theme/', $output);
      # RewriteRule ^images/theme/(.*) sites/all/themes/gv_orange/css/images/$1
      $output = preg_replace('|\(images\/|s', '(/images/theme/', $output);
      $output = preg_replace('|\(\"images\/|s', '("/images/theme/', $output);
      $output = preg_replace('|\(\'images\/|s', '(\'/images/theme/', $output);
      // The same ...
      # RewriteRule ^images/theme/(.*) sites/all/themes/gv_orange/css/images/$1
      */
      
      $output = preg_replace(
        array(
          # RewriteRule ^images/theme/(.*) sites/all/themes/gv_orange/css/images/$1
          '|sites\/all\/themes\/gv_orange\/css\/images\/|s',
          
          # RewriteRule ^images/theme/(.*) sites/all/themes/gv_orange/css/images/$1
          '|\(images\/|s',
          '|\(\"images\/|s',
          '|\(\'images\/|s',
        ), 
        array(
          'images/theme/',
            
          '(/images/theme/',
          '("/images/theme/',
          '(\'/images/theme/',
        ), 
        $output
      );
      
      
      $target_path_short = 'sites/default/files/css-altered-gv/' . str_replace('/', '-', $source_fpath_short);
      if (file_put_contents(DRUPAL_ROOT . '/' . $target_path_short, $output)) {
        /*
        $gv_altered_css[$target_path_short] = $css[$source_fpath_short]; 
        $gv_altered_css[$target_path_short]['data'] = $gv_altered_css[$target_path_short];
        unset($css[$source_fpath_short]);
        $css[$target_path_short] = $gv_altered_css[$target_path_short];
        */
        
        $gv_altered_css[$source_fpath_short] = $target_path_short;
        $css[$source_fpath_short]['data'] = $gv_altered_css[$source_fpath_short];
        
        $changes = TRUE;
      }
    }
          
  } // End of foreach ($css_files_to_alter as $source_fpath_short) {
  
  //dpm($gv_altered_css);
  if ($changes) {
    variable_set('gv_altered_css', $gv_altered_css);
  }
  
  //dpm($_GET);
  //dpm($_SERVER);
  //dpm($css);
  // unset main custom css for lpv10, lpv10uk, ca page
  $pages_to_exclude_custom_css = array('node/5203', 'node/5204', 'node/5210', 'node/5211', 'node/5227', 'node/5228');
  if (in_array($_GET['q'], $pages_to_exclude_custom_css)) {
    unset($css['sites/all/themes/gv_blue/css/custom.css'], $css['sites/all/themes/gv/css/style.css']); 
  }
  
}


/**
 * Implementing hook_js_alter
 * @param $javascript
 */
function gv_misc_js_alter(&$javascript) {

//  global $user;
//  if (!$user->uid) 
    {
    
    // Minify all js on the page.
    
    $add_to_minified = NULL;
    $from_scratch = FALSE;
    
    $gv_minified_js = variable_get('gv_minified_js');
    
    if ($gv_minified_js) {
      foreach($javascript as $filename => $attr){
        
        if (isset($gv_minified_js[$filename])) {
          $javascript[$filename]['data'] = $gv_minified_js[$filename];
        }
        elseif (strpos($filename, '.js') && !strpos($attr['data'], 'min.js') && !strpos($attr['data'], 'ttp') && !strpos($attr['data'], 'jsmin-gv')) {
          $add_to_minified[$filename] = $attr;
        }
      }
    }
    else {
      $add_to_minified = $javascript;
      $from_scratch = TRUE;
    }
    
    // Create minified version of js files, not yet created.
    if($add_to_minified) {

      include_once DRUPAL_ROOT . '/sites/all/libraries/minify/min/lib/JSMin.php';
      foreach($add_to_minified as $filename => $attr){

        if(!$from_scratch || (strpos($filename, '.js') && !strpos($attr['data'], 'min.js') && !strpos($attr['data'], 'ttp') && !strpos($attr['data'], 'jsmin-gv'))) {

          $source_fpath_short = $attr['data'];
          $source_fpath = DRUPAL_ROOT . '/' . $source_fpath_short;

          
          
          if ($source_content = file_get_contents($source_fpath)) {
            if ($minOutput = JSMin::minify($source_content)) {
              
              // Remove comments.
//              if (strpos($minOutput, '/*') !== FALSE) {
//                $minOutput = preg_replace('/\/\*.*?\*\//s', '', $minOutput);
//              }
              
              $target_path_short = 'sites/default/files/jsmin-gv/' . str_replace('/', '-', $source_fpath_short);
              if (file_put_contents(DRUPAL_ROOT . '/' . $target_path_short, $minOutput)) {
                $gv_minified_js[$filename] = $target_path_short;
                $javascript[$filename]['data'] = $gv_minified_js[$filename];
              }
            }
          }

        } // End of if(strpos($filename, '.js') && !strpos($attr['data'], "min.js") && !strpos($attr['data'], "jsmin-gv")) {

      } // End of foreach($javascript as $filename => $attr){
      
      variable_set('gv_minified_js', $gv_minified_js);
    } // End of if($add_to_minified) {
      
    
    // Replace js with min.js
//    foreach($javascript as $filename => $attr) {
//      if (isset($gv_minified_js[$filename])) {
//        $javascript[$filename]['data'] = $gv_minified_js[$filename];
//      }
//    }
    
    
  } // End of if ($user->uid != 1) {

}


/**
 * 
 * User permissions access calback function for the admin.
 * 
 */
function gv_misc_userIsAdmin() {
  global $user;
  if (in_array('administrator', $user->roles)) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}


/**
 * 
 * User permissions access calback function for the admin or writer.
 * 
 */
function gv_misc_userIsAdminOrWriter($user = NULL) {
  if (!$user) {
    global $user;
  }
  
  if (in_array('administrator', $user->roles) || in_array('Writer', $user->roles)) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}


/**
 * Get node author, including guest author.
 */
function gv_misc_getNodeAuthor($node) {
  if (!empty($node->field_extra_data['und'][0]['value'])) {
      $extra_data = unserialize($node->field_extra_data['und'][0]['value']);
      $extra_data['guest_author'] = $author_name = !empty($extra_data['guest_author']) ? $extra_data['guest_author'] : NULL;
    }

    if (!$extra_data['guest_author']) {
      $authorExtendedData = gv_misc_loadUserExtendedData($node->uid);
      $author_name = $authorExtendedData->realname;
    }
    
    return $author_name;
}


/**
 * Implements a new view_mode.
 */
function gv_misc_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['home_teaser'] = array(
    'label' => t('Home teaser'),
    'custom settings' => TRUE,
  );
  $entity_info['node']['view modes']['home_teaser_rotated'] = array(
    'label' => t('Home teaser rotated'),
    'custom settings' => TRUE,
  );
  $entity_info['node']['view modes']['side_block_teaser'] = array(
    'label' => t('Side block teaser'),
    'custom settings' => TRUE,
  );
  $entity_info['node']['view modes']['side_block_teaser_latestBlogsOnNews'] = array(
    'label' => t('Side block teaser latest Blogs On News'),
    'custom settings' => TRUE,
  );
  $entity_info['node']['view modes']['teaser_onPrefaceBottomLatest'] = array(
    'label' => t('Side block Review teaser on Preface with Bottom Latest Articles'),
    'custom settings' => TRUE,
  );
  $entity_info['node']['view modes']['servicePage_bottomMainReviewTeaser'] = array(
    'label' => t('Review teaser on service types pages on bottom Main section'),
    'custom settings' => TRUE,
  );
  $entity_info['node']['view modes']['teaser_phonePicAndRating'] = array(
    'label' => t('Phone mini teaser on main Phones review page'),
    'custom settings' => TRUE,
  );
}
 

/**
 * Get tracking subpath by nid for using in building provider tracking url.
 */
function gv_misc_getTrackingUrl_trackingSubpath_byNid($nid) {
  $query = db_select('url_alias', 'a')
    ->fields('a', array('alias'));
  $query->condition('a.source', 'node/' . $nid);
  //$subpath = '/' . $query->execute()->fetchField();
  return str_replace('reviews/', '', '/' . $query->execute()->fetchField());
}


/**
 * Build the tracking url.
 */
function gv_misc_getTrackingUrl($title_or_wrapped_object, $subpath = NULL, $nid = NULL, $target_name = NULL, $a_class = NULL, $a_attr = NULL, $provider_data_quick = NULL, $service_type = NULL, $force_direct_link = FALSE, $a_title = FALSE) {
  //dpm($provider_data_quick);
  static $count_id;
  ++$count_id;
  
  if (strpos($title_or_wrapped_object, 'src') || strpos($title_or_wrapped_object, 'url')) {
    //dpm($title_or_wrapped_object);
    //dpm(gv_pages_convertBeautifulUrls('from_originals_to_beautiful', $title_or_wrapped_object));
    $title_or_wrapped_object = gv_pages_convertBeautifulUrls('from_originals_to_beautiful', $title_or_wrapped_object);
  }
  
  
  // Make force direct for all provider links.
  ////$force_direct_link = TRUE;
  
  if ($provider_data_quick && ($force_direct_link || ($service_type && !empty($provider_data_quick[$service_type]['fl'])) ) ) {
    // Direct link.
    // We add it via template.php
    //gv_misc_loadTrackingHandlerForDirectLinks();
    return $trackingUrl = '<a id="oid' . $nid . 'xxx' . $count_id . '" title="' . $provider_data_quick['name'] . '" href="' . (strpos($provider_data_quick['i_web'], '://') ? $provider_data_quick['i_web'] : 'http://' . $provider_data_quick['i_web']) . '" target = "_blank"' . ($a_attr ? ' ' . $a_attr['key'] . '="' . $a_attr['value'] . '"' : '' /*' rel="nofollow"'*/) . ' rel="nofollow" class="' . ($a_class ? $a_class . ' direct-link' : 'direct-link') . '">' . $title_or_wrapped_object . '</a>';
  }
  elseif ($subpath) {
    $subpath = str_replace('reviews/', '', $subpath);
  }
  else {
              if (!$provider_data_quick && $nid) {
                        static $all_data_quick;
                        if (!$all_data_quick) {
                          $all_data_quick = gv_misc_getProvidersDataQuick();
                        }
                        $provider_data_quick = $all_data_quick[$nid];
              }
              
              if (!empty($provider_data_quick['i_web_ts'])) {


                // ts = tracking_subpath
                $subpath = $provider_data_quick['i_web_ts'];
                //dpm('ts=' . $provider_data_quick['i_web_ts']);
              }
              else {

                  // v1
                  //$trackingUrl = l($title_or_wrapped_object, 'click', array('query' => array('p' => urlencode($target_name)), 'attributes' => array('rel' => 'nofollow', 'target' => '_blank')));


                  // v2
                  //$trackingUrl = l($title_or_wrapped_object, 'click' . $subpath, array('attributes' => array('rel' => 'nofollow', 'target' => '_blank')));

                  $subpath_stripped = FALSE;
                  //if (!$subpath) {
                    if ($nid) {
            //          $query = db_select('url_alias', 'a')
            //            ->fields('a', array('alias'));
            //          $query->condition('a.source', 'node/' . $nid);
            //          $subpath = '/' . $query->execute()->fetchField();
                      $subpath = gv_misc_getTrackingUrl_trackingSubpath_byNid($nid);
                      $subpath_stripped = TRUE;
                      //dpm('sub in nid ' . $subpath);

                      // Update providers quick data field and the static variable.
                      $provider_data_quick = unserialize(gv_misc_fieldRead_valueById_single('p_data_quick', $nid));
                      //dpm($provider_data_quick);
                      $provider_data_quick['i_web_ts'] = $subpath;
                      gv_misc_fieldSave('p_data_quick', $nid, serialize($provider_data_quick));
                      // Reset only a current provider data.
                      gv_misc_getProvidersDataQuick('all', FALSE, FALSE, $nid);

                    }
                    else {
                      $subpath = $_SERVER['REDIRECT_URL'];
                    }
                  //}

                  // Make a path looks like /go/nextiva
                  if (!$subpath_stripped && $subpath) {
                    $subpath = str_replace('reviews/', '', $subpath);
                  }
              }
  }
  
  if ($subpath) {
    if ($service_type) {
      // Temporarily redirect pbx to bu
      if ($service_type == 'pbx') {
        $service_type = 'bu';
      }
      $subpath .= '/' . $service_type;
    }
    return '<a ' . ($a_title ? 'title="' . $a_title . '" ' : ''). 'href="/go' . $subpath . '" target = "_blank"' . ($a_attr ? ' ' . $a_attr['key'] . '="' . $a_attr['value'] . '"' : ' rel="nofollow"') . ($a_class ? ' class="' . $a_class . '"' : '') . '>' . $title_or_wrapped_object . '</a>';
  }
  else {
    return NULL;
  }
}


/**
 * Track a click.
 */
function gv_misc_trackClick_ajax() {
  
  $status = TRUE;
  $output = '';
  
  $post = array();
  foreach ($_POST as $key => $value) {
    $post[$key] = check_plain(strip_tags($value));
  }
  
  if (!empty($post['type'])/* && !empty($post['url'])*/) {
    
      global $user;
      $data = NULL;
      $data = serialize(array(
        'server' => print_r($_SERVER, true),
        'referer' => @$_SESSION['gv_current_http_referer'],
        'click_page' => $post['click_page'],
        //'user' => array('name' => $user->name, 'hostname' => $user->hostname),
      ));
//      $data = serialize(array(
//        'referer' => @$_SESSION['gv_current_http_referer'],
//        'click_page' => $post['click_page'],
//        'user' => array('name' => $user->name, 'hostname' => $user->hostname),
//      ));
      
      
      $db_object = array(
          'object_id' => str_replace('oid', '', preg_replace('/.*oid(.*)xxx.*/s', '$1', $post['oid'])), //str_replace('oid', '', $post['oid']),
          'type' => $post['type'],
          'object_name' => $post['title'],
          'url' => @$post['url'],
          'timestamp' => time(),
          
          'referer' => @$_SESSION['gv_current_http_referer'],
          'click_page' => $post['click_page'],
          'uname' => isset($user->name) ? $user->name : '',
          'ip' => $user->hostname,
            
          'data' => $data,
        );

      db_insert('gv_track_links')
        ->fields($db_object)
        ->execute();

  }
  
  drupal_json_output(array('status' => $status/*, 'data' => $db_object*/));
}


/**
 * Redirect to an external url and track the data without params.
 */
function gv_misc_goToExternalUrl2() {

  $args = arg();
  
  //dpm($args);
  
  //if ($args[1] == 'reviews' && !empty($args[2])) {
  if (!empty($args[1])) {
    
    $query = db_select('url_alias', 'a')
        ->fields('a', array('source'));
    //$query->condition('a.alias', $args[1] .  '/' . $args[2]);
    $query->condition('a.alias', 'reviews/' . $args[1]);
    $node_id = str_replace('node/', '', $query->execute()->fetchField());

    $query = db_select('field_data_field_p_data_quick', 'pd');
    $query->condition('pd.entity_id', $node_id);
    $query->fields('pd', array('entity_id', 'field_p_data_quick_value'));
    $p_data_quick = $query->execute()->fetchObject();

    //dpm($p_data_quick);
    
    if ($p_data_quick) {
      
      $object_id = $p_data_quick->entity_id;
      $p_data_quick = unserialize($p_data_quick->field_p_data_quick_value);
      $object_name = $p_data_quick['name'];
      
      
      //$url = (strpos($p_data_quick['i_web'], '://') ? $p_data_quick['i_web'] : 'http://' . $p_data_quick['i_web']); //$p_data_quick['i_web'];
      
      if (!empty($args[2]) && !empty($p_data_quick[$args[2]]['s-url'])) {
        $url = $p_data_quick[$args[2]]['s-url'];
      }
      else {
        $url = $p_data_quick['i_web'];
      }
      
      $url = strpos($url, '://') ? $url : 'http://' . $url; 
    }
    
    
    if (@$url) {
          
            global $user;
            $data = NULL;
//            $data = serialize(array(
//              'referer' => @$_SESSION['gv_current_http_referer'],
//              'click_on_page' => @$_SERVER['HTTP_REFERER'],
//              'user' => array('name' => $user->name, 'hostname' => $user->hostname),
//            ));

            db_insert('gv_track_links')
              ->fields(array(
                'object_id' => $object_id,
                'type' => 'provider_link',
                'object_name' => $object_name,
                'url' => $url,
                'timestamp' => time(),
                  
                'referer' => @$_SESSION['gv_current_http_referer'],
                'click_page' => @$_SERVER['HTTP_REFERER'],
                'uname' => isset($user->name) ? $user->name : '',
                'ip' => $user->hostname,
          
                'data' => $data,
              ))
              ->execute();
            
            drupal_goto($url, array('external' => TRUE), 301);
        }
     
    
  }
  
  drupal_goto(@$_SERVER['HTTP_REFERER']);
  
  return '';
}


/**
 * Loads js handler for tracking direct links via ajax.
 */
function gv_misc_loadTrackingHandlerForDirectLinks() {
  static $js_already_loaded;

  if (!$js_already_loaded) {
    $js_already_loaded = TRUE;

    $path_to_custom_js = drupal_get_path('module', 'gv_misc') . '/js/';
    drupal_add_js($path_to_custom_js . 'gv_track_direct_link.js');
  }
}


/**
 * Redirect to an external url and track the data.
 * 
 *  Old version, left for old existing links.
 */
function gv_misc_goToExternalUrl() {
  
  //dpm($_SESSION['gv_current_http_referer']);
  //dpm($_GET);
  
  // Save a tracked redirection.
  if (!empty($_GET['t']) && !empty($_GET['n'])/* && !empty($_GET['url'])*/) {
    
    switch ($_GET['t']) {
      
      case 'provider':
    
        // Preserve a compatibility with the old tracking link... goto?t=provider&n=nextiva
        /// but redirect to the new tracking url... /go/nextiva
        
        $query = db_select('field_data_field_p_name', 'pn')
          ->fields('pn', array('entity_id'));
        $query->condition('pn.bundle', 'provider');
        $query->condition('pn.field_p_name_value', urldecode($_GET['n']));
        $node_id = $query->execute()->fetchField();
        
        $query = db_select('url_alias', 'a')
          ->fields('a', array('alias'));
        //$query->condition('a.alias', $args[1] .  '/' . $args[2]);
        $query->condition('a.source', 'node/' . $node_id);
        $path = 'go/' . str_replace('reviews/', '', $query->execute()->fetchField());

        if ($path) {
          drupal_goto($path, array(), 301);
        }
        else {
          drupal_goto(@$_SERVER['HTTP_REFERER']);
        }
        
        
        /*
        $query = db_select('field_data_field_p_name', 'pn');
          //->fields('pn', array(''))
        $query->condition('pn.bundle', 'provider');
        $query->condition('pn.field_p_name_value', urldecode($_GET['n']));
        $query->leftJoin('field_data_field_p_data_quick', 'pd', 'pd.entity_id = pn.entity_id');
        $query->fields('pd', array('entity_id', 'field_p_data_quick_value'));
        $p_data_quick = $query->execute()->fetchObject();
        
        if ($p_data_quick) {
          $object_id = $p_data_quick->entity_id;
          $p_data_quick = unserialize($p_data_quick->field_p_data_quick_value);
          $url = $p_data_quick['i_web'];
        }
    
        if (@$url) {
          
            global $user;
            $data = NULL;
//            $data = serialize(array(
//              'referer' => @$_SESSION['gv_current_http_referer'],
//              'click_on_page' => @$_SERVER['HTTP_REFERER'],
//              'user' => array('name' => $user->name, 'hostname' => $user->hostname),
//            ));

            db_insert('gv_track_links')
              ->fields(array(
                'object_id' => $object_id,
                'type' => 'provider_link',
                'object_name' => urldecode($_GET['n']),
                'url' => $url,
                'timestamp' => time(),
                  
                'referer' => @$_SESSION['gv_current_http_referer'],
                'click_page' => @$_SERVER['HTTP_REFERER'],
                'uname' => isset($user->name) ? $user->name : '',
                'ip' => $user->hostname,
          
                'data' => $data,
              ))
              ->execute();
            
            drupal_goto($url, array('external' => TRUE));
        }
        */
        
        break; // End of case 'provider':
    }
  }
  
  drupal_goto(@$_SERVER['HTTP_REFERER']);
  
  return '';
}


/**
 * Flush the cache and redirect to the Home page.
 */
function gv_misc_flushCache() {
  
  //drupal_flush_all_caches();
  
  // Not so hard reset...

  // The code from function views_invalidate_cache()
  // Clear the views cache.
  cache_clear_all('*', 'cache_views', TRUE);
  // Clear the page and block cache.
  cache_clear_all();
  // Allow modules to respond to the Views cache being cleared.
  module_invoke_all('views_invalidate_cache');
  
  cache_clear_all('*', 'cache_views_data', TRUE);
  
  // Function from the module boost.
  boost_flush_caches();
  
  variable_del('gv_allReviewsAmount');
  
  drupal_set_message('Cache is flushed.', 'warning');
  drupal_goto('');
}


/**
 * Set a current user external referer.
 */
function gv_misc_setReferer_ajax() {
  
  //$output = '';
  
//  $post = array();
//  foreach ($_POST as $key => $value) {
//    $post[$key] = check_plain(strip_tags($value));
//  }
//  
//  
  if (!empty($_POST['referer'])) {
    $post['referer'] = $_POST['referer'];
  }
  elseif (!empty($_GET['referer'])) {
    $post['referer'] = $_GET['referer'];
  }
  
  if (!empty($post['referer'])) {
    
  
        $post['referer'] = check_plain(strip_tags($post['referer']));

        //if (!empty($_POST['referer']) && strpos($_POST['referer'], 'http://getvoip.com') === FALSE) {
        if (!empty($post['referer']) && strpos($post['referer'], 'http://getvoip.com') === FALSE) {

          $_SESSION['gv_current_http_referer'] = $post['referer'];
          //$_SESSION['gv_current_http_referer'] = $_POST['referer'];
        }
  
  }
  
  drupal_json_output(array('status' => TRUE, /*'data' => $output*/));
}



/**
 * Identify the type of the node.
 * Used in theme_pager() in template.php
 */
function gv_misc_identifyNodeType($nid) {
    
  $query = db_select('node', 'n')  
        ->fields('n', array('type'));
  $query->condition('n.nid', $nid);
  $node_type = $query->execute()->fetchField();

  return $node_type;
}

    
/**
 * Custom page not found 404.
 * Fix for a standard drupal_not_found
 */
function gv_misc_drupal_not_found() {
  
  
  
  // Disable boost caching for custom gv page not found pages.
  // First part, initialization.
  // See the second part at gv_misc_process_html(),
  // where $_boost variable  will be corrected to prevent the current page caching.
  global $gv_page_not_found;
  $gv_page_not_found = TRUE;
  
  
  
  
  
  
  // Emit the correct charset HTTP header, but not if the page callback
  // result is NULL, since that likely indicates that it printed something
  // in which case, no further headers may be sent, and not if code running
  // for this page request has already set the content type header.

  drupal_add_http_header('Content-Type', 'text/html; charset=utf-8');

  // Send appropriate HTTP-Header for browsers and search engines.
  global $language;
  drupal_add_http_header('Content-Language', $language->language);

  drupal_add_http_header('Status', '404 Not Found');

  
  watchdog('page not found (GV)', check_plain($_GET['q']), NULL, WATCHDOG_WARNING);

  
//  global $start_time, $user_name;
//  file_put_contents(DRUPAL_ROOT . '/tmp/gv_requests.log', date('m-d-Y H:i:s', $start_time) . ' ' . $_SERVER['REMOTE_ADDR']  . $user_name . ' * -> ' . $_SERVER['REQUEST_URI'] . ' {404 PAGE NOT FOUND}
//', FILE_APPEND | LOCK_EX);
  gv_misc_writeGvAccessLog('404');
  
  
  
  
  // Check for and return a fast 404 page if configured.
  drupal_fast_404();

  // Keep old path for reference, and to allow forms to redirect to it.
  if (!isset($_GET['destination'])) {
    $_GET['destination'] = $_GET['q'];
  }

  $path = drupal_get_normal_path(variable_get('site_404', ''));
  if ($path && $path != $_GET['q']) {
    // Custom 404 handler. Set the active item in case there are tabs to
    // display, or other dependencies on the path.
    menu_set_active_item($path);
    $return = menu_execute_active_handler($path, FALSE);
  }

  if (empty($return) || $return == MENU_NOT_FOUND || $return == MENU_ACCESS_DENIED) {
    // Standard 404 handler.
    ////drupal_set_title(t('Page not found'));
    ////$return = t('The requested page "@path" could not be found.', array('@path' => request_uri()));
    
    drupal_set_title('Page Not Found');
    /*
    $sitemap_body = cache_get('gv_sitemap_body');
    if (!$sitemap_body || empty($sitemap_body->data)) {
      $key = 'view-sitemap-page';
      $query = db_select('node', 'n');
      $query->join('field_data_field_preface_key', 'pk', "pk.entity_id = n.nid"); 
      $query->join('field_data_body', 'fb', "fb.entity_id = n.nid"); 
      $query->fields('fb', array('body_value'))
            ->condition('n.type', 'preface')
            ->condition('pk.field_preface_key_value', $key);
      $sitemap_body = $query->execute()->fetchField(); 

      // Remove preface text from a Sitemap body.
      if(preg_match('/.*(<table.*)/s', $sitemap_body, $matches)) {
        $sitemap_body = $matches[1];
      }

      cache_set('gv_sitemap_body', $sitemap_body);
    }
    else {
      $sitemap_body = $sitemap_body->data;
    }

    $page404_body = cache_get('gv_page404');
    if (!$page404_body || empty($page404_body->data)) {
      $key = 'page-not-found';
      $query = db_select('node', 'n');
      $query->join('field_data_field_preface_key', 'pk', "pk.entity_id = n.nid"); 
      $query->join('field_data_body', 'fb', "fb.entity_id = n.nid"); 
      $query->fields('fb', array('body_value'))
            ->condition('n.type', 'preface')
            ->condition('pk.field_preface_key_value', $key);
      $page404_body = $query->execute()->fetchField(); 

      cache_set('gv_page404', $page404_body);
    }
    else {
      $page404_body = $page404_body->data;
    }

    $return = '<div class="main-content page404"> 
      <div class="content page preface">' . $page404_body . '<div class="sitemap field-name-body">' . $sitemap_body . '</div>
        </div>
      </div>';
    */
    $return = gv_mics_page404CustomContent();
    
  }

  drupal_set_page_content($return);
  $page = element_info('page');
  print drupal_render_page($page);

  // Perform end-of-request tasks.
  drupal_page_footer();
}


/**
 * Return a breadcrumbs for a current page via main_menu.
 */
function gv_misc_getMenuTrail() {
  
  
  if(!$url_aliased = @$_SERVER['REDIRECT_URL']) {
    return FALSE;
  }
    
  //dpm('Target aliased url = ' . $url_aliased);
  
  $breadcrumbs = cache_get('gv_breadcrumbs_for_menu');
  //dpm($breadcrumbs);
  
  $breadcrumbs = !$breadcrumbs ? array() : $breadcrumbs->data;
  if (isset($breadcrumbs[$url_aliased])) {
    //dpm('breadcrumb is found in cache');
    return $breadcrumbs[$url_aliased];
  }
  
  // Search for the url in the menu and define a breadcrumb.
  $main_menu = NULL;
  
  // Check if the url is presented in the menu.
  if($main_menu_all_items = cache_get('gv_main_menu_all_items')) {
    $main_menu_all_items = $main_menu_all_items->data;
  }
  else {
    $main_menu = menu_build_tree('main-menu');
    foreach ($main_menu as $key_top => $value_top) {
      $main_menu_all_items[] = strpos($value_top['link']['href'], 'node/') !== FALSE ? $value_top['link']['href'] : '/' . $value_top['link']['href'];
      if (!empty($value_top['below'])) {
        foreach ($value_top['below'] as $key_below => $value_below) {
          $main_menu_all_items[] = strpos($value_below['link']['href'], 'node/') !== FALSE ? $value_below['link']['href'] : '/' . $value_below['link']['href'];
        }
      }
    }
    //dpm('Define gv_main_menu_all_items');
    cache_set('gv_main_menu_all_items', $main_menu_all_items);
  }
  
  //dpm($main_menu_all_items);
  
  $url_not_aliased = (arg(0) == 'node' ? 'node/' . arg(1) : NULL);
  if (!in_array($url_aliased, $main_menu_all_items) && !in_array($url_not_aliased, $main_menu_all_items)) {
    // Target url is not in the menu.
    //dpm('Target url is not in the menu... Exit');
    return FALSE;
  }
  
  
  //dpm('in the menu! Define breadcrumb...');
  if (!$main_menu) {
    $main_menu = menu_build_tree('main-menu');
  }
  //dpm($main_menu);
  
  
  
  $breadcrumb = '';
  
  
  
  
  //dpm($url_aliased);
  //dpm($url_not_aliased);
  
  foreach ($main_menu as $key_top => $value_top) {
    // Check top link.
    if ($value_top['link']['hidden']) {
      continue;
    }
    if ('/' . $value_top['link']['href'] == $url_aliased || $value_top['link']['href'] == $url_not_aliased) {
      //dpm('Found top url ' . $value_top['link']['link_title']);
      $breadcrumb = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), $value_top['link']['link_title'] )));
    }
    else {
      // Check nested links.
      if (!empty($value_top['below'])) {
        foreach ($value_top['below'] as $key_below => $value_below) {
          if ($value_below['link']['hidden']) {
            continue;
          }
          if ('/' . $value_below['link']['href'] == $url_aliased || $value_below['link']['href'] == $url_not_aliased) {
            //dpm('Found below url ' . $value_below['link']['link_title'] . ' --- ' . $key_top . ' --- ' . $key_below);
            $breadcrumb = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), l($value_top['link']['link_title'], $value_top['link']['href']), $value_below['link']['link_title'] )));
          }
        }
      }
    }
    
  }

  $breadcrumbs[$url_aliased] = $breadcrumb;
  cache_set('gv_breadcrumbs_for_menu', $breadcrumbs);
  
  return $breadcrumb;
}

/**
 * Loads an additional user_data for articles, etc.
 *
 * @param $uid
 *   A user account uid.
 * @return
 *   The user's generated object with additional data.
 */
function gv_misc_loadUserExtendedData($uid) {
  
  $cid = 'gv_userExtendedData_all';
  $cache = cache_get($cid, 'cache');
  
  if ($cache && !empty($cache->data) && !empty($cache->data[$uid]) && $cache->expire > time()) {
    $out = $cache->data[$uid];
  }
  else 
  {
    $userExtendedData_all = $cache ? $cache->data : array();
    
    $query = db_select('realname', 'rn')
      ->fields('rn', array('realname'))
      ->fields('g', array('field_u_gplus_profile_value'));
    $query->condition('uid', $uid);
    $query->leftJoin('field_data_field_u_gplus_profile', 'g', 'g.entity_id = ' . $uid . '');
    $userExtendedData = $query->execute()->fetchObject();
    
    $userExtendedData_all[$uid] = $userExtendedData;

    cache_set($cid, $userExtendedData_all, 'cache', strtotime('+31 day'));
    $out = $userExtendedData_all[$uid];
  }
    
  return $out;
}


/**
 * Implements hook_taxonomy_term_delete().
 * Removes tag's references and its twin tag from a main tag voc references from nodes.
 */
function gv_misc_taxonomy_term_delete($current_term) {

  //dpm($current_term);
  // Define fields names.
  $main_field_name = 'topics';
  
  switch ($current_term->vocabulary_machine_name) {
    
    case 'topics':
      $target_field_name = 'topics';
      break;
    
    case 'blog_tags':
      $target_field_name = 'tags_blog';
      $node_type = 'blog_post';
      break;
    case 'news_tags':
      $target_field_name = 'tags_news';
      $node_type = 'news_post';
      break;
    case 'articles_tags':
      $target_field_name = 'tags_articles';
      $node_type = 'article';
      break;
    
    default:
      return;
  }

  
  if ($current_term->vid != 2) { // vid for 'topics' = 2
    
    // Search for the corresponding main voc term tid.
    $all_vocs_terms = taxonomy_get_term_by_name($current_term->name);
    $found = FALSE;
    $main_term = FALSE;
    $main_vid = 2; // 2 - main voc - Topics tags.
    foreach ($all_vocs_terms as $term) {

      if ($term->vid == $main_vid) {
        // Term exists in the Topics vocabulary.
        $main_term = $term;
        $found = TRUE;
        break;
      }
    }


    if ($main_term) {
      // Get nodes list of the specific type that have this field value.
      $query = db_select('field_data_field_' . $target_field_name, 'f');
      $query->fields('f', array('entity_id'))
        ->condition('f.field_' . $target_field_name . '_tid', $current_term->tid)
        ->condition('f.entity_type', 'node');
      $nids = $query->execute()->fetchAll(PDO::FETCH_COLUMN);

      if (!empty($nids)) {
        // Delete corresponding main tag from fields.
        gv_misc_fieldDelete($main_field_name, NULL, 'field_' . $main_field_name . '_tid', $main_term->tid, $nids);

        // Delete corresponding main tag from taxonomy_index.
        db_delete('taxonomy_index')
          ->condition('tid', $main_term->tid)
          ->condition('nid', $nids, 'IN')
          ->execute();
      }
    }

  }
  // Delete current deleting term from nodes' fields.
  gv_misc_fieldDelete($target_field_name, NULL, 'field_' . $target_field_name . '_tid', $current_term->tid);
  
  // Clear all caches.
  // Commented here, because used at function gv_pages_editTagsPage_formSubmit($form, &$form_state)
  //drupal_flush_all_caches();
}


/**
 * Saves or updates a field.
 */
function gv_misc_fieldDelete($field_name, $entity_id, $target_field_name = NULL, $target_field_id = NULL, $entity_ids = array()) {
  
  if (!$entity_id && $target_field_id) {
    if (empty($entity_ids)) {
      // Delete all nodes fields with set value field.
      db_delete('field_data_field_' . $field_name)
        ->condition($target_field_name, $target_field_id)
        ->execute();
      db_delete('field_revision_field_' . $field_name)
        ->condition($target_field_name, $target_field_id)
        ->execute();
    }
    else {
      // Delete only specific nodes fields with set value field.
      db_delete('field_data_field_' . $field_name)
        ->condition($target_field_name, $target_field_id)
        ->condition('entity_id', $entity_ids, 'IN')
        ->execute();
      db_delete('field_revision_field_' . $field_name)
        ->condition($target_field_name, $target_field_id)
        ->condition('entity_id', $entity_ids, 'IN')
        ->execute();
    }
      
  }
  else {
    db_delete('field_data_field_' . $field_name)
      ->condition('entity_id', $entity_id)
      ->execute();
    db_delete('field_revision_field_' . $field_name)
      ->condition('entity_id', $entity_id)
      ->execute();
  }
  
  
  field_cache_clear();
}


/**
 * Read  a field value by entity_id.
 */
function gv_misc_fieldRead_valueById_single($field_name, $entity_id, $entity_type = 'node', $bundle = NULL) {
  $query = db_select('field_data_field_' . $field_name, 'f');
  $query->fields('f', array('field_' . $field_name . '_value'))
        ->condition('f.entity_id', $entity_id)
        ->condition('f.entity_type', $entity_type);
  if ($bundle) {
    $query->condition('f.bundle', $bundle);
  }
  
  $result = $query->execute()->fetchField();
  return $result;
}


/**
 * Saves or updates a field.
 */
function gv_misc_fieldSave($field_name, $entity_id, $data, $entity_type = 'node', $bundle = NULL) {
  
  if(!$bundle) {
    $bundle = $entity_type;
  }
  
  $query = db_select('field_data_field_' . $field_name, 'f');
  $query->fields('f', array('field_' . $field_name . '_value'))
        ->condition('f.entity_id', $entity_id)
        ->condition('f.entity_type', $entity_type);
  $result = $query->execute(); //->fetchField();
  
  if ($result->rowCount()) {
    // Need update an existing field.
    db_update('field_data_field_' . $field_name)
      ->fields(array(
        //'entity_id' => $entity_id,
        //'delta' => 0,  
        //'revision_id'=> $entity_id,    
        'field_' . $field_name . '_value' => $data,
      ))
      ->condition('entity_id', $entity_id)
      ->condition('entity_type', $entity_type)
      ->execute();

    db_update('field_revision_field_' . $field_name)
      ->fields(array(
        //'entity_id' => $entity_id,
        //'delta' => 0,  
        //'revision_id'=> $entity_id,     
        'field_' . $field_name . '_value' => $data,
      ))
      ->condition('entity_id', $entity_id)
      ->condition('entity_type', $entity_type)
      ->execute();
  }
  else {
    // Need create a new field.
    db_insert('field_data_field_' . $field_name) 
      ->fields(array(
        'entity_type'=> $entity_type,
        'bundle'=> $bundle,
        'deleted'=> 0,                
        'entity_id' => $entity_id,
        'delta' => 0,  
        'revision_id'=> $entity_id,
        'language'=> 'und',  
        'field_' . $field_name . '_value' => $data,
      ))
      ->execute();

    db_insert('field_revision_field_' . $field_name)
      ->fields(array(
        'entity_type'=> $entity_type,
        'bundle'=> $bundle,
        'deleted'=> 0,                
        'entity_id' => $entity_id,
        'delta' => 0,  
        'revision_id'=> $entity_id,
        'language'=> 'und',  
        'field_' . $field_name . '_value' => $data,
      ))
      ->execute();
  }

  field_cache_clear();
}


/**
 * Saves or updates a field.
 */
function gv_misc_fieldBodyUpdate($entity_id, $data, $entity_type = 'node', $bundle = NULL) {
  
  /*if(!$bundle) {
    $bundle = $entity_type;
  }
  */
  $query = db_select('field_data_body', 'f');
  $query->fields('f', array('body_value'))
        ->condition('f.entity_id', $entity_id)
        ->condition('f.entity_type', $entity_type);
  $result = $query->execute(); //->fetchField();
  
  if ($result->rowCount()) {
    // Need update an existing field.
    db_update('field_data_body')
      ->fields(array(
        //'entity_id' => $entity_id,
        //'delta' => 0,  
        //'revision_id'=> $entity_id,    
        'body_value' => $data,
      ))
      ->condition('entity_id', $entity_id)
      ->condition('entity_type', $entity_type)
      ->execute();

    db_update('field_revision_body')
      ->fields(array(
        //'entity_id' => $entity_id,
        //'delta' => 0,  
        //'revision_id'=> $entity_id,     
        'body_value' => $data,
      ))
      ->condition('entity_id', $entity_id)
      ->condition('entity_type', $entity_type)
      ->execute();
  }
  
  field_cache_clear();
}


/**
 * Prevent Enter button on Content_GetVoIP page while inline editing fields.
 */
function gv_misc_preventEnterOnEditField() {
  $path_to_custom_js = drupal_get_path('module', 'gv_misc') . '/js/';
  drupal_add_js($path_to_custom_js . 'gv_preventEnterOnEditField.js');
  
}


/**
 * Hook menu alter.
 *
 */
function gv_misc_menu_alter(&$items) {
  // Example - disable the page at node/add
  //$items['node/add']['access callback'] = FALSE;
  
  // Remove all Tagadelic urls.
  unset($items['tagadelic'], $items['tagadelic/list/%tagadelic_vocs'], $items['tagadelic/chunk/%tagadelic_vocs']);
  
  
   //unset($items['taxonomy/term/%taxonomy_term']);
  unset($items['taxonomy/term/%taxonomy_term/view']);
  unset($items['taxonomy/term/%taxonomy_term/feed']); // If you want to hide the feed as well.
  //unset($items['taxonomy/term/%views_arg']);
  
  /*
  global $user;
  if ($user->uid == 1) {
    $keys = array_keys($items);
    foreach($keys as $key) {
      if (strpos($key, 'taxonomy/term/') !== FALSE) {
        $keys2[] = $key;
      }
    }
    dpm($keys2);
    //exit();
  }
  */
  
}


/**
 * Set (if bigger then 12 hours period) and returns a last updated time stamp
 *
 */
function gv_misc_lastUpdatedStamp($min_hours = 24, $relative_path = NULL) {

  if (!$relative_path) {
    $relative_path = $_SERVER['REQUEST_URI'];
    if ($relative_path == '/home') {
      $relative_path = '/';
    }
  }
  
  $query = db_select('gv_last_updated', 'lu')
      ->fields('lu', array('timestamp'));
  $query->condition('lu.path', $relative_path);
  $last_updated = $query->execute()->fetchfield();
  
  $current_time = time();
  
  if (!$last_updated || ($current_time - $last_updated) > $min_hours * 3600 ) {
    // Update or insert new timestamp
    if ($last_updated) {
      $result = db_update('gv_last_updated')
        ->fields(array(
          'timestamp' => $current_time,
        ))
        ->condition('path', $relative_path)
        ->execute();
    }
    else {
      $result = db_insert('gv_last_updated')
        ->fields(array(
          'path' => $relative_path,
          'timestamp' => $current_time,
        ))
        ->execute();
    }
    return '<div class="ts">' . t('Last Updated: ') . date('F d, Y \a\t g:ia', $current_time) . '</div>';
  }
  else {
    return '<div class="ts">' . t('Last Updated: ') . date('F d, Y \a\t g:ia', $last_updated) . '</div>';
  }
}


/**
 * Get prefaces main section rendered.
 *
 */
function gv_misc_getPrefaceMainSection($key) {
  $node = gv_misc_getPrefaceByKey($key);
  $node->title_no_link = TRUE;
  $node_view = node_view($node, 'full');
  
  return render($node_view/*['body']*/);
}


/**
 * Get prefaces bottom section rendered.
 *
 */
function gv_misc_getPrefaceBottomSection($key) {
  $node = gv_misc_getPrefaceByKey($key);
  $node_view = node_view($node, 'full');

  return render($node_view['field_preface_bottom']);
}


/**
 * Get real name.
 *
 */
function gv_misc_getUserRealName($uid) {
  
  static $realnames;
  if (empty($realnames[$uid])) {
    $query = db_select('realname', 'rn')
        ->fields('rn', array('realname'));
    $query->condition('rn.uid', $uid);
    $realname = $query->execute()->fetchfield();
    $realnames[$uid] = $realname;
  }
  return $realnames[$uid];
}


/**
 * Returns initial (landing) node for a given final request a quote page.
 */
function gv_misc_getInitialQuotePageNode($finalQuotePage_title) {
  
  $title = trim(str_replace(' Final', '', $finalQuotePage_title));
  $query = db_select('node', 'n')
      ->fields('n', array('nid'));
  $query->condition('n.title', $title);
  $query->condition('n.type', 'quote');
  $nid = $query->execute()->fetchfield();
  
  return node_load($nid);
}


/**
 * Renders metatags array with a new order of tags: description, keywords, the rest...
 *
 */
/*
function gv_misc_renderMetatags_newOrder(&$metatags) {
  
  echo render($metatags['description']);
  echo render($metatags['keywords']);
  // The rest...
  echo render($metatags);
}
*/


/**
 * Process variables for search-result.tpl.php.
 *
 * The $variables array contains the following arguments:
 * - $result
 * - $module
 *
 * @see search-result.tpl.php
 */
function gv_misc_preprocess_search_result(&$variables) {
  
  // Original code.
  /*
  global $language;
  
  $result = $variables['result'];
  $variables['url'] = check_url($result['link']);
  $variables['title'] = check_plain($result['title']);
  if (isset($result['language']) && $result['language'] != $language->language && $result['language'] != LANGUAGE_NONE) {
    $variables['title_attributes_array']['xml:lang'] = $result['language'];
    $variables['content_attributes_array']['xml:lang'] = $result['language'];
  }

  $info = array();
  if (!empty($result['module'])) {
    $info['module'] = check_plain($result['module']);
  }
  if (!empty($result['user'])) {
    $info['user'] = $result['user'];
  }
  if (!empty($result['date'])) {
    //$info['date'] = format_date($result['date'], 'short');
    // a4s changes
    //$info['date'] = date('F d, Y \a\t g:ia', $result['date']);
    //$info['date'] = date('F d, Y \a\t g:ia', $result['node']->created);
  }
  if (isset($result['extra']) && is_array($result['extra'])) {
    $info = array_merge($info, $result['extra']);
  }
  // Check for existence. User search does not include snippets.
  $variables['snippet'] = isset($result['snippet']) ? $result['snippet'] : '';
  // Provide separated and grouped meta information..
  $variables['info_split'] = $info;
  $variables['info'] = implode(' - ', $info);
  $variables['theme_hook_suggestions'][] = 'search_result__' . $variables['module'];
  */
  
  
  // a4s changes
  $result = $variables['result'];
  if (!empty($result['date'])) {
    $info = array();
    //$info['date'] = format_date($result['date'], 'short');
    //$info['date'] = date('F d, Y \a\t g:ia', $result['date']);
    $info['date'] = date('F d, Y \a\t g:ia', $result['node']->created);
    
    if (isset($result['extra']) && is_array($result['extra'])) {
      $info = array_merge($info, $result['extra']);
    }
    $variables['info_split'] = $info;
    $variables['info'] = implode(' - ', $info);
  }
}



/**
 * Implements hook_ranking() for Search ranking.
 */
function gv_misc_ranking() {
 // Add relevance based on creation or changed date.
  if ($node_cron_last = variable_get('node_cron_last', 0)) {
    $ranking['recent_created'] = array(
      'title' => t('Recently posted (created)'),
      // Exponential decay with half-life of 6 months, starting at last indexed node
      'score' => 'POW(2.0, (n.created - :node_cron_last) * 6.43e-8)',
      'arguments' => array(':node_cron_last' => $node_cron_last),
    );
  }
  return $ranking;
}


/**
 * Push field tags (topics) to metatags in the Head.
 */
function gv_misc_pushTagsToMetatags($name, $value, $weight = 'NA') {
  switch ($name) {
    case 'keywords':
    case 'news_keywords':
      $t = '';
      $tags = element_children($value);
      foreach ($tags as $tag) {
        $t .= $t ? ', ' . $value[$tag]['#title'] : $value[$tag]['#title'];
      }
      if ($t) {
        gv_misc_addMetatag($name, $t, NULL, $weight);
      }
      break;
  }
}


/**
 * Allow modules to define namespaces for RDF mappings.
 *
 * Many common namespace prefixes are defined in rdf_rdf_namespaces(). However,
 * if a module implements hook_rdf_mapping() and uses a prefix that is not
 * defined in rdf_rdf_namespaces(), this hook should be used to define the new
 * namespace prefix.
 *
 * @return
 *   An associative array of namespaces where the key is the namespace prefix
 *   and the value is the namespace URI.
 *
 * @ingroup rdf
 */
// a4s Seems it didn't work out...
function gv_misc_rdf_namespaces() {
  return array(
    'xmlns:addthis'  => 'http://www.addthis.com/help/api-spec',
    'xmlns:g'  => 'http://base.google.com/ns/1.0',
  );
}


/**
 * Implements hook_TYPE_alter().
 * 
 * Specifically hook_html_head_alter().
 */
function gv_misc_html_head_alter(&$object) {
  //dpm($object);
  if (isset($object['rdf_node_comment_count'])) {
    unset($object['rdf_node_comment_count']['#attributes']['datatype']);
  }
}


/**
 * Implements hook_views_api().
 *
 * @return array
 *   Views api definition.
 */
function gv_misc_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'gv_misc') . '/inc',
  );
} 


/**
 * Form with a fieldset of Add content section for Admin Content GetVoIP page (by Views).
 */
function gv_misc_AddContentSection_form() {
  
  global $user;
  
  $types = node_type_get_types();
  //dpm($types);
  // Hide some content tupes if not a root.
  //dpm($user);
  if ($user->uid != 1) {
    unset($types['admin_page'], $types['preface'], $types['quote'], $types['webform']);
  }
  //if (in_array('root', $user->roles)) {
  if (in_array('Writer', $user->roles) && !in_array('administrator', $user->roles)) {
    $types_to_show = array('blog_post', 'article', 'provider', 'phone');
    foreach ($types as $type => $value) {
      if (!in_array($type, $types_to_show)) {
        unset($types[$type]);
      }
    }
  }
  
  $options = array('' => '- Select a content type -');
  foreach ($types as $type => $value) {
    $options[str_replace('_', '-', $type)] = $value->name;
  }
  
  $form['add_content'] = array(
    '#type' => 'fieldset',
    '#title' => t('Add a new content'),
    '#collapsible' => TRUE,
  );
  $form['add_content']['select_type'] = array(
    '#type' => 'select',
    //'#title' => 'Select content type',
    '#options' => $options,
    '#attributes' => array('id' => 'select_type',  'onChange' => "top.location.href='http://getvoip.com/node/add/" . "' + document.getElementById('select_type').options[document.getElementById('select_type').selectedIndex].value"),
  );
  
  return $form;
}


/**
 * Get a picture from a remote server.
 */
function gv_misc_curl_file_from_remote_site_likeBrowser($url, $file_local_abs = NULL, $create_subdirs = FALSE)
{
	
    $curl = curl_init();

    // Setup headers - I used the same headers from Firefox version 2.0.0.6
    // below was split up because php.net said the line was too long. :/
    $header[0] = "Accept: text/xml,application/xml,application/xhtml+xml,";
    $header[0] .= "text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5";
    $header[] = "Cache-Control: max-age=0";
    $header[] = "Connection: keep-alive";
    $header[] = "Keep-Alive: 300";
    $header[] = "Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7";
    $header[] = "Accept-Language: en-us,en;q=0.5";
    $header[] = "Pragma: ";
    // browsers keep this blank.

    $referers = array("google.com", "yahoo.com", "msn.com", "ask.com", "live.com");
    $choice = array_rand($referers);
  	//if ($referer == "") 
    $referer = "http://www." . $referers[$choice] . "/";

    //$browsers = array("Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.3) Gecko/2008092510 Ubuntu/8.04 (hardy) Firefox/3.0.3", "Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1) Gecko/20060918 Firefox/2.0", "Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US; rv:1.9.0.3) Gecko/2008092417 Firefox/3.0.3", "Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; SLCC1; .NET CLR 2.0.50727; Media Center PC 5.0; .NET CLR 3.0.04506)");
    //$choice2 = array_rand($browsers);
    //$lines = file('/home/xxx/public_html/sites/all/modules/xxx/ua.txt');
    //$browser = trim($lines[$agentid]);

    curl_setopt($curl, CURLOPT_URL, $url);
    //curl_setopt($curl, CURLOPT_USERAGENT, $browser);
    curl_setopt($curl, CURLOPT_HTTPHEADER, $header);
    curl_setopt($curl, CURLOPT_REFERER, $referer);
    //curl_setopt($curl, CURLOPT_AUTOREFERER, true);
    curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($curl, CURLOPT_TIMEOUT, 300);
    curl_setopt($curl, CURLOPT_MAXREDIRS, 7);
    curl_setopt($curl, CURLOPT_FOLLOWLOCATION, true);

    $data = curl_exec($curl);

    if ($data === false) {
      $data = curl_error($curl);
      // close the connection
      curl_close($curl);
      return $data;
    }

    // close the connection
    curl_close($curl);

    // write content to a file
    if ($file_local_abs) {
//      global $user;
//      if ($user->uid != 1) 
//      {
      if (!$create_subdirs) {
        file_put_contents($file_local_abs, $data);
      }
      else {
        gv_misc_file_put_contents_createAllSubdirs($file_local_abs, $data);
      }
    }

    return null; //OK
}


/**
 * Tries to save the file with creating all subdirs if they don't exist.
 */
function gv_misc_file_put_contents_createAllSubdirs($file_local_abs, $data) {
  
  $file_parts = explode('/', ltrim($file_local_abs, '/'));
  unset($file_parts[count($file_parts) - 1]);
  
  $current_path = NULL;
  foreach ($file_parts as $file_part) {
    $current_path .= '/' . $file_part;
    if (!file_exists($current_path)) {
      //mkdir ( string $pathname [, int $mode = 0777 [, bool $recursive = false [, resource $context ]]] )
      mkdir($current_path);
    }
  }
  file_put_contents($file_local_abs, $data);
}


/**
 * Return trimmed teaser with right size (cleared from images) and with separated a styled image, cutted off from the body.
 */
function gv_misc_getArticleTeaserData($target, $body_full_markup, $nid, $characters_num = NULL, $only_teaser = FALSE, $title = NULL) {
 
  $main_image = NULL;
  $main_image_html = NULL;
  $side_block_image_html = NULL;
  $home_teaser_image_html = NULL;
  $matches = NULL;
  $found_image = NULL;
  
  if (preg_match('/<img[^>]+>/i', $body_full_markup, $matches)) {
    //dpm($matches);
    $found_image = TRUE;
    preg_match_all('/(alt|title|src)="([^"]*)"/i',$matches[0], $matches);
    
    foreach ($matches[1] as $index => $key) {
      $main_image[$key] = $matches[2][$index];
    }
    // restoreoriginal url from beautify in case it was beautify.
    $main_image['src'] = gv_pages_convertBeautifulUrls('from_beautiful_to_originals', $main_image['src']);
    $body_full_markup = preg_replace('/<img[^>]+>/i', '', $body_full_markup);
    
    // Fix the problem when there remote image link used... We just ignore that image.
    if ( (strpos($main_image['src'], 'ttp:') || strpos($main_image['src'], 'ttps:')) && !strpos($main_image['src'], 'getvoip.com/')) {
      $main_image = NULL;
      $found_image = FALSE;
      drupal_set_message('One or more images you have put in the text is a remote link. Please upload images locally instead and resave the article.', 'error');
    }
  }
  elseif (preg_match('/\[video:.*v=(.*)\]/i', $body_full_markup, $matches)) {
    // [video: https://www.youtube.com/watch?v=H1vdPJzzzAY]
    $video_id = $matches[1];
    
    //if($main_image['src'] = gv_misc_getYoutubeVideoThumb($video_id)) {
    if($main_image['src'] = gv_misc_getVideoThumb($video_id)) {
      $found_image = TRUE;
    }
    $body_full_markup = preg_replace('|\[video:.*(http.*)\]|', '<a href="$1"> [Watch a video] </a>', $body_full_markup);
  }
  
  
  if ($found_image) {

    $main_image['src'] = urldecode($main_image['src']); //str_replace('%20', ' ', $main_image['src']);
    $main_image['src_beautify'] = gv_pages_convertBeautifulUrls('from_originals_to_beautiful', $main_image['src']);
    
    $stream_path = gv_misc_getStreamUriFromRelativePath($main_image['src']);
    $main_image['uri'] = $stream_path;
    
    $image_size = getimagesize(ltrim($main_image['src'], '/'));

    
    
    
    

    
    
    // Define and regenerate thumbnails.

    // Scale and cut.
    /*
    if ($image_size[0] / $image_size[1] > 1.5) {
      $main_image_html = theme('image_style', array( 'path' => $stream_path, 'style_name' => 'article_thumbnail_h'));
    }
    else {
      $main_image_html = theme('image_style', array( 'path' => $stream_path, 'style_name' => 'article_thumbnail_v'));
    }
    */
    // Scale only.
    if ($image_size[0] / $image_size[1] > 1) {
      $style_name = 'article_thumbnail_h';
      ////$main_image_html = theme('image_style', array( 'path' => $stream_path, 'style_name' => $style_name));
      //$main_image['src_themed'] = image_style_url($style_name, $stream_path);
      
      
    }
    else {
      $style_name = 'article_thumbnail_v';
      ////$main_image_html = theme('image_style', array( 'path' => $stream_path, 'style_name' => $style_name));
      //$main_image['src_themed'] = image_style_url($style_name, $stream_path);
      
    }
    
    $style_name_home_teasers_rotated = 'home_teasers_rotated';
    
    // Image for sharing.
    if ($image_size[0] / $image_size[1] > 1) {
      // Too wide. will not be cutted.
      $style_name_share = 'share_wide';
      //$main_image['src_themed'] = image_style_url('share_wide', $stream_path);
    }
    elseif ($image_size[1] / $image_size[0] < 1) {
      // Too tall. will not be cutted.
      $style_name_share = 'share_tall';
      //$main_image['src_themed'] = image_style_url('share_tall', $stream_path);
    }
    else {
      //Normal image, will not be cutted.
      $style_name_share = 'share';
      //$main_image['src_themed'] = image_style_url('share', $stream_path);
    }
    
    
    
    // Clear existing thumbnails image_cached files.
    $default_file_path = variable_get('file_' . file_default_scheme() . '_path', conf_path() . '/files');
    $styles_to_delete = array($style_name, $style_name_home_teasers_rotated, $style_name_share, 'block_thumb', 'article_thumbnail_side_block', 'article_thumbnail_home_teaser');
    foreach ($styles_to_delete as $style_to_delete) {
      $to_delete = str_replace($default_file_path, $default_file_path . '/styles/' . $style_to_delete . '/public' , $main_image['src']);
      $to_delete = ltrim($to_delete, '/');
      if (file_exists($to_delete)) {
        //dpm($to_delete);
        unlink($to_delete);
      } 
    }
    
    /*
    //$main_image_html = '<div class="thumb">' . theme('image_style', array( 'path' => $stream_path, 'style_name' => $style_name)) . '</div>';
    $main_image_html = image_style_url($style_name, $stream_path);
    gv_misc_createCachedImd ageIfNotExists($main_image_html);
    $main_image_html = '<div class="thumb"><img src="' . $main_image_html . '"' . (!$title ? '' : ' alt="' . $title . '" title="' . $title . '"') . ' /></div>';
    $main_image_html_beautify = gv_pages_convertBeautifulUrls('from_originals_to_beautiful', $main_image_html);
    */
    ///watchdog('###' . $stream_path, ', $_server -------> '. @$_SERVER['REQUEST_URI'] . ' / ' . @$_SERVER['REDIRECT_URL'], NULL, WATCHDOG_WARNING);
    
    gv_misc_regenerateStyledAndBeautifyImageHtml($stream_path, $style_name, $main_image_html, $main_image_html_beautify, $title);
    
    gv_misc_regenerateStyledAndBeautifyImageHtml($stream_path, $style_name_home_teasers_rotated, $home_teasers_rotated_image_html, $home_teasers_rotated_image_html_beautify, $title);
    
    $main_image['src_themed'] = $main_image['src_share'] = image_style_url($style_name_share, $stream_path);
    gv_misc_createCachedImageIfNotExists($main_image['src_themed']);
    $main_image['src_share_beautify'] = gv_pages_convertBeautifulUrls('from_originals_to_beautiful', $main_image['src_share']);
    
    /*
    $block_thumb_image_html = image_style_url('block_thumb', $stream_path);
    gv_misc_createCachedImageIfNotExists($block_thumb_image_html);
    $block_thumb_image_html = '<div class="thumb"><img src="' . $block_thumb_image_html . '"' . (!$title ? '' : ' alt="' . $title . '" title="' . $title . '"') . ' /></div>';
    $block_thumb_image_html_beautify = gv_pages_convertBeautifulUrls('from_originals_to_beautiful', $block_thumb_image_html);
    */
    gv_misc_regenerateStyledAndBeautifyImageHtml($stream_path, 'block_thumb', $block_thumb_image_html, $block_thumb_image_html_beautify, $title);
    
    /*
    //$side_block_image_html = '<div class="thumb">' . theme('image_style', array( 'path' => $stream_path, 'style_name' => 'article_thumbnail_side_block')) . '</div>';
    $side_block_image_html = image_style_url('article_thumbnail_side_block', $stream_path);
    gv_misc_createCachedImageIfNotExists($side_block_image_html);
    //---->WRONG -> fix--->$side_block_image_html = '<div class="thumb">' . $side_block_image_html . '</div>';
    $side_block_image_html_beautify = gv_pages_convertBeautifulUrls('from_originals_to_beautiful', $side_block_image_html);
    */
    gv_misc_regenerateStyledAndBeautifyImageHtml($stream_path, 'article_thumbnail_side_block', $side_block_image_html, $side_block_image_html_beautify, $title);
    
    /*
    //$home_teaser_image_html = '<div class="thumb">' . theme('image_style', array( 'path' => $stream_path, 'style_name' => 'article_thumbnail_home_teaser')) . '</div>';
    $home_teaser_image_html = image_style_url('article_thumbnail_home_teaser', $stream_path);
    gv_misc_createCachedImageIfNotExists($home_teaser_image_html);
    //---->WRONG -> fix--->$home_teaser_image_html = '<div class="thumb">' . $home_teaser_image_html . '</div>';
    $home_teaser_image_html_beautify = gv_pages_convertBeautifulUrls('from_originals_to_beautiful', $home_teaser_image_html);
    */
    gv_misc_regenerateStyledAndBeautifyImageHtml($stream_path, 'article_thumbnail_home_teaser', $home_teaser_image_html, $home_teaser_image_html_beautify, $title);      
    
  } // End of if ($found_image) {

  //dpm($body_full_markup);
  $body_full_markup = preg_replace('/\<style.*style\>/s', '', $body_full_markup);
  //dpm($body_full_markup);
  $teaser = strip_tags($body_full_markup);
  
  if (!$characters_num) {
    /*
    if ($main_image_html) {
      $characters_num = 130;
    }
    else {
      $characters_num = 250;
    }
    */
    $characters_num = 450;
  }
  
  
  $teaser_block_chars = 200;
  $teaser_block = trim(drupal_substr($teaser, 0, $teaser_block_chars));// . '...';
  $last_pos = strrpos($teaser_block, ' ');
  $teaser_block = substr_replace ($teaser_block, '...', $last_pos);
  
  $teaser_home_chars = 270;
  $teaser_home = trim(drupal_substr($teaser, 0, $teaser_home_chars));// . '...';
  $last_pos = strrpos($teaser_home, ' ');
  $teaser_home = substr_replace ($teaser_home, '...', $last_pos);
  
//  if ($found_image) {
//    $teaser_side_block_chars = 75;
//  }
//  else 
  {
    $teaser_side_block_chars = 145; //85;
  }
  $teaser_side_block = trim(drupal_substr($teaser, 0, $teaser_side_block_chars));
  $last_pos = strrpos($teaser_side_block, ' ');
  //$teaser_side_block = '<div class="teaser-content">' . substr_replace ($teaser_side_block, '...' . l('Read more', 'node/' . $nid, array('attributes' => array('class' => array('more')))), $last_pos) . '</div>';
  $teaser_side_block = '<div class="teaser-content">' . substr_replace ($teaser_side_block, '...', $last_pos) . '</div>';
  
  
  
  
  $read_more_html = l(t('Read More'), 'node/' . $nid, array('attributes' => array('class' => array('more'), 'rel' => 'nofollow')));
  
  
  
  // Rss teaser.
  $teaser_rss = trim(drupal_substr($teaser, 0, 400));
  $last_pos = strrpos($teaser_rss, ' ');
  $teaser_rss = substr_replace ($teaser_rss, '... ' . $read_more_html, $last_pos);
  $teaser_rss = @$main_image_html_beautify . $teaser_rss;
  // Clear attribute typeof="foaf:Image" from the img tag (which iss added by the core rdf module via hook_preprocess_image).
  $teaser_rss = preg_replace('|typeof="foaf:Image" |', '', $teaser_rss);
  // Convert relative links to absolute.
  $teaser_rss = preg_replace('|href="/|', 'href="http://getvoip.com/', $teaser_rss);
  // Restore a normal state of a YouTube url from a token.
  // [video: http://www.youtube.com/watch?v=SoMS77zE7iE]
  $teaser_rss =  preg_replace('|\[video:.*(http.*)\]|', '<a href="$1"> [Watch a video] </a>', $teaser_rss);
  $teaser_rss = check_plain(htmlspecialchars_decode($teaser_rss));
  
  
  
  // $teaser = text_summary($body_full_markup, 'full_html', $characters_num);
  $teaser = trim(drupal_substr($teaser, 0, $characters_num));
  // Replace the last word with ...
  // preg_match('/^.*\s(.*)$/i', trim(strip_tags($teaser)), $matches);
  // $last_pos = strrpos($teaser, $matches[1]);
  $last_pos = strrpos($teaser, ' ');
  
  // $teaser = substr_replace ($teaser, '...' . l(t('Read More'), 'node/' . $nid, array('attributes' => array('class' => array('more')))) , $last_pos, strlen($matches[1]));
  $teaser = substr_replace ($teaser, '... ' . $read_more_html, $last_pos);

  
  $teaser_with_image = @$main_image_html . $teaser;
  $teaser_with_image_beautify = @$main_image_html_beautify . $teaser;
  
  if ($only_teaser) {
    //return $teaser_with_image;
    return $teaser_with_image_beautify;
  }
  else {
    $out = array(
      'title' => $title,
        
      'teaser_only' => $teaser, 
      'teaser' => $teaser_with_image, 
      'teaser_beautify' => $teaser_with_image_beautify,
        
      'teaser_side_block' => $teaser_side_block, 
      'teaser_block' => $teaser_block, 
      
      'teaser_only_home' => $teaser_home,
      'teaser_home' => @$home_teaser_image_html . $teaser_home, // $main_image_html . $teaser_home, 
      'teaser_home_beautify' => @$home_teaser_image_html_beautify . $teaser_home, // $main_image_html_beautify . $teaser_home, 
        
      'main_image' => @$main_image,
        
      'teaser_main_image' => @$main_image_html, 
      'teaser_main_image_beautify' => @$main_image_html_beautify, 
        
      'main_image_html' => @$main_image_html, 
      'main_image_html_beautify' => @$main_image_html_beautify,
        
      'block_thumb_image_html' => @$block_thumb_image_html,
      'block_thumb_image_html_beautify' => @$block_thumb_image_html_beautify,
        
      'side_block_main_image' => @$side_block_image_html,
      'side_block_main_image_beautify' => @$side_block_image_html_beautify,
        
      'home_teaser_image' => @$home_teaser_image_html,
      'home_teaser_image_beautify' => @$home_teaser_image_html_beautify,
      
      'home_teaser_rotated_image' => @$home_teasers_rotated_image_html,
      'home_teaser_rotated_image_beautify' => @$home_teasers_rotated_image_html_beautify,
        
      'teaser_rss_beautify' => $teaser_rss,
    );
    //dpm($out);
    return $out;
  }
  
}


/**
 * Helper function to regenerate Styled And Beautify Image Html.
 */
function gv_misc_regenerateStyledAndBeautifyImageHtml($stream_path, $style_name, &$image_html, &$image_html_beautify, $title = NULL, $class = 'thumb') {
  $image_url = image_style_url($style_name, $stream_path);
  gv_misc_createCachedImageIfNotExists($image_url, $style_name);
  $title = str_replace('"', '`', $title);
  $image_html = '<div class="' .$class . '"><img src="' . $image_url . '"' . (!$title ? '' : ' alt="' . $title . '" title="' . $title . '"') . ' /></div>';
  $image_html_beautify = gv_pages_convertBeautifulUrls('from_originals_to_beautiful', $image_html);
}


/**
 * Helper function to rebuild article's extra_data.
 */
function gv_misc_updateArticleExtraData($node, $save_to_node = TRUE, $update_timestamp = NULL) {
  if (!empty($node->field_extra_data['und'][0]['value'])) {
    $extra_data = $old_extra_data = unserialize($node->field_extra_data['und'][0]['value']);
  }
  
  
  // If not all image url beautify are regenerated, regenerate it and save to the node after that.
  if (!isset($extra_data['teaser_rss_beautify']) || !isset($extra_data['teaser_beautify']) || ($update_timestamp && @$extra_data['update_timestamp'] < $update_timestamp) ) {
    
    ///watchdog('$$$ a4s article extra_data update', 'nid: ' . $node->nid . ', update_timestamp: ' . @$extra_data['update_timestamp'], NULL, WATCHDOG_WARNING);
    
    $teaser_data = gv_misc_getArticleTeaserData('all', gv_pages_convertBeautifulUrls('from_beautiful_to_originals', $node->body['und'][0]['value']), $node->nid, NULL, NULL, htmlspecialchars_decode($node->title, ENT_QUOTES));
    //$teaser_data = gv_misc_getArticleTeaserData('all', $node->body['und'][0]['value'], $node->nid, NULL, NULL, htmlspecialchars_decode($node->title, ENT_QUOTES));
    
  
    
    // Look at function gv_pages_validateForm_article(&$form, &$form_state).
    $extra_data = $teaser_data 
                + array(
      // Don't recalculate related articles..
      'related_articles' => @$old_extra_data['related_articles'], //@$form_state['values']['related_articles'],
      // If related articles should be recalculated, set timestamp to 0, what will make existing related articles expired.
      // -1 for full teasers regenerating, will not use already generated teasers for not changed related articles in function gv_misc_addRelatedArticlesToNode
      'related_articles_timestamp' => @$old_extra_data['related_articles_timestamp'],  
      'update_timestamp' => time(),
    );

    if (!empty($old_extra_data['guest_author'])) {
      $extra_data['guest_author'] = $old_extra_data['guest_author'];
    }

    // Update the field $extra_data in the db
    if ($save_to_node) {
      gv_misc_fieldSave('extra_data', $node->nid, serialize($extra_data));
    }
    
    //dpm('Updated article\'s extra_data!');
    //dpm($extra_data);
  }
  
  
  return $extra_data;
}


/**
 * Rewrite links like /sites/default/files/pdfs/ to alias /pdfs/ (forward) and vise versa and others.
 */
function gv_misc_rewriteLinks($type, $data, $direction = 'forward') {
  switch ($type) {
    case 'pdfs':
      if ($direction == 'forward') {
        // Converts from /sites/default/files/pdfs/ to /pdfs/
        // the real path will be accessible with .htaccess mod_rewrite settings in the root of the site.

        // $body = $form_state['values']['body'];
        $body = $data['values']['body'];
        $count1 = $count2 = 0;
        if ($body['und'][0]['value']) {
          $body['und'][0]['value'] = preg_replace('|"/sites/default/files/pdfs|', '"/pdfs', $body['und'][0]['value'], -1, $count1);
        }
        if ($body['und'][0]['summary']) {
          $body['und'][0]['summary'] = preg_replace('|/sites/default/files/pdfs|', '"/pdfs', $body['und'][0]['summary'], -1, $count2);
        }
        if ($count1 + $count2 > 0) {
          return $body;
        }
      }
      else {
        // Converts from /pdfs/ to /sites/default/files/pdfs/

        // $body = $form['body']
        $body = $data['body'];
        if ($body['und'][0]['#default_value']) {
          $body['und'][0]['#default_value'] = preg_replace('|"/pdfs|', '"/sites/default/files/pdfs', $body['und'][0]['#default_value'], -1);
        }
        if ($body['und'][0]['summary']['#default_value']) {
          $body['und'][0]['summary']['#default_value'] = preg_replace('|"/pdfs|', '"/sites/default/files/pdfs', $body['und'][0]['summary']['#default_value'], -1);
        }
        return $body;
      }
      break;
  }
  return NULL;
}


/**
 * Convert path from Drupal stream uri.
 */
function gv_misc_getPathFromStreamUri($uri) {
  $file_default_scheme = file_default_scheme();
  $default_file_path = variable_get('file_' . $file_default_scheme . '_path', conf_path() . '/files');
  
  return $default_file_path . str_replace($file_default_scheme . ':/', '', $uri);
}


/**
 * Convert a relative or absolute path to Drupal stream uri.
 */
function gv_misc_getStreamUriFromRelativePath($path) {
  $file_default_scheme = file_default_scheme();
  $default_file_path = variable_get('file_' . $file_default_scheme . '_path', conf_path() . '/files');

  $stream_path = str_replace('http://getvoip.com', '', $path);
  $stream_path = ltrim($stream_path, '/');
  return $file_default_scheme . '://' . str_replace($default_file_path . '/', '', $stream_path);
}


/**
 * Adds js to a page for making all images zoomable.
 */
function gv_misc_addZoomableImagesJs() {
  //1, 3, 4, 
  // Fix, workaround: if colorbox has been already loaded, and now we will add it again, it won't work.
  // So we prevent it.
  $drupal_alredy_loaded_js = drupal_add_js();
  //dpm($drupal_alredy_loaded_js);
  if (!isset($drupal_alredy_loaded_js['sites/all/libraries/jquery.plugins/colorbox/colorbox/jquery.colorbox.js']) && !isset($drupal_alredy_loaded_js['sites/all/libraries/jquery.plugins/colorbox/colorbox/jquery.colorbox-min.js'])) {
    //dpm('loaded');
    drupal_add_js('sites/all/libraries/jquery.plugins/colorbox/colorbox/jquery.colorbox.js');
    drupal_add_css('sites/all/libraries/jquery.plugins/colorbox/example1/colorbox.css', array('preprocess' => FALSE)); // array('group' => CSS_THEME, 'preprocess' => FALSE)
  }

  $path_to_module = drupal_get_path('module', 'gv_misc');
  drupal_add_js($path_to_module . '/js/gv_makeImagesZoomable.js');
}


/**
 * Helper function to add metatag to a current page.
 */
function gv_misc_addMetatag($name, $content, $href = NULL, $weight = 'NA', $attr_type = NULL) {
  if ($content) {
    if ($name == 'title') {
      //dpm($content);
      //$content = str_replace('| GetVoIP', '', $content);
      drupal_set_title($content);
    }
    else {
      $meta = array(
        '#type' => 'html_tag',
        '#tag' => 'meta',
        '#attributes' => array(
            'name' => $name,
            'content' => $content,
        )
      );
      if ($weight != 'NA') {
        $meta['#weight'] = $weight;
      }
      drupal_add_html_head($meta, $name);
    }
  } // End of if ($content) {
  elseif($href) {
    $meta = array(
      '#tag' => 'link',
      '#attributes' => array(
          'rel' => $name,
          'href' => $href,
      )
    );
    if ($attr_type) {
      $meta['#attributes']['type'] = $attr_type;
    }
    if ($weight != 'NA') {
      $meta['#weight'] = $weight;
    }
    drupal_add_html_head($meta, $name);
  } // End of elseif($href) {
}


/**
 * Get the title metatag for the front page from the Metatag module's settings.
 */
function gv_misc_metatag_getFrontTitle() {
  $metatags = metatag_metatags_view('global:frontpage', array());
  return $metatags['title']['#attached']['metatag_set_preprocess_variable'][0][2];
}


/**
 * Helper function to add sharing data (metatags and links) to a current page.
 */
function gv_misc_addSocialShareData_toPage($node) {
  
  global $schema_org_type;
  $image = NULL;
  $og_type = NULL;
  $title = NULL;
  $description = NULL;
  $tags = array();
  
  //$title = $node->title;
  if (@$node->field_preface_key['und'][0]['value'] == 'front') {
    
    $title = gv_misc_metatag_getFrontTitle();
    
    $tags = array(
      
      // Add all rss feeds to the home page (exceot the main rss, which will be added to all pages).
      'articles_rss' => array(
        '#tag' => 'link', 
        '#attributes' => array( 
            'rel' => 'alternate',
            'type' => 'application/rss+xml',
            'title' => 'VoIP Library articles from GetVoIP.com',
            'href' => 'http://getvoip.com/about-voip-services/rss.xml',
        ),
      ),
      'blog_rss' => array(
        '#tag' => 'link', 
        '#attributes' => array( 
            'rel' => 'alternate',
            'type' => 'application/rss+xml',
            'title' => 'GetVoIP.com Blog',
            'href' => 'http://getvoip.com/blog/rss.xml',
        ),
      ),
      'news_rss' => array(
        '#tag' => 'link', 
        '#attributes' => array( 
            'rel' => 'alternate',
            'type' => 'application/rss+xml',
            'title' => 'GetVoIP.com News',
            'href' => 'http://getvoip.com/news/rss.xml',
        ),
      ),
        
        
    );
    
  }
  if (!$title) {
    
    if (!empty($node->metatags['title']['value'])) {
      $title = $node->metatags['title']['value'];
    }
    else {
      $title = $node->title;
      
      //Set the right title metatag for the page if it's not defined.
      if (isset($node->metatags['title']['value'])) {

          $global_metatags_config = metatag_config_load('node:' . $node->type);
          // Use the upper level config if it's not defined for a specific content type.
          if (!$global_metatags_config || empty($global_metatags_config->config['title']['value'])) {
            $global_metatags_config = metatag_config_load('node');
          }
          
          if (!empty($global_metatags_config->config['title']['value'])) {
            global $language;
            global $altered_head_title;
            $altered_head_title = token_replace($global_metatags_config->config['title']['value'], array('node' => $node), array('language' => $language, 'sanitize' => FALSE));
            gv_misc_addMetatag('title', $altered_head_title);
          }

      }
      
      
    }
  }

  
  
  switch ($node->type) {
    case 'blog_post':
    case 'news_post':
    case 'article':
      if (isset($node->field_main_image['und'][0]['value']) && $node->field_main_image['und'][0]['value']) {
        $image = unserialize($node->field_main_image['und'][0]['value']);
        
        if (!empty($image['src_share_beautify'])) {
          $image = $image['src_share_beautify'];
        }
        elseif (!empty($image['src_share'])) {
          //$image = $image['src_share'];
          $image = gv_pages_convertBeautifulUrls('from_originals_to_beautiful', $image['src_share']);
        }
        elseif (!empty($image['src_themed'])) {
          //$image = $image['src_themed'];
          $image = gv_pages_convertBeautifulUrls('from_originals_to_beautiful', $image['src_themed']);
        }
        elseif (isset($image['src']) && $image['src']) {
          //$image = $image['src'];
          $image = gv_pages_convertBeautifulUrls('from_originals_to_beautiful', $image['src']);
        }
        else {
          $image = NULL;
        }
      }
    
      /*
      if (!@$node->metatags['description']['value']) {
        $description = $title . '...';
      }
      */
      
      $og_type = 'article';
      $schema_org_type = 'Article';
      
      break;
    
      
      
    case 'provider':
      
      $p_data = unserialize($node->field_p_data['und'][0]['value']);
      
      //dpm($p_data);
      
      if (!empty($p_data['src_share_beautify'])) {
        $image = $p_data['src_share_beautify'];
      }
      elseif (!empty($p_data['share_src_themed'])) {
        //$image = $p_data['share_src_themed'];
        $image = gv_pages_convertBeautifulUrls('from_originals_to_beautiful', $p_data['share_src_themed']);
        //dpm('image_original = ' . $p_data['share_src_themed']);
        //dpm('image_beauty = ' . $image);
      }
      elseif(!empty($node->field_p_logo['und'][0]['uri'])) {
        //$image = gv_misc_getPathFromStreamUri($node->field_p_logo['und'][0]['uri']);
        $image = gv_pages_convertBeautifulUrls('from_originals_to_beautiful', gv_misc_getPathFromStreamUri($node->field_p_logo['und'][0]['uri']));
      }
      
      $og_type = 'company';
      $schema_org_type = 'LocalBusiness';
      break;
      
      
    case 'phone':
      
      $extra_data = unserialize($node->field_extra_data['und'][0]['value']);
      if (isset($extra_data['share_src_themed']) && $extra_data['share_src_themed']) {
        $image = $extra_data['share_src_themed'];
      }
      elseif(isset($node->field_p_image['und'][0]['uri']) && $node->field_p_image['und'][0]['uri']) {
        $image = gv_misc_getPathFromStreamUri($node->field_p_image['und'][0]['uri']);
      }
      
      $og_type = 'product';
      $schema_org_type = 'Product';
      break;
      
      
    case 'review':
      global $review_share_src_themed;
      if ($review_share_src_themed) {
        $image = $review_share_src_themed;
      }
      $og_type = 'company';
      $schema_org_type = 'Review';
      // Refresh a title a bit.
      $title = $node->field_r_provider_name['und'][0]['value'] . ' Review - ' . $node->title;
      break;
      
    
    case 'phone_review':
      global $review_share_src_themed;
      if ($review_share_src_themed) {
        $image = $review_share_src_themed;
      }
      $og_type = 'product';
      $schema_org_type = 'Review';
      // Refresh a title a bit.
      $title = $node->field_p_name['und'][0]['value'] . ' Review - ' . $node->title;
      break;
 
    
  }
  
  //$title = str_replace('[site:name]', 'GetVoIP.com', $title);
  $title = token_replace($title);
  
  // Strip special symbols from the title.
  //$title = htmlspecialchars_decode($title, ENT_QUOTES);
  
  if (!$image){
    // Show default image - the logo.
    //$image = '/sites/all/themes/gv_orange/css/images/getvoip-logo.png';
    
    //$image = '/sites/all/themes/gv_orange/css/images/getvoip-logo4-t.png';
    ////$image = 'http://getvoip.com/images/theme/getvoip-logo4-t.png';
    $image = 'http://getvoip.com/images/theme/getvoip-logo5-t.png';
    
  }

  if (!strpos($image, 'getvoip.com')) {
    $image = 'http://getvoip.com/' . ltrim($image, '/');
  }

  
  // Make beauty image urls
  //$image = gv_pages_convertBeautifulUrls('from_originals_to_beautiful', $image);
  
  $tags += array(
       /*
      'title' => array(
          '#tag' => 'meta',
          '#attributes' => array(
              'name' => 'title',
              'content' => "Video '" . $node->title . "' by " . $publisher_title,
          ),
      ),
      'DC.title' => array(
          '#tag' => 'meta',
          '#attributes' => array(
              'name' => 'DC.title',
              'content' => $node->title,
          ),
      ),
      'description' => array(
          '#tag' => 'meta',
          '#attributes' => array(
              'name' => 'description',
              'content' => (isset($node->body['und'][0]['summary']) AND $node->body['und'][0]['summary'])?$node->body['und'][0]['summary']:drupal_substr(strip_tags($node->body['und'][0]['value']), 0, 200) . '...',
          ),
      ),
      'author' => array(
          '#tag' => 'meta',
          '#attributes' => array(
              'name' => 'author',
              'content' => $publisher_title,
          ),
      ),



      'medium' => array(
          '#tag' => 'meta',
          '#attributes' => array(
              'name' => 'medium',
              'content' => 'video',
          ),
      ),

      'video_type' => array(
          '#tag' => 'meta',
          '#attributes' => array(
              'name' => 'video_type',
              'content' => 'application/x-shockwave-flash',
          ),
      ),

      'video_height' => array(
          '#tag' => 'meta',
          '#attributes' => array(
              'name' => 'video_height',
              'content' => '300',
          ),
      ),

      'video_width' => array(
          '#tag' => 'meta',
          '#attributes' => array(
              'name' => 'video_height',
              'content' => '500',
          ),
      ),


      'video_src' => array(
          '#tag' => 'link', // The #tag is the html tag - <link />
          '#attributes' => array( 
              'href' => 'http://ripplin.com/sites/all/libraries/flowplayer/flowplayer-3.2.8.swf?config=' . urlencode('http://ripplin.com/video-src?v=' . $node->nid),
              'rel' => 'video_src',
          ),
      ),
      */
  
    'fb:admins' => array(
      '#type' => 'html_tag',
      '#tag' => 'meta',
      '#attributes' => array(
          'property' => 'fb:admins',
          'content' => 'http://www.facebook.com/getvoipservice',
      ),
    ),

    // Title for Facebook.
    'og:title' => array(
      '#type' => 'html_tag',
      '#tag' => 'meta',
      '#attributes' => array(
          'property' => 'og:title',
          'content' => $title,
      ),
    ),
      
    // Title for G+.
    'name' => array(
      '#type' => 'html_tag',
      '#tag' => 'meta',
      '#attributes' => array(
          'itemprop' => 'name',
          'content' => $title,
      ),
    ),
      
    'image_src' => array(
      '#tag' => 'link', // The #tag is the html tag - <link />
      '#attributes' => array( 
          'href' => $image,
          'rel' => 'image_src',
          //'type' => 'text/css',
      ),
    ),
  
    // For Facebook.
    'og:image' => array(
      '#type' => 'html_tag',
      '#tag' => 'meta',
      '#attributes' => array(
          'property' => 'og:image',
          'content' => $image,
      ),
    ),
      
    // For G+.  
    'image' => array(
      '#type' => 'html_tag',
      '#tag' => 'meta',
      '#attributes' => array(
          'itemprop' => 'image',
          'content' => $image,
      ),
    ),
      
      
      
    // Add main rss feed to every page.
    'main_rss' => array(
      '#tag' => 'link', 
      '#attributes' => array( 
          'rel' => 'alternate',
          'type' => 'application/rss+xml',
          'title' => 'Latest Articles from GetVoIP.com',
          'href' => 'http://getvoip.com/rss.xml',
      ),
    ),
      
  );

  /*  
  if ($description) {
    
    $tags['description'] = array(
          '#tag' => 'meta',
          '#attributes' => array(
              'name' => 'description',
              'content' => $description,
          ),
      );
  }
  */
  
  if ($og_type) {
   
    $tags['og:type'] = array(
        '#type' => 'html_tag',
        '#tag' => 'meta',
        '#attributes' => array(
            'property' => 'og:type',
            'content' => $og_type,
        ),
    );
  }
  
  
        
  foreach ($tags as $key => $val)
      drupal_add_html_head($val, $key);
        
}


/**
 * Get img src for Share from Uri.
 */
function gv_misc_getShareSrcThemed_fromUri($uri) {
  
  // Define share pic.
  $image_size = getimagesize(ltrim(gv_misc_getPathFromStreamUri($uri), '/'));
  // Image for sharing.
  if ($image_size[0] / $image_size[1] > 1) {
    // Too wide. will not be cutted.
    $out = image_style_url('share_wide', $uri);
  }
  elseif ($image_size[1] / $image_size[0] < 1) {
    // Too tall. will not be cutted.
    $out = image_style_url('share_tall', $uri);
  }
  else {
    //Normal image, will not be cutted.
    $out = image_style_url('share', $uri);
  }
  
  return $out;
}



/**
 * Returns recommendations counts for pos and neg.
 */
function gv_misc_getVotesRecommendPosVsNeg($nid) {
  
    $query = db_select('votingapi_vote', 'v')
      ->fields('v', array('value'));
    $query->condition('entity_id', $nid);
    $query->condition('value_type', 'percent');
    $query->condition('tag', 'recommend');
    
    $result = $query->execute()->fetchCol();

    $recommend = array('positive' => 0, 'negative' => 0);
    foreach ($result as $result) {
      if ($result) {
        $recommend['positive'] += 1;
      }
      else {
        $recommend['negative'] += 1;
      }
    }
        
    return $recommend;
}


/**
 * Returns votes ids for a specific criteria.
 */
function gv_misc_getVotesIDs($criteria) {
    $query = db_select('votingapi_vote', 'v')
      ->fields('v', array('vote_id', 'tag', 'value'));
    foreach ($criteria as $field => $value) {
      $query->condition($field, $value);
    }
    $result = $query->execute()->fetchAllAssoc('vote_id');
    $votes = array();
    foreach ($result as $result) {
      //$votes[] = array('vote_id' => $result->vote_id);
      $votes[] = (array) $result;
    }
    return $votes;
}


/**
 * Helper function to for administer menu.
 */
function gv_misc_gotoReviewsToApprove() {
  drupal_goto('admin/content/approve-reviews');
}


/**
 * Helper function to for administer menu.
 */
function gv_misc_gotoPhoneReviewsToApprove() {
  drupal_goto('admin/content/approve-phone-reviews');
}


/**
 * Approve content by type and nid.
 */
function gv_misc_approveContent($type, $id) {

  switch ($type) {
    
    case 'review':
      
      global $user;
      if (!in_array('administrator', $user->roles)) {
        drupal_access_denied();
        return;
      }
      /*
      if (!$id || !$node = node_load($id)) {
        return t('Wrong Review Id');
      }
      $node->field_r_notapproved['und'][0]['value'] = 0;
      $node->status = 1;
      node_save($node);
      drupal_set_message('The review ' . l($node->title, 'node/' . $node->nid) . ' is now approved and published.');
      drupal_goto();
      */
      break;
    
    case 'email':
      
      $approve = explode('=', $id);
      if(count($approve) != 2 ) {
        drupal_access_denied();
        return;
      }
      $code = $approve[0];
      $email = $approve[1];
      
      $query = db_select('field_data_field_r_email', 're')
        ->fields('re', array('entity_id'));
      $query->condition('field_r_email_value', $email);
      //$review_nid = $query->execute()->fetchField();
      $results = $query->execute();
      
      //$found_nid = FALSE;
      $error = FALSE;
      foreach ($results as $result) {
        $found_nid = TRUE;
        $review_nid = $result->entity_id;
        
        $query = db_select('node', 'n')
          ->fields('n', array('uid'))
          ->fields('ac', array('field_r_approvecode_value'));
        $query->condition('nid', $review_nid);
        $query->leftJoin('field_data_field_r_approvecode', 'ac', 'ac.entity_id = n.nid');
        $review = $query->execute()->fetchObject();
        
        if ($review->uid) {
            // Wrong request because it's a registered user's email.
            $error = t('Wrong request.');
        }
        elseif (!$review->field_r_approvecode_value) {
          $error = t('This email is already approved.');
        }
        elseif ($review->field_r_approvecode_value != $code) {
          $error = t('Wrong verification code!');
        }
        else {
          $error = FALSE;
          break;
        }
      }
      
      if ($error) {
        // Error.
        return $error;
      }
      
      // We are ready to approve the email now.
      
      //$review = node_load($review_nid);
      //$review->field_r_approvecode['und'][0]['value'] = '';
      //node_save($review);
      
      gv_misc_fieldSave('r_approvecode', $review_nid, '');
      
      return t('Thank you! Your email has been successfully verified! After approving by our administrators, your review will be published on our site.');
  }
  
  drupal_access_denied();
}


/**
 * Loads jquery plugin Colorbox to open videos in popup windows
 */
function gv_misc_loadColorboxForVideoLinks($type = 'YouTube Direct Link') {
  switch ($type) {
    case 'YouTube Direct Link':
        // for links with a class "yt-direct" like <a class="yt-direct" href="http://www.youtube.com/embed/9fWAFw4iSrg?rel=0&amp;wmode=transparent" title="Fonality HUD - Full Demo">Fonality HUD - Full Demo</a>
        
      
        static $js_already_loaded;
        
        if (!$js_already_loaded) {
          $js_already_loaded = TRUE;
          
          drupal_add_js('sites/all/libraries/jquery.plugins/colorbox/colorbox/jquery.colorbox-min.js');
          //drupal_add_js('sites/all/libraries/jquery.plugins/colorbox/colorbox/jquery.colorbox.js');

          drupal_add_css('sites/all/libraries/jquery.plugins/colorbox/example1/colorbox.css');
          $path_to_custom_js = drupal_get_path('module', 'gv_misc') . '/js/';
          drupal_add_js($path_to_custom_js . 'gv_colorbox_p_video.js');
        }
        break;
  }
}


/**
 * Loads jquery plugin Colorbox to open sharing links in popup windows.
 */
function gv_misc_loadPopupForShareLinks() {

  drupal_add_js('sites/all/libraries/jquery.plugins/colorbox/colorbox/jquery.colorbox-min.js');
  //drupal_add_js('sites/all/libraries/jquery.plugins/colorbox/colorbox/jquery.colorbox.js');

  drupal_add_css('sites/all/libraries/jquery.plugins/colorbox/example1/colorbox.css');
  
  $path_to_custom_js = drupal_get_path('module', 'gv_misc') . '/js/';
  drupal_add_js($path_to_custom_js . 'gv_popup_share_links.js');
}


/**
 * Implements on the fly capturing of a users' data before they have submit requests.
 * 
 * Returns nothing.
 */
function gv_misc_makeRequestCapture_ajax() {
  $status = TRUE;
  $output = '';
  
  $post = array();
  foreach ($_POST as $key => $value) {
    $post[$key] = check_plain(strip_tags($value));
  }
  
  
  if (@$post['op'] == 'exit') {
    
    if (isset($_SESSION['ucaptured_timestamp'])) {
      
      // If a row in the DB has been created already
      $query = db_select('gv_quote_requests', 'qr')
        ->fields('qr', array('data'));
      $query->condition('qr.timestamp', $_SESSION['ucaptured_timestamp']);
      $ucaptured = $query->execute()->fetchField();
      $ucaptured = unserialize($ucaptured);  
      
      $ucaptured = gv_misc_setUcapturedVariable($post, $ucaptured);
      /*
      $ucaptured['Email'] = (isset($post['email']) && $post['email']) ? $post['email'] : $ucaptured['Email'];
      $ucaptured['First Name'] = (isset($post['fname']) && $post['fname']) ? $post['fname'] : $ucaptured['First Name'];
      $ucaptured['Last Name'] = (isset($post['lname']) && $post['lname']) ? $post['lname'] : $ucaptured['Last Name'];
      */
      if ($ucaptured['Email']) {
      
            // Send alert email.
            $ucaptured_data = gv_misc_setUcapturedVariable(NULL, $ucaptured, TRUE);
            $ucaptured_data += array(
              'User IP' => isset($_SERVER['REMOTE_ADDR']) ? $_SERVER['REMOTE_ADDR'] : '',
              'Start Submission Time' => date('Y-m-d, H:i:s', $_SESSION['ucaptured_timestamp']),
            );
            
            if (isset($_SERVER['HTTP_REFERER']) && $_SERVER['HTTP_REFERER'] && !strpos($_SERVER['HTTP_REFERER'], '://getvoip.com')) {
              $ucaptured_data['Referrer'] = $_SERVER['HTTP_REFERER'];
            }
            
            $params['ucaptured_data'] = $ucaptured_data;
            global $language;
            
            // Normal send if not a test from a4s
            drupal_mail('gv_misc', 'request_quote', 'leads@getvoip.com', $language->language, $params);
            // Test letter to the root
            drupal_mail('gv_misc', 'request_quote_ucaptured_data', 'all4senses@gmail.com', $language->language, $params);
            
            // Update DB.
            $result = db_update('gv_quote_requests')
              ->fields(array(
                'data' => serialize($ucaptured),
                'status' => 1, // Unsubmitted, sent.
                'checked' => 1, // Reviewed, because is sent.
                'email_presented' => $ucaptured['Email'] ? $ucaptured['Email'] : NULL,
              ))
              ->condition('timestamp', $_SESSION['ucaptured_timestamp'])
              ->execute();

          } // End of if ($ucaptured['email']) {
          else {

            // Remove the row from DB (if it is there) because it's useless without an email.
            /*
            if (isset($_SESSION['ucaptured_timestamp'])) {
              $result = db_delete('gv_quote_requests')
                ->condition('timestamp', $_SESSION['ucaptured_timestamp'])
                ->execute();
            }
            */
          } // End of Else of if ($ucaptured['email']) {

          unset($_SESSION['ucaptured_timestamp']);
    
    } // End of if (isset($_SESSION['ucaptured_timestamp'])) {

    
    
    
  } // End of if (@$post['op'] == 'exit') {
  else {
    
    // Op = set
    
    if (isset($_SESSION['ucaptured_timestamp'])) {
      
      // A row has been already created.
      
      $query = db_select('gv_quote_requests', 'qr')
        ->fields('qr', array('data'));
      $query->condition('qr.timestamp', $_SESSION['ucaptured_timestamp']);
      $ucaptured = $query->execute()->fetchField();
      
      if ($ucaptured) {
        $ucaptured = unserialize($ucaptured);
        
        $ucaptured = gv_misc_setUcapturedVariable($post, $ucaptured);
        /*
        $ucaptured['Email'] = (isset($post['email']) && $post['email']) ? $post['email'] : $ucaptured['Email'];
        $ucaptured['First Name'] = (isset($post['fname']) && $post['fname']) ? $post['fname'] : $ucaptured['First Name'];
        $ucaptured['Last Name'] = (isset($post['lname']) && $post['lname']) ? $post['lname'] : $ucaptured['Last Name'];
        */
        $result = db_update('gv_quote_requests')
          ->fields(array(
            'data' => serialize($ucaptured),
            'email_presented' => $ucaptured['Email'] ? $ucaptured['Email'] : NULL,
          ))
          ->condition('timestamp', $_SESSION['ucaptured_timestamp'])
          ->execute();

      } // End of if ($ucaptured) {
      else {
        $ucaptured = gv_misc_setUcapturedVariable($post);
        /*
        $ucaptured['Email'] = isset($post['email']) ? $post['email'] : '';
        $ucaptured['First Name'] = isset($post['fname']) ? $post['fname'] : '';
        $ucaptured['Last Name'] = isset($post['lname']) ? $post['lname'] : '';
        */
        $result = db_insert('gv_quote_requests')
          ->fields(array(
            'timestamp' => $_SESSION['ucaptured_timestamp'],
            'status' => 0, // Unsubmitted, not yet sent.
            'ip' =>  isset($_SERVER['REMOTE_ADDR']) ? $_SERVER['REMOTE_ADDR'] : '',
            'data' => serialize($ucaptured),
            'checked' => 0, // Not reviewed by a user or not sent
            'email_presented' => $ucaptured['Email'] ? $ucaptured['Email'] : NULL,
          ))
          ->execute();
      } // End of Else of if ($ucaptured) {
      
    } // End of if (isset($_SESSION['ucaptured_timestamp'])) {
    else {
      
      // A row is not yet created in the DB.
      
      $_SESSION['ucaptured_timestamp'] = time();
      
      // Check if such timestamp alreade exists.
      $query = db_select('gv_quote_requests', 'qr')
        ->fields('qr', array('data'));
      $query->condition('qr.timestamp', $_SESSION['ucaptured_timestamp']);
      $tmp = $query->execute()->fetchField();
       
      if ($tmp) {
        $_SESSION['ucaptured_timestamp'] += 1;
        
          // AGAIN Just in case... Check if such timestamp alreade exists.
        $query = db_select('gv_quote_requests', 'qr')
          ->fields('qr', array('data'));
        $query->condition('qr.timestamp', $_SESSION['ucaptured_timestamp']);
        $tmp = $query->execute()->fetchField();

        if ($tmp) {
          $_SESSION['ucaptured_timestamp'] += 1;
        }
        
      }
      
//      if ($tmp) {
//        do {
//          // It exists, so we'll just increment timestamp, hopely a new one doesn't exist.
//          $_SESSION['ucaptured_timestamp'] += 1;
//          $query = db_select('gv_quote_requests', 'qr')
//            ->fields('qr', array('data'));
//          $query->condition('qr.timestamp', $_SESSION['ucaptured_timestamp']);
//          $tmp = $query->execute()->fetchField();
//        } while ($tmp);
//      }
      
      $ucaptured = gv_misc_setUcapturedVariable($post);
      $result = db_insert('gv_quote_requests')
        ->fields(array(
          'timestamp' => $_SESSION['ucaptured_timestamp'],
          'status' => 0, // Unsubmitted, not yet sent.
          'ip' =>  isset($_SERVER['REMOTE_ADDR']) ? $_SERVER['REMOTE_ADDR'] : '',
          'data' => serialize($ucaptured),
          'checked' => 0, // Not reviewed by a user or not sent
          'email_presented' => $ucaptured['Email'] ? $ucaptured['Email'] : NULL,
        ))
        ->execute();
      
    } // End of Else of if (isset($_SESSION['ucaptured_timestamp'])) {
    
  } // End of Else of if (@$post['op'] == 'exit' && $ucaptured && @$ucaptured['email']) {
  
  drupal_json_output(array('status' => $status/*, 'op' => @$post['op'], 'post' => $_POST, 'ucaptured' => $ucaptured/*, 'token' => $post['token'], 'test_token' => $test_token, 'valid_token' => $valid_token, 'letter' => $letter*/));
}


/**
 * Helper function for loading a data in the ucaptured variable while handling the capturing user data on the request a quote page.
 * 
 */
function gv_misc_setUcapturedVariable($post, $ucaptured = NULL, $combine_phone = FALSE) {
  
  if ($combine_phone) {
    if (isset($ucaptured['Phone 1']) && isset($ucaptured['Phone 2']) && isset($ucaptured['Phone 3'])) {
      $ucaptured['Phone #'] = $ucaptured['Phone 1'] . '-' . $ucaptured['Phone 2'] . '-' . $ucaptured['Phone 3'];
      unset($ucaptured['Phone 1'], $ucaptured['Phone 2'], $ucaptured['Phone 3']);
    }
    return $ucaptured;
  }
  
  $fields = array(
      'Email' => 'email', 
      'First Name' => 'firstname', 
      'Last Name' => 'lastname',
      //'Name' => 'name',
      'Phone #' => 'phone',
      //'Phone 1' => 'phone_1',
      //'Phone 2' => 'phone_2',
      //'Phone 3' => 'phone_3',
      'Website' => 'website', 
      'Company' => 'company',
      //'Monthly budget' => 'budget',
      
      'Phones needed' => 'phones_amt',
      'Quote type' => 'q_type',
      'Buying Time Frame' => 'buying_time',

      //'Quote for' => 'q_for',
      
      'Source' => 'source',
      'Version' => 'version',
      'Sumbission page' => 'url',
  );
  
  if ($ucaptured) {
    foreach ($fields as $key1 => $key2) {
      //$ucaptured['Email'] = (isset($post['email']) && $post['email']) ? $post['email'] : $ucaptured['Email'];
      $ucaptured[$key1] = (isset($post[$key2]) && $post[$key2]) ? $post[$key2] : (isset($ucaptured[$key1]) ? $ucaptured[$key1] : '');
    }
  }
  else {
    foreach ($fields as $key1 => $key2) {
      //$ucaptured['Email'] = isset($post['email']) ? $post['email'] : '';
      $ucaptured[$key1] = isset($post[$key2]) ? $post[$key2] : '';
    }
    
    if(isset($_SERVER['HTTP_USER_AGENT'])) {
      $ucaptured['Browser'] = $_SERVER['HTTP_USER_AGENT'];
    }
    if (isset($post['referrer']) && $post['referrer']) {
      $ucaptured['Referrer'] = $post['referrer'];
    }
    /*
    if (isset($_SERVER['HTTP_REFERER']) && $_SERVER['HTTP_REFERER'] && !strpos($_SERVER['HTTP_REFERER'], '://getvoip.com')) {
      $ucaptured['Referrer'] = $_SERVER['HTTP_REFERER'];
    }
    */
  }
  

  
  return $ucaptured;
}


/**
 * Implements REST API accepting leads from remote clients.
 */
function gv_misc_leadRoute_REST_IN() {
  
  /*
  $status = TRUE;
  $output = '';
  
  $post = array();
  //dpm($_GET);
  foreach ($_POST as $key => $value) {
    $post[$key] = check_plain(strip_tags($value));
  }
  
  
  
  
  
  
    
      $submission = array(
          '_get' => print_r($_GET, TRUE),
          '_post' => print_r($post, TRUE),
          '_server' => print_r($_SERVER, TRUE),
          
        'Phones needed' => isset($post['phones_amt']) ? $post['phones_amt'] : 'xxxxxxxxxxxxxxxxx',
        'Quote for' => isset($post['q_for']) ? $post['q_for'] : 'yyyyy',
        'Quote type' => isset($post['q_type']) ? $post['q_type'] : '',
        'Buying Time Frame' => (isset($post['buying_time']) && $post['buying_time']) ? $post['buying_time'] : 'ASAP',
        //'Buying Time Frame' => isset($post['buying_time']) ? $post['buying_time'] : '',
        'Connection type' => isset($post['connection']) ? $post['connection'] : '',
          
        'Industry' => isset($post['industry']) ? $post['industry'] : '',
        'Employees amount' => isset($post['employees_amt']) ? $post['employees_amt'] : '',
        
        'First Name' => isset($post['firstname']) ? $post['firstname'] : '',
        'Last Name' => isset($post['lastname']) ? $post['lastname'] : '',
        'Name' => isset($post['name']) ? $post['name'] : '', 
          
        'Company' => isset($post['company']) ? $post['company'] : '',
        'Website' => isset($post['website']) ? $post['website'] : '',
        'Email' => @$post['email'],
        'Phone #' => @$phone,
        'Notes' => isset($post['notes']) ? $post['notes'] : '',
          
        'Source' => @$post['source'],
        'Version' => @$post['version'],
        
        'Goal' => isset($post['goal']) ? $post['goal'] : 'quote',
        
        //'Sumbission page' => $post['url'],
        'sentToRemoteProviders' => array(),
      );   
      
       foreach ($submission as $key => $value) {
        if (!$value || $value == 'Optional' || $key == $value) {
          unset($submission[$key]);
        }
      }
      
    
      // Save data to db.
      $current_time = time();
      $save_submission = $submission;
      $save_submission['Submit Time'] = $current_time;
      if (isset($_SERVER['HTTP_USER_AGENT'])) {
        $save_submission['Browser'] = $_SERVER['HTTP_USER_AGENT'];
      }
      if (!empty($post['referrer'])) {
        $save_submission['Referrer'] = $post['referrer'];
      }
      $save_submission['Sumbission page'] = @$post['url'];
      
    $submission['User IP'] = isset($_SERVER['REMOTE_ADDR']) ? $_SERVER['REMOTE_ADDR'] : '';
    $submission['Time'] = date('Y-m-d, H:i:s', $current_time);
    
    $params['request_data'] = $submission;
    
    global $language;
    
    drupal_mail('gv_misc', 'request_quote', 'all4senses@gmail.com', $language->language, $params);
    //echo 'Out echo';
    
    //return 'Return Out';
    
    //
    $output = 'json_out';
    drupal_json_output(array('status' => $status, 'data' => $output));
    
    ///drupal_add_http_header('Content-Type', 'application/json');
    ///echo 'Out like json..';
    */
  
  gv_misc_makeRequest_ajax($_POST);
}


/**
 * Implements requests from users.
 * 
 * Returns json result data with OK or error.
 */
function gv_misc_makeRequest_ajax($post = NULL) {
  $status = FALSE;
  $output = '';
  
  if (!$post) {
    $post = array();
    foreach ($_POST as $key => $value) {
      if ($key == 'features' && is_array($value)) {
        $features = NULL;
        foreach ($value as $feature) {
          $features .= ($features ? ', ' : '') . $feature;
        }
        $value = $features;
      }
      elseif ($key == 'company' && ($value == 'Company' || $value == 'Organization Name' || $value == 'Company Name') ) {
        $value = '';
      }
      
      $post[$key] = check_plain(strip_tags($value));
    }
  }
  
  watchdog('--> GV Request POST', print_r($post, TRUE), NULL, WATCHDOG_WARNING);
  
  if (empty($post) 
      || empty($post['source'])
      ////|| ($post['source'] == 'block' && strpos($post['url'], 'ttp://') == FALSE) // block spam
      //|| empty($post['phones_amt'])
      || (isset($post['phones_amt']) && !$post['phones_amt'])
      //|| !isset($post['q_for']) || !$post['q_for']
      //|| !isset($post['buying_time']) || !$post['buying_time']
      || ( (isset($post['firstname']) && !$post['firstname']) || (isset($post['lastname']) && !$post['lastname']) || (isset($post['name']) && !$post['name']) )
      || ( strpos(@$post['firstname'], '/')  || strpos(@$post['lastname'], '/') || strpos(@$post['name'], '/') ) // name contains /, like in urls
      || (empty($post['email']) || !strpos($post['email'], '@') )
      || ( (empty($post['phone_1']) || empty($post['phone_2']) || empty($post['phone_3'])) && empty($post['phone']) )
     ) {
    $output = t('<div class="not-verified"><p class="error">The form is not filled!</p><p>Please, reload the page and try again.</p></div>'); 
  }
  elseif ($post['source'] == 'block' && ( (empty($post['ct_captcha']) && !empty($_SESSION['securimage_code_value']['default']) ) || ( isset($post['ct_captcha']) && isset($_SESSION['securimage_code_value']['default']) && strtolower($post['ct_captcha']) != strtolower($_SESSION['securimage_code_value']['default'])   ) )){
    $output = t('<div class="not-verified"><p class="error">A Captcha code is wrong!</p><p> Please, reload the page and try again.</p>'); 
  }
  elseif (!isset($post['token']) /*|| !isset($_SESSION['requestQuoteToken']) || $post['token'] != $_SESSION['requestQuoteToken']*/) {
    $output = t('<div class="not-verified"><p class="error">The form is outdated or broken.</p><p> Please, reload the page and try again.</p>'); 
  }
  // Silently filter by the Spammer's phone number.
  // Or if the first name = last name.
  elseif ($_SERVER['REMOTE_ADDR'] == '141.101.104.147' // Attacker sql injection
          || strpos($post['phone'], '3847') != FALSE 
          // Uncomment to apply
          //|| (!empty($post['firstname']) && !empty($post['lastname']) && $post['firstname'] == $post['lastname']) 
          ) 
        { // 4023983847, 4023893847
    //$output = '<div class="not-verified"><p class="error">Something worng! ;)</p><p> Please, reload the page and try again.</p><div class="not-verified">' 
    $output = '<a class="guide" href="/pdfs/SMBVOIPAdvantagesWhitePaper.pdf" target="_blank">Download Your Free VoIP Buyer\'s Guide!!!<img src="/sites/all/themes/gv_orange/css/images/click-here-button.png" /></a><div class="quote-final"><p><strong>Thank you</strong> for taking your time to complete our form. A VoIP Expert will be contacting you shortly to provide you with a personalized VoIP Service quote.</p><p>In the meantime, you can gain a great deal of VoIP information right here at <a href="http://getvoip.com">GetVoIP.com</a></p></div>';
  }
  else {
    
    // The data is all OK, so we may Process the submission...
    
    
    
    $post['email'] = strtolower($post['email']);
    
    
    
    $already_sent = FALSE;
    // allow dublicate of test@test.test address for testing purposes.
    /*
    if ($post['email'] != 'test@test.test' && gv_misc_isSubmissionAlreadySent($post['email'])) {
      $already_sent = TRUE;
      
      if ($post['source'] == 'partner') {
        $output = 'Sumbission email has already been used/sent.'; 
      }
      else {
        $output = '<div class="not-verified"><p class="error">Sumbission email has already been used.</p>'; 
      }
      
      drupal_json_output(array('status' => $status, 'data' => $output));
      return;
      
    }
    */
    
    $status = TRUE;
    
    // Check if there is already a submission in the DB with such an email.
    /*
    $query = db_select('gv_quote_requests', 'qr')
      ->fields('qr', array('data', 'ip', 'timestamp'));
    $query->condition('qr.status', 0);
    $query->condition('qr.checked', 0);
    
    
    //$query->condition('qr.email_presented', 1);
    
    $query->condition('qr.email_presented', '0', '!=');
    $query->condition('qr.email_presented', '', '!=');
    $query->isNotNull('qr.email_presented');
    
    $query->condition('qr.timestamp', $current_time - 3600, '<'); // 1 hour old
    $not_sents = $query->execute();
    */
    
    
    
    

    $current_time = time();
    
    // Mapping form data to right named fields.
    
    $phone = isset($post['phone']) ? $post['phone'] : $post['phone_1'] . '-' . $post['phone_2'] . '-' . $post['phone_3'];
    
    
    // Clear all special symbols entered by a user.
    foreach ($post as $post_name => $post_value) {
      $post[$post_name] = htmlspecialchars_decode($post_value, ENT_QUOTES);
    }
    
    if ($post['source'] == 'page' || $post['source'] == 'partner') {
      
      
      
      $submission = array(
        'Phones needed' => isset($post['phones_amt']) ? $post['phones_amt'] : (isset($post['employees_amt']) ? $post['employees_amt'] : ''), //$post['phones_amt'],
        'Quote for' => isset($post['q_for']) ? $post['q_for'] : '',
        'Quote type' => isset($post['q_type']) ? $post['q_type'] : '',
        'Buying Time Frame' => (isset($post['buying_time']) && $post['buying_time']) ? $post['buying_time'] : 'ASAP',
        'Features' => isset($post['features']) ? $post['features'] : '',  
          
        'First Name' => isset($post['firstname']) ? $post['firstname'] : '',
        'Last Name' => isset($post['lastname']) ? $post['lastname'] : '',
        'Name' => isset($post['name']) ? $post['name'] : '',
        
        'Company' => isset($post['company']) ? $post['company'] : '',
        'Title' => isset($post['q-title']) ? $post['q-title'] : '',

        'Email' => $post['email'],
        'Website' => isset($post['website']) ? $post['website'] : '',
        'Phone #' => $phone,
        'Monthly budget' => isset($post['budget']) ? $post['budget'] : '',

        'Source' => $post['source'],
        'Version' => $post['version'],
          
        'Goal' => isset($post['goal']) ? $post['goal'] : 'quote',
          
        //'Sumbission page' => $post['url'],
          
        'Provider Name' => isset($post['provider_name']) ? $post['provider_name'] : NULL,
        'Provider ID' => isset($post['provider_id']) ? $post['provider_id'] : NULL,
      );
      

      gv_misc_getAllowedProvidersToSendSubmission($submission);
      
      foreach ($submission as $key => $value) {
        if (!$value || $value == 'Optional' || $key == $value) {
          unset($submission[$key]);
        }
      }
      
      
      
      
      
      // Clear user's captured on the fly data and/or save request to the db.
      
      $save_submission = $submission;
      $save_submission['Submit Time'] = $current_time;
      if (isset($_SERVER['HTTP_USER_AGENT'])) {
        $save_submission['Browser'] = $_SERVER['HTTP_USER_AGENT'];
      }
      if (isset($post['referrer']) && $post['referrer']) {
        $save_submission['Referrer'] = $post['referrer'];
      }
      $save_submission['Sumbission page'] = $post['url'];
      /*
      if (isset($_SERVER['HTTP_REFERER']) && $_SERVER['HTTP_REFERER'] && !strpos($_SERVER['HTTP_REFERER'], '://getvoip.com')) {
        $save_submission['Referrer'] = $_SERVER['HTTP_REFERER'];
      }
      */
      
      $save_submission['$_SERVER'] = $_SERVER;
      
      if (isset($_SESSION['ucaptured_timestamp'])) {
        $start_submission_time = $_SESSION['ucaptured_timestamp'];
        //$save_submission['Submission Duration'] = number_format((($current_time - $start_submission_time) / 60), 2, '.', '') . ' min';
        $save_submission['Submission Duration'] = $current_time - $start_submission_time;
        $result = db_update('gv_quote_requests')
          ->fields(array(
            'data' => serialize($save_submission),
            'status' => 2, // Submitted and sent.
            'checked' => 1, // Reviewed, because is sent.
            'email_presented' => $save_submission['Email'],
            'via_block' => 0, // via page
          ))
          ->condition('timestamp', $_SESSION['ucaptured_timestamp'])
          ->execute();
        unset($_SESSION['ucaptured_timestamp']);
      }
      else {
        // For some reason it wasn't still captured.
        $start_submission_time = $current_time;
        $result = db_insert('gv_quote_requests')
          ->fields(array(
            'timestamp' => $start_submission_time,
            'status' => 2, // Submitted and sent.
            'ip' =>  isset($_SERVER['REMOTE_ADDR']) ? $_SERVER['REMOTE_ADDR'] : '',
            'data' => serialize($save_submission),
            'checked' => 1, // Reviewed, because is sent.
            'email_presented' => $save_submission['Email'],
            'via_block' => $post['source'] == 'page' ? 0 : 2, // via page - o, from partner - 2
          ))
          ->execute();
      }  
      
      
      
        
      
    }
    else {
      
      // Quote Blocks...
      
      $submission = array(
        'Phones needed' => isset($post['phones_amt']) ? $post['phones_amt'] : (isset($post['employees_amt']) ? $post['employees_amt'] : ''), //$post['phones_amt'],
        'Quote for' => isset($post['q_for']) ? $post['q_for'] : '',
        'Quote type' => isset($post['q_type']) ? $post['q_type'] : '',
        'Buying Time Frame' => (isset($post['buying_time']) && $post['buying_time']) ? $post['buying_time'] : 'ASAP',
        //'Buying Time Frame' => isset($post['buying_time']) ? $post['buying_time'] : '',
        'Connection type' => isset($post['connection']) ? $post['connection'] : '',
        'Features' => isset($post['features']) ? $post['features'] : '', 
          
        'Industry' => isset($post['industry']) ? $post['industry'] : '',
        'Employees amount' => isset($post['employees_amt']) ? $post['employees_amt'] : '',
        
          
          
        'First Name' => isset($post['firstname']) ? $post['firstname'] : '',
        'Last Name' => isset($post['lastname']) ? $post['lastname'] : '',
        'Name' => isset($post['name']) ? $post['name'] : '', 
          
        'Company' => isset($post['company']) ? $post['company'] : '',
        'Website' => isset($post['website']) ? $post['website'] : '',
        'Email' => $post['email'],
        'Phone #' => $phone,
        'Notes' => isset($post['notes']) ? $post['notes'] : '',
          
        'Source' => $post['source'],
        'Version' => $post['version'],
        
        'Goal' => isset($post['goal']) ? $post['goal'] : 'quote',
        
        //'Sumbission page' => $post['url'],
        'sentToRemoteProviders' => array(),
        'Provider Name' => isset($post['provider_name']) ? $post['provider_name'] : NULL,
        'Provider ID' => isset($post['provider_id']) ? $post['provider_id'] : NULL,
      );      
      
      foreach ($submission as $key => $value) {
        if (!$value || $value == 'Optional' || $key == $value) {
          unset($submission[$key]);
        }
      }
      
    
      // Save data to db.
      
      $save_submission = $submission;
      $save_submission['Submit Time'] = $current_time;
      if (isset($_SERVER['HTTP_USER_AGENT'])) {
        $save_submission['Browser'] = $_SERVER['HTTP_USER_AGENT'];
      }
      if (isset($post['referrer']) && $post['referrer']) {
        $save_submission['Referrer'] = $post['referrer'];
      }
      $save_submission['Sumbission page'] = @$post['url'];
      
      $save_submission['$_SERVER'] = $_SERVER;
      
      $start_submission_time = $current_time;
      $result = db_insert('gv_quote_requests')
        ->fields(array(
          'timestamp' => $start_submission_time,
          'status' => 2, // Submitted and sent.
          'ip' =>  isset($_SERVER['REMOTE_ADDR']) ? $_SERVER['REMOTE_ADDR'] : '',
          'data' => serialize($save_submission),
          'checked' => 1, // Reviewed, because is alerted.
          'email_presented' => $save_submission['Email'],
          'via_block' => 1, //TRUE,
        ))
        ->execute();
      
    } // End of quote block
    
    
    
    $submission['User IP'] = isset($_SERVER['REMOTE_ADDR']) ? $_SERVER['REMOTE_ADDR'] : '';
    $submission['Time'] = date('Y-m-d, H:i:s', time());
    
    $params['request_data'] = $submission;
    
    

    // Add an extra data.
    
    $submission_with_extra = $submission;
    
    $submission_with_extra['Sumbission page'] = $post['url'];
    if (isset($post['referrer']) && $post['referrer']) {
      $submission_with_extra['Referrer'] = $post['referrer'];
    }
    if(isset($_SERVER['HTTP_USER_AGENT'])) {
      $submission_with_extra['Browser'] = $_SERVER['HTTP_USER_AGENT'];
    }
    
    $params_with_extra['request_data'] = $submission_with_extra;
    
    /*
    $admins = db_query("SELECT u.uid FROM {users_roles} u INNER JOIN {role} r ON r.name = :role AND r.rid = u.rid WHERE 1", array(':role' => 'administrator')); 
    foreach ($admins as $admin) {
      // Comment to go live!
      //if($admin->uid != 1) continue;
      
      $recipient = user_load($admin->uid);
      $params['recipient'] = $recipient;
      drupal_mail('gv_misc', 'request_quote', $recipient->mail, user_preferred_language($recipient), $params);
    }
    */
    global $language;
    //$params['recipient'] = $recipient;
    //$letter = theme('gv_misc_requestQuote_mail', $post);//$params['request_data']);
    
    
    
    if (!$already_sent) {
      
        //if ($post['version'] != '5-IScope') 
        {
          gv_misc_sendQuoteToProviders($submission, $params);
        }
        /*
        if ($submission['First Name'] == 'RingCentral' || $submission['First Name'] == 'ringcentral' || $submission['Company'] == 'RC') {
          // Test for Nextiva
          drupal_mail('gv_misc', 'request_quote', 'leads@getvoip.com', $language->language, $params);

          // Send a lead to Remote providers.
          if ($submission['Source'] != 'block') {
            gv_misc_SendRequestToRingCentral($submission);
          }
        }
        elseif ($submission['First Name'] == 'Nextiva' || $submission['First Name'] == 'nextiva') {
          // Test for Nextiva
          drupal_mail('gv_misc', 'request_quote', 'leads@getvoip.com', $language->language, $params);

          // Send a lead to Remote providers.
          if ($submission['Source'] != 'block') {
            gv_misc_SendRequestToNextiva($submission);
          }
        }
        elseif ($submission['First Name'] != 'afs' && $submission['First Name'] != 'a4s' && $submission['First Name'] != 'test') {
          // Normal send if not a test from a4s
          drupal_mail('gv_misc', 'request_quote', 'leads@getvoip.com', $language->language, $params);

          // Send a lead to Remote providers.
          if ($submission['Source'] != 'block') {
            gv_misc_SendRequestToVocalocity($submission);
            gv_misc_SendRequestTo8x8($submission);
            gv_misc_SendRequestToNextiva($submission);
            gv_misc_SendRequestToRingCentral($submission);
          }
        }
        */
        // A test inform letter to the root.
        drupal_mail('gv_misc', 'request_quote', 'all4senses@gmail.com', $language->language, $params_with_extra);
    }
    
    
    
    
    // Check for new captured but not sent data with emails in db, more than 1 hour old
    if ($post['source'] != 'partner') {
      
          $query = db_select('gv_quote_requests', 'qr')
            ->fields('qr', array('data', 'ip', 'timestamp'));
          $query->condition('qr.status', 0);
          $query->condition('qr.checked', 0);


          //$query->condition('qr.email_presented', 1);

          $query->condition('qr.email_presented', '0', '!=');
          $query->condition('qr.email_presented', '', '!=');
          $query->isNotNull('qr.email_presented');

          $query->condition('qr.timestamp', $current_time - 3600, '<'); // 1 hour old
          $not_sents = $query->execute();

          foreach ($not_sents as $not_sent) {
            $ucaptured = unserialize($not_sent->data);

            // Send email.
            $ucaptured_data = gv_misc_setUcapturedVariable(NULL, $ucaptured, TRUE);
            $ucaptured_data += array(
              'User IP' => $not_sent->ip,
              'Start Submission Time' => date('Y-m-d, H:i:s', $not_sent->timestamp),
            );

            $params['ucaptured_data'] = $ucaptured_data;

            // Normal send
            if ($submission['First Name'] != 'afs') {
              drupal_mail('gv_misc', 'request_quote_ucaptured_data', 'leads@getvoip.com', $language->language, $params);
            }
            // Test letter to the root
            drupal_mail('gv_misc', 'request_quote_ucaptured_data', 'all4senses@gmail.com', $language->language, $params);

            // Update a status in DB.
            $result = db_update('gv_quote_requests')
              ->fields(array(
                'status' => 1, // Unsubmitted, sent.
                'checked' => 1, // Reviewed, because is sent.
              ))
              ->condition('timestamp', $not_sent->timestamp)
              ->execute();

          } // foreach ($not_sents as $not_sent) {

    
    } // end of Check for new captured but not sent data with emails in db, more than 1 hour old
    
    
    $status = TRUE;
    
    if ($post['source'] == 'block') {
      
      /*
      if ($submission['Version'] == 5) {
        $output = '<a class="guide" href="/pdfs/SMBVOIPAdvantagesWhitePaper.pdf" target="_blank">Download Your Free VoIP Buyer\'s Guide Here</a><div class="quote-final">' . t('<p><strong>Thank you</strong> for taking your time to complete our form. A VoIP Expert will be contacting you shortly to provide you with a personalized VoIP Service quote.</p><p>In the meantime, you can gain a great deal of VoIP information right here at <a href="http://getvoip.com">GetVoIP.com</a></p>') . '</div>';
      }
      elseif($submission['Version'] == 6 || $submission['Version'] == 7 || $submission['Version'] == 8) {
        $output = '<a class="guide" href="/pdfs/SMBVOIPAdvantagesWhitePaper.pdf" target="_blank">Download Your Free VoIP Buyer\'s Guide<img src="/sites/all/themes/gv_orange/css/images/click-here-button.png" /></a><div class="quote-final">' . t('<p><strong>Thank you</strong> for taking your time to complete our form. A VoIP Expert will be contacting you shortly to provide you with a personalized VoIP Service quote.</p><p>In the meantime, you can gain a great deal of VoIP information right here at <a href="http://getvoip.com">GetVoIP.com</a></p>') . '</div>';
      }
      elseif($submission['Version'] == '8-popup-provider') {
        $output = '<p>Thank you for the request. A specialist will contact you shortly to finalize your quote.</p>';
      }
      else {
        $output = '<p><strong>Thank you</strong> for taking your time to complete our form. A VoIP Expert will be contacting you shortly to provide you with a personalized VoIP Service quote.</p><p>In the meantime, you can gain a great deal of VoIP information right here at <a href="http://getvoip.com">GetVoIP.com</a></p>'; 
      }
      */
      switch ($post['version']) {
        
        case '5':
          $output = '<a class="guide" href="/pdfs/SMBVOIPAdvantagesWhitePaper.pdf" target="_blank">Download Your Free VoIP Buyer\'s Guide Here</a><div class="quote-final">' . t('<p><strong>Thank you</strong> for taking your time to complete our form. A VoIP Expert will be contacting you shortly to provide you with a personalized VoIP Service quote.</p><p>In the meantime, you can gain a great deal of VoIP information right here at <a href="http://getvoip.com">GetVoIP.com</a></p>') . '</div>';
          break;
        
        case '6':
        case '7':
        case '8':
          $output = '<a class="guide" href="/pdfs/SMBVOIPAdvantagesWhitePaper.pdf" target="_blank">Download Your Free VoIP Buyer\'s Guide<img src="/sites/all/themes/gv_orange/css/images/click-here-button.png" /></a><div class="quote-final">' . t('<p><strong>Thank you</strong> for taking your time to complete our form. A VoIP Expert will be contacting you shortly to provide you with a personalized VoIP Service quote.</p><p>In the meantime, you can gain a great deal of VoIP information right here at <a href="http://getvoip.com">GetVoIP.com</a></p>') . '</div>';
          break;
        
        case '8-popup-provider':
          $output = '<p>Thank you for the request. <br>A specialist will contact you shortly to finalize your quote.</p>';
          break;
        
        case '10-popup-provider':
        case 'exit-intent-v3-cloudContactCenter':  
          $output = '<div class="title-first">Download Your Free Call Center <div>Buyer' . "'" . 's Guide</div></div>
                <div class="wrap">
                  <a href="http://getvoip.com/pdfs/SMBVOIPAdvantagesWhitePaper.pdf" target="_blank"><div class="download"><div class="icon-download"></div><span>Download PDF</span></div></a>
                </div>
                <p class="thanks"><span>Thank you</span> for requesting a quote. A dedicated Call Center specialist will be calling you very shortly to finalize the quote. <br><br>In the meantime, visit <a href="http://getvoip.com/business">GetVoIP.com</a> to browse featured business phone providers.</p>
              ';
          break;
        
        case '1-demo-popup-provider':
          $output = '<p>Thank you for the request. <br>A specialist will be contacting you shortly to schedule your demo</p>';
          break;
        
        default:
          $output = '<p><strong>Thank you</strong> for taking your time to complete our form. A VoIP Expert will be contacting you shortly to provide you with a personalized VoIP Service quote.</p><p>In the meantime, you can gain a great deal of VoIP information right here at <a href="http://getvoip.com">GetVoIP.com</a></p>'; 
          break;
        
      }
      
      
    }
    elseif ($post['source'] == 'page') {
      // $post['source'] == 'page'
      switch ($post['version']) {
        case '1':
          $output .= '<script>top.location.href="http://getvoip.com/request-voip-phone-system-quote-final";</script>';
          break;
        
        case '2':
          $output .= '<script>top.location.href="http://getvoip.com/voip-provider-quotes-final";</script>';
          break;
        
        case '3':
          $output .= '<script>top.location.href="http://getvoip.com/compare-voip-solutions-final";</script>';
          break;
        
        case '4':
          $output .= '<script>top.location.href="http://getvoip.com/business-systems-final";</script>';
          break;
        
        case '5-IScope':
          $output .= '<script>top.location.href="http://getvoip.com/lp-iscope-final";</script>';
          break;
        
        case '6-UK-LP':
          $output .= '<script>top.location.href="http://getvoip.com/business-systems-uk-final";</script>';
          break;
        
        case '7':
          
          //$output .= '<script>top.location.href="http://getvoip.com/lp7-final";</script>';
          $output .= '<script>top.location.href="http://getvoip.com/service-quotes-final";</script>';
          break;
        
        case '7_uk':
          $output .= '<script>top.location.href="http://getvoip.com/service-quotes-uk-final";</script>';
          break; 
        
        case '7_ca':
          $output .= '<script>top.location.href="http://getvoip.com/service-quotes-ca-final";</script>';
          break; 
        
        case '8':
          $output .= '<script>top.location.href="http://getvoip.com/lpv8-final";</script>';
          break;
        
        case '8_uk':
          $output .= '<script>top.location.href="http://getvoip.com/lpv8-uk-final";</script>';
          break;
        
        case '9':
          $output .= '<script>top.location.href="http://getvoip.com/lpv9-final";</script>';
          break;
        
        case '10':
          $output .= '<script>top.location.href="http://getvoip.com/lpv10-final";</script>';
          break;
        
        case '10_uk':
          $output .= '<script>top.location.href="http://getvoip.com/lpv10-uk-final";</script>';
          break;
        case '10_ca':
          $output .= '<script>top.location.href="http://getvoip.com/lpv10-ca-final";</script>';
          break;
      }
      
    }
    elseif ($post['source'] == 'partner') {
      switch ($post['version']) {
        
        default:
          $output = 'Dear Partner, Thank you for the submission. We will contact you in case of nesessity.'; 
          break;
        
      }
    }
    
  }

  drupal_json_output(array('status' => $status, 'data' => $output/*, 'post' => $_POST, 'token' => $post['token'], 'test_token' => $test_token, 'valid_token' => $valid_token, 'letter' => $letter*/));
}

/*
 * 
double triggerring of a submit form because of double launching almost the same code from the Request quote block which actually hasn't appeared on the page anyway (before recent time it was absolutely the same so the problem was autosolved quietly :) 
 */


/*
 * Check it a submission is allowed to be sent to different providers.
 */
function gv_misc_getAllowedProvidersToSendSubmission(&$submission) {
  
  $allowedProviders = array();
  $submission['sent_via'] = '';
  
  if (in_array($submission['First Name'], array('afs', 'a4s', 'test'))) {
    $submission['sentToRemoteProviders'] = array('TEST submission, was not sent to anywhere' => TRUE);
    return;
  }
  $remoteProvidersSubmissionsSettings = unserialize(REMOTE_PROVIDERS_SUBMISSIONS_SETTINGS);
   
  foreach ($remoteProvidersSubmissionsSettings as $provider => $provider_data) {
    if ($provider_data['function']($submission, 'checkIfShouldBeSent')) {
      $allowedProviders[$provider] = TRUE;
      $submission['sent_via'] .= $provider . ': Quote page (by user); ';
    }
  }
  
  $submission['sentToRemoteProviders'] = !empty($allowedProviders) ? $allowedProviders : array('Was not sent to anywhere: TEST submission OR no allowed providers for autolead...' => TRUE);
}


/*
 * Send a quote to remote providers.
 */
function gv_misc_sendQuoteToProviders($submission, $params = NULL, $sendSubmissionToGetvoipEmail = TRUE, $sendFromBlock = FALSE) {
      
  global $language;
  
  if (!$params) {
    $params['request_data'] = $submission;
  }
  
  // Test submissions.
if ($submission['First Name'] == 'JC' || $submission['First Name'] == 'jc' || @$submission['Company'] == 'JC' || strpos($submission['Phone #'], '9876') !== FALSE ) {
    // Test for Jive Communications
    //drupal_mail('gv_misc', 'request_quote', 'leads@getvoip.com', $language->language, $params);

    // Reset 'Sent' info to Test submission info.
    $submission['sentToRemoteProviders'] = array('Jive-TEST' => 1);
    $submission['sent_via'] = ' Jive: Quote page ( --TEST-- by user)';
    
    // Send a lead to Remote providers.
    if ($submission['Source'] != 'block') {
      gv_misc_SendRequestToJiveCommunications($submission, 'mustBeSent');
    }
  }
  
  elseif ($submission['First Name'] == 'RingCentral' || $submission['First Name'] == 'ringcentral' || @$submission['Company'] == 'RC') {
    // Test for Nextiva
    drupal_mail('gv_misc', 'request_quote', 'leads@getvoip.com', $language->language, $params);

    // Send a lead to Remote providers.
    if ($submission['Source'] != 'block') {
      gv_misc_SendRequestToRingCentral($submission);
    }
  }
  //elseif ($submission['First Name'] == 'Nextiva' || $submission['First Name'] == 'nextiva' || $submission['Company'] == 'Nextiva') {
  elseif (strpos($submission['Email'], '@nxtoing.com')) {
    // Test for Nextiva
    $params['request_data']['tst'] = 'Nextiva';
    drupal_mail('gv_misc', 'request_quote', 'leads@getvoip.com', $language->language, $params);

    // Send a lead to Remote providers.
    //if ($submission['Source'] != 'block') {
      gv_misc_SendRequestToNextiva($submission);
    //}
  }
  elseif (@$submission['First Name'] != 'afs' && @$submission['First Name'] != 'a4s' && @$submission['First Name'] != 'test' && @$submission['Name'] != 'afs' && @$submission['Name'] != 'a4s' && @$submission['Name'] != 'test') {
    
    if ($sendSubmissionToGetvoipEmail) {
      // Normal send if not a test from a4s
      drupal_mail('gv_misc', 'request_quote', 'leads@getvoip.com', $language->language, $params);
    }

    // Send a lead to Remote providers.
    if ($submission['Source'] != 'block' || $sendFromBlock == TRUE) {
      
//      global $user;
//      if ($user->uid == 1) {
//        $remoteProvidersSubmissionsSettings = array(
//          'Nextiva' => 'gv_misc_SendRequestToNextiva_test',
//        );
//      } else 
      {
        $remoteProvidersSubmissionsSettings = unserialize(REMOTE_PROVIDERS_SUBMISSIONS_SETTINGS);
      }
      
      
      foreach ($remoteProvidersSubmissionsSettings as $provider => $provider_data) {
        $provider_data['function']($submission);
      }
      
      /*
      gv_misc_SendRequestToVocalocity($submission);
      gv_misc_SendRequestTo8x8($submission);
      gv_misc_SendRequestToNextiva($submission);
      gv_misc_SendRequestToRingCentral($submission);
      */
    }
  }
 
}        


function gv_misc_isSubmissionToProviderAllowed($submission, $provider_function) {

  static $map_function_to_sources;
  
  
  if (!$map_function_to_sources) {
    $remoteProvidersSubmissionsSettings = unserialize(REMOTE_PROVIDERS_SUBMISSIONS_SETTINGS);
    foreach ($remoteProvidersSubmissionsSettings as $provider => $provider_data) {
      $map_function_to_sources[$provider_data['function']] = $provider_data;
    }
  }
  
  if (!empty($map_function_to_sources[$provider_function]['allowed_sources']) && in_array($submission['Source'] . '_' . $submission['Version'], $map_function_to_sources[$provider_function]['allowed_sources'])) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}


function gv_misc_SendRequestToNextiva_test($submission, $op = 'sendIfAllowed') {
  
  
  dpm($submission);
  
  
  
  // If allowedToBeSent...
  $allowedToBeSent = TRUE;
  
  // Skip sending if "More than 50".
//  if ($submission['Phones needed'] == 'More than 50') {
//    $allowedToBeSent = FALSE;
//  }

  $allowedToBeSent = $allowedToBeSent ? gv_misc_isSubmissionToProviderAllowed($submission, __FUNCTION__) : $allowedToBeSent;
    
  if ($op == 'checkIfShouldBeSent') {
    return $allowedToBeSent;
  }
  elseif ($op == 'sendIfAllowed' && !$allowedToBeSent) {
    return FALSE;
  }
  
  
  dpm($op);
  
  return;
  
  
  
  
//  elseif ($op == 'mustBeSent') {
//    // Just sent it unconditionally.
//  }
  
  /*
  $map_main = array(
    'First Name' => 'first_name',
    'Last Name' => 'last_name',
    'Phones needed' => 'employees', // '00N70000002xLFJ', // Number of Locations  ///////////  '00N70000002LdcG', // Number of Phone Lines  
    //'Quote type' => '00N70000002Lgx0', // Comments
    //'Buying Time Frame' => '00N70000002eDO6', 
    'Company' => 'company',
    'Email' => 'email',
    //'Website' => 'URL',
    'Phone #' => 'phone',
  );
 */
  $map_main = array(
    'First Name' => 'FirstName',
    'Last Name' => 'LastName',
    'Phones needed' => 'Number of Phone Lines',
    //'Quote type' => '00N70000002Lgx0', // Comments
    'Buying Time Frame' => 'Notes__c', 
    'Company' => 'Company',
    'Email' => 'Email',
    'Phone #' => 'Phone',
  );
      
  // Set initial fields.
  /*
  $data_to = array(
    'lead_source' => 'GetVoIP',
    'oid' => '00D700000009mLY',
    'retURL' => 'http://getvoip.com',
    'debug' => 1,
    'debugEmail' => 'marketo@nextiva.com', //'all4senses@gmail.com',
      
    'city' => 'N/A',
    'state' => 'N/A',
    'street' => 'N/A',
    'zip' => 'N/A', 
    'title' => 'N/A',
    'country' => 'N/A',
    //'employees' => 'N/A',
      
    //'00N70000002xLFE' => 'Other',
    //'00N70000002xLFT' => 'Other',
    '00N70000002Lgx0' => 'N/A', // Comments
  );
  */
  $data_to = array(
    'LeadSource' => 'Get VoIP',
    'lpId' => '1046',
    'subId' => '209',
    'munchkinId' => '961-FUG-994',
    'kw' => 'not found',
    'cr' => 'not found',
    'searchstr' => 'not found',
    'lpurl' => 'http://business-voip.nextiva.com/getvoip.html?cr={creative}&kw={keyword}',
    'formid' => time(), // 26
    'returnURL' => 'http://business-voip.nextiva.com/ThankYou.html',
    'retURL' => 'http://business-voip.nextiva.com/ThankYou.html',
    'returnLPId' => '21',
    '_mkt_disp' => 'return',
    '_mkt_trk' => 'id:961-FUG-994&token:_mch-nextiva.com-1363692977544-89345',
    
  );
  
  // Map data to remote vars names.
  foreach ($map_main as $getvoip_key => $remote_key) {
    $data_to[$remote_key] = isset($submission[$getvoip_key]) ? $submission[$getvoip_key] : '';
  }
  
  //$url = 'http://getvoip.com/request-test';
  //$url = 'https://www.salesforce.com/servlet/servlet.WebToLead?encoding=UTF-8';
  $url = 'http://business-voip.nextiva.com/index.php/leadCapture/save';
  
  
  $curl = curl_init();
  curl_setopt($curl, CURLOPT_URL, $url);
  curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
  curl_setopt($curl, CURLOPT_TIMEOUT, 300);
  curl_setopt($curl, CURLOPT_POST, TRUE);
  curl_setopt($curl, CURLOPT_POSTFIELDS, $data_to);
  $data_from = curl_exec($curl);
  if ($data_from === false) {
    $data_from = 'Error!!! 
' . curl_error($curl);
  }
  curl_close($curl);
 

  // Report to a4s.
  $out = 'Quote Request submission form:

';
  foreach ($submission as $key => $value) {
   if ($value) {
      $out .= "$key = $value
";
    }
  }
 
 
  // Send a report to admin.
  global $language;
  $params['report'] = $out . '
    

' . $data_from;
  drupal_mail('gv_misc', 'nextiva_send_report', 'all4senses@gmail.com', $language->language, $params);
  
  return $params['report'];
}


/*
 * Test server instead of Vocalocity/Nextiva. 
 */
/*
function gv_misc_testPage_requestTest() {
  
  $status = TRUE;
  $output = 'gv_misc_testPage_requestTest()----';
  
  $post = array();
  foreach ($_POST as $key => $value) {
    $post[$key] = check_plain(strip_tags($value));
  }
  
  global $language;
  $params['request_data'] = $post;

  drupal_mail('gv_misc', 'request_quote', 'all4senses@gmail.com', $language->language, $params);

  drupal_json_output(array('status' => $status, 'data' => $output));
}
*/


/**
 * Test page IFRAME
 */
function gv_misc_testPage_iframe() {
  
// iframes (wide and narrow) for business voip providers chart.
  
  $out = '';
  
  if (@arg(1) == 'narrow') {
    $out .= '<iframe id="bu-chart" src="http://getvoip.com/get/iframe/business-voip-chart/narrow" scrolling="no" width="590px" height="400px" frameborder="0" seamless="seamless"></iframe>';
  }
  else {
    // wide.
    $out .= '<iframe id="bu-chart" src="http://getvoip.com/get/iframe/business-voip-chart" scrolling="no" width="822px" frameborder="0" seamless="seamless"></iframe>';
  }
  
  $out .= '<SCRIPT>
      function setGvIframeSize(pixels){
        /*pixels+=32;*/
        /*alert(document.getElementById("bu-chart").style.height);*/
        /*document.getElementById("bu-chart").style.height=pixels+"px";*/
        
      }
    </SCRIPT>';
  
//  $out = '<SCRIPT>
//      function setGvIframeSize(pixels){
//        /*pixels+=32;*/
//        document.getElementById("bu-chart").style.height=pixels+"px";
//        /*alert(document.getElementById("bu-chart").style.height);*/
//      }
//    </SCRIPT>' . $out;
   
 
  //$out .= '<iframe id="gv-quote-request-block" src="http://getvoip.com/get/iframe/quote-request-block" scrolling="no" width="245px" height="335px" frameborder="0" seamless="seamless"></iframe>';
  
  return $out;
  
}


/**
 * Test page IFRAME for SIP
 */
function gv_misc_testPage_iframe_sip() {
  
// iframes (wide and narrow) for business voip providers chart.
  
  $out = '';
  
  if (@arg(1) == 'narrow') {
    $out .= '<iframe id="bu-chart" src="http://getvoip.com/get/iframe/sip-voip-chart/narrow" scrolling="no" width="590px" height="400px" frameborder="0" seamless="seamless"></iframe>';
  }
  else {
    // wide.
    $out .= '<iframe id="bu-chart" src="http://getvoip.com/get/iframe/sip-voip-chart" scrolling="no" width="950px" height="570px" frameborder="0" seamless="seamless"></iframe>';
  }
  
  $out .= '<SCRIPT>
      function setGvIframeSize(pixels){
        /*pixels+=32;*/
        /*alert(document.getElementById("bu-chart").style.height);*/
        /*document.getElementById("bu-chart").style.height=pixels+"px";*/
        
      }
    </SCRIPT>';
  
//  $out = '<SCRIPT>
//      function setGvIframeSize(pixels){
//        /*pixels+=32;*/
//        document.getElementById("bu-chart").style.height=pixels+"px";
//        /*alert(document.getElementById("bu-chart").style.height);*/
//      }
//    </SCRIPT>' . $out;
   
 
  //$out .= '<iframe id="gv-quote-request-block" src="http://getvoip.com/get/iframe/quote-request-block" scrolling="no" width="245px" height="335px" frameborder="0" seamless="seamless"></iframe>';
  
  return $out;
  
}


/*
function gv_misc_imagemagick_save_alter($image, $context) {
// dpm($image);
// dpm($context);
}
*/

/*
 * Work around for fixing problem with imagemagic, 
 * where it by default converts png images of any colors sets (indexed or truecolor) with any depth to 16bit rgb image, that increasing the image size in several times.
 * https://www.google.ru/webhp?sourceid=chrome-instant&ion=1&espv=2&ie=UTF-8#newwindow=1&q=imagemagick+resize+increases+file+size
 * http://www.imagemagick.org/script/command-line-options.php?#depth
 * http://www.imagemagick.org/Usage/formats/#png_formats
*/
function gv_misc_imagemagick_arguments_alter(&$args, $context) {
 //dpm($args);
 //dpm($context);
 
 
// global $user;
// if ($user->uid == 1) 
 {
   
      $ext = explode('.', $context['source_original']);
      $ext = $ext[count($ext) - 1];
      //dpm('ext = ' . $ext);
      
      if ($ext == 'png') {
              // If it is png, find out if it's indexed or true color image
              
              $args[] = '-depth 8';
        
              $test_image = new stdClass();
              $test_image->toolkit = 'gd';
              $test_image->source = $context['source_original'];
              $test_image->info = image_get_info($context['source_original'], $test_image->toolkit);
              //$image->info['extension'] = $ext;

              if (is_array($test_image->info)) {

                // Load image resource via GD lib, to make it possible to use GD functions.
                image_gd_load($test_image);

                if ($is_indexed_png = imagecolorstotal($test_image->resource)) {
                  // $is_indexed_png = number of color in indexed png image, or 0 for TRUECOLOR image 
                  // if it's indexed coolors png, we have to add png8: to the file name
                  $context['destination_format'] = 'png8';
                }


              } // End of if (isset($test_image->info) && is_array($test_image->info)) {
      
      } // End of // End of if ($ext == 'png') {
        
 } // End of if ($user->uid == 1) {

}


/**
 * Creates imagecache image if it doesnt exist.
 */
function gv_misc_createCachedImageIfNotExists($relative_path, $style_name = NULL, $force_recreate = FALSE) {
  // Assure that the imagecache file is created already, or recreate it.
  $relative_path = str_replace('http://getvoip.com/', '', $relative_path);
  
  if ($force_recreate || !file_exists($relative_path)) {
    
    ///watchdog('.....' . $relative_path, ', $_server -------> '. @$_SERVER['REQUEST_URI'] . ' / ' . @$_SERVER['REDIRECT_URL'], NULL, WATCHDOG_WARNING);
    
    // Find out the style name from 'sites/default/files/styles/logo_provider_chart_main/public/p/logos/Nextiva-Logo2.png';
    if (!$style_name) {
      $path_part = explode('/styles/', $relative_path);
      $path_part = explode('/public/', $path_part[1]);
      $style_name = $path_part[0];
    }
    $style = image_style_load($style_name);
    //$styled_file_path = 'sites/default/files/styles/logo_provider_chart_main/public/p/logos/Nextiva-Logo2.png';
    //$original_file_path = 'sites/default/files/p/logos/Nextiva-Logo.png';
    $file_path = str_replace('styles/' . $style_name . '/public/', '', $relative_path);
    $source = gv_misc_getStreamUriFromRelativePath($file_path);
    $destination = image_style_path($style_name, $source);
    if (!image_style_create_derivative($style, $source, $destination)) {
      return FALSE;
    }
    return 'updated';
  }
  
  return TRUE;
}


/**
 * Rebuilds providers logos sprites.
 */
function gv_misc_rebuildProvidersLogosSprites($listing_pos_fields = NULL) {
  
  $providers_logos_sprites = array(
    'home_top_providers' => array('image_style' => 'logo_provider_chart_main', 'providers_views_displays' => array(/*'block'*/ 'block_top_business_cmp', 'block_1'), 'listing_pos_fields' => array('field_p_erating', 'field_p_erating_residential')),
    
    'top_bu_providers' => array('image_style' => 'logo_provider_chart_big', 'providers_views_displays' => array('block_p_bu_page', 'block_p_bu_page_cmp'), 'listing_pos_fields' => array('field_p_erating')),
      
    'top_wc_providers' => array('image_style' => 'logo_provider_chart_big', 'providers_views_displays' => array('block_p_wc_page'), 'listing_pos_fields' => array('field_p_erating_wc')),  
     
    'top_crm_providers' => array('image_style' => 'logo_provider_chart_big', 'providers_views_displays' => array('block_p_crm_page'), 'listing_pos_fields' => array('field_p_erating_crm')),  
      
    
    'top_re_providers' => array('image_style' => 'logo_provider_vertical_chart', 'providers_views_displays' => array('block_p_re_page'), 'listing_pos_fields' => array('field_p_erating_residential')),
    'top_re_providers_chart_big' => array('image_style' => 'logo_provider_chart_big', 'providers_views_displays' => array('block_p_re_page'), 'listing_pos_fields' => array('field_p_erating_residential')),   
    
    'top_bu_providers_rev' => array('image_style' => 'logo_provider_chart_main', 'providers_views_displays' => array('bl_p_bu_rev_page_cmp'), 'listing_pos_fields' => array('field_p_erating')),
    'top_re_providers_rev' => array('image_style' => 'logo_provider_chart_main', 'providers_views_displays' => array('bl_p_re_rev_page'), 'listing_pos_fields' => array('field_p_erating_residential')),
    
      
    'top_pbx_providers' => array('image_style' => 'logo_provider_vertical_chart', 'providers_views_displays' => array('block_p_pbx_page', 'block_p_pbx_page_cmp'), 'listing_pos_fields' => array('field_p_erating_pbx')),
    
    //'top_sip_providers' => array('image_style' => 'logo_provider_chart_main', 'providers_views_displays' => array('block_p_sip_page'), 'listing_pos_fields' => array('field_p_erating_sip')),
    'top_sip_providers' => array('image_style' => 'logo_provider_chart_big', 'providers_views_displays' => array('block_p_sip_page'), 'listing_pos_fields' => array('field_p_erating_sip')),
      
    'top_rsl_providers' => array('image_style' => 'logo_provider_chart_big', 'providers_views_displays' => array('block_p_rsl_page'), 'listing_pos_fields' => array('field_p_erating_rsl')),
    
    //'top_ifa_providers' => array('image_style' => 'logo_provider_chart_main', 'providers_views_displays' => array('block_p_ifa_page'), 'listing_pos_fields' => array('field_p_erating_ifa')),
    'top_ifa_providers' => array('image_style' => 'logo_provider_chart_big', 'providers_views_displays' => array('block_p_ifa_page'), 'listing_pos_fields' => array('field_p_erating_ifa')),
      
    //'top_ca_providers' => array('image_style' => 'logo_provider_chart_main', 'providers_views_displays' => array('block_p_bu_ca_page', 'block_p_bu_ca_page_cmp', 'block_p_re_ca_page'), 'listing_pos_fields' => array('field_p_erating_bu_ca', 'field_p_erating_re_ca')),
    'top_ca_providers' => array('image_style' => 'logo_provider_chart_big', 'providers_views_displays' => array('block_p_bu_ca_page', 'block_p_bu_ca_page_cmp', 'block_p_re_ca_page'), 'listing_pos_fields' => array('field_p_erating_bu_ca', 'field_p_erating_re_ca')),
      
    //'all_reviews_providers' => array('image_style' => 'logo_provider_chart_main', 'providers_views_displays' => array('block_top_bu_ar', 'block_top_bu_ar_cmp', 'block_top_re_ar'), 'listing_pos_fields' => array('field_p_erating', 'field_p_erating_residential')), 
    'all_reviews_providers' => array('image_style' => 'logo_provider_chart_big', 'providers_views_displays' => array('block_top_bu_ar', 'block_top_bu_ar_cmp', 'block_top_re_ar'), 'listing_pos_fields' => array('field_p_erating', 'field_p_erating_residential')), 
      
    'top_cb_providers' => array('image_style' => 'logo_provider_chart_big', 'providers_views_displays' => array('block_top_cb'), 'listing_pos_fields' => array('field_p_erating_cb')),
    
    'top_cc_providers' => array('image_style' => 'logo_provider_chart_big', 'providers_views_displays' => array('block_p_cc_page'), 'listing_pos_fields' => array('field_p_erating_cc')),  
  );
  
  
  // Skip refreshing sprites without selected listing fields.
  if($listing_pos_fields && $gv_providers_sprites = variable_get('gv_providers_sprites')) {
    //dpm($gv_providers_sprites);
    foreach ($providers_logos_sprites as $providers_logos_sprite_title => $providers_logos_sprite_data) {
      $in_array = FALSE;
      foreach($listing_pos_fields as $listing_pos_field) {
        if (in_array($listing_pos_field, $providers_logos_sprite_data['listing_pos_fields'])) {
          $in_array = TRUE;
        }
      }
      if (!$in_array) {
        unset($providers_logos_sprites[$providers_logos_sprite_title]);
      }
    }
  }
  else {
    $gv_providers_sprites = array();
  }
  
  //dpm($gv_providers_sprites);
  
  //cache_clear_all('*', 'cache_views', TRUE);
  cache_clear_all('*', 'cache_views_data', TRUE);
  
  $all_data_quick = gv_misc_getProvidersDataQuick();
  
  //$image_style_name = 'logo_provider_chart_main';
  
  foreach ($providers_logos_sprites as $providers_logos_sprite_name => $providers_logos_sprite) {
    
    // Decrease width of images for vertical charts pages.
//    if ($providers_logos_sprite_name == 'top_bu_providers') {
//      $image_style_name = 'logo_provider_vertical_chart';
//      dpm('new style used');
//    }
    
    $image_style_name = $providers_logos_sprite['image_style'];
    //dpm($providers_logos_sprite_name . ' => ' . $image_style_name);
    
    foreach ($providers_logos_sprite['providers_views_displays'] as $providers_views_display) {
      
      $view = views_get_view('providers');
      $view->execute($providers_views_display);
      
      if ($view->result) {
        
        foreach ($view->result as $provider) {
          
          $input_providers_data[$providers_logos_sprite_name][$provider->nid]['name'] = $all_data_quick[$provider->nid]['name'];
          
          $input_providers_data[$providers_logos_sprite_name][$provider->nid]['i_logo_uri'] = $all_data_quick[$provider->nid]['i_logo_uri'];
          $input_providers_data[$providers_logos_sprite_name][$provider->nid]['themed_image_src'] = str_replace('http://getvoip.com/', '', image_style_url($image_style_name, $all_data_quick[$provider->nid]['i_logo_uri']));
          $input_providers_data[$providers_logos_sprite_name][$provider->nid]['themed_image_src'] = urldecode($input_providers_data[$providers_logos_sprite_name][$provider->nid]['themed_image_src']); //str_replace('%20', ' ', $input_providers_data[$providers_logos_sprite_name][$provider->nid]['themed_image_src']);
                  
          // Assure that the imagecache file is created already, or recreate it.
          gv_misc_createCachedImageIfNotExists($input_providers_data[$providers_logos_sprite_name][$provider->nid]['themed_image_src']);
          
          $input_providers_data[$providers_logos_sprite_name][$provider->nid]['themed_image_html'] = theme('gv_misc_image_style', array('style_name' => $image_style_name, 'path' => $all_data_quick[$provider->nid]['i_logo_uri'], 'alt' =>  $all_data_quick[$provider->nid]['i_logo_alt'], 'title' =>  $all_data_quick[$provider->nid]['i_logo_title'] ));
          
          //$out .= $input_providers_data[$providers_logos_sprite_name][$provider->nid]['themed_image_html'];
        }
        
      }
      
    }
    
  }
  
  $out_sprite_path = 'sites/default/files/p/';
  $out_sprite_ext = 'png';
  
  dpm($input_providers_data);
  
  foreach ($input_providers_data as $providers_logos_sprite_name => $providers_logos_sprite) {
    
    $out_sprite['file'] = $out_sprite_path . $providers_logos_sprite_name . '.' . $out_sprite_ext;
    $out_sprite['uri'] = 'public://p/' . $providers_logos_sprite_name . '.' . $out_sprite_ext;
    $out_size = array();
    
    foreach ($providers_logos_sprite as $nid => $provider) {

      if($input_image['info'] = getimagesize($provider['themed_image_src'])) {
        // Set a height (all providers logos height + 10px between each others).
        if (empty($out_size['h'])) {
          $out_size['h'] = $input_image['info'][1];
        }
        else {
          $out_size['h'] += 10 + $input_image['info'][1];
        }
        // Set once a width of the sprite by the widest one.
        if (empty($out_size['w']) || $out_size['w'] < $input_image['info'][0]) {
          $out_size['w'] = $input_image['info'][0];
        }
      }
    }
    
    $out_sprite['img'] = imagecreatetruecolor($out_size['w'], $out_size['h']);
  
    // Make the background transparent.
    $white = imagecolorallocate($out_sprite['img'], 255, 255, 255);
    $transparent = imagecolortransparent($out_sprite['img'],$white);

    // Set transparency for the output image.
    imagefilledrectangle($out_sprite['img'], 0, 0, $out_size['w'], $out_size['h'], $transparent);
  
    $current_y = 0;
    
    // Reset the sprite data to avoid remaining the old data. 
    $gv_providers_sprites[$providers_logos_sprite_name] = array();
    
    foreach ($providers_logos_sprite as $nid => $provider) {
      if ($input_image['img'] = gv_misc_loadImage($provider['themed_image_src'])) {
        //$input_image['info'] = getimagesize(str_replace('%20', ' ', $provider['themed_image_src']));
        $input_image['info'] = getimagesize(urldecode($provider['themed_image_src']));
        imagecopy($out_sprite['img'], $input_image['img'], 0, $current_y, 0, 0, $input_image['info'][0], $input_image['info'][1]);
        
        $gv_providers_sprites[$providers_logos_sprite_name]['data'][$nid]['y'] = $current_y;
        $gv_providers_sprites[$providers_logos_sprite_name]['data'][$nid]['w'] = $input_image['info'][0];
        $gv_providers_sprites[$providers_logos_sprite_name]['data'][$nid]['h'] = $input_image['info'][1];
        $gv_providers_sprites[$providers_logos_sprite_name]['time'] =  time();
        
        $current_y += 10 + $input_image['info'][1];
      }
    }
  
    // Save a new sprite file.
    imagepng($out_sprite['img'], $out_sprite['file']);
    
    // Optimize the image.
    
    /////////gv_misc_imageOptimizeOnServer(array('uri' => $out_sprite['uri'], 'filemime' => 'image/png'));

    // Show image.
    //Header("Content-type: image/png");
    //imagepng($out_sprite['img'], NULL, 0);
  }
    
  //dpm($gv_providers_sprites);
  //dpm($input_providers_data);
  
  variable_set('gv_providers_sprites', $gv_providers_sprites);
  
  
  //drupal_flush_all_caches();
  // Not so hard clearing.
  views_invalidate_cache();
  cache_clear_all('*', 'cache_views_data', TRUE);
  
  drupal_set_message('Cache is flushed after the prividers logos sprites regenerating.', 'warning');
  
  if (!$listing_pos_fields) {
    drupal_set_message('All providers logos sprites have been regenerated!');
    drupal_goto();
  }
  
}


/**
 * Creates time elapsed format.
 */
function gv_misc_elapsed_time($timestamp, $precision = 2) { 
  $time = time() - $timestamp; 
  $a = array('decade' => 315576000, 'year' => 31557600, 'month' => 2629800, 'week' => 604800, 'day' => 86400, 'hour' => 3600, 'min' => 60, 'sec' => 1); 
  $i = 0; 
    foreach($a as $k => $v) { 
      $$k = floor($time/$v); 
      if ($$k) $i++; 
      $time = $i >= $precision ? 0 : $time - $$k * $v; 
      $s = $$k > 1 ? 's' : ''; 
      $$k = $$k ? $$k.' '.$k.$s.' ' : ''; 
      @$result .= $$k; 
    } 
  return $result ? $result.'ago' : '1 sec to go'; 
} 


/**
 * Get new users from Disqus and update local variable/db.
 */
function gv_misc_disqus_getNewUsers() {
  
  $out = 'No new Disqus users this time.';
  
  $gv_disqus_users = unserialize(variable_get('gv_disqus_users', serialize(array())));
  
  $new_gv_disqus_users = gv_misc_disqus_getUsers();
  //dpm($new_gv_disqus_users);
  
  if ($gv_disqus_users != $new_gv_disqus_users) {
    
    $new_users = array_diff_key($new_gv_disqus_users, $gv_disqus_users);
    
    $gv_disqus_users += $new_gv_disqus_users;
    variable_set('gv_disqus_users', serialize($gv_disqus_users));
    
    if (!empty($new_users)) {
      $new_users = print_r($new_users, TRUE);
      $out = 'Something has changed (new users, less users, etc).
 

<pre>' . $new_users . '</pre>';
    }
    
  }
  
  global $language;
  $params['report'] = $out;
  drupal_mail('gv_misc', 'new_disqus_user', 'all4senses@gmail.com', $language->language, $params);
  //dpm(unserialize(variable_get('gv_disqus_users')));
  
  //return $out;
  echo $out;
}

  
/**
 * Get users from Disqus.
 */
function gv_misc_disqus_getUsers($next_id = NULL) {

  $remote_users = array();
  
  //dpm($next_id);
  
  $url = 'https://disqus.com/api/3.0/forums/listUsers.json?' . 
    'forum=getvoip' .
    '&limit=100' .
    ($next_id ? '&since_id=' . $next_id : '') .
    '&api_secret=IlTOWiFAZGYxGCUdjCEMQqzTRVl9hpG7f9KrSAkSqcbFDH4duZADgQUy0asDTHOW'
    ;
  
  $data_from = gv_misc_curlGET($url);
  
  if ($data_from) {
    $data_from = json_decode($data_from);
    //dpm($data_from);
    if (!$data_from->code) {
      
      foreach ($data_from->response as $remote_user) {
        if (!empty($remote_user->email) && strpos($remote_user->email, 'getvoip') === FALSE ) {
          $remote_users[$remote_user->id] = array('name' => $remote_user->name, 'email' => $remote_user->email);
        }
      }
      
      if ($data_from->cursor->hasNext) {
        $next_id = explode(':', $data_from->cursor->next);
        $next_id = $next_id[0];
        $remote_users += gv_misc_disqus_getUsers($next_id);
        return $remote_users;
      }
      
    } // End of if (!$data_from->code) {
  } // End of if ($data_from) {.
  
  return $remote_users;
}
 

/**
 * Curl - GET.
 */
function gv_misc_curlGET($url) {
  
  // GET.
  $curl = curl_init();
  curl_setopt($curl, CURLOPT_URL, $url);
  curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
  curl_setopt($curl, CURLOPT_TIMEOUT, 300);
  
  // If POST.
  //  curl_setopt($curl, CURLOPT_POST, TRUE);
  //  curl_setopt($curl, CURLOPT_POSTFIELDS, $params);
  
  $data_from = curl_exec($curl);
  curl_close($curl);
  
  return $data_from;
}


/**
 * Returns Quote Request Block for an iframe.
 */
function gv_misc_getIframe_QuoteRequestBlock() {

  $block_data = array('module' => 'gv_blocks', 'delta' => 'request_quote_v6', 'shadow' => FALSE, 'subject' => 'Get Free VoIP Quotes', 'subjectTag' => 'h3', 'replaceUnderlinesWithDashesInID' => TRUE);
  //$block_data['no_subject'] = TRUE;
  $out = '<div class="sidebar">' . gv_blocks_getBlockThemed($block_data) . '</div>';
  
  return $out;
}


/**
 * Returns TopProvidersBu chart for an iframe.
 */
function gv_misc_getIframe_TopProvidersBu() {
  
  // Get block for Top pick business providers chart.
  //if (@arg(3) == 'narrow') 
  {
    $block_data = array('module' => 'views', 'delta' => 'providers-block_p_bu_iframe', 'shadow' => FALSE);
  }
//  else {
//    // wide.
//    $block_data = array('module' => 'views', 'delta' => 'providers-block_p_bu_page', 'shadow' => FALSE);
//    gv_misc_loadColorboxForVideoLinks();
//  }
  $block_data['no_subject'] = TRUE;
  $out = gv_blocks_getBlockThemed($block_data) 
    . '<SCRIPT>
        /*console.log("hi!");*/
        /*parent.setGvIframeSize(document.body.scrollHeight);*/
        
        window.parent.postMessage(document.body.scrollHeight + 32 + "px", "*");
        
        /*alert("h: " + document.body.scrollHeight);*/
        /*console.log("h: " + document.body.scrollHeight);*/
       </SCRIPT>';
  
  return $out;
}


/**
 * Returns TopProvidersSIP chart for an iframe.
 */
function gv_misc_getIframe_TopProvidersSIP() {
  
  // Get block for Top pick business providers chart.
  //if (@arg(3) == 'narrow') 
  {
    $block_data = array('module' => 'views', 'delta' => 'providers-block_p_sip_iframe', 'shadow' => FALSE);
  }
//  else {
//    // wide.
//    $block_data = array('module' => 'views', 'delta' => 'providers-block_p_bu_page', 'shadow' => FALSE);
//    gv_misc_loadColorboxForVideoLinks();
//  }
  $block_data['no_subject'] = TRUE;
  $out = gv_blocks_getBlockThemed($block_data) 
    . '<SCRIPT>
        /*console.log("hi!");*/
        /*parent.setGvIframeSize(document.body.scrollHeight);*/
        
        window.parent.postMessage(document.body.scrollHeight + 32 + "px", "*");
        
        /*alert("h: " + document.body.scrollHeight);*/
        /*console.log("h: " + document.body.scrollHeight);*/
       </SCRIPT>';
  
  return $out;
}


/**
 * Send a request to Vocalocity.
 */
function gv_misc_SendRequestToVocalocity($submission, $op = 'sendIfAllowed') {
  
  
//  global $user;
//  if ($user->uid == 1) {
//    dpm(__FUNCTION__);
//    return;
//  }
  
  
  // If allowedToBeSent...
  $allowedToBeSent = TRUE;
  
  // Skip sending if "More than 50".
  if (@$submission['Phones needed'] == 'More than 50') {
    $allowedToBeSent = FALSE;
  }
  
  
  $allowedToBeSent = $allowedToBeSent ? gv_misc_isSubmissionToProviderAllowed($submission, __FUNCTION__) : $allowedToBeSent;
  
  
  if ($op == 'checkIfShouldBeSent') {
    return $allowedToBeSent;
  }
  elseif ($op == 'sendIfAllowed' && !$allowedToBeSent) {
    return FALSE;
  }
//  elseif ($op == 'mustBeSent') {
//    // Just sent it unconditionally.
//  }
  
  
  
      $map_main = array(
        'First Name' => '7772_177925pi_7772_177925',
        'Last Name' => '7772_177935pi_7772_177935',
        'Phones needed' => '7772_178005pi_7772_178005',
        'Buying Time Frame' => '7772_177985pi_7772_177985',
        'Company' => '7772_177965pi_7772_177965',
        'Email' => '7772_177955pi_7772_177955',
        'Website' => '7772_177975pi_7772_177975',
        'Phone #' => '7772_177945pi_7772_177945',
      );
      
      $map_timeframe = array(
        'ASAP' => '3791',
        //'Less than 1 month' => '3681',
        '1-3 Months' => '3691',
        '3-6 Months' => '3701',
        //'More than 6 months' => '3711',
      );
      
      $map_phonesNeeded = array(
        '1' => '58655',
        '2 - 4' => '58655',
        '1 - 4' => '58655',
        '5 - 10' => '58665',
        '11 - 20' => '58675',
        '21 - 50' => '58685',
      );
      
  
  // Map data to remote vars names.
  foreach ($map_main as $getvoip_key => $remote_key) {
    if ($getvoip_key == 'Buying Time Frame') {
      $data_to[$remote_key] = $map_timeframe[$submission[$getvoip_key]];
    }
    elseif ($getvoip_key == 'Phones needed') {
      $data_to[$remote_key] = @$map_phonesNeeded[@$submission[$getvoip_key]];
    }
    elseif ($getvoip_key == 'Company' && empty($submission[$getvoip_key])) {
      $data_to[$remote_key] = 'Unavailable';
    }
    else {
      $data_to[$remote_key] = isset($submission[$getvoip_key]) ? $submission[$getvoip_key] : '';
    }
  }
  
  // Convert Name field to to two fields First Name and Last Name
  if (empty($submission['First Name']) && !empty($submission['Name'])) {
    $name = explode(' ', $submission['Name']);
    if (count($name) > 1) {
      $data_to[$map_main['First Name']] = $name[0];
      $data_to[$map_main['Last Name']] = $name[1];
    }
    else {
      // If the Name field contain only one word, copy this word into both First and Last names fields, becasue Vocalocity demands both those fields.
      $data_to[$map_main['First Name']] = $name[0];
      $data_to[$map_main['Last Name']] = $name[0];
    }
  }
  
  // Old Vocalocity url, before 15.03.2014
  //$url = 'http://ww3.vocalocity.com/l/7772/2012-10-01/36gsq6';
  
  // New Vonage url
  $url = 'http://ww3.vonagebusiness.com/l/7772/2012-10-01/36gsq6';
  
  //$url = 'http://getvoip.com/request-test';
  $curl = curl_init();
  curl_setopt($curl, CURLOPT_URL, $url);
  curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
  curl_setopt($curl, CURLOPT_TIMEOUT, 300);
  curl_setopt($curl, CURLOPT_POST, TRUE);
  curl_setopt($curl, CURLOPT_POSTFIELDS, $data_to);
  $data_from = curl_exec($curl);
  if ($data_from === false) {
    $data_from = 'Error!!! 
' . curl_error($curl);
  }
  curl_close($curl);
 

  // Report to a4s.
  /*
  $out = 'Quote Request submission form:

';
  foreach ($submission as $key => $value) {
   if ($value) {
      $out .= "$key = $value
";
    }
  }
 
 
  
  $params['report'] = $out . '
    

' . $data_from;
  
  // Send a report to admin.
  global $language;
  drupal_mail('gv_misc', 'vocalocity_send_report', 'all4senses@gmail.com', $language->language, $params);
  
  return $params['report'];
  */
  
  return gv_misc_prepareReportAboutSubmissionA_andSendToAdmin($submission, $data_from, 'vocalocity_send_report', $data_to);
}


/**
 * Send a request to 8x8.
 */
function gv_misc_SendRequestTo8x8($submission, $op = 'sendIfAllowed') {
  
  
//  global $user;
//  if ($user->uid == 1) {
//    dpm(__FUNCTION__);
//    return;
//  }
  
  
  // If allowedToBeSent...
  $allowedToBeSent = TRUE;
  
  // Send only  '5 - 10' and        '11 - 20'
  if (@$submission['Phones needed'] != '1 - 4' && @$submission['Phones needed'] != '2 - 4' && @$submission['Phones needed'] != '5 - 10' && @$submission['Phones needed'] != '11 - 20') {
    $allowedToBeSent = FALSE;
  }
  
  $allowedToBeSent = $allowedToBeSent ? gv_misc_isSubmissionToProviderAllowed($submission, __FUNCTION__) : $allowedToBeSent;
  
  
  if ($op == 'checkIfShouldBeSent') {
    return $allowedToBeSent;
  }
  elseif ($op == 'sendIfAllowed' && !$allowedToBeSent) {
    return FALSE;
  }
//  elseif ($op == 'mustBeSent') {
//    // Just sent it unconditionally.
//  }
  
  
  
  
  
  if (@$submission['Phones needed'] == '1 - 4') {
    $submission['Phones needed'] = '2 - 4';
  }
    
  $map_main = array(
    'First Name' => 'first_name',
    'Last Name' => 'last_name',
    'Phones needed' => '00N50000001Pxsf', // Number of Phone Lines  
    'Quote type' => '00N50000001PrEA', // Comments
    'Buying Time Frame' => '00N50000001ya9a',
    'Company' => 'company',
    'Email' => 'email',
    //'Website' => 'URL',
    'Phone #' => 'phone',
  );
 
      
  // Set initial fields.
  $data_to = array(
    'lead_source' => 'LG-GetVoIP',
    'oid' => '00D300000006Mvt', 
    'retURL' =>  'http://go.8x8.com/getvoip', //'http://getvoip.com',
      
    'Campaign_ID' => '70150000000fg2g', //'70150000000g8vF',
    'member_status' => 'Responded',
      
    'debug' => 1,
    'debugEmail' => 'jessica.weimer@8x8.com',//'all4senses@gmail.com',
      
    'title' => 'N/A',
    'industry' => 'N/A',
      
    'city' => 'N/A',
    'state' => 'N/A',
    'street' => 'N/A',
    'zip' => 'N/A', 
    'title' => 'N/A',
    'country' => 'N/A',
    'employees' => 'N/A',
  );
  
  
  // Map data to remote vars names.
  foreach ($map_main as $getvoip_key => $remote_key) {
    $data_to[$remote_key] = isset($submission[$getvoip_key]) ? $submission[$getvoip_key] : '';
  }
  
  $url = 'https://salesforce.ringlead.com/cgi-bin/797/1/dedup.pl';
  //$url = 'https://www.salesforce.com/servlet/servlet.WebToLead?encoding=UTF-8';
  
  //$url = 'http://getvoip.com/request-test';
  
  $curl = curl_init();
  curl_setopt($curl, CURLOPT_URL, $url);
  curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
  curl_setopt($curl, CURLOPT_TIMEOUT, 300);
  curl_setopt($curl, CURLOPT_POST, TRUE);
  curl_setopt($curl, CURLOPT_POSTFIELDS, $data_to);
  $data_from = curl_exec($curl);
  if ($data_from === false) {
    $data_from = 'Error!!! 
' . curl_error($curl);
  }
  curl_close($curl);
 


  // Report to a4s.
  /*
  $out = 'Quote Request submission form:

';
  foreach ($submission as $key => $value) {
   if ($value) {
      $out .= "$key = $value
";
    }
  }
 
 
  
  $params['report'] = $out . '
    

' . $data_from;
  
  // Send a report to admin.
  global $language;
  drupal_mail('gv_misc', '8x8_send_report', 'all4senses@gmail.com', $language->language, $params);
  
  return $params['report'];
  */
  
  return gv_misc_prepareReportAboutSubmissionA_andSendToAdmin($submission, $data_from, '8x8_send_report', $data_to);
}



/**
 * Send a request to 8x8.
 */
function gv_misc_SendRequestTo8x8_callCenter($submission, $op = 'sendIfAllowed') {
  
  
//  global $user;
//  if ($user->uid == 1) {
//    dpm(__FUNCTION__);
//    return;
//  }
  
  
  // If allowedToBeSent...
  $allowedToBeSent = TRUE;
  
  // Send only  '5 - 10' and        '11 - 20'
  if (@$submission['Phones needed'] != '1 - 4' && @$submission['Phones needed'] != '2 - 4' && @$submission['Phones needed'] != '5 - 10' && @$submission['Phones needed'] != '11 - 20') {
    $allowedToBeSent = FALSE;
  }
  
  $allowedToBeSent = $allowedToBeSent ? gv_misc_isSubmissionToProviderAllowed($submission, __FUNCTION__) : $allowedToBeSent;
  
  
  if ($op == 'checkIfShouldBeSent') {
    return $allowedToBeSent;
  }
  elseif ($op == 'sendIfAllowed' && !$allowedToBeSent) {
    return FALSE;
  }
//  elseif ($op == 'mustBeSent') {
//    // Just sent it unconditionally.
//  }
  
  
  
  
  
  if (@$submission['Phones needed'] == '1 - 4') {
    $submission['Phones needed'] = '2 - 4';
  }
    
  
  
  $map_quoteFor = array(
    'Inbound Calling' => 'Inbound',
    'Outbound Calling' => 'Outbound',
    'Both Outbound & Inbound' => 'Blended',
  );
 
  $submission['Quote for'] = @$map_quoteFor[@$submission['Quote for']];
  
  if(!empty($submission['Features'])) { 
    $submission['Features'] = 'Features: ' . $submission['Features'];
  }
  
  $map_main = array(
    'First Name' => 'first_name',
    'Last Name' => 'last_name',
    'Phones needed' => '00N50000002aHYf', //Number of users  // '00N50000001Pxsf', // Number of Phone Lines  
    'Quote type' => '00N50000001PrEA', // Comments
    'Quote for' => '00N50000002aHYQ',
    'Buying Time Frame' => '00N50000001ya9a',
    'Company' => 'company',
    'Email' => 'email',
    //'Website' => 'URL',
    'Phone #' => 'phone',
    'Features' => '00N50000001PrEA',
  );
 
  
  
  // Set initial fields.
  $data_to = array(
    'lead_source' =>  'LG-GetVoIP-CallCenter', //'LG-GetVoIP',
    'oid' => '00D300000006Mvt', 
    'retURL' =>  'http://go.8x8.com/getvoip', //'http://getvoip.com',
      
    'Campaign_ID' => '70150000000iSHz', //'70150000000fg2g', 
    'member_status' => 'Responded',
      
    'debug' => 1,
    'debugEmail' => 'jessica.weimer@8x8.com',//'all4senses@gmail.com',
      
    'title' => 'N/A',
    'industry' => 'N/A',
      
    'city' => 'N/A',
    'state' => 'N/A',
    'street' => 'N/A',
    'zip' => 'N/A', 
    'title' => 'N/A',
    'country' => 'N/A',
    'employees' => 'N/A',
  );
  
  
  // Map data to remote vars names.
  foreach ($map_main as $getvoip_key => $remote_key) {
    $data_to[$remote_key] = isset($submission[$getvoip_key]) ? $submission[$getvoip_key] : '';
  }
  
  $url = 'https://salesforce.ringlead.com/cgi-bin/797/1/dedup.pl';
  //$url = 'https://www.salesforce.com/servlet/servlet.WebToLead?encoding=UTF-8';
  
  //$url = 'http://getvoip.com/request-test';
  
  $curl = curl_init();
  curl_setopt($curl, CURLOPT_URL, $url);
  curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
  curl_setopt($curl, CURLOPT_TIMEOUT, 300);
  curl_setopt($curl, CURLOPT_POST, TRUE);
  curl_setopt($curl, CURLOPT_POSTFIELDS, $data_to);
  $data_from = curl_exec($curl);
  if ($data_from === false) {
    $data_from = 'Error!!! 
' . curl_error($curl);
  }
  curl_close($curl);
 


  // Report to a4s.
  /*
  $out = 'Quote Request submission form:

';
  foreach ($submission as $key => $value) {
   if ($value) {
      $out .= "$key = $value
";
    }
  }
 
 
  
  $params['report'] = $out . '
    

' . $data_from;
  
  // Send a report to admin.
  global $language;
  drupal_mail('gv_misc', '8x8_send_report', 'all4senses@gmail.com', $language->language, $params);
  
  return $params['report'];
  */
  
  return gv_misc_prepareReportAboutSubmissionA_andSendToAdmin($submission, $data_from, '8x8_send_report', $data_to);
}


/**
 * Send a request to Corvisa.
 */
function gv_misc_SendRequestToCorvisa($submission, $op = 'sendIfAllowed') {
  
  
  
//  global $user;
//  if ($user->uid == 1) {
//    dpm(__FUNCTION__);
//    return;
//  }
  
  
  
  // If allowedToBeSent...
  $allowedToBeSent = TRUE;
  
 // Send only  '5 - 10' and        '11 - 20'
//  if ($submission['Phones needed'] != '1 - 4' && $submission['Phones needed'] != '2 - 4' && $submission['Phones needed'] != '5 - 10' && $submission['Phones needed'] != '11 - 20') {
//    $allowedToBeSent = FALSE;
//  }
  
  $allowedToBeSent = $allowedToBeSent ? gv_misc_isSubmissionToProviderAllowed($submission, __FUNCTION__) : $allowedToBeSent;
  
  
  if ($op == 'checkIfShouldBeSent') {
    return $allowedToBeSent;
  }
  elseif ($op == 'sendIfAllowed' && !$allowedToBeSent) {
    return FALSE;
  }
//  elseif ($op == 'mustBeSent') {
//    // Just sent it unconditionally.
//  }
  
  
  
  
    
  /*
  $map_phonesNeeded = array(
    '1 - 4' => '2-19',
    '5 - 10' => '2-19',
    '11 - 20' => '2-19',
    '21 - 50' => '20-49',
    'More than 50' => '50-99',
  );
  */
  
  if (isset($submission['theme_hook_original'])) {
    unset($submission['theme_hook_original']);
  }
          
  $map_phonesNeeded = array(
    '1-24' => '10-25',
    '25-49' => '25-50',
    '50-99' => '51-100',
    '100-499' => '101-500',
    '500-999' => '501-1000',
    //'' => '',
  );
 
  $submission['Phones needed'] = @$map_phonesNeeded[@$submission['Phones needed']];
  
  $submission['Company'] = !empty($submission['Company']) ? $submission['Company'] : 'Unavailable';

  $submission['Phone #'] = str_replace(array('(', ')', ' ', '-'), '', $submission['Phone #']);
  
  $map_main = array(
    'First Name' => 'first_name',
    'Last Name' => 'last_name',
    'Phones needed' => '00NG0000009aRRw', 
    //'Quote type' => '', 
    'Quote for' => 'description', 
    ////'Buying Time Frame' => 'Time_Frame__c',
    'Company' => 'company',
    'Email' => 'email',
    'Phone #' => 'phone',
  );
 
      
  // Set initial fields.
  $data_to = array(
     /*
      
      <input type=hidden name="00NG000000DG1eA" title="Primary Product Interest" value="Cloud">
<input type=hidden name="00NA0000001MMX9" title="Interest" value="Contact Center">
<input type=hidden name="00NG0000008wUpk" title="Lead Category" value="Inbound">
<input type=hidden name="lead_source" title="Lead Source" value="CPL-GetVoIP">
<input type=hidden name="00NG0000008Prfg" title="Lead Type" value="Webform">
      
     */ 
     
    '00NG000000DG1eA' => 'Cloud',  
    '00NA0000001MMX9' => 'Contact Center',    
    '00NG0000008wUpk' => 'Inbound', 
    '00NG0000008Prfg' => 'Webform', 
      
    '00NG0000008Q0NW' => 'unavailable',   // Lead Cost
      
    'lead_source' => 'CPL-GetVoIP',
    ////'BMID__c' => 'GETVOIPHQL',
    
    //'AID__c' => 'GETVOIPHQL',
    //'PID__c' => 'GETVOIPHQL',
      
    ////'Number_of_Locations__c_lead' => 1,
      
    'oid' => '00DA0000000Iv3c',
    //'Campaign_ID' => '70180000000auP8',
    //'member_status' => 'Responded',
      
    'retURL' =>  'http://', // 'http://marketo.ringcentral.com/LeadGen1-ThankYou.html',
    ////'returnURL' =>  'http://marketo.ringcentral.com/LeadGen1-ThankYou.html',
      
    'debug' => 1,
    'debugEmail' => 'jacob.brushafer@corvisa.com', //'wilson.chu@ringcentral.com',
    
    ////'lpId' => '4529',//'IpId' => '4529',
    ////'subId' => '100',//'subld' => '100',
    ////'munchkinId' => '075-DTB-715',//'munkchkinld' => '075-DTB-715',
    ////'lpurl' => 'http://marketo.ringcentral.com/HQLLeadSubmissionform.html?cr={creative}&kw={keyword}',//'Ipurl' => 'http://marketo.ringcentral.com/HQLLeadSubmissionform.html?cr={creative}&kw={keyword}',
    ////'formid' => '1163',
    ////'returnLPId' => '1947',//'returnLPld' => '1947',
    ////'_mkt_disp' => 'return',
      
    ////'_mkt_trk' => 'id:075-DTB-715',
    //'_mkt_trk' => 'id:075-DTB-715&token:_mch-ringcentral.com-1363383929343-15901',
      
    /*  
    'Title' => 'NA',
    ////'Industry' => 'Advertising, Marketing, Media, PR',
      
    'City' => 'NA',
    'State' => 'NA',
    'Street' => 'NA',
    //'zip' => 'N/A', 
    'Country' => 'USA',
     */ 
      
    ////'Description_of_Your_Business__c' => 'NA',
    ///'Notes__c' => 'NA',
    ////'Number_Of_Locations__c' => 'NA',
      
    //'NumberOfEmployees' => 'N/A',
      
    //'kw' => 'not found',
    //'cr' => 'not found',
  );
    
  
  // Map data to remote vars names.
  foreach ($map_main as $getvoip_key => $remote_key) {
    $data_to[$remote_key] = isset($submission[$getvoip_key]) ? $submission[$getvoip_key] : '';
  }
  
  $data_to_str = NULL;
  foreach ($data_to as $key => $value) {
    $data_to_str .= ($data_to_str ? '&' : '') . $key . '=' . $value;
  }
  
  //watchdog('Corvisa -->', print_r($data_to, TRUE), NULL, WATCHDOG_WARNING);
  
  $url = 'https://www.salesforce.com/servlet/servlet.WebToLead?encoding=UTF-8';
  
  $curl = curl_init();
  curl_setopt($curl, CURLOPT_URL, $url);
  curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
  curl_setopt($curl, CURLOPT_TIMEOUT, 300);
  curl_setopt($curl, CURLOPT_POST, TRUE);
  curl_setopt($curl, CURLOPT_HEADER, TRUE);
  curl_setopt($curl, CURLOPT_POSTFIELDS, $data_to_str);
  
  $data_from = curl_exec($curl);
  if ($data_from === false) {
    $data_from = 'Error!!! 
' . curl_error($curl);
  }
  curl_close($curl);

  // Report to a4s.
  return gv_misc_prepareReportAboutSubmissionA_andSendToAdmin($submission, $data_from, 'corvisa_send_report', $data_to);
}



/**
 * Send a request to Corvisa.
 */
function gv_misc_saleseforce_gv_test($submission) {
  
  $submission = array(
    'First Name' => 'b7',
  );
  
  $map_main = array(
    'First Name' => 'first_name',
//    'Last Name' => 'last_name',
//    'Phones needed' => '00NG0000009aRRw', 
//    //'Quote type' => '', 
//    'Quote for' => 'description', 
//    ////'Buying Time Frame' => 'Time_Frame__c',
//    'Company' => 'company',
//    'Email' => 'email',
//    'Phone #' => 'phone',
  );
 
      
  // Set initial fields.
  $data_to = array(
    
     
//    '00NG000000DG1eA' => 'Cloud',  
//    '00NA0000001MMX9' => 'Contact Center',    
//    '00NG0000008wUpk' => 'Inbound', 
//    '00NG0000008Prfg' => 'Webform', 
//      
//    '00NG0000008Q0NW' => 'unavailable',   // Lead Cost
//      
//    'lead_source' => 'CPL-GetVoIP',
   
    'oid' => '00Dj0000001ro7B',

      
    'retURL' =>  'http://', 
      
    'debug' => 1,
    'debugEmail' => 'all4senses@gmail.com',
    
  );
    
  
  // Map data to remote vars names.
  foreach ($map_main as $getvoip_key => $remote_key) {
    if (isset($submission[$getvoip_key])) {
      $data_to[$remote_key] = isset($submission[$getvoip_key]) ? $submission[$getvoip_key] : '';
    }
  }
  
  $data_to_str = NULL;
  foreach ($data_to as $key => $value) {
    $data_to_str .= ($data_to_str ? '&' : '') . $key . '=' . $value;
    
  }
  
  
  //watchdog('Corvisa -->', print_r($data_to, TRUE), NULL, WATCHDOG_WARNING);
  
  $url = 'https://www.salesforce.com/servlet/servlet.WebToLead?encoding=UTF-8';
  
  $curl = curl_init();
  curl_setopt($curl, CURLOPT_URL, $url);
  curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
  curl_setopt($curl, CURLOPT_TIMEOUT, 300);
  curl_setopt($curl, CURLOPT_POST, TRUE);
  curl_setopt($curl, CURLOPT_HEADER, TRUE);
  curl_setopt($curl, CURLOPT_POSTFIELDS, $data_to_str);
  $data_from = curl_exec($curl);
  if ($data_from === false) {
    $data_from = 'Error!!! 
' . curl_error($curl);
  }
  curl_close($curl);
    
  dpm($data_from);

  // Report to a4s.
  
  //return gv_misc_prepareReportAboutSubmissionA_andSendToAdmin($submission, $data_from, 'corvisa_send_report', $data_to);
}


/**
 * Send a request to RingCentral.
 */
function gv_misc_SendRequestToRingCentral($submission, $op = 'sendIfAllowed') {
  
  
  
//  global $user;
//  if ($user->uid == 1) {
//    dpm(__FUNCTION__);
//    return;
//  }
  
  
  
  // If allowedToBeSent...
  $allowedToBeSent = TRUE;
  
 // Send only  '5 - 10' and        '11 - 20'
//  if ($submission['Phones needed'] != '1 - 4' && $submission['Phones needed'] != '2 - 4' && $submission['Phones needed'] != '5 - 10' && $submission['Phones needed'] != '11 - 20') {
//    $allowedToBeSent = FALSE;
//  }
  
  $allowedToBeSent = $allowedToBeSent ? gv_misc_isSubmissionToProviderAllowed($submission, __FUNCTION__) : $allowedToBeSent;
  
  
  if ($op == 'checkIfShouldBeSent') {
    return $allowedToBeSent;
  }
  elseif ($op == 'sendIfAllowed' && !$allowedToBeSent) {
    return FALSE;
  }
//  elseif ($op == 'mustBeSent') {
//    // Just sent it unconditionally.
//  }
  
  
  
  
    
  /*
  $map_phonesNeeded = array(
    '1 - 4' => '2-19',
    '5 - 10' => '2-19',
    '11 - 20' => '2-19',
    '21 - 50' => '20-49',
    'More than 50' => '50-99',
  );
  */
  $map_phonesNeeded = array(
    '1 - 4' => '2-4',
    '2 - 4' => '2-4',
    '5 - 10' => '5-9',
    '11 - 20' => '11-20',
    '21 - 50' => '21-49',
    'More than 50' => '50-99',
  );
  
  
  $submission['Phones needed'] = @$map_phonesNeeded[@$submission['Phones needed']];
  
  
  $map_main = array(
    'First Name' => 'FirstName',
    'Last Name' => 'LastName',
    'Phones needed' => 'NumberOfEmployees__c', 
    //'Quote type' => '', 
    'Buying Time Frame' => 'Time_Frame__c',
    'Company' => 'Company',
    'Email' => 'Email',
    'Phone #' => 'Phone',
  );
 
      
  // Set initial fields.
  $data_to = array(
    'lead_source' => 'Lead Generation',
    'BMID__c' => 'GETVOIPHQL',
    
    //'AID__c' => 'GETVOIPHQL',
    //'PID__c' => 'GETVOIPHQL',
      
    'Number_of_Locations__c_lead' => 1,
      
    //'oid' => '00D80000000aRUX',
    //'Campaign_ID' => '70180000000auP8',
    //'member_status' => 'Responded',
      
    'retURL' =>  'http://marketo.ringcentral.com/LeadGen1-ThankYou.html',
    'returnURL' =>  'http://marketo.ringcentral.com/LeadGen1-ThankYou.html',
      
    //'debug' => 1,
    //'debugEmail' => 'wilson.chu@ringcentral.com',//'all4senses@gmail.com',
    
    'lpId' => '4529',//'IpId' => '4529',
    'subId' => '100',//'subld' => '100',
    'munchkinId' => '075-DTB-715',//'munkchkinld' => '075-DTB-715',
    'lpurl' => 'http://marketo.ringcentral.com/HQLLeadSubmissionform.html?cr={creative}&kw={keyword}',//'Ipurl' => 'http://marketo.ringcentral.com/HQLLeadSubmissionform.html?cr={creative}&kw={keyword}',
    'formid' => '1163',
    'returnLPId' => '1947',//'returnLPld' => '1947',
    '_mkt_disp' => 'return',
      
    '_mkt_trk' => 'id:075-DTB-715',
    //'_mkt_trk' => 'id:075-DTB-715&token:_mch-ringcentral.com-1363383929343-15901',
      
      
    'Title' => 'NA',
    'Industry' => 'Advertising, Marketing, Media, PR',
      
    'City' => 'NA',
    'State' => 'NA',
    'Street' => 'NA',
    //'zip' => 'N/A', 
    'Country' => 'USA',
    'Description_of_Your_Business__c' => 'NA',
    'Notes__c' => 'NA',
    'Number_Of_Locations__c' => 'NA',
      
    //'NumberOfEmployees' => 'N/A',
      
    //'kw' => 'not found',
    //'cr' => 'not found',
  );
    
  
  // Map data to remote vars names.
  foreach ($map_main as $getvoip_key => $remote_key) {
    $data_to[$remote_key] = isset($submission[$getvoip_key]) ? $submission[$getvoip_key] : '';
  }
  
  if (empty($data_to['Company'])) {
    $data_to['Company'] = 'Unavailable';
  }
  
  //$url = 'http://marketo.ringcentral.com/HQLLeadSubmissionform.html';
  $url = 'http://marketo.ringcentral.com/index.php/leadCapture/save';
  
  
  $curl = curl_init();
  curl_setopt($curl, CURLOPT_URL, $url);
  curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
  curl_setopt($curl, CURLOPT_TIMEOUT, 300);
  curl_setopt($curl, CURLOPT_POST, TRUE);
  curl_setopt($curl, CURLOPT_POSTFIELDS, $data_to);
  $data_from = curl_exec($curl);
  if ($data_from === false) {
    $data_from = 'Error!!! 
' . curl_error($curl);
  }
  curl_close($curl);
 

  // Report to a4s.
  /*
  $out = 'Quote Request submission form:

';
  foreach ($submission as $key => $value) {
   if ($value) {
      $out .= "$key = $value
";
    }
  }
 
 
  
  $params['report'] = $out . '
    

' . $data_from;
  
  // Send a report to admin.
  global $language;
  drupal_mail('gv_misc', 'ringcentral_send_report', 'all4senses@gmail.com', $language->language, $params);
  
  return $params['report'];
  */
  
  return gv_misc_prepareReportAboutSubmissionA_andSendToAdmin($submission, $data_from, 'ringcentral_send_report', $data_to);
}


/**
 * Send a request to RingCentral_UK.
 */
function gv_misc_SendRequestToRingCentral_UK($submission, $op = 'sendIfAllowed') {
  
  
  
//  global $user;
//  if ($user->uid == 1) {
//    dpm(__FUNCTION__);
//    return;
//  }
  
  
  
  // If allowedToBeSent...
  $allowedToBeSent = TRUE;
  
 // Send only  '5 - 10' and        '11 - 20'
//  if ($submission['Phones needed'] != '1 - 4' && $submission['Phones needed'] != '2 - 4' && $submission['Phones needed'] != '5 - 10' && $submission['Phones needed'] != '11 - 20') {
//    $allowedToBeSent = FALSE;
//  }
  
  $allowedToBeSent = $allowedToBeSent ? gv_misc_isSubmissionToProviderAllowed($submission, __FUNCTION__) : $allowedToBeSent;
  
  
  if ($op == 'checkIfShouldBeSent') {
    return $allowedToBeSent;
  }
  elseif ($op == 'sendIfAllowed' && !$allowedToBeSent) {
    return FALSE;
  }
//  elseif ($op == 'mustBeSent') {
//    // Just sent it unconditionally.
//  }
  
  
  
  
    
  /*
  $map_phonesNeeded = array(
    '1 - 4' => '2-19',
    '5 - 10' => '2-19',
    '11 - 20' => '2-19',
    '21 - 50' => '20-49',
    'More than 50' => '50-99',
  );
  */
  $map_phonesNeeded = array(
    '1 - 4' => '2-4',
    '2 - 4' => '2-4',
    '5 - 10' => '5-9',
    '11 - 20' => '11-20',
    '21 - 50' => '21-49',
    'More than 50' => '50-99',
  );
  
  
  $submission['Phones needed'] = $map_phonesNeeded[$submission['Phones needed']];
  
  
  $map_main = array(
    'First Name' => 'FirstName',
    'Last Name' => 'LastName',
    'Phones needed' => 'NumberOfEmployees__c', 
    //'Quote type' => '', 
    'Buying Time Frame' => 'Time_Frame__c',
    'Company' => 'Company',
    'Email' => 'Email',
    'Phone #' => 'Phone',
  );
 
  // Set initial fields.
  $data_to = array(
    'lead_source' => 'Lead Generation',
    'BMID__c' => 'GETVOIP_UK',  //'GETVOIPHQL',
    
    //'AID__c' => 'GETVOIPHQL',
    //'PID__c' => 'GETVOIPHQL',
      
    'Number_of_Locations__c_lead' => 1,
      
    //'oid' => '00D80000000aRUX',
    //'Campaign_ID' => '70180000000auP8',
    //'member_status' => 'Responded',
      
    'retURL' =>  'http://marketo.ringcentral.com/LeadGen1-ThankYou.html',
    'returnURL' =>  'http://marketo.ringcentral.com/LeadGen1-ThankYou.html',
      
    //'debug' => 1,
    //'debugEmail' => 'wilson.chu@ringcentral.com',//'all4senses@gmail.com',
    
    'lpId' => '4529',//'IpId' => '4529',
    'subId' => '100',//'subld' => '100',
    'munchkinId' => '075-DTB-715',//'munkchkinld' => '075-DTB-715',
    'lpurl' => 'http://marketo.ringcentral.com/HQLLeadSubmissionform.html?cr={creative}&kw={keyword}',//'Ipurl' => 'http://marketo.ringcentral.com/HQLLeadSubmissionform.html?cr={creative}&kw={keyword}',
    'formid' => '1245', // '1163',
    'returnLPId' => '1947',//'returnLPld' => '1947',
    '_mkt_disp' => 'return',
      
    '_mkt_trk' => 'id:075-DTB-715',
    //'_mkt_trk' => 'id:075-DTB-715&token:_mch-ringcentral.com-1363383929343-15901',
      
      
    'Title' => '', //'NA',
    'Industry' => 'Advertising, Marketing, Media, PR',

    'Address' => '',// 'NA',
    'Suite/Apt No.' => '', // 'NA',
    'Zip Code' => '', //  'NA',

    'City' => 'NA',
    'State' => 'NA',
    'Street' => 'NA',
    //'zip' => 'N/A', 
    'Country' => 'UK',
    'Description_of_Your_Business__c' => '',  //'NA',
    'Notes__c' => '', // 'NA',
    'Number_Of_Locations__c' => 'NA',
      
    //'NumberOfEmployees' => 'N/A',
      
    //'kw' => 'not found',
    //'cr' => 'not found',
  );
    
  
  // Map data to remote vars names.
  foreach ($map_main as $getvoip_key => $remote_key) {
    $data_to[$remote_key] = isset($submission[$getvoip_key]) ? $submission[$getvoip_key] : '';
  }
  
  if (empty($data_to['Company'])) {
    $data_to['Company'] =  ''; // 'Unavailable';
  }
  
  //$url = 'http://marketo.ringcentral.com/HQLLeadSubmissionform.html';
  $url = 'http://marketo.ringcentral.com/index.php/leadCapture/save';
  
  
  $curl = curl_init();
  curl_setopt($curl, CURLOPT_URL, $url);
  curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
  curl_setopt($curl, CURLOPT_TIMEOUT, 300);
  curl_setopt($curl, CURLOPT_POST, TRUE);
  curl_setopt($curl, CURLOPT_POSTFIELDS, $data_to);
  $data_from = curl_exec($curl);
  if ($data_from === false) {
    $data_from = 'Error!!! 
' . curl_error($curl);
  }
  curl_close($curl);
 

  // Report to a4s.
  /*
  $out = 'Quote Request submission form:

';
  foreach ($submission as $key => $value) {
   if ($value) {
      $out .= "$key = $value
";
    }
  }
 
 
  
  $params['report'] = $out . '
    

' . $data_from;
  
  // Send a report to admin.
  global $language;
  drupal_mail('gv_misc', 'ringcentral_send_report', 'all4senses@gmail.com', $language->language, $params);
  
  return $params['report'];
  */
  
  return gv_misc_prepareReportAboutSubmissionA_andSendToAdmin($submission, $data_from, 'ringcentral_UK_send_report', $data_to);
}


/**
 * Send a request to RingCentral_CA.
 */
function gv_misc_SendRequestToRingCentral_CA($submission, $op = 'sendIfAllowed') {
  
  
  
//  global $user;
//  if ($user->uid == 1) {
//    dpm(__FUNCTION__);
//    return;
//  }
  
  
  
  // If allowedToBeSent...
  $allowedToBeSent = TRUE;
  
 // Send only  '5 - 10' and        '11 - 20'
//  if ($submission['Phones needed'] != '1 - 4' && $submission['Phones needed'] != '2 - 4' && $submission['Phones needed'] != '5 - 10' && $submission['Phones needed'] != '11 - 20') {
//    $allowedToBeSent = FALSE;
//  }
  
  $allowedToBeSent = $allowedToBeSent ? gv_misc_isSubmissionToProviderAllowed($submission, __FUNCTION__) : $allowedToBeSent;
  
  
  if ($op == 'checkIfShouldBeSent') {
    return $allowedToBeSent;
  }
  elseif ($op == 'sendIfAllowed' && !$allowedToBeSent) {
    return FALSE;
  }
//  elseif ($op == 'mustBeSent') {
//    // Just sent it unconditionally.
//  }
  
  
  
  
    
  /*
  $map_phonesNeeded = array(
    '1 - 4' => '2-19',
    '5 - 10' => '2-19',
    '11 - 20' => '2-19',
    '21 - 50' => '20-49',
    'More than 50' => '50-99',
  );
  */
  $map_phonesNeeded = array(
    '1 - 4' => '2-4',
    '2 - 4' => '2-4',
    '5 - 10' => '5-9',
    '11 - 20' => '11-20',
    '21 - 50' => '21-49',
    'More than 50' => '50-99',
  );
  
  
  $submission['Phones needed'] = $map_phonesNeeded[$submission['Phones needed']];
  
  
  $map_main = array(
    'First Name' => 'FirstName',
    'Last Name' => 'LastName',
    'Phones needed' => 'NumberOfEmployees__c', 
    //'Quote type' => '', 
    'Buying Time Frame' => 'Time_Frame__c',
    'Company' => 'Company',
    'Email' => 'Email',
    'Phone #' => 'Phone',
  );
 
  // Set initial fields.
  $data_to = array(
    'lead_source' => 'Lead Generation',
    'BMID__c' => 'GETVOIP_CA',  //'GETVOIPHQL',
    
    //'AID__c' => 'GETVOIPHQL',
    //'PID__c' => 'GETVOIPHQL',
      
    'Number_of_Locations__c_lead' => 1,
      
    //'oid' => '00D80000000aRUX',
    //'Campaign_ID' => '70180000000auP8',
    //'member_status' => 'Responded',
      
    'retURL' =>  'http://marketo.ringcentral.com/LeadGen1-ThankYou.html',
    'returnURL' =>  'http://marketo.ringcentral.com/LeadGen1-ThankYou.html',
      
    //'debug' => 1,
    //'debugEmail' => 'wilson.chu@ringcentral.com',//'all4senses@gmail.com',
    
    'lpId' => '-1', // '4529',//'IpId' => '4529',
    'subId' => '100',//'subld' => '100',
    'munchkinId' => '075-DTB-715',//'munkchkinld' => '075-DTB-715',
    'lpurl' => 'http://marketo.ringcentral.com/HQLLeadSubmissionform.html?cr={creative}&kw={keyword}',//'Ipurl' => 'http://marketo.ringcentral.com/HQLLeadSubmissionform.html?cr={creative}&kw={keyword}',
    'formid' => '1217', //  '1245', // '1163',
    'returnLPId' => '-1',//'returnLPld' => '1947',
    '_mkt_disp' => 'return',
      
    '_mkt_trk' => 'id:075-DTB-715',
    //'_mkt_trk' => 'id:075-DTB-715&token:_mch-ringcentral.com-1363383929343-15901',
      
      
    'Title' => '', //'NA',
    'Industry' => 'Advertising, Marketing, Media, PR',

    'Address' => '',// 'NA',
    'Suite/Apt No.' => '', // 'NA',
    'Zip Code' => '', //  'NA',

    'City' => 'NA',
    'State' => 'NA',
    'Street' => 'NA',
    //'zip' => 'N/A', 
    'Country' => 'CA',
    'Description_of_Your_Business__c' => '',  //'NA',
    'Notes__c' => '', // 'NA',
    'Number_Of_Locations__c' => 'NA',
      
    //'NumberOfEmployees' => 'N/A',
      
    //'kw' => 'not found',
    //'cr' => 'not found',
  );
    
  
  // Map data to remote vars names.
  foreach ($map_main as $getvoip_key => $remote_key) {
    $data_to[$remote_key] = isset($submission[$getvoip_key]) ? $submission[$getvoip_key] : '';
  }
  
  if (empty($data_to['Company'])) {
    $data_to['Company'] =  ''; // 'Unavailable';
  }
  
  //$url = 'http://marketo.ringcentral.com/HQLLeadSubmissionform.html';
  $url = 'http://marketo.ringcentral.com/index.php/leadCapture/save';
  
  
  $curl = curl_init();
  curl_setopt($curl, CURLOPT_URL, $url);
  curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
  curl_setopt($curl, CURLOPT_TIMEOUT, 300);
  curl_setopt($curl, CURLOPT_POST, TRUE);
  curl_setopt($curl, CURLOPT_POSTFIELDS, $data_to);
  $data_from = curl_exec($curl);
  if ($data_from === false) {
    $data_from = 'Error!!! 
' . curl_error($curl);
  }
  curl_close($curl);
 

  // Report to a4s.
  /*
  $out = 'Quote Request submission form:

';
  foreach ($submission as $key => $value) {
   if ($value) {
      $out .= "$key = $value
";
    }
  }
 
 
  
  $params['report'] = $out . '
    

' . $data_from;
  
  // Send a report to admin.
  global $language;
  drupal_mail('gv_misc', 'ringcentral_send_report', 'all4senses@gmail.com', $language->language, $params);
  
  return $params['report'];
  */
  
  return gv_misc_prepareReportAboutSubmissionA_andSendToAdmin($submission, $data_from, 'ringcentral_CA_send_report', $data_to);
}


/**
 * Send a request to Nextiva.
 */
function gv_misc_SendRequestToNextiva($submission, $op = 'sendIfAllowed') {
  
  
//  global $user;
//  if ($user->uid == 1) {
//    dpm(__FUNCTION__);
//    return;
//  }
  
  
  // If allowedToBeSent...
  $allowedToBeSent = TRUE;
  
  // Skip sending if "More than 50".
//  if ($submission['Phones needed'] == 'More than 50') {
//    $allowedToBeSent = FALSE;
//  }
  
  $allowedToBeSent = $allowedToBeSent ? gv_misc_isSubmissionToProviderAllowed($submission, __FUNCTION__) : $allowedToBeSent;
  
  
  if ($op == 'checkIfShouldBeSent') {
    return $allowedToBeSent;
  }
  elseif ($op == 'sendIfAllowed' && !$allowedToBeSent) {
    return FALSE;
  }
//  elseif ($op == 'mustBeSent') {
//    // Just sent it unconditionally.
//  }
  
  /*
  $map_main = array(
    'First Name' => 'first_name',
    'Last Name' => 'last_name',
    'Phones needed' => 'employees', // '00N70000002xLFJ', // Number of Locations  ///////////  '00N70000002LdcG', // Number of Phone Lines  
    //'Quote type' => '00N70000002Lgx0', // Comments
    //'Buying Time Frame' => '00N70000002eDO6', 
    'Company' => 'company',
    'Email' => 'email',
    //'Website' => 'URL',
    'Phone #' => 'phone',
  );
 */
  $map_main = array(
    'First Name' => 'FirstName',
    'Last Name' => 'LastName',
    'Phones needed' => 'Number of Phone Lines',
    //'Quote type' => '00N70000002Lgx0', // Comments
    'Buying Time Frame' => 'Notes__c', 
    'Company' => 'Company',
    'Email' => 'Email',
    'Phone #' => 'Phone',
  );
      
  // Set initial fields.
  /*
  $data_to = array(
    'lead_source' => 'GetVoIP',
    'oid' => '00D700000009mLY',
    'retURL' => 'http://getvoip.com',
    'debug' => 1,
    'debugEmail' => 'marketo@nextiva.com', //'all4senses@gmail.com',
      
    'city' => 'N/A',
    'state' => 'N/A',
    'street' => 'N/A',
    'zip' => 'N/A', 
    'title' => 'N/A',
    'country' => 'N/A',
    //'employees' => 'N/A',
      
    //'00N70000002xLFE' => 'Other',
    //'00N70000002xLFT' => 'Other',
    '00N70000002Lgx0' => 'N/A', // Comments
  );
  */
  $data_to = array(
    'LeadSource' => 'Get VoIP',
    'lpId' => '1046',
    'subId' => '209',
    'munchkinId' => '961-FUG-994',
    'kw' => 'not found',
    'cr' => 'not found',
    'searchstr' => 'not found',
    'lpurl' => 'http://business-voip.nextiva.com/getvoip.html?cr={creative}&kw={keyword}',
    'formid' => 26, // time(), 
    'returnURL' => 'http://business-voip.nextiva.com/ThankYou.html',
    'retURL' => 'http://business-voip.nextiva.com/ThankYou.html',
    'returnLPId' => '21',
    '_mkt_disp' => 'return',
    '_mkt_trk' => 'id:961-FUG-994&token:_mch-nextiva.com-1363692977544-89345',
    
  );
  
  // Map data to remote vars names.
  foreach ($map_main as $getvoip_key => $remote_key) {
    $data_to[$remote_key] = isset($submission[$getvoip_key]) ? $submission[$getvoip_key] : '';
  }
  
  if (!$data_to['Company']) {
    !$data_to['Company'] = 'TBD';
  }
  
  //$url = 'http://getvoip.com/request-test';
  //$url = 'https://www.salesforce.com/servlet/servlet.WebToLead?encoding=UTF-8';
  
  $url = 'http://business-voip.nextiva.com/index.php/leadCapture/save';
  //$url = 'http://business-voip.nextiva.com/getvoip.html';
  
  
  $curl = curl_init();
  curl_setopt($curl, CURLOPT_URL, $url);
  curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
  curl_setopt($curl, CURLOPT_TIMEOUT, 300);
  curl_setopt($curl, CURLOPT_POST, TRUE);
  curl_setopt($curl, CURLOPT_POSTFIELDS, $data_to);
  $data_from = curl_exec($curl);
  if ($data_from === false) {
    $data_from = 'Error!!! 
' . curl_error($curl);
  }
  curl_close($curl);
 

  
  // Report to a4s.
  /*
  $out = 'Quote Request submission form:

';
  foreach ($submission as $key => $value) {
   if ($value) {
      $out .= "$key = $value
";
    }
  }
 
 
  
  $params['report'] = $out . '
    

' . $data_from;
  
  // Send a report to admin.
  global $language;
  drupal_mail('gv_misc', 'nextiva_send_report', 'all4senses@gmail.com', $language->language, $params);
  
  return $params['report'];
  */
  
  return gv_misc_prepareReportAboutSubmissionA_andSendToAdmin($submission, $data_from, 'nextiva_send_report', $data_to);
}


/**
 * Send a request to RingCentral.
 */
function gv_misc_SendRequestToJiveCommunications($submission, $op = 'sendIfAllowed') {
  
  
  
//  global $user;
//  if ($user->uid == 1) {
//    dpm(__FUNCTION__);
//    return;
//  }
  
  
  
  // If allowedToBeSent...
  $allowedToBeSent = TRUE;
  
 // Send only  '5 - 10' and        '11 - 20'
//  if ($submission['Phones needed'] != '1 - 4' && $submission['Phones needed'] != '2 - 4' && $submission['Phones needed'] != '5 - 10' && $submission['Phones needed'] != '11 - 20') {
//    $allowedToBeSent = FALSE;
//  }
  // Don't send to JC 1-4 leads
  if ($submission['Phones needed'] == '1 - 4' || $submission['Phones needed'] == '2 - 4') {
    $allowedToBeSent = FALSE;
  }
  
  $allowedToBeSent = $allowedToBeSent ? gv_misc_isSubmissionToProviderAllowed($submission, __FUNCTION__) : FALSE;
  
  
  if ($op == 'checkIfShouldBeSent') {
    return $allowedToBeSent;
  }
  elseif ($op == 'sendIfAllowed' && !$allowedToBeSent) {
    return FALSE;
  }
//  elseif ($op == 'mustBeSent') {
//    // Just sent it unconditionally.
//  }
  
  
  
  
    
  /*
  $map_phonesNeeded = array(
    '1 - 4' => '2-19',
    '5 - 10' => '2-19',
    '11 - 20' => '2-19',
    '21 - 50' => '20-49',
    'More than 50' => '50-99',
  );
  */
  $map_phonesNeeded = array(
    //'1 - 4' => '2-4',
    //'2 - 4' => '2-4',
    '5 - 10' => '11-20',
    '11 - 20' => '11-20',
    '21 - 50' => '21-49',
    'More than 50' => '50-99',
  );
  
  
  $submission['Phones needed'] = $map_phonesNeeded[$submission['Phones needed']];
  
  
  $map_main = array(
    'First Name' => 'first_name',
    'Last Name' => 'last_name',
    'Phones needed' => '00N50000002p9b2', // Lead Tier 
    //'Quote type' => '', 
    'Buying Time Frame' => 'description',
    'Company' => 'company',
    'Email' => 'email',
    'Phone #' => 'phone',
  );
 
      
  // Set initial fields.
  $data_to = array(
    'lead_source' => 'GetVoIP Lead', // 'Inside - GetVoip Email', //'Lead Generation',
    //'BMID__c' => 'GETVOIPHQL',
    
    //'AID__c' => 'GETVOIPHQL',
    //'PID__c' => 'GETVOIPHQL',
      
    //'Number_of_Locations__c_lead' => 1,
      
    'oid' => '00D50000000JVXK',
    //'Campaign_ID' => '70180000000auP8',
    //'member_status' => 'Responded',
      
    'retURL' => '', // 'http://marketo.ringcentral.com/LeadGen1-ThankYou.html',
    //'returnURL' =>  'http://marketo.ringcentral.com/LeadGen1-ThankYou.html',
      
    //'debug' => 1,
    //'debugEmail' => 'wilson.chu@ringcentral.com',//'all4senses@gmail.com',
    
    //'lpId' => '4529',//'IpId' => '4529',
    //'subId' => '100',//'subld' => '100',
    //'munchkinId' => '075-DTB-715',//'munkchkinld' => '075-DTB-715',
    //'lpurl' => 'http://marketo.ringcentral.com/HQLLeadSubmissionform.html?cr={creative}&kw={keyword}',//'Ipurl' => 'http://marketo.ringcentral.com/HQLLeadSubmissionform.html?cr={creative}&kw={keyword}',
    //'formid' => '1163',
    //'returnLPId' => '1947',//'returnLPld' => '1947',
    //'_mkt_disp' => 'return',
      
    //'_mkt_trk' => 'id:075-DTB-715',
    //'_mkt_trk' => 'id:075-DTB-715&token:_mch-ringcentral.com-1363383929343-15901',
      
      
    //'Title' => 'NA',
    //'Industry' => 'Advertising, Marketing, Media, PR',
      
    //'City' => 'NA',
    //'State' => 'AK',
    //'Street' => 'NA',
    //'zip' => 'N/A', 
    //'Country' => 'USA',
    //'Description_of_Your_Business__c' => 'NA',
    //'Notes__c' => 'NA',
    //'Number_Of_Locations__c' => 'NA',
      
    //'NumberOfEmployees' => 'N/A',
      
    //'kw' => 'not found',
    //'cr' => 'not found',
  );
    
  
  // Map data to remote vars names.
  foreach ($map_main as $getvoip_key => $remote_key) {
    $data_to[$remote_key] = isset($submission[$getvoip_key]) ? $submission[$getvoip_key] : '';
  }
  
  if (empty($data_to['company'])) {
    $data_to['company'] = 'Unavailable';
  }
  
  
   
  $data_to_str = NULL;
  foreach ($data_to as $key => $value) {
    $data_to_str .= ($data_to_str ? '&' : '') . $key . '=' . $value;
  }
  
  //$url = 'http://marketo.ringcentral.com/HQLLeadSubmissionform.html';
  //$url = 'http://marketo.ringcentral.com/index.php/leadCapture/save';
  $url = 'https://www.salesforce.com/servlet/servlet.WebToLead?encoding=UTF-8';
  
  $curl = curl_init();
  curl_setopt($curl, CURLOPT_URL, $url);
  curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
  curl_setopt($curl, CURLOPT_TIMEOUT, 700);
  curl_setopt($curl, CURLOPT_POST, TRUE);
  curl_setopt($curl, CURLOPT_POSTFIELDS, $data_to_str);
  
  $data_from = curl_exec($curl);
  if ($data_from === false) {
    $data_from = 'Error!!! 
' . curl_error($curl);
  }
  curl_close($curl);
 

  // Report to a4s.
  /*
  $out = 'Quote Request submission form:

';
  foreach ($submission as $key => $value) {
   if ($value) {
      $out .= "$key = $value
";
    }
  }
 
 
  
  $params['report'] = $out . '
    

' . $data_from;
  
  // Send a report to admin.
  global $language;
  drupal_mail('gv_misc', 'ringcentral_send_report', 'all4senses@gmail.com', $language->language, $params);
  
  return $params['report'];
  */
  
  return gv_misc_prepareReportAboutSubmissionA_andSendToAdmin($submission, $data_from, 'jive_send_report', $data_to);
}


/**
 * Prepare report data about submission and send it to admin.
 */
function gv_misc_prepareReportAboutSubmissionA_andSendToAdmin($submission, $data_from, $mail_subject, $data_to = NULL) {
  
  $out = '';
  
  // Build a report data.

  // Data from.
  $out .= 'Quote Request submission form:

';
  $out .= theme('gv_misc_requestQuote_mail', $submission, FALSE);
  
  // Data to.
  if ($data_to) {
    $out .= '
      
Data sent to a provider:

';
    $out .= theme('gv_misc_requestQuote_mail', $data_to, FALSE);
  }
  
  /*
  $out = 'Quote Request submission form:

';
  foreach ($submission as $key => $value) {
   if ($value) {
     
     if ($key == 'sentToRemoteProviders') {
       $submissions = NULL;
       foreach ($value as $provider => $submitted) {
         $submissions_list = ($submissions_list && $submitted ? ', ' : '') . ($submitted ? $provider : ''); 
       }
        $out .= "$key = $submissions_list
";
     }
     else {
      $out .= "$key = $value
";
     }
     
    }
  }
  */
 
  $params['report'] = $out . '
    

' . $data_from;
  
  // Send a report to admin.
  global $language;
  drupal_mail('gv_misc', $mail_subject, 'all4senses@gmail.com', $language->language, $params);
  
  return $params['report'];
}


/**
 * Implements hook_mail().
 */
function gv_misc_mail($key, &$message, $params) {
  switch ($key) {
    
    case 'new_file_was_uploaded':
      $message['subject'] = 'GV New file was uploaded';
      $message['body'][] = $params['report'];
      break;
    
    
    case 'request_quote':
      $message['subject'] = 'GV New request for a ' . $params['request_data']['Goal'];
      $message['body'][] = theme('gv_misc_requestQuote_mail', $params['request_data']);
      break;
    
    case 'jive_send_report':
      $message['subject'] = 'GV Report from the Jive request sending.';
      $message['body'][] = $params['report'];
      break;
    case 'vocalocity_send_report':
      $message['subject'] = 'GV Report from the Vocalocity request sending.';
      $message['body'][] = $params['report'];
      break;
    case 'nextiva_send_report':
      $message['subject'] = 'GV Report from the Nextiva request sending.';
      $message['body'][] = $params['report'];
      break;
    case 'corvisa_send_report':
      $message['subject'] = 'GV Report from the Corvisa request sending.';
      $message['body'][] = $params['report'];
      break;
    case 'ringcentral_send_report':
      $message['subject'] = 'GV Report from the RingCentral request sending.';
      $message['body'][] = $params['report'];
      break;
    case 'ringcentral_UK_send_report':
      $message['subject'] = 'GV Report from the RingCentral-UK request sending.';
      $message['body'][] = $params['report'];
      break;
    case 'ringcentral_CA_send_report':
      $message['subject'] = 'GV Report from the RingCentral-CA request sending.';
      $message['body'][] = $params['report'];
      break;
    case '8x8_send_report':
      $message['subject'] = 'GV Report from the 8x8 request sending.';
      $message['body'][] = $params['report'];
      break;
    case 'request_quote_ucaptured_data':
      $message['subject'] = 'GV New captured BUT not submitted user data';
      $message['body'][] = theme('gv_misc_requestQuote_mail', $params['ucaptured_data']);
      break;
    
    case 'new_disqus_user':
      $message['subject'] = 'GV Disqus users check up result';
      $message['body'][] = $params['report'];
      break;
    
    case 'email_verification':
      $message['subject'] = t('Submitted Review Requires One-Click Email Verification');
      $message['body'][] = t('Dear User,

Thank you for taking your time to share your VoIP experience by submitting a review.

To faster verify and publish your review, please click on the email verification link below:

!url

Best Wishes,
GetVoIP Team
', array('!url' => 'http://getvoip.com/approve/email/' . $params['verification_code']));
      
      break;
    
    
    
    case 'new_review_admin_notify':
      $message['subject'] = t('GV New Provider review for "!provider" has been submitted', array('!provider' => $params['provider_name']));
      $message['body'][] = t('Dear administrator!

A new review for the provider "!provider" just has been submitted' . ($params['spam'] ? ' (perhaps it is SPAM, because the field for OTHER Provider Name is not empty, but in the provider select list NOT the "Other" is selected.)' : '') . ':

' . 

$params['review'] .
              
'
  

Please approve or discard it at !pending_reviews.

Please, don\'t forget to log in to access this page.

Best wishes,
Get VoIP team
', array('!pending_reviews' => 'http://getvoip.com/admin/content/approve-reviews', '!provider' => $params['provider_name']));
      
      break;
    
    
    
    
    
    case 'new_phone_review_admin_notify':
      $message['subject'] = t('New Phone review for "!phone" has been submitted', array('!phone' => $params['phone_name']));
      $message['body'][] = t('Dear administrator!

A new review for the phone "!phone" just has been submitted. Please approve or discard it at !pending_reviews.

Please, don\'t forget to log in to access this page.

Best wishes,
Get VoIP team
', array('!pending_reviews' => 'http://getvoip.com/admin/content/approve-phone-reviews', '!phone' => $params['phone_name']));
      
      break;
    
    
  }
}  


/**
 * Simple theming of a Request for quote mail content.
 */
function theme_gv_misc_requestQuote_mail($data, $with_title = TRUE) {
 
 $out = '';
 if ($with_title) {
   $out .= 'Quote Request submission form:

';
 }
 foreach ($data as $key => $value) {
   if ($value) {
     
//    $out .= "$key = $value
//";
        
     if ($key == 'sentToRemoteProviders') {
       $submissions_list = NULL;
       foreach ($value as $provider => $submitted) {
         $submissions_list .= ( ($submissions_list && $submitted) ? ', ' : '') . ($submitted ? $provider : ''); 
       }
        $out .= "$key = $submissions_list
";
     }
     else {
      if (is_array($value)) {
        $value = print_r($value, TRUE);
      }
      $out .= "$key = $value
";
     }
     
   }
 }
 
 return $out;
}


/**
 * Simple theming of the email with Captured but not submitted by a user data on a Request a quote page.
 */
function theme_gv_misc_requestQuoteCaptured_mail($data) {
 $out = 'Captured (and not submitted by a user) data from a Quote Request submission form:

';
 foreach ($data as $key => $value) {
   if ($value) {
    $out .= "$key = $value
";
   }
 }
 
 return $out;
}


/**
* Implementation of hook_mail_alter().
* Here we allow the site name to be used as the senders name for outgoing email.
* see http://drupal.org/node/209672
* 
* No need for this hook if the smtp module is used.
*/
/*
function gv_misc_mail_alter(&$message){
  $default_from = variable_get('site_mail', ini_get('sendmail_from'));
  
  if($message['from'] == $default_from){
    $message['from'] = '"'. variable_get('site_name', 'GetVoIP.com') .'" <'. $default_from .'>';
    $message['headers']['From'] = $message['headers']['Sender'] = $message['headers']['Return-Path'] = $message['headers']['Errors-To'] = $message['headers']['Reply-To'] = $message['from'];
  }
}
*/


/**
 * Helper function to send preset messages.
 */
function gv_misc_sendMessage($tag, $data = NULL) {
  
  switch ($tag) {
    
    case 'new_file_was_uploaded':
      global $language;
      $params['report'] = $data['report'];
      drupal_mail('gv_misc', 'new_file_was_uploaded', 'all4senses@gmail.com', $language->language, $params);
      
      break;
  
    
    case 'new_phone_review_admin_notify':
      global $language;
      $params['phone_name'] = $data['phone_name'];
      drupal_mail('gv_misc', 'new_phone_review_admin_notify', 'ry@getvoip.com', $language->language, $params);
      drupal_mail('gv_misc', 'new_phone_review_admin_notify', 'all4senses@gmail.com', $language->language, $params);
      
      break;
  
    
    case 'new_review_admin_notify':
      /*
      $admins = gv_misc_getAdmins();
      foreach ($admins as $recipient) {
        $params['recipient'] = $recipient;
        drupal_mail('gv_misc', 'new_review_admin_notify', $recipient->mail, user_preferred_language($recipient), $params);
      }
      */
      global $language;
      $params['provider_name'] = $data['provider_name'];
      $params['spam'] = $data['spam'];
      $params['review'] = $data['review'];
      
      drupal_mail('gv_misc', 'new_review_admin_notify', 'ry@getvoip.com', $language->language, $params);
      drupal_mail('gv_misc', 'new_review_admin_notify', 'all4senses@gmail.com', $language->language, $params);
      
      
      break;
  

      
  case 'email_verification':
      
      global $language;
      $params['verification_code'] = $data['verification_code'];
      drupal_mail('gv_misc', 'email_verification', $data['email'], $language, $params, 'GetVoIP.com <contact@getvoip.com>');
      
      break;
  }
}


/**
 * Get site's admins objects.
 */
function gv_misc_getAdmins() {
  $query = db_select('users', 'u')
        ->fields('u');
  $query->leftJoin('users_roles', 'ur', 'ur.uid = u.uid');
  $query->leftJoin('role', 'r', 'r.rid = ur.rid');
  $query->condition('r.name', 'administrator');
  $admins = $query->execute()->fetchAllAssoc('uid');

  return $admins;
}


/**
 * Implements hook_form_alter().
 *
 * @param array &$form
 *   Array with declared form.
 *
 * @param array &$form_state
 *   Array with current form state.
 *
 * @param string $form_id
 *   Form ID.
 *
 * @return void
 *   Return nothing.
 */
function gv_misc_form_alter(&$form, &$form_state, $form_id) {
  
  //dpm($form_id);dpm($form);
  
  // Unlink Ckeditor from the comment input form.
  /*
  if($form['#id'] == 'comment-form') {
    $form['comment_body']['und'][0]['#type'] = 'textarea';
  }
  */
  if (isset($form['#node']) && $form_id == $form['#node']->type .'_node_form') {
    $form['body']['und']['0']['#format'] = "full_html";
    //$form['field_custom_php_code']['und']['0']['#format'] = "php_code";
  }
}


/**
 * Returns topics list for a specific content type. 
 * 
 * Allows to use same topics for News, articles, etc.
 */
function gv_misc_getTopics($content_type, $base_url = NULL, $limit = NULL, $pager = NULL, $pages_per_page = 30, $orderBy = NULL) {
  $topics = NULL;
  
  $main_topics_voc = taxonomy_vocabulary_machine_name_load(TOPICS);
  
  // Old style query, for reference.
  // $result = db_query("SELECT td.name, COUNT(n.nid) AS count FROM {taxonomy_term_data} td LEFT JOIN {taxonomy_index} ti ON ti.tid = td.tid INNER JOIN {node} n ON (n.nid = ti.nid AND n.type = :type) WHERE td.vid = :vid GROUP BY td.name LIMIT $limit", array(':vid' => $voc->vid, ':type' => $content_type));
    
  $types = array();

  if ($pager) {
    $query = db_select('taxonomy_term_data', 'td')->extend('pagerDefault')->limit($pages_per_page);
  }
  else {
    $query = db_select('taxonomy_term_data', 'td');
  }
  
  $query->fields('td', array('name', 'tid', 'description'));
  $query->leftJoin('taxonomy_index', 'ti', 'ti.tid = td.tid');
  $query->leftJoin('node', 'n', 'n.nid = ti.nid');
  $query->where('n.nid = ti.nid AND n.type = :type', array(':type' => $content_type))
        ->addExpression('COUNT(n.nid)', 'count');
  $query->groupBy('td.name');
  // Exclude main topics terms -> choose only terms for specific node type.
  $query->condition('td.vid', $main_topics_voc->vid, '!=');
  if ($orderBy) {
    $query->orderBy($orderBy[0], $orderBy[1]);
  }
  else {
    $query->orderBy('count', 'DESC');
  }
  if ($limit) {
    $query->range(0, $limit);
  }
  $result = $query->execute();

  // Necessary for pathauto_cleanstring().
  module_load_include('inc', 'pathauto');

  foreach($result as $result) {
    
    // Translate terms to the current language.
    // $result->name = i18n_string_translate(array('taxonomy', 'term', $result->tid, 'name'), $result->name);
    $base_url = trim($base_url, '/');
    //$result->link = array('link_title' => $result->name, 'href' => $base_url . '/' . urlencode(drupal_strtolower($result->name)));
    ////$result->link = array('link_title' => $result->name, 'href' => $base_url . '/tags/' . str_replace(array(' ', '.'), array('-', ''), drupal_strtolower($result->name)));
    
    //$result->link = array('link_title' => $result->name, 'href' => $base_url . '/tags/' . pathauto_cleanstring($result->name)); // WRONG WAY!
    $result->link = array('link_title' => $result->name, 'href' => 'taxonomy/term/' . $result->tid);
    
    $topics[$result->tid] = /*(array)*/ $result;
  }
  return $topics;
}


/**
 * Implements hook_theme().
 */
function gv_misc_theme($existing, $type, $theme, $path) {
  return array(
    'gv_misc_footerLinksPlain' => array(
      'variables' => array('vars' => null),
    ),
    'gv_misc_submenuSimple' => array(
      'variables' => array('vars' => null),
    ),
    'gv_misc_headerLinks' => array(
      'variables' => array('vars' => null),
    ),
    // Fivestar REPLACING theme functions.
    'gv_misc_fivestar_static' => array(
      'variables' => array('rating' => NULL, 'stars' => 5, 'tag' => 'vote', 'widget' => array('name' => 'default', 'css' => '')),
    ),
    // Compose a mail with a Request for a quote page/block.
    'gv_misc_requestQuote_mail' => array(
      'variables' => array(),
      'with_title' => TRUE,
    ),
    // Compose a mail with a Captured but not submitted by a user data from a Request for a quote page/block.
    'gv_misc_requestQuoteCaptured_mail' => array(
      'variables' => array(),
    ),
    
      
    // Altered Tagadelic weighted tag cloud.
    'gv_misc_tagadelicWeighted_acceptPredefinedTermsPaths' => array(
      'variables' => array('terms' => array())
    ),
      
    // A bit altered original Theme functions theme_image
    // Here we add an image dimensions if they are not set.
    'gv_misc_image' => array(
      'variables' => array(
        'path' => NULL,
        'width' => NULL,
        'height' => NULL,
        'alt' => '',
        'title' => NULL,
        'attributes' => array(),
      ),
    ),  
      
    // A bit altered original Theme functions theme_image_style
    // Here we add an image dimensions if they are not set.
    'gv_misc_image_style' => array(
      'variables' => array(
        'style_name' => NULL,
        'path' => NULL,
        'width' => NULL,
        'height' => NULL,
        'alt' => '',
        'title' => NULL,
        'attributes' => array(),
      ),
    ),
      
  );
}


function theme_gv_misc_image_style(array $variables) {
  
  
  // Check if a file exists only for anonymous.
//  global $user;
//  if (!$user->uid && !file_exists($variables['path'])) {
//    return NULL;
//  }
  
  
  if (!empty($variables['src']) && !file_exists(ltrim($variables['src'], '/'))) {
    return NULL;
  }
  
  
  $image_src = image_style_url($variables['style_name'], $variables['path']);
  $image = theme('gv_misc_image', array('path' => $image_src, 'source_path' => $variables['path'], 'alt' =>  $variables['alt'], 'title' => $variables['title'] ));
        
  return $image;
}


function theme_gv_misc_image(array $variables) {
  
//  if (!file_exists(str_replace(array('http://getvoip.com/', '%20'), array('', ' '), $variables['path']))) {
//    return NULL;
//  }
  
  // Make a path relative.
  $variables['path'] = str_replace('http://getvoip.com/', '', $variables['path']);
  $variables['path']= urldecode($variables['path']); // remove %20 (' '), %26 (&), etc

  //dpm('relative = ' . $variables['path']);
  
  if (!gv_misc_createCachedImageIfNotExists($variables['path'])) {
    return NULL;
  }
  
  if (!$variables['width']) {
    $size = getimagesize($variables['path']);
    $image = theme('image', array('width' => $size[0], 'height' => $size[1], 'path' => $variables['path'], 'alt' =>  $variables['alt'], 'title' => $variables['title'] ));  
  }
  else {
    $image = theme('image', array('width' => $variables['width'], 'height' => $variables['height'], 'path' => $variables['path'], 'alt' =>  $variables['alt'], 'title' => $variables['title'] ));
  }
  
  return $image;
}


/**
 * Theme function that renders the HTML for the tags.
 *
 * @ingroup themable
 */
function theme_gv_misc_tagadelicWeighted_acceptPredefinedTermsPaths(array $vars) {
  $terms = $vars['terms'];
  $output = '';

  foreach ($terms as $term) {
    $output .= l($term->name, isset($term->link['href']) ? $term->link['href'] : 'taxonomy/term/' . $term->tid, array(
      'attributes' => array(
        'class' => array("tagadelic", "level" . $term->weight),
        'rel' => 'tag',
        'title'  => $term->description,
        )
      )
    ) . " \n";
  }
  
  
  if(isset($vars['voc'])){
    if (count($terms) >= variable_get('tagadelic_block_tags_' . $vars['voc']->vid, 12)) {
      $output .= theme('more_link', array('title' => t('more tags'), 'url' => "tagadelic/chunk/{$vars['voc']->vid}"));
    }
  }

  return $output;
}
  

/**
 * Simple theming of nested submenu.
 */
function theme_gv_misc_headerLinks($vars) {
  if(empty($vars['submenu']['below'])) {
    return NULL;
  }

  $class = isset($vars['class']) ? $vars['class'] : 'header-links';
  $delimiter = isset($vars['delimiter']) ? $vars['delimiter'] : '';
  $out = '<ul class="' . $class . '">';
  $count = 0;
  foreach ($vars['submenu']['below'] as $submenu) {
    if (isset($submenu['link']['hidden']) && $submenu['link']['hidden']) {
      continue;
    }
    
    if ($submenu['link']['link_title'] == 'GooglePlus') {
      $out .= ($count ? $delimiter : '') . '<li>' . l($submenu['link']['link_title'], $submenu['link']['href'], array('attributes' => array('class' => array($submenu['link']['link_title']), 'title' => $submenu['link']['options']['attributes']['title'], 'target' => '_blank', 'rel' => 'publisher' ))) . '</li>';
    }
    else {
      $out .= ($count ? $delimiter : '') . '<li>' . l($submenu['link']['link_title'], $submenu['link']['href'], array('attributes' => array('class' => array($submenu['link']['link_title']), 'title' => $submenu['link']['options']['attributes']['title'], 'target' => '_blank' ))) . '</li>';
    }
    
    $count++;
  }
  $out .= '</ul>';
  return $out;
}



/**
 * Simple theming of plain footer manu.
 */
function theme_gv_misc_footerLinksPlain($vars) {
  if(empty($vars['submenu']['below'])) {
    return NULL;
  }
  $level = isset($vars['level']) ? $vars['level'] : 0;
  $class = isset($vars['class']) ? $vars['class'] : 'om-links';
  $delimiter = isset($vars['delimiter']) ? $vars['delimiter'] : '';
  $out = '<span class="gv ' . $class . ' lvl-' . $level . '">';
  $count = 0;
  foreach ($vars['submenu']['below'] as $submenu) {
    if (is_object($submenu)) {
      $submenu = (array) $submenu;
    }
    if (isset($submenu['link']['hidden']) && $submenu['link']['hidden']) {
      continue;
    }
    $out .= ($count ? $delimiter : '') . '<span>';
    if($level) {
      for ($i = 0; $i < $level; $i++ ) {
        $out .= '--';
      }
    }
    $title = t($submenu['link']['link_title']);
    if(isset($submenu['count']) && $submenu['count']) {
      $title .= ' (' . $submenu['count'] . ')';
    }
    // If the field Description has '<nolink>' don't show link for this item
    if(isset($submenu['link']['localized_options']['attributes']['title']) && strtolower($submenu['link']['localized_options']['attributes']['title']) == '<nolink>') {
      $out .= $title;
    }
    else {
      $out .= l($title, $submenu['link']['href']);
    }
    $out .= '</span>';
//    if (!empty($submenu['below'])) {
//      // Recursion call.
//      $out .= '<span>' . theme('gv_misc_footerLinksPlain', array('submenu' => $submenu, 'level' => ($level + 1), 'class' => $class, 'delimiter' => $delimiter )) . '</span>';
//    }
    $count++;
  }
  $out .= '</span>';
  return $out;
}



/**
 * Simple theming of nested submenu.
 */
function theme_gv_misc_submenuSimple($vars) {
  if(empty($vars['submenu']['below'])) {
    return NULL;
  }
  $level = isset($vars['level']) ? $vars['level'] : 0;
  $class = isset($vars['class']) ? $vars['class'] : 'om-links';
  $delimiter = isset($vars['delimiter']) ? $vars['delimiter'] : '';
  $out = '<ul class="gv ' . $class . ' lvl-' . $level . '">';
  $count = 0;
  foreach ($vars['submenu']['below'] as $submenu) {
    if (is_object($submenu)) {
      $submenu = (array) $submenu;
    }
    if (isset($submenu['link']['hidden']) && $submenu['link']['hidden']) {
      continue;
    }
    $out .= ($count ? $delimiter : '') . '<li>';
    if($level) {
      for ($i = 0; $i < $level; $i++ ) {
        $out .= '--';
      }
    }
    $title = t($submenu['link']['link_title']);
    if(isset($submenu['count']) && $submenu['count']) {
      $title .= ' (' . $submenu['count'] . ')';
    }
    // If the field Description has '<nolink>' don't show link for this item
    if(isset($submenu['link']['localized_options']['attributes']['title']) && strtolower($submenu['link']['localized_options']['attributes']['title']) == '<nolink>') {
      $out .= $title;
    }
    else {
      $out .= l($title, $submenu['link']['href']);
    }
    $out .= '</li>';
    if (!empty($submenu['below'])) {
      // Recursion call.
      $out .= '<li>' . theme('gv_misc_submenuSimple', array('submenu' => $submenu, 'level' => ($level + 1), 'class' => $class, 'delimiter' => $delimiter )) . '</li>';
    }
    $count++;
  }
  $out .= '</ul>';
  return $out;
}


/**
 * REPLACE FOR ORIGINAL fivestar module theming function. Just to use only its theming functionality.
 * 
 * Display a plain HTML view-only version of the widget with a specified rating.
 *
 * @param $rating
 *   The desired rating to display out of 100 (i.e. 80 is 4 out of 5 stars).
 * @param $stars
 *   The total number of stars this rating is out of.
 * @param $tag
 *   Allows multiple ratings per node.
 * @return
 *   A themed HTML string representing the star widget.
 */
function theme_gv_misc_fivestar_static($variables) {
  $rating  = $variables['rating'];
  $stars = $variables['stars'];
  $tag = $variables['tag'];
  $widget = $variables['widget'];

  // GV Intrusion!!!!
  $path = drupal_get_path('module', 'gv_misc') . '/css/fivestar';
  drupal_add_css($path . '/css/fivestar.css');
  // END of intrusion.
  
  if($widget['name'] != 'default') {
    // GV changes.
    //drupal_add_css($widget['css']);
    drupal_add_css($path . '/widgets/' . $widget['name'] . '/' . $widget['css']);
  }
  
  $output = '<div class="fivestar fivestar-' . $widget['name'] . '">';
  $output .= '<div class="fivestar-widget-static fivestar-widget-static-'. $tag .' fivestar-widget-static-'. $stars . ' clearfix">';
  if (empty($stars)) {
    $stars = 5;
  }
  $numeric_rating = $rating/(100/$stars);
  for ($n=1; $n <= $stars; $n++) {
    $star_value = ceil((100/$stars) * $n);
    $prev_star_value = ceil((100/$stars) * ($n-1));
    $zebra = ($n % 2 == 0) ? 'even' : 'odd';
    $first = $n == 1 ? ' star-first' : '';
    $last = $n == $stars ? ' star-last' : '';
    $output .= '<div class="star star-'. $n .' star-'. $zebra . $first . $last .'">';
    if ($rating < $star_value && $rating > $prev_star_value) {
      $percent = (($rating - $prev_star_value) / ($star_value - $prev_star_value)) * 100;
      $output .= '<span class="on" style="width: '. $percent .'%">';
    }
    elseif ($rating >= $star_value) {
      $output .= '<span class="on">';
    }
    else {
      $output .= '<span class="off">';
    }
    if ($n == 1)$output .= $numeric_rating;
    $output .= '</span></div>';
  }
  $output .= '</div></div>';
  return $output;
}


/**
 * Returns all available providers aray with title => title.
 */
function gv_misc_getProvidersKeyedByName(&$providers, $scope = 'all', $data = NULL) {
  $providers_out = array();
  
  //function gv_misc_getProviders(&$providers, $scope = 'all', $data = NULL, $cache_key = '', $only_featured = NULL, $no_cache = FALSE) {
  gv_misc_getProviders($providers, $scope, $data);
  foreach ($providers as $key => $value) {
    if ($key == '_none' || $key == '') {
      $providers_out[$key] = $value;
    }
    else {
      $providers_out[$value] = $value;
    }
  }
  
  $providers = $providers_out;
}


/**
 * Returns all available providers aray with nid => title.
 */
function gv_misc_getProviders(&$providers, $scope = 'all', $data = NULL, $cache_key = '', $only_featured = NULL, $no_cache = FALSE) {

  
  
  global $language;
  $cache_name = 'gv_provider_list_' . $scope . '_' . $language->language . $cache_key;
  
  if (!$no_cache) {
    $cache_content = cache_get($cache_name);
    if ($cache_content && !empty($cache_content->data) && $cache_content->expire > time()) {
      $providers += $cache_content->data;
      return;
    }
  }
  dpm('plist no cache');
  
  
  
  if ($scope == 'all') {
    $query = db_select('node', 'n');
    $query->join('field_data_field_p_name', 'pn', "pn.entity_id = n.nid");
    $query->fields('n', array('nid', 'title'))  
          ->fields('pn', array('field_p_name_value')) 
          ->condition('n.type', 'provider')
          ->condition('n.status', 1); 
    
    if ($cache_key == 'featured' || $only_featured) {
      // Get only featured providers.
      $query->leftJoin('field_data_field_p_erating', 'er_bu', "er_bu.entity_id = n.nid");
      $query->leftJoin('field_data_field_p_erating_smbv', 'er_smbv', "er_smbv.entity_id = n.nid");
      $query->leftJoin('field_data_field_p_erating_residential', 'er_re', "er_re.entity_id = n.nid");
      $query->leftJoin('field_data_field_p_erating_sip', 'er_sip', "er_sip.entity_id = n.nid");
      $query->leftJoin('field_data_field_p_erating_pbx', 'er_pbx', "er_pbx.entity_id = n.nid");
      $query->leftJoin('field_data_field_p_erating_mo', 'er_mo', "er_mo.entity_id = n.nid");
      $query->leftJoin('field_data_field_p_erating_ifa', 'er_ifa', "er_ifa.entity_id = n.nid");
      $query->leftJoin('field_data_field_p_erating_cc', 'er_cc', "er_cc.entity_id = n.nid");
      $query->leftJoin('field_data_field_p_erating_bu_ca', 'er_bu_ca', "er_bu_ca.entity_id = n.nid");
      $query->leftJoin('field_data_field_p_erating_re_ca', 'er_re_ca', "er_re_ca.entity_id = n.nid");
      $query->leftJoin('field_data_field_p_erating_wc', 'er_wc', "er_wc.entity_id = n.nid");
      $query->leftJoin('field_data_field_p_erating_crm', 'er_crm', "er_crm.entity_id = n.nid");
      $query->leftJoin('field_data_field_p_erating_cb', 'er_cb', "er_cb.entity_id = n.nid");
      
      $or = db_or()->isNotNull('field_p_erating_value')
                   ->isNotNull('field_p_erating_smbv_value')
                   ->isNotNull('field_p_erating_residential_value')
                   ->isNotNull('field_p_erating_sip_value')
                   ->isNotNull('field_p_erating_pbx_value')
                   ->isNotNull('field_p_erating_mo_value')
                   ->isNotNull('field_p_erating_ifa_value')
                   ->isNotNull('field_p_erating_cc_value')
                   ->isNotNull('field_p_erating_bu_ca_value')
                   ->isNotNull('field_p_erating_re_ca_value')
                   ->isNotNull('field_p_erating_wc_value')
                   ->isNotNull('field_p_erating_crm_value')
                   ->isNotNull('field_p_erating_cb_value')
              ;
      $query->condition($or);
    }
    
    $result = $query->execute(); 

    foreach($result as $provider) {
      $providers[$provider->nid] = $provider->field_p_name_value;// . ' - ' . $provider->field_p_types_value; // = $provider->title;
    }

    // Sort providers alphabetically.
    //SORT_NATURAL | SORT_FLAG_CASE   only for php from 5.4.0
    //asort($providers); 
    natcasesort($providers);
  }
  elseif ($scope == 'all_by_service_type') {
    $query = db_select('node', 'n');
    $query->join('field_data_field_p_types', 'pt', "pt.entity_id = n.nid"); 
    $query->join('field_data_field_p_name', 'pn', "pn.entity_id = n.nid");
    $query->fields('n', array('nid', 'title'))  
          ->fields('pt', array('field_p_types_value'))
          ->fields('pn', array('field_p_name_value')) 
          ->condition('n.type', 'provider')
          ->condition('n.status', 1);
    if (is_array($data)) {
      $query->condition('pt.field_p_types_value', $data, 'IN');
    }
    else {
      $query->condition('pt.field_p_types_value', $data);
    }
    
    $result = $query->execute(); 

    foreach($result as $provider) {
      $providers[$provider->field_p_name_value] = $provider->field_p_name_value;// . ' - ' . $provider->field_p_types_value; // = $provider->title;
    }

    // Sort providers alphabetically.
    //SORT_NATURAL | SORT_FLAG_CASE   only for php from 5.4.0
    //asort($providers); 
    natcasesort($providers);
  }
  elseif ($scope == 'all_with_reviews_including_others_from_reviews') {
    $query = db_select('field_data_field_r_provider_name', 'pn');
    $query->fields('pn', array('field_r_provider_name_value'))
          ->distinct(); 
    $result = $query->execute(); 
    foreach($result as $provider) {
      $providers[$provider->field_r_provider_name_value] = $provider->field_r_provider_name_value; // = $provider->title;
    }
    // Sort providers alphabetically.
    //SORT_NATURAL | SORT_FLAG_CASE   only for php from 5.4.0
    //asort($providers); 
    natcasesort($providers);
  }

  if (!$no_cache && count($providers)> 3) {
    cache_set($cache_name, $providers, 'cache', time() + 14400);
  }
}
    

/**
 * Returns all available phones array with nid => title.
 */
function gv_misc_getPhones(&$phones, $scope = 'all', $data = NULL) {
  
  if ($scope == 'all') {
    $query = db_select('node', 'n');
    //$query->join('field_data_field_p_types', 'pt', "pt.entity_id = n.nid"); 
    $query->join('field_data_field_p_name', 'pn', "pn.entity_id = n.nid");
    $query->fields('n', array('nid', 'title'))  
          //->fields('pt', array('field_p_types_value'))
          ->fields('pn', array('field_p_name_value')) 
          ->condition('n.type', 'phone')
          ->condition('n.status', 1); 
    $result = $query->execute(); 

    foreach($result as $phone) {
      $phones[$phone->nid] = $phone->field_p_name_value;// . ' - ' . $phone->field_p_types_value; // = $phone->title;
    }

    // Sort phones alphabetically.
    //SORT_NATURAL | SORT_FLAG_CASE   only for php from 5.4.0
    //asort($phones); 
    natcasesort($phones);
  }
}


/**
 * Checks if the email is already taken by one of the site's registered user.
 */
function gv_misc_emailIsRegistered($email) {
  $data = db_select('users', 'u')
          ->fields('u', array('uid'))
          ->condition('mail', $email)
          ->execute();
  if ($email = $data->fetchField()) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}




/**
 * Check if a current user already submitted a review for a specific Provider and return it if it exists.
 */
function gv_misc_userHasSubmittedReview($provider_nid, $user_uid, $user_email = NULL, $other_provider_title = NULL, $current_review_nid = NULL) {
  
  if (/*!$user_uid && */!$user_email) {
    // Not full source data...
    // For uid = 0 should be set email also.
    return FALSE;
  }
  
  $data = db_select('node', 'n')
        ->fields('n', array('nid', 'title'))
        ->fields('na', array('field_r_notapproved_value'));
  $data->leftJoin('field_data_field_ref_provider', 'rp', "rp.entity_id = n.nid");
  $data->leftJoin('field_data_field_r_oprovider', 'op', "op.entity_id = n.nid");
  $data->leftJoin('field_data_field_r_email', 'ue', "ue.entity_id = n.nid");
  $data->leftJoin('field_data_field_r_notapproved', 'na', "na.entity_id = n.nid");
  $data->condition('n.type', 'review')
       //->condition('n.uid', $user_uid)
       ;
  
  // For an anonymous user check email as well (we can find a user only that way in this case)
  if ($user_email) 
    {
    // Let's check email instead if uid, as there could exist a review (from other user,  authorized or not) with a such email
    $data->condition('ue.field_r_email_value', $user_email);
  }
  
  // exclude a currently submitted review from the search.
  if ($current_review_nid) {
    $data->condition('n.nid', $current_review_nid, '!=');
  }
  
  if ($provider_nid) {
    $data->condition('rp.field_ref_provider_target_id', $provider_nid);
  }
  elseif ($other_provider_title) {
    $data->condition('op.field_r_oprovider_value', $other_provider_title);
  }
  else {
    // No provider id or title set.
    return FALSE;
  }
  
  $data = $data->execute()->fetchObject();
  
  if (empty($data)) {
    return FALSE;
  }
  else {
    return $data;
  }
}


/**
 * Implements hook_token_info().
 */
function gv_misc_token_info() {
  // Defines new token 'Provider name' in the node torens group.
  $info['tokens']['node']['provider-name-for-current-review'] = array(
    'name' => t('Provider name for a current review'),
    'description' => t('Name of the provider chosen from a select list or from a custom field if its provided...'),
  );
  
  $info['tokens']['user']['subpath-by-role'] = array(
    'name' => t('Subpath by a user role'),
    'description' => t('Subpath by a user role...'),
  );

  return $info;
}


/**
 * Implements hook_tokens().
 * 
 * Provides token for a current review's provider name. It set to selected from a list or from a manually filled field (if not selected from a list).
 */
function gv_misc_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  $sanitize = !empty($options['sanitize']);

  // Add new token 'provider-name-for-current-review' to a 'node' tokens group.
  if ($type == 'node' && !empty($data['node'])) {
    $node = $data['node'];

    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'provider-name-for-current-review':
          if ($node->type == 'review') {
            if (isset($node->field_ref_provider['und'][0]['target_id']) && $node->field_ref_provider['und'][0]['target_id']) {
              
//              $provider_title = db_select('node', 'n')
//                ->fields('n', array('title'))
//                ->condition('nid', $node->field_ref_provider['und'][0]['target_id'])
//                ->execute()->fetchField();
              
              
              $query = db_select('node', 'n');
              $query->join('field_data_field_p_name', 'pn', "pn.entity_id = n.nid"); // inner_join file_usage table against file_managed
              //$query->fields('n', array('nid', 'title'))  // specifying fields from file_usage table
              $query->fields('pn', array('field_p_name_value')) // specifying fields from file_managed table
                    ->condition('nid', $node->field_ref_provider['und'][0]['target_id']);
              
              $provider_title = $query->execute()->fetchField();
              
              
              
              
              
              $replacements[$original] = $provider_title;
            }
            else {
              $replacements[$original] = check_plain($node->field_r_oprovider['und'][0]['value']);
            }

          }
          
          break;
      }
    }
  }
  
  
  
  // Add new token 'subpath-by-role' to a 'user' tokens group.
  if ($type == 'user' && !empty($data['user'])) {
    $user = $data['user'];
    
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'subpath-by-role':

            //if (in_array('reviewer', $user->roles)) { // doesn't work.
            if (isset($user->roles[9])) { // reviewer.
              $replacements[$original] = 'reviewers';
            }
            else {
              $replacements[$original] = 'staff';
            }
          
          break;
      }
    }
  }
  
  
  return $replacements;
}



/**
 * Implements hook_TYPE_alter().
 * 
 * Provides custom tags for the Votes API via votingapi_metadata alter (defined in ).
 */
function gv_misc_votingapi_metadata_alter(&$data) {
  $data['tags'] += array(
    'sound' => array(
      'name' => t(SOUND),
      'description' => t('Sound Quality Rating for a provider.'),
    ),
    'install' => array(
      'name' => t(INSTALL),
      'description' => t('Installation Process Rating for a provider.'),
    ),
    'service' => array(
      'name' => t(CUSTOMER),
      'description' => t('Value for Customer Service Rating for a provider.'),
    ),
    'rely' => array(
      'name' => t(RELY),
      'description' => t('Reliability Rating for a provider.'),
    ),
    'features' => array(
      'name' => t(FEATURES),
      'description' => t('Features Rating for a provider.'),
    ),
    'money' => array(
      'name' => t(PRICE),
      'description' => t('Value for Money Rating for a provider.'),
    ),
    'recommend' => array(
      'name' => t(RECOMMEND),
      'description' => t('Value for Would you recommend this VoIP provider. Yes or No.'),
    ),
    'overall' => array(
      'name' => t(OVERALL),
      'description' => t('Average overall value for all providers rates.'),
    ),
  );
}



/**
 * Implements hook_views_pre_render().
 */

function gv_misc_views_pre_render(&$view) {
  
  //dpm($view->name); dpm($view->current_display);

  // Add a prefaces for the some views pages.
  $key = 'view-' . $view->name . '-' . $view->current_display;
  $do_attach_preface = FALSE;
  
  switch($key) {
    
    case 'view-providers-block_providers_list': 
    case 'view-providers-block_providers_list_table': 
     
      $view->attachment_before = 'Total: ' . count($view->result) . ' providers';
      //$view->attachment_after = count($view->result) . ' items';
      
      break;
    
    case 'view-providers-page_p_bu': 
      // Business Providers listing page.
    case 'view-providers-page_p_re': 
      // Residential Providers listing page.
    case 'view-reviews-page_all_reviews': 
      // Residential Providers listing page.
      
    case 'view-blog-page': 
    case 'view-blog-page_by_tag':
      
    case 'view-articles-page': 
    case 'view-articles-page_by_tag':
    
    case 'view-news-page': 
    case 'view-news-page_by_tag':
      
    case 'view-sitemap-page': 
   
    case 'view-taxonomy_term-page_by_tag':
      
      $do_attach_preface = TRUE;
      break;
    
    
    case 'view-reviews-block_all_reviews':
      
      $providers = array('' => t('- All Providers -'));
      gv_misc_getProviders($providers, 'all_with_reviews_including_others_from_reviews');

      if (isset($_GET['provider']) && isset($providers[$_GET['provider']])) {
        $provider_isset = TRUE;
      }
      else {
        $provider_isset = FALSE;
      }
      $url = '';
      foreach ($_GET as $key => $value) {
        if ($key == 'q' || $key == 'provider') {
          continue;
        }
        $url .= '&' . $key . '=' . urlencode($value);
      }

      $select_providers['all-reviews-select-providers'] = array(
          '#type' => 'select',
          '#title' => t('Choose a Provider'),
          '#options' => $providers,
          '#default_value' => $provider_isset ? $providers[$_GET['provider']] : $providers[''],
          '#value' => $provider_isset ? $providers[$_GET['provider']] : $providers[''],
          ////'#default_value' => 'VoIPo',
          ////'#value' => 'VoIPo',
          '#attributes' => array('id' => 'select_provider',  'onChange' => "top.location.href='http://getvoip.com/" . $_GET['q'] . "?provider=' + encodeURIComponent(document.getElementById('select_provider').options[document.getElementById('select_provider').selectedIndex].value) + '$url'"),

      ); 
      
      $view->attachment_before = render($select_providers);
      
      break;
      
      
      
    case 'view-reviews-block_all_reviews_bu':
    case 'view-reviews-block_all_reviews_re':
    case 'view-reviews-block_all_reviews_ca':
      
      $providers = array('' => t('- All Providers -'));
      $p_key = $key;
      $r_p_types = array('view-reviews-block_all_reviews_bu' => array('business', 'Business'), 
                         'view-reviews-block_all_reviews_re' => array('residential', 'Residential'),
                         'view-reviews-block_all_reviews_ca' => array(array('re_ca', 'bu_ca'), '') //'Canadian'
                        );
      gv_misc_getProviders($providers, 'all_by_service_type', $r_p_types[$p_key][0]);

      
      if (isset($_GET['provider']) && isset($providers[$_GET['provider']])) {
        $provider_isset = TRUE;
      }
      else {
        $provider_isset = FALSE;
      }
      $url = '';
      foreach ($_GET as $key => $value) {
        if ($key == 'q' || $key == 'provider') {
          continue;
        }
        $url .= '&' . $key . '=' . urlencode($value);
      }

     
      $select_providers['all-reviews-select-providers'] = array(
          '#type' => 'select',
          '#title' => t('Choose a ' . $r_p_types[$p_key][1] .' Provider'),
          '#options' => $providers,
          '#default_value' => $provider_isset ? $providers[$_GET['provider']] : $providers[''],
          '#value' => $provider_isset ? $providers[$_GET['provider']] : $providers[''],
          ////'#default_value' => 'VoIPo',
          ////'#value' => 'VoIPo',
          '#attributes' => array('id' => 'select_provider',  'onChange' => "top.location.href='http://getvoip.com/" . $_GET['q'] . "?provider=' + encodeURIComponent(document.getElementById('select_provider').options[document.getElementById('select_provider').selectedIndex].value) + '$url'"),

      ); 
      
      $view->attachment_before = render($select_providers);
      
      break;
      
  }
  
  // Redefine the $key if on the specific content type.
  if ($key == 'view-taxonomy_term-page_by_tag') {
    $args = arg();
    
    // Disable any pages called with additional arguments after term_id in url, like taxonomy/term/597/feed (feed should be disables)
    if (isset($args[3])) {
      gv_misc_drupal_not_found();
      drupal_exit();
    }
    
    $term = taxonomy_term_load($args[2]);
    
    switch ($term->vocabulary_machine_name) {
      case 'news_tags':
        $key = 'view-news-page_by_tag';
        break;
      case 'blog_tags':
        $key = 'view-blog-page_by_tag';
        break;
      case 'articles_tags':
        $key = 'view-articles-page_by_tag';
        break;
      default:
        // Don't show, hide other vocabularies terms pages!!!
        global $user;
        if ($user->uid == 1) {
          drupal_set_message('Main tags holder Tags content page! Not accessible by regular users.', 'warning');
        }
        else {
          gv_misc_drupal_not_found();
          drupal_exit();
        }
        
    }

  }
  
  if ($do_attach_preface && $preface_node = gv_misc_getPrefaceByKey($key)) {
   
    if ($view->current_display == 'page_by_tag') {
      
      // No index tags pages, by recomendations of SEO guys.
      gv_misc_addMetatag('robots', 'noindex,follow');
      
      global $current_tag_title;
      $current_tag_title = $preface_node->title . ' "' . htmlspecialchars_decode($view->build_info['substitutions']['%1']) . '"';
      
      // add metatag title for the specific term, if it's set in the Metatags block and not equal to defaults.
      if (isset($term->metatags['title']['value']) && $term->metatags['title']['value']) {
        $metatag_title = token_replace($term->metatags['title']['value']);
        gv_misc_addMetatag('title', $metatag_title);
        // Set the title (not only a metatag title) as well.
        $preface_node->title = htmlspecialchars_decode($metatag_title);
        $view->build_info['title'] = $preface_node->title;
      }
      else {
        //$preface_node->title = $view->get_title();//$view->build_info['title'];
        $preface_node->title .= ' "' . htmlspecialchars_decode($view->build_info['substitutions']['%1']) . '"';
        $view->build_info['title'] = $preface_node->title;
      }
      
      // add metatags for the specific term.
      if (isset($term->metatags['keywords']['value']) && $term->metatags['keywords']['value']) {
        gv_misc_addMetatag('keywords', $term->metatags['keywords']['value']);
      }
      else {
        gv_misc_addMetatag('keywords', $term->name);
      }
      
      if (isset($term->description) && $term->description) {
        gv_misc_addMetatag('description', $term->description);
      }
      else {
        
        $query = db_select('taxonomy_index', 'ti');
        $query->join('node', 'n', "n.nid = ti.nid"); 
        $query->join('field_revision_field_a_teaser', 'tf', "tf.entity_type = 'node' AND tf.entity_id = ti.nid"); 
        $query->fields('tf', array('field_a_teaser_value'))
              ->orderBy('n.created', 'DESC')
              ->condition('n.type', array('article', 'blog_post', 'news_post'), 'IN')
              ->condition('ti.tid', $term->tid); 
        $node_a_teaser = $query->execute()->fetchField(); 

        if ($node_a_teaser) {
          gv_misc_addMetatag('description', $preface_node->title . '. ' . drupal_substr(rtrim(strip_tags($node_a_teaser), 'Read More'), 0, 150));
        }
      } // End of else of if (isset($term->description) && $term->description) {
      
      
    } // End of if ($view->current_display == 'page_by_tag') {
    else {
      // Change the title of the view (main page title actually)
      if (isset($preface_node->metatags['title']['value'])) {
        $view->build_info['title'] = $preface_node->metatags['title']['value'];
      }
      else{
        $view->build_info['title'] = $preface_node->title;
      }
      
      
      //dpm('$key ======> ' . $key);
      if ($key == 'view-blog-page') {
        $view->build_info['title'] = NULL;
        $preface_node->title = NULL;
      }
    }
    
    
    // Show plain caption, not a link for a full node as a full node itself will be unpublished and unreachable.
    $preface_node->title_no_link = TRUE;
    // Hide the title of the preface.
    // $preface_node->title = '';
    // Works, but it's shown after exposed filters.
    $preface_node_view = node_view($preface_node, 'full');
    $view->attachment_before = render($preface_node_view);
    
//    global $user;
//    if ($user->uid == 1) {
//      $view->attachment_after = "test";
//    }
    
    // DOesn't work.
    /*
    $view->header = array(
        '#type' => 'item',
        '#markup' => '<div class="preface">' . render(node_view($preface_node)) . '</div>',
    );
    */

    
  }
   
} 


/**
 * Returns preface node by key.
 */
function gv_misc_getPrefaceByKey($key) {
    
    $preface_node = NULL;
    
    $query = db_select('node', 'n');
    $query->join('field_data_field_preface_key', 'pk', "pk.entity_id = n.nid"); 
    $query->fields('n', array('nid'))  
          //->fields('pn', array('field_preface_key_value')) 
          ->condition('n.type', 'preface')
          ->condition('pk.field_preface_key_value', $key); 
    $preface_nid = $query->execute()->fetchField(); 
    if ($preface_nid) {
      $preface_node = node_load($preface_nid);
    }
    return $preface_node;
  }
  
  
/**
 * Returns all fees for available providers.
 */
function gv_misc_getProvidersFees($scope = 'all') {
  if ($scope == 'all') {
    $data = db_select('field_revision_field_p_fees_save', 'f')
          ->fields('f', array('entity_id', 'field_p_fees_save_value'))
          ->execute();
    foreach($data as $fee) {
      $fees[$fee->entity_id] = unserialize($fee->field_p_fees_save_value);
    }
  }
  return $fees;
}


/**
 * Returns all quick data for available providers.
 */
function gv_misc_getProvidersDataQuick($scope = 'all', $reset = FALSE, $clear_from_session = FALSE, $p_nid_to_reset = NULL) {
  
  static $var_p_all_data_quick;
  static $request_counter;
  
  if (!$var_p_all_data_quick && !$reset && !$clear_from_session) {
    $var_p_all_data_quick = variable_get('p_all_data_quick');
    //dpm('used from var');
    $request_counter = 0;
  }
  else {
    $request_counter++;
    //dpm('used from static');
    //dpm('$request_counter = ' . $request_counter);
  }
  
  
  if ($p_nid_to_reset) {
    if (!empty($var_p_all_data_quick)) {
      
      $query = db_select('field_revision_field_p_data_quick', 'f')
            ->fields('f', array('entity_id', 'field_p_data_quick_value'));
      $query->condition('f.entity_id', $p_nid_to_reset);
      $provider = $query->execute()->fetchObject();
      $var_p_all_data_quick[$p_nid_to_reset] = unserialize($provider->field_p_data_quick_value);
      
//      $query = db_select('url_alias', 'a')
//          ->fields('a', array('alias'));
//      $query->condition('a.source', 'node/' . $p_nid_to_reset);
//
//      $var_p_all_data_quick[$p_nid_to_reset]['subpath'] = '/' . $query->execute()->fetchField();

      $var_p_all_data_quick['timestamp'] = time();
      //$_SESSION['p_all_data_quick'] = $p_data_quick;
      variable_set('p_all_data_quick', $var_p_all_data_quick);
      
      global $user;
      if ($user->uid == 1) {
        drupal_set_message('Quick data for the provider ' . $var_p_all_data_quick[$p_nid_to_reset]['name'] . ' nid = ' . $p_nid_to_reset . ' has been reset.', 'warning');
      }
      //dpm($var_p_all_data_quick[$p_nid_to_reset]);
      
      return NULL;
    }
    else {
      $reset = TRUE;
    }
  }
  
  
  
  
  
  
  
  //if ($clear_from_session && isset($_SESSION['p_all_data_quick'])) {
  if ($clear_from_session && $var_p_all_data_quick) {
    // Reset a helper session var with all quick data.
    //unset($_SESSION['p_all_data_quick']);
    variable_set('p_all_data_quick', NULL);
    $var_p_all_data_quick = NULL;
  }
    
  $p_data_quick = NULL;
  if ($scope == 'all') {
    // If data is not in the Session or its age more than 5 hours, reset it.
    
    //if(!$reset && !empty($_SESSION['p_all_data_quick'])) {
    if(!$reset && $var_p_all_data_quick) {
      //$p_data_quick = $_SESSION['p_all_data_quick'];
      $p_data_quick = $var_p_all_data_quick;
    }
    else {
      $p_data_quick = NULL;
    }
    
    
    if ($reset || !$p_data_quick/* || time() > ($p_data_quick['timestamp'] + 18000)*/ ) {
      $data = db_select('field_revision_field_p_data_quick', 'f')
            ->fields('f', array('entity_id', 'field_p_data_quick_value'))
            ->execute();
      foreach($data as $value) {
        $p_data_quick[$value->entity_id] = unserialize($value->field_p_data_quick_value);
      }

      $p_data_quick['timestamp'] = time();
      //$_SESSION['p_all_data_quick'] = $p_data_quick;
      variable_set('p_all_data_quick', $p_data_quick);
      $var_p_all_data_quick = $p_data_quick;
    }
  }
  return $p_data_quick;  
}
    


/**
 * Return sprite image with link for a provider from certain sprite by nid.
 */
function gv_misc_getProviderLogoFromSprite($nid, $sprite_name, $all_data_quick = NULL) {

  $gv_providers_sprites = variable_get('gv_providers_sprites');
  if (isset($gv_providers_sprites[$sprite_name]['data'][$nid])) {
    $out_sprite_path = 'sites/default/files/p/';
    if (!$all_data_quick) {
      $all_data_quick = gv_misc_getProvidersDataQuick();
    }
    //dpm($gv_providers_sprites[$sprite_name]['data'][$nid]);
    
    
    if ($gv_providers_sprites[$sprite_name]['data'][$nid]['h'] < 45) {
      //dpm($all_data_quick[$nid]);
      //return '<div style="width: 130px; height: ' . (45 - $gv_providers_sprites[$sprite_name]['data'][$nid]['h'])/2 . 'px"></div><div title="' . $all_data_quick[$nid]['name'] . ' site" style="margin: auto; width: 130px; height: ' . $gv_providers_sprites[$sprite_name]['data'][$nid]['h'] . 'px; background: url('. "'/" . $out_sprite_path . $sprite_name . '.png?' . $gv_providers_sprites[$sprite_name]['time'] . "')" . ' no-repeat 0 -' . $gv_providers_sprites[$sprite_name]['data'][$nid]['y'] . 'px transparent;"></div><div style="width: 130px; height: ' . (45 - $gv_providers_sprites[$sprite_name]['data'][$nid]['h'])/2 . 'px"></div>';
      ////return '<div style="width: ' . $gv_providers_sprites[$sprite_name]['data'][$nid]['w'] . 'px; height: ' . (45 - $gv_providers_sprites[$sprite_name]['data'][$nid]['h'])/2 . 'px"></div><div title="' . $all_data_quick[$nid]['name'] . ' site" style="margin: auto; width: 130px; height: ' . $gv_providers_sprites[$sprite_name]['data'][$nid]['h'] . 'px; background: url('. "'/" . $out_sprite_path . $sprite_name . '.png?' . $gv_providers_sprites[$sprite_name]['time'] . "')" . ' no-repeat 0 -' . $gv_providers_sprites[$sprite_name]['data'][$nid]['y'] . 'px transparent;"></div><div style="width: 130px; height: ' . (45 - $gv_providers_sprites[$sprite_name]['data'][$nid]['h'])/2 . 'px"></div>';
      return '<div class="sprite-div"><div style="width: ' . $gv_providers_sprites[$sprite_name]['data'][$nid]['w'] . 'px; height: ' . (45 - $gv_providers_sprites[$sprite_name]['data'][$nid]['h'])/2 . 'px"></div><div title="Visit ' . $all_data_quick[$nid]['name'] . '" style="margin: auto; width: ' . $gv_providers_sprites[$sprite_name]['data'][$nid]['w'] . 'px; height: ' . $gv_providers_sprites[$sprite_name]['data'][$nid]['h'] . 'px; background: url('. "'/" . $out_sprite_path . $sprite_name . '.png?' . $gv_providers_sprites[$sprite_name]['time'] . "')" . ' no-repeat 0 -' . $gv_providers_sprites[$sprite_name]['data'][$nid]['y'] . 'px transparent;"></div><div style="width: ' . $gv_providers_sprites[$sprite_name]['data'][$nid]['w'] . 'px; height: ' . (45 - $gv_providers_sprites[$sprite_name]['data'][$nid]['h'])/2 . 'px"></div></div>';
    }
    else 
      {
      //return '<div title="' . $all_data_quick[$nid]['name'] . ' site" style="margin: auto; width: 130px; height: ' . $gv_providers_sprites[$sprite_name]['data'][$nid]['h'] . 'px; background: url('. "'/" . $out_sprite_path . $sprite_name . '.png?' . $gv_providers_sprites[$sprite_name]['time'] . "')" . ' no-repeat 0 -' . $gv_providers_sprites[$sprite_name]['data'][$nid]['y'] . 'px transparent;"></div>';
      return '<div class="sprite-div" title="Visit ' . $all_data_quick[$nid]['name'] . '" style="margin: auto; width: ' . $gv_providers_sprites[$sprite_name]['data'][$nid]['w'] . 'px; height: ' . $gv_providers_sprites[$sprite_name]['data'][$nid]['h'] . 'px; background: url('. "'/" . $out_sprite_path . $sprite_name . '.png?' . $gv_providers_sprites[$sprite_name]['time'] . "')" . ' no-repeat 0 -' . $gv_providers_sprites[$sprite_name]['data'][$nid]['y'] . 'px transparent;"></div>';
    }
    
  }
  return NULL;
}        
        

/**
 * Wrapper for gv_misc_getProviderQuickData()
 */
function wdg_misc_getProviderQuickData($target, $data) {
  return gv_misc_getProviderQuickData($target, $data);
}


/**
 * Return specific variable value from p_data_quick for a provider depending on the filter value (business OR residential, etc)
 */
function gv_misc_getProviderQuickData($target, $data) {
  
  static $mobile_column;
  $out = '';
  global $user;
  
  static $all_data_quick;
  if (!$all_data_quick) {
    $all_data_quick = gv_misc_getProvidersDataQuick();
  }
  
  
  switch($target) {
    
    
    case 'mobile_column':

      //dpm($mobile_column);
      return '<div class="reviews">' . $mobile_column[$data['data']->nid]['rating'] . '</div><div class="features">' . $mobile_column[$data['data']->nid]['features'] . '</div><div class="monthly">' . $mobile_column[$data['data']->nid]['monthly'] . '</div>';

      
      
      
    
    case 'compare_check':
      
      // Hide compare column on Home and Business page.
      if ($_GET['q'] == 'home' || @$_SERVER['REQUEST_URI'] == '/business' || @$_SERVER['REDIRECT_URL'] == '/business' || @$_SERVER['REQUEST_URI'] == '/ppc/business-voip') {
        return NULL;
      }
      
      $out = '<input type="checkbox" class="p-compare" id="' . $data['data']->nid . '" name="' . $all_data_quick[$data['data']->nid]['name'] . '" />';
      
      return $out;
      
    
      
      
      
      
    case 'name_chart_direct_link':
      //$count = 1;
      //dpm('name_n_logo_chart ' . $count++);
      
      
      /*
      if (!empty($all_data_quick[$data['data']->nid]['i_web'])) {
        $link = $all_data_quick[$data['data']->nid]['i_web'];
      }
      else {
        $link = url('node/' . $data['data']->nid);
      }
      
      if (!empty($all_data_quick[$data['data']->nid]['i_logo_uri'])) {
        
        $image_style_name = 'logo_provider_chart_main';
        $image = theme('gv_misc_image_style', array('style_name' => $image_style_name, 'path' => $all_data_quick[$data['data']->nid]['i_logo_uri'], 'alt' =>  $all_data_quick[$data['data']->nid]['i_logo_alt'], 'title' =>  $all_data_quick[$data['data']->nid]['i_logo_title'] ));

        $out = gv_misc_getTrackingUrl($image, NULL, $data['data']->nid, NULL, 'logo', NULL, $all_data_quick[$data['data']->nid], @$data['service_type']);
      }
      */
      if (!empty($all_data_quick[$data['data']->nid]['name'])) {
        $out .= '<div class="name">' . gv_misc_getTrackingUrl(@$all_data_quick[$data['data']->nid]['name'], NULL, $data['data']->nid, NULL, NULL, NULL, $all_data_quick[$data['data']->nid], @$data['service_type'], TRUE /*$force_direct_link*/) . '</div>';
        //$out .= l(@$all_data_quick[$data['data']->nid]['name'], 'node/' . $data['data']->nid); 
      }
          
      return $out;
      
      
      
      
    case 'name_chart':
      //$count = 1;
      //dpm('name_n_logo_chart ' . $count++);
      
      
      $all_data_quick = gv_misc_getProvidersDataQuick();
      $out = '';
      /*
      if (!empty($all_data_quick[$data['data']->nid]['i_web'])) {
        $link = $all_data_quick[$data['data']->nid]['i_web'];
      }
      else {
        $link = url('node/' . $data['data']->nid);
      }
      
      if (!empty($all_data_quick[$data['data']->nid]['i_logo_uri'])) {
        
        $image_style_name = 'logo_provider_chart_main';
        $image = theme('gv_misc_image_style', array('style_name' => $image_style_name, 'path' => $all_data_quick[$data['data']->nid]['i_logo_uri'], 'alt' =>  $all_data_quick[$data['data']->nid]['i_logo_alt'], 'title' =>  $all_data_quick[$data['data']->nid]['i_logo_title'] ));

        $out = gv_misc_getTrackingUrl($image, NULL, $data['data']->nid, NULL, 'logo', NULL, $all_data_quick[$data['data']->nid], @$data['service_type']);
      }
      */
      if (!empty($all_data_quick[$data['data']->nid]['name'])) {
        $out .= '<div class="name">' . gv_misc_getTrackingUrl(@$all_data_quick[$data['data']->nid]['name'], NULL, $data['data']->nid, NULL, NULL, NULL, $all_data_quick[$data['data']->nid], @$data['service_type']) . '</div>';
        //$out .= l(@$all_data_quick[$data['data']->nid]['name'], 'node/' . $data['data']->nid); 
      }
          
      return $out;
      
      
      
    
    case 'name_n_logo_chart':
      //$count = 1;
      //dpm('name_n_logo_chart ' . $count++);
    
      if (!empty($all_data_quick[$data['data']->nid]['i_web'])) {
        $link = $all_data_quick[$data['data']->nid]['i_web'];
      }
      else {
        $link = url('node/' . $data['data']->nid);
      }
      
      if (!empty($all_data_quick[$data['data']->nid]['i_logo_uri'])) {
        
        $image_style_name = 'logo_provider_chart_main';
        $image = theme('gv_misc_image_style', array('style_name' => $image_style_name, 'path' => $all_data_quick[$data['data']->nid]['i_logo_uri'], 'alt' =>  $all_data_quick[$data['data']->nid]['i_logo_alt'], 'title' =>  $all_data_quick[$data['data']->nid]['i_logo_title'] ));

        $out = gv_misc_getTrackingUrl($image, NULL, $data['data']->nid, NULL, 'logo', NULL, $all_data_quick[$data['data']->nid], @$data['service_type']);
      }

      if (!empty($all_data_quick[$data['data']->nid]['name'])) {
        $out .= '<div class="name">' . gv_misc_getTrackingUrl(@$all_data_quick[$data['data']->nid]['name'], NULL, $data['data']->nid, NULL, NULL, NULL, $all_data_quick[$data['data']->nid], @$data['service_type']) . '</div>';
        //$out .= l(@$all_data_quick[$data['data']->nid]['name'], 'node/' . $data['data']->nid); 
      }
          
      return $out;
      
      
      
    
    case 'logo_chart':
      
      
      // Render a logo from sprite.
      
      $url_to_sprite = array( '/' => 'home_top_providers', 
                              
                              '/reseller-programs' => 'top_rsl_providers', 
          
                              '/reviews' => 'all_reviews_providers', 
          
                              '/business' => 'top_bu_providers', 
          
                              '/ppc/business-voip' => 'top_bu_providers', 
                              
                              '/get/iframe/business-voip-chart' => 'top_bu_providers', 
          
                              '/business-voip-reviews' => 'top_bu_providers', 
                              '/reviews/business' => 'top_bu_providers_rev', 
          
                              '/speed-test-tool' => 'top_bu_providers', 
          
                              '/hosted-pbx' => 'top_pbx_providers', 

                              '/sip-trunking' => 'top_sip_providers',
          
                              '/web-conferencing' => 'top_wc_providers',
          
                              '/crm-software' => 'top_crm_providers',

                              '/fax' => 'top_ifa_providers',

                              '/canada' => 'top_ca_providers',

                              '/residential' => 'top_re_providers', 
          
                              '/cloud-backup' => 'top_cb_providers', 
          
                              '/cloud-contact-center' => 'top_cc_providers', 
                                
                              
                              '/residential-voip-reviews' => 'top_re_providers',
                              '/reviews/residential' => 'top_re_providers_rev',
          
                              // LP pages
                              '/service-quotes' => 'top_bu_providers',
                              '/service-quotes-ca' => 'top_bu_providers',
          
                            );

      //$current_url = $_SERVER['REQUEST_URI'];
      $current_url = $_SERVER['REDIRECT_URL'];
      //$current_url = explode('?', $current_url);
      
      
      //dpm($_SERVER);
      
      if (isset($url_to_sprite[$current_url]) || $_GET['q'] == 'home') {
      
        if ($_GET['q'] == 'home') {
          $sprite_name = 'home_top_providers';
        }
        else {
          $sprite_name = $url_to_sprite[$current_url];
        }

        /*
//        
        
//        if (@$_GET['t'] == 'xxx') {
//          echo '<PRE>' . print_r($_SERVER, TRUE) . '</PRE>';
//          exit;
//          $p_image = gv_misc_getProviderLogoFromSprite($data['data']->nid, $url_to_sprite[$current_url]);
//          return 'xxx ' . $_SERVER['REQUEST_URI'] . ' -> ' . $url_to_sprite[$current_url] . ' -> ' . $data['data']->nid . ' -> ' . $p_image;
//        }
        
//        if ($_SERVER['HTTP_CF_CONNECTING_IP'] == '37.229.182.41') {
//          $p_image = gv_misc_getProviderLogoFromSprite($data['data']->nid, $url_to_sprite[$current_url]);
//          return 'xxx ' . $_SERVER['REQUEST_URI'] . ' -> ' . $url_to_sprite[$current_url] . ' -> ' . $data['data']->nid . ' -> ' . $p_image;
//        }
        
        */
      
        
        //dpm($all_data_quick[$data['data']->nid]);
        
        /*
        
        //if (0) {
//        global $user;
//        
//        if ($user->hostname == '109.171.109.18') 
//          {
//          //dpm($user);
//          $p_image = gv_misc_getProviderLogoFromSprite($data['data']->nid, $sprite_name);
//          return $p_image;
//        }
        */
        
        //watchdog('p logos bu', 'server_uri = ' . $_SERVER['REQUEST_URI'], NULL, WATCHDOG_WARNING);
        
        
        if ($p_image = gv_misc_getProviderLogoFromSprite($data['data']->nid, $sprite_name, $all_data_quick)) {
          //watchdog('p logos bu', 'nid = ' . $data['data']->nid . ', $sprite_name = ' . $sprite_name . ', $all_data_quick = ' . $all_data_quick, NULL, WATCHDOG_WARNING);
          //gv_misc_getTrackingUrl($title_or_wrapped_object, $subpath = NULL, $nid = NULL, $target_name = NULL, $a_class = NULL, $a_attr = NULL) {
          
//          if ($current_url == '/cloud-contact-center') {
//            return $p_image;
//          }
//          else
           return gv_misc_getTrackingUrl($p_image, NULL, $data['data']->nid, NULL, NULL, NULL, $all_data_quick[$data['data']->nid], @$data['service_type'])
                // Provider name with a link to provider page
                 ////. l(@$all_data_quick[$data['data']->nid]['name'], 'node/' . $data['data']->nid, array('attributes' => array('class' => array('pname'))))
                 . ( ($current_url == '/service-quotes' || $current_url == '/service-quotes-ca') ? '' : gv_misc_getTrackingUrl(@$all_data_quick[$data['data']->nid]['name'], NULL, $data['data']->nid, NULL, 'pname', NULL, $all_data_quick[$data['data']->nid], @$data['service_type'], NULL, 'Visit ' . @$all_data_quick[$data['data']->nid]['name'] ))
                ;
          
        }
        
        
        /*
//        elseif (!empty($all_data_quick[$data['data']->nid]['i_logo_uri'])) {
//          $image_style_name = 'logo_provider_chart_main';
//          $p_image = theme('gv_misc_image_style', array('style_name' => $image_style_name, 'path' => $all_data_quick[$data['data']->nid]['i_logo_uri'], 'alt' =>  $all_data_quick[$data['data']->nid]['i_logo_alt'], 'title' =>  $all_data_quick[$data['data']->nid]['i_logo_title'] ));
//          return gv_misc_getTrackingUrl($image, NULL, $data['data']->nid, NULL, 'logo');
//        }
        */
        
      }
      
      //watchdog('--- p logos bu', 'server_uri = ' . @$_SERVER['REQUEST_URI'] . ', server_urL = ' . @$_SERVER['REDIRECT_URL'] . ', nid = ' . $data['data']->nid . ', $sprite_name = ' . $sprite_name . ', $all_data_quick = ' . $all_data_quick, NULL, WATCHDOG_WARNING);
        
        
        
    case 'logo_article':
    case 'logo_chart_iframe':
  
      
      //dpm($all_data_quick[$data['data']->nid]);
      if (isset($all_data_quick[$data['data']->nid]['i_web']) && $all_data_quick[$data['data']->nid]['i_web']) {
        $link = $all_data_quick[$data['data']->nid]['i_web'];
      }
      else {
        $link = url('node/' . $data['data']->nid);
      }
      
      if (isset($all_data_quick[$data['data']->nid]['i_logo_uri'])) {
        
        if ($target == 'logo_chart') {
          $image_style_name = 'logo_provider_chart_main';
        } 
        elseif ($target == 'logo_chart_iframe') {
          $image_style_name = 'logo_provider_chart_iframe';
        }
        elseif ($target == 'logo_article') {
          $image_style_name = 'thumbnail';
        }
        
        //$image = theme('image_style', array( 'path' =>  $all_data_quick[$data['data']->nid]['i_logo_uri'], 'style_name' => $image_style_name, 'alt' =>  $all_data_quick[$data['data']->nid]['i_logo_alt'], 'title' =>  $all_data_quick[$data['data']->nid]['i_logo_title']));
        $image = theme('gv_misc_image_style', array('style_name' => $image_style_name, 'path' => $all_data_quick[$data['data']->nid]['i_logo_uri'], 'alt' =>  $all_data_quick[$data['data']->nid]['i_logo_alt'], 'title' =>  $all_data_quick[$data['data']->nid]['i_logo_title'] ));
        
        ////$out = '<a href="' . $link . '" target="_blank">' . $image . '</a>';
        
        ///////$out = '<a href="/goto?t=provider&n=' . urlencode($all_data_quick[$data['data']->nid]['name']) . '" rel="nofollow" target="_blank">' . $image . '</a>';
        
        $out = gv_misc_getTrackingUrl($image, NULL, $data['data']->nid, NULL, NULL, NULL, $all_data_quick[$data['data']->nid], @$data['service_type']);
      }
      else {
        if (isset($all_data_quick[$data['data']->nid]['name'])) {
          /////$out = '<a href="' . $link . '" target="_blank">' . $all_data_quick[$data['data']->nid]['name'] . '</a>';
          
          /////$out = '<a href="/goto?t=provider&n=' . urlencode($all_data_quick[$data['data']->nid]['name']) . '" rel="nofollow" target="_blank">' . $all_data_quick[$data['data']->nid]['name'] . '</a>';
          
          $out = gv_misc_getTrackingUrl($all_data_quick[$data['data']->nid]['name'], NULL, $data['data']->nid, NULL, NULL, NULL, $all_data_quick[$data['data']->nid], @$data['service_type']);
        }
      }
      
      if ($target == 'logo_chart') {

           // Provider name with a link to provider page
          //$out .= l(@$all_data_quick[$data['data']->nid]['name'], 'node/' . $data['data']->nid, array('attributes' => array('class' => array('pname'))));
          $out .= gv_misc_getTrackingUrl(@$all_data_quick[$data['data']->nid]['name'], NULL, $data['data']->nid, NULL, 'pname', NULL, $all_data_quick[$data['data']->nid], @$data['service_type']);
      } 
          
      return $out;
      
      
      
    case 'features':
  
      
      $plan_title = isset($all_data_quick[$data['data']->nid][$data['service_type']]['plan']) ? $all_data_quick[$data['data']->nid][$data['service_type']]['plan'] : '';
      $features = isset($all_data_quick[$data['data']->nid][$data['service_type']]['feat']) ?  $all_data_quick[$data['data']->nid][$data['service_type']]['feat'] : '';
      //dpm($features);
      if ($plan_title) {
        $out .= '<div class="plan">' . $plan_title . '</div>';
      }
      if (!empty($features)) {
        foreach($features as $tid => $term) {
          $out .= '<div class="feature">' . t($term) . '</div>';
        }
      }
      
      $mobile_column[$data['data']->nid][$target] = $out;

      return $out; // $all_data_quick[$data['data']->nid][$target];
      
      
      
    
    case 'bottom_line':
      
      $plan_title = isset($all_data_quick[$data['data']->nid][$data['service_type']]['plan']) ? $all_data_quick[$data['data']->nid][$data['service_type']]['plan'] : '';
      
      if ($plan_title) {
        $out .= '<div class="plan">' . $plan_title . '</div>';
      }
      
      
      if (isset($all_data_quick[$data['data']->nid]['the_bottom_line'])) {
        $out .= '<div class="feature">' . $all_data_quick[$data['data']->nid]['the_bottom_line'] . '</div>';
      }
                
      
      return $out; // $all_data_quick[$data['data']->nid][$target];
    
      
    
    case 'grade':
      // Don't show on Home page.
      if ($_GET['q'] == 'home') {
        return NULL;
      }

      if (isset($data['data']->votingapi_cache_node_percent_overall_average_value) && $data['data']->votingapi_cache_node_percent_overall_average_value) {
        $out = gv_misc_getProviderGradeFromRating($data['data']->votingapi_cache_node_percent_overall_average_value);
      }
      
      return $out;

      
      
    
    case 'rating':
      
      $stars = NULL;
      
      if (!empty($data['data']->votingapi_cache_node_percent_overall_average_value)) {
                
        $stars = theme('gv_misc_fivestar_static', array('rating' => $data['data']->votingapi_cache_node_percent_overall_average_value, 'stars' => 5, 'tag' => 'overall', 'widget' => array('name' => 'stars', 'css' => 'stars.css')));
        
        $rating_count = number_format( (0.05 * $data['data']->votingapi_cache_node_percent_overall_average_value), 1 );
        $reviews_link_text = format_plural($data['data']->votingapi_cache_node_percent_overall_count_value, '1 Review', '@count Reviews');
        $reviews_link_params = ( (isset($data['target']) && $data['target'] == 'iframe') ? 'target="_blank" ' : '') . ' rel="nofollow" href="' . url('node/' . $data['data']->nid);
        
        $out = '
          <div class="fivestars_n_count">
              <div class="count">' . $rating_count . '<span> / 5</span></div>' .
              $stars . 
          '</div>
          <div class="details"><a ' . $reviews_link_params . '"><div>Read Reviews</div></a></div>
          ';

      }
      else {
        $out = '<div class="details"><a ' . ( (isset($data['target']) && $data['target'] == 'iframe') ? 'target="_blank" ' : '') . 'href="' . url('node/' . $data['data']->nid) . '" style="float: none;"><div>Write Review</div></a></div>';
      }
      
      if ($stars) {
        $mobile_column[$data['data']->nid][$target] = '<div class="name">' . $all_data_quick[$data['data']->nid]['name'] . '</div>' . $stars . '<div class="details"><a ' . $reviews_link_params . '"><div>Read Reviews</div></a></div>';
      }
      else {
        $mobile_column[$data['data']->nid][$target] = NULL;
      }
      return $out;
      
      
      
      
    case 'rating_n_visit':
    
      if (isset($data['data']->votingapi_cache_node_percent_overall_average_value) && $data['data']->votingapi_cache_node_percent_overall_average_value) {
                
        $out = theme('gv_misc_fivestar_static', array('rating' => $data['data']->votingapi_cache_node_percent_overall_average_value, 'stars' => 5, 'tag' => 'overall', 'widget' => array('name' => 'stars', 'css' => 'stars.css')));
        
        $out = '<div class="details"><a ' . ( (isset($data['target']) && $data['target'] == 'iframe') ? 'target="_blank" ' : '') . 'href="' . url('node/' . $data['data']->nid) . '"><div>' . format_plural($data['data']->votingapi_cache_node_percent_overall_count_value, '1 Review', '@count Reviews') . '</div></a></div><div class="fivestars_n_count">' . $out . ' <div class="count">(' . number_format( (0.05 * $data['data']->votingapi_cache_node_percent_overall_average_value), 1 ) . ')</div></div>';
      }
      else {
        $out = '<div class="details"><a ' . ( (isset($data['target']) && $data['target'] == 'iframe') ? 'target="_blank" ' : '') . 'href="' . url('node/' . $data['data']->nid) . '"><div>Write Review</div></a></div>';
      }
      
      $url = isset($all_data_quick[$data['data']->nid]['i_web']) ? $all_data_quick[$data['data']->nid]['i_web'] : '';

      if ($url) {
        $url = gv_misc_getTrackingUrl('', NULL, $data['data']->nid, NULL, 'reviews visit-site-btn', NULL, $all_data_quick[$data['data']->nid], @$data['service_type']);
        $out .= $url;
      }
      
      return $out;
      
    
      
      
       
    case 'phone_n_visit':
      
     /*
      if (!empty($all_data_quick[$data['data']->nid]['i_phone'])) {
        //$out .= '<div class="phone"><div class="title">Call</div><div itemprop="telephone"><a href="callto:' . (strpos($all_data_quick[$data['data']->nid]['i_phone'], '+') !== FALSE ? '' : '+1') . (str_replace(array(' ', '(', ')', '-'), '', strip_tags($all_data_quick[$data['data']->nid]['i_phone']))) . '">' . $all_data_quick[$data['data']->nid]['i_phone'] . '</a></div></div>';
        //$out .= '<div class="phone"><div class="title">Call Toll Free</div><div itemprop="telephone">' . $all_data_quick[$data['data']->nid]['i_phone'] . '</div></div>';
        $out .= '<div class="phone" itemprop="telephone">' . $all_data_quick[$data['data']->nid]['i_phone'] . '</div>';
      }
      */
      if (!empty($all_data_quick[$data['data']->nid]['i_web'])) {
        $out .= gv_misc_getTrackingUrl('', NULL, $data['data']->nid, NULL, 'visit-site-btn', NULL, $all_data_quick[$data['data']->nid], @$data['service_type']);
      }
                        
      return $out;
      
      
      
      
    
      
      case 'get_quote_popup':
      
     /*
      if (!empty($all_data_quick[$data['data']->nid]['i_phone'])) {
        //$out .= '<div class="phone"><div class="title">Call</div><div itemprop="telephone"><a href="callto:' . (strpos($all_data_quick[$data['data']->nid]['i_phone'], '+') !== FALSE ? '' : '+1') . (str_replace(array(' ', '(', ')', '-'), '', strip_tags($all_data_quick[$data['data']->nid]['i_phone']))) . '">' . $all_data_quick[$data['data']->nid]['i_phone'] . '</a></div></div>';
        //$out .= '<div class="phone"><div class="title">Call Toll Free</div><div itemprop="telephone">' . $all_data_quick[$data['data']->nid]['i_phone'] . '</div></div>';
        $out .= '<div class="phone" itemprop="telephone">' . $all_data_quick[$data['data']->nid]['i_phone'] . '</div>';
      }
      */
        
        
      if (!empty($all_data_quick[$data['data']->nid]['i_web'])) {
        $out .= gv_misc_getTrackingUrl('', NULL, $data['data']->nid, NULL, 'visit-site-btn', NULL, $all_data_quick[$data['data']->nid], @$data['service_type']);
      }
      //dpm($data['data']);
      //dpm($all_data_quick[$data['data']->nid]);
      //$logo = gv_misc_getProviderQuickData('logo_chart', array('data' => $data['data']));
      $out = '<div class="get_quote_popup"><span class="hidden"><span class="nid">' . $data['data']->nid . '</span><span class="logo_link"></span><span class="name">' . $all_data_quick[$data['data']->nid]['name'] . '</span></span></div>';
      return $out;
      
      
      
      
     case 'name_n_stars':
       
      if (!empty($all_data_quick[$data['data']->nid]['i_web'])) {
        $out = gv_misc_getTrackingUrl($all_data_quick[$data['data']->nid]['name'], NULL, $data['data']->nid, NULL, NULL, NULL, $all_data_quick[$data['data']->nid], @$data['service_type']);
      }
      else {
        $out = '<div class="name">' . $all_data_quick[$data['data']->nid]['name'] . '</div>';
      }
       
      // Add stars
      if (!empty($data['data']->votingapi_cache_node_percent_overall_average_value)) {
        $out .= '<div class="rating">' . theme('gv_misc_fivestar_static', array('rating' => $data['data']->votingapi_cache_node_percent_overall_average_value, 'stars' => 5, 'tag' => 'overall', 'widget' => array('name' => 'stars', 'css' => 'stars.css'))) . '</div>';
      }
      return $out;
      
      
      
    case 'visit_n_reviews': // For Top 5 hosting sites block on a provider page/
      //dpm('nid = '. $data['data']->nid);
      //dpm($_GET);
      
      $out .= '<div class="p-links">' . gv_misc_getTrackingUrl('', NULL, $data['data']->nid, NULL, 'reviews visit-site-btn', NULL, $all_data_quick[$data['data']->nid]/*, @$data['service_type']*/) . '<a class="review-link" href="' . url('node/' . $data['data']->nid) . '">READ REVIEWS</a></div>';
      
      return $out;
    
      
      
      
    case 'details':
      
      $details = NULL;
      
      if (empty($all_data_quick[$data['data']->nid]['details']) && $user->uid == 1) {

        $query = db_select('field_data_body', 'b')
          ->fields('b', array('body_value'));
        $query->condition('b.entity_id', $data['data']->nid);
        $body = $query->execute()->fetchField();


        if ($body) {
            $details = trim(drupal_substr(strip_tags($body), 0, 200));  
            
            $last_pos = strrpos($details, ' ');
            $details = substr_replace ($details, '... ', $last_pos);
            $details .= l('Read More', 'node/' . $data['data']->nid, array('attributes' => array('class' => array('more'))));
        }
        else {
          $details = l('Read a Review', 'node/' . $data['data']->nid, array('attributes' => array('class' => array('more'))));
        }
        
        $all_data_quick[$data['data']->nid]['details'] = $details;

        db_update('field_data_field_p_data_quick')
          ->fields(array(
            'field_p_data_quick_value' => serialize($all_data_quick[$data['data']->nid]),
          ))
          ->condition('entity_id', $data['data']->nid)
          ->execute();

        db_update('field_revision_field_p_data_quick')
          ->fields(array(
            'field_p_data_quick_value' => serialize($all_data_quick[$data['data']->nid]),
          ))
          ->condition('entity_id', $data['data']->nid)
          ->execute();




      }
      else {
        //dpm($all_data_quick[$data['data']->nid]);
        $details = @$all_data_quick[$data['data']->nid]['details'];
      }
        
      //return isset($all_data_quick[$data['data']->nid]['details']) ? $all_data_quick[$data['data']->nid]['details'] : '';
      
      return $details;
      
       
    
    
      
    // Shorter details excerpt.
    case 'details2':
      
      $details = NULL;
      
      if (empty($all_data_quick[$data['data']->nid]['details2'])) {
        $details = l('Read a Review', 'node/' . $data['data']->nid, array('attributes' => array('class' => array('more'))));
      }
      else {
        //dpm($all_data_quick[$data['data']->nid]);
        $details = $all_data_quick[$data['data']->nid]['details2'];
      }
      
      
      return $details;
    
      
      
      
      
      
    case 'i_availability':
      
      $query = db_select('field_data_field_p_data', 'pd')
        ->fields('pd', array('field_p_data_value'));
      $query->condition('pd.entity_id', $data['data']->nid);
      $p_data = $query->execute()->fetchField();
       
      $p_data = unserialize($p_data);
      
      
//      if (isset($all_data_quick[$data['data']->nid]['i_availability'])) {
//        dpm($all_data_quick);
//      }
      
      //return isset($all_data_quick[$data['data']->nid]['i_availability']) ? $all_data_quick[$data['data']->nid]['i_availability'] : '';
    
      return $p_data['info']['i_availability'];
      
      
      
      
    case 'plan':
      
      return isset($all_data_quick[$data['data']->nid][$data['service_type']]['plan']) ? $all_data_quick[$data['data']->nid][$data['service_type']]['plan'] : '';
      
      
      
    // Video Review from YouTube
    case 'vr-y':
      
      // Don't show on Home page.
      if ($_GET['q'] == 'home') {
        return NULL;
      }
      
      gv_misc_loadColorboxForVideoLinks();
      
      return isset($all_data_quick[$data['data']->nid][$data['service_type']]['vr-y']) 
                //? '<a rel="nofollow" id="oid' . $data['data']->nid . '" class="yt-direct" href="http://www.youtube.com/embed/' . $all_data_quick[$data['data']->nid][$data['service_type']]['vr-y'] . '?rel=0&amp;wmode=transparent" title="' . $all_data_quick[$data['data']->nid]['name'] . ' Video">Watch</a>'
                ? '<a rel="nofollow" id="oid' . $data['data']->nid . 'xxx' . time() . '" class="yt-direct" href="http://www.youtube.com/embed/' . $all_data_quick[$data['data']->nid][$data['service_type']]['vr-y'] . '?rel=0&amp;wmode=transparent" title="' . $all_data_quick[$data['data']->nid]['name'] . ' Video"></a><div class="yt-direct-label">Watch</div>'
                : '';
      
            
      
      
    case 'monthly':
    case 'back':
    case 'setup':
    case 'discount':
      //dpm($data['data']);
      //dpm($all_data_quick[$data['data']->nid][$data['service_type']]);
      $out = isset($all_data_quick[$data['data']->nid][$data['service_type']]['fees'][$target]) ? $all_data_quick[$data['data']->nid][$data['service_type']]['fees'][$target] : '';
      
      if ($target == 'monthly' && $out) {
        $out = '$'. $out;
        $mobile_column[$data['data']->nid][$target] = $out;
      }
      elseif ($target == 'monthly' && !$out) {
        $mobile_column[$data['data']->nid][$target] = NULL;
      }
      
      return $out;
    
      
    //Startup Resources (for Reseller programms)  
    case 'sts':  
    //'Communication Methods'
    case 'comet':
    //'Commissions'
    case 'commis':
    
    case 'frtr': //'Free Trial'
    case 'fxsmo': // 'Faxes/mo'
    case 'stor': // 'Storage' for Cloud backup
      
//      if (!$user->uid && ($target == 'frtr' || $target == 'fxsmo')) {
//        return NULL;
//      }
      
      //dpm($all_data_quick[$data['data']->nid]);
      return @$all_data_quick[$data['data']->nid][$data['service_type']][$target];
      
      
      
            
    //Insert in Secondary Providers Section
    case 'sps':
      
      $all_data_quick = gv_misc_getProvidersDataQuick();
      
      return !empty($all_data_quick[$data['data']->nid][$data['service_type']]['sps']);
        
        
        
      
    // One of a provider options.
    case 'options':
      
      if (isset($all_data_quick[$data['data']->nid][$data['service_type']]['options'][$data['option_name']])) {
        $out = $all_data_quick[$data['data']->nid][$data['service_type']]['options'][$data['option_name']];
      }
      else {
        // Find and add requested options to a provider's quick data field.
        ////if ($data['data']->nid == 12) {
          //dpm($all_data_quick[$data['data']->nid]);
          $out = gv_misc_addProviderSelectedOptionsToItsQuickDataField($data['data']->nid, $data['option_name']);
        ////}
        
      }
      
      if ($data['option_name'] == 'Toll Free Numbers' && !$out) {
        $out = 'N/A';
      }
      //dpm($data['option_name'] . ': ' . $out);
      
      if ($out === 1) {
        $out = 'Yes';
      }
      return $out;
    
      
      
      
    // Deprecated.
    case 'i_web':
            
      $url = isset($all_data_quick[$data['data']->nid][$target]) ? $all_data_quick[$data['data']->nid][$target] : '';
      
      return $url;
      
      
      
      
    case 'i_web2':
     
      $url = isset($all_data_quick[$data['data']->nid]['i_web']) ? $all_data_quick[$data['data']->nid]['i_web'] : '';
      if ($url) {
        ////$url = l('Visit Site', $url, array('attributes' => array(/*'rel' => 'nofollow', */'target' => '_blank', 'class' => 'site')));

//        global $user;
//        if ($user->uid == 1) {

          ////$goto_link_query = array('t' => 'provider', 'n' => urlencode($all_data_quick[$data['data']->nid]['name'])/*, 'url' => urlencode($url)*/);
          ////$url = l('Visit Site', 'goto', array('query' => $goto_link_query, 'attributes' => array('rel' => 'v:url nofollow', 'target' => '_blank'))); 
//        }
          
          
          //$url = gv_misc_getTrackingUrl('Visit Site', NULL, $data['data']->nid, NULL, 'visit-site-btn');
          
        
        $link_label = ''; //@$data['service_type'] == 'wc' ? 'Visit Site' : '';
        $url = gv_misc_getTrackingUrl($link_label, NULL, $data['data']->nid, NULL, 'visit-site-btn', NULL, $all_data_quick[$data['data']->nid], @$data['service_type']);
      }
                        
      return $url;
      
      
      
    // For remote (tmcnet) iframe.
    case 'i_web3':
      
      if (!empty($data['data']->votingapi_cache_node_percent_overall_average_value)) {
        $reviews_link_params = ( (isset($data['target']) && $data['target'] == 'iframe') ? 'target="_blank" ' : '') . ' rel="nofollow" href="' . url('node/' . $data['data']->nid);
        $out = '<div class="details"><a ' . $reviews_link_params . '"><div>Read Reviews</div></a></div>';
      }
      else {
        $out = '<div class="details"><a ' . ( (isset($data['target']) && $data['target'] == 'iframe') ? 'target="_blank" ' : '') . 'href="' . url('node/' . $data['data']->nid) . '"><div>Write Review</div></a></div>';
      }
      
      
      $url = isset($all_data_quick[$data['data']->nid]['i_web']) ? $all_data_quick[$data['data']->nid]['i_web'] : '';
      if ($url) {
        $link_label = ''; //@$data['service_type'] == 'wc' ? 'Visit Site' : '';
        $out .= gv_misc_getTrackingUrl($link_label, NULL, $data['data']->nid, NULL, 'visit-site-btn', NULL, $all_data_quick[$data['data']->nid], @$data['service_type']);
      }
      
      return $out;

      
  }
}


/**
 * Add a provider selected options to its quick data field.
 */
function gv_misc_addProviderSelectedOptionsToItsQuickDataField($nid, $option_to_return_name = NULL) {

  $query = db_select('field_data_field_p_data', 'pd');
  $query->fields('pd', array('field_p_data_value'));
  $query->leftJoin('field_data_field_p_data_quick', 'pdq', 'pdq.entity_id = ' . $nid);
  $query->fields('pdq', array('field_p_data_quick_value'));
  $query->condition('pd.entity_id', $nid);
  $data = $query->execute()->fetchObject();
  $p_data = unserialize($data->field_p_data_value);
  $p_data_quick = unserialize($data->field_p_data_quick_value);
  
  $data->field_p_data_value;
  
  //$p_data['provider_options_re']
  $provider_options_to_quick_save = unserialize(PROVIDER_OPTIONS_TO_QUICK_SAVE);
  $map_options_keys_to_provider_types_key = array(
    'bu' => 'provider_options_bu',
    're' => 'provider_options_re',
  );
  
  foreach ($p_data['s'] as $service_type_short => $service) {
    
    // Save some options to quick save.
    if (isset($map_options_keys_to_provider_types_key[$service_type_short]) && isset($p_data[$map_options_keys_to_provider_types_key[$service_type_short]]) && isset($provider_options_to_quick_save[$service_type_short]) ) {
      //dpm($p_data[$map_options_keys_to_provider_types_key[$service_type_short]]);
      foreach ($provider_options_to_quick_save[$service_type_short] as $option_name_to_save) {
        // try to find a specific option among several subarrays of the options array.
        foreach ($p_data[$map_options_keys_to_provider_types_key[$service_type_short]] as $section_key => $section_options) {
          if (isset($section_options[$option_name_to_save])) {
            $p_data_quick[$service_type_short]['options'][$option_name_to_save] = $section_options[$option_name_to_save];
            if ($option_name_to_save == $option_to_return_name) {
              if (!empty($section_options[$option_name_to_save . ' -text-'])) {
                $option_to_return_value = $section_options[$option_name_to_save . ' -text-'];
              }
              else {      
                $option_to_return_value = $section_options[$option_name_to_save];
              }
            }
          }
        }
      }
    }
  }

  //dpm($p_data_quick);
  // gv_misc_fieldSave($field_name, $entity_id, $data, $entity_type = 'node', $bundle = NULL) {
  gv_misc_fieldSave('p_data_quick', $nid, serialize($p_data_quick));
  
  // Reset ProvidersDataQuick in Session/global variable.
  gv_misc_getProvidersDataQuick(NULL, TRUE, TRUE);
  
  if (isset($option_to_return_value)) {
   return $option_to_return_value;
  }
}


/**
 * Gets grade from rating for a provider.
 */
function gv_misc_getProviderGradeFromRating($r) {
  
  if ($r > 5) {
    $r = number_format( (0.05 * $r), 1 );
  }
  
  $grades = array(
    'A+' => array(4.8, 5.0),
    'A' => array(4.4, 4.7),
    'A-' => array(4.2, 4.3),

    'B+' => array(4.0, 4.1),
    'B' => array(3.7, 3.9),
    'B-' => array(3.3, 3.6),

    'C+' => array(3.1, 3.2),
    'C' => array(2.9, 3.0),
    'C-' => array(2.5, 2.8),

    'D+' => array(2.1, 2.4),
    'D' => array(1.9, 2.0),
    'D-' => array(1.6, 1.8),

    'F' => array(1.0, 1.5),
  );
  
  foreach ($grades as $grade => $borders) {
    if ($r >= $borders[0] && $r <= $borders[1]) {
      return $grade;
    }
  }
  
  return '';
}


/**
 * Return themed field content for a view.
 */
function  gv_misc_getFieldThemed_forView($target, $data) {
  
  $out = '';
  
  switch($target) {
    
    case 'blog_post_thumb':
      
      //echo '<div class="logo"><a href="' . $node->p_data['info']['i_web'] . '" target="_blank">' . theme('image_style', array( 'path' =>  $content['field_p_logo'][0]['#item']['uri'], 'style_name' => 'logo_provider_page', 'alt' => $content['field_p_logo'][0]['#item']['alt'], 'title' => $content['field_p_logo'][0]['#item']['title'], 'attributes' => array('rel' => 'v:photo'))) . '</a></div>'; 
      
      //$out = '<a href="#">Test-' . $data['data']->nid . '</a>';
      $out = '';
      $query = db_select('field_data_field_main_image', 'mi')
        ->fields('mi', array('field_main_image_value'));
      $query->condition('entity_id', $data['data']->nid);
      $main_image = unserialize($query->execute()->fetchField());
      
      if (@$main_image['uri']) {
        //$out = '<div class="block-thumb">' . theme('image_style', array( 'path' =>  $main_image['uri'], 'style_name' => 'block_thumb', 'alt' => @$main_image['alt'], 'title' => $data['data']->node_title)) . '</div>';
        $out = '<span class="block-thumb">' . theme('gv_misc_image_style', array('style_name' => 'block_thumb', 'src' => $main_image['src'], 'path' => $main_image['uri'], 'alt' =>  (@$main_image['alt'] ? $main_image['alt'] : $data['data']->node_title), 'title' => $data['data']->node_title )) . '</span>';
      }
      
      //dpm($main_image);
      //dpm($out);

      return $out;
  }
  
}


/**
 * Replace for the original function.
 */
function wdg_misc_getProviderData_fromView($target, $data) {
  return gv_misc_getProviderData_fromView($target, $data);
}


/**
 * Return specific variable value for a provider depending on the filter value (business OR residential, etc)
 */
function gv_misc_getProviderData_fromView($target, $data) {
  
  $out = '';
  
  switch($target) {
    
    case 'service_types':
      $service_types = unserialize(SERVICE_TYPES);
      $p_service_types = $data['data']->_field_data['nid']['entity']->field_p_types['und'];
      $types = '';
      foreach ($p_service_types as $p_service_type) {
        
        $service_type_key = gv_misc_refineServiceTypeKey($p_service_type['value']);
        
        if ($p_service_type['value'] == $data['exposed_raw_input']['type']) {
          //$current_type = '<div class="type main">' . drupal_ucfirst($p_service_type['value']) . '</div>';
          $current_type = '<div class="type main">' . $service_types[$service_type_key] . '</div>';
        }
        else {
          //$types .= '<div class="type">' . drupal_ucfirst($p_service_type['value']) . '</div>';
          $types .= '<div class="type">' . $service_types[$service_type_key] . '</div>';
        }
      }
      
      if ($types) {
        return $current_type . '<div class="descr">' . t('(currently exposed)') . '</div>' . $types;
      }
      else {
        return $current_type;
      }
      
      break; // End of case 'service_types':
    
      
      
    case 'user_rating':
      $out = '';
      if (isset($data['data']->votingapi_cache_node_percent_features_average_value) && $data['data']->votingapi_cache_node_percent_features_average_value) {
                
        $out = theme('gv_misc_fivestar_static', array('rating' => $data['data']->votingapi_cache_node_percent_features_average_value, 'stars' => 5, 'tag' => 'features', 'widget' => array('name' => 'hearts', 'css' => 'hearts.css')))
              //. '<div class="rating">' . $data['data']->votingapi_cache_node_percent_features_average_value . '%</div>'
              . '<div class="voters">' . $data['data']->votingapi_cache_node_percent_features_count_value . ' ' . t('reviews') . '</div>'
              ;
      }
      $out .= '<div class="details">' . l(t('Details'), 'node/' . $data['data']->nid) . '</div>';
      break;
    
      
      
    case 'monthly_fees':
    case 'longdistance_fees':
    case 'setup_fees':
      
      if (!$all_fees = @$_SESSION['all_fees']) {
        $all_fees = gv_misc_getProvidersFees();
        $_SESSION['all_fees'] = $all_fees;
      }
      
      $p_fees = $all_fees[$data['data']->nid];
      
      $service_type_key = gv_misc_refineServiceTypeKey($data['exposed_raw_input']['type']);
      
      // Refine the fee key for the new provider structure.
      if (isset($p_fees['bu']['mon'])) {
        $old_fee_types = array('mon' => 'monthly_fees', 'set' => 'setup_fees', 'shp' => 'shipping_fees', 'can' => 'cancel_fees', 'lng' => 'longdistance_fees', 'oth' => 'other_fees' );
        $target = array_shift(array_keys($old_fee_types, $target));
      }
      
      if (isset($p_fees[$service_type_key][$target]) && $p_fees[$service_type_key][$target]) {
        return '$' . $p_fees[$service_type_key][$target];
      }
      /*                    
      switch($data['exposed_raw_input']['type']) {
        case 'business':
          if (isset($p_fees['bu'][$target]) && $p_fees['bu'][$target]) {
            return '$' . $p_fees['bu'][$target];
          }
          break;
        case 'residential':
          if (isset($p_fees['re'][$target]) && $p_fees['re'][$target]) {
            return '$' . $p_fees['re'][$target];
          }
          break;
      }
      */
      
      /*
      if (!$provider_data = unserialize($data['data']->field_field_p_data[0]['raw']['value'])) {
        return NULL;
      }
      switch($data['exposed_raw_input']['type']) {
        case 'business':
          if (isset($provider_data['services']['s_business']['bu_basicinfo_fees'][$target]) && $provider_data['services']['s_business']['bu_basicinfo_fees'][$target]) {
            return '$' . $provider_data['services']['s_business']['bu_basicinfo_fees'][$target];
          }
          break;
        case 'residential':
          if (isset($provider_data['services']['s_residential']['re_basicinfo_fees'][$target]) && $provider_data['services']['s_residential']['re_basicinfo_fees'][$target]) {
            return '$' . $provider_data['services']['s_residential']['re_basicinfo_fees'][$target];
          }
          break;
      }
      */
      break; // End of case 'monthly_fees':
    
      
      
      
      
    case 'plan':
      
      if (!$p_data = unserialize($data['data']->field_field_p_data[0]['raw']['value'])) {
        return NULL;
      }
      
      $features = NULL;
      
      $service_type_key = gv_misc_refineServiceTypeKey($data['exposed_raw_input']['type']);
      
      $service_types = unserialize(SERVICE_TYPES);
      $service_descriptions = unserialize(SERVICE_DESCRIPTIONS);
      //$fee_types = unserialize(FEE_TYPES);

      $load_key = 's';
      if (!isset($p_data['s'])) {
        $p_services = $p_data['services'];
        $load_key = 'services';
        $old_service_types = array('re' => 's_residential', 'bu' => 's_business');
        $old_service_descriptions = array('pti' => 'preface_title', 'pte' => 'preface_text', 'biti' => 'basicinfo_title', 'bite' => 'basicinfo_text', 'snti' => 'specialnotes_title', 'snte' => 'specialnotes_text', 'mbg' => 'money_back_guarantee');
        //$old_fee_types = array('mon' => 'monthly_fees', 'set' => 'setup_fees', 'shp' => 'shipping_fees', 'can' => 'cancel_fees', 'lng' => 'longdistance_fees', 'oth' => 'other_fees' );
      }
      else {
        $p_services = $p_data['s'];
      }
      
      
      if ($load_key == 's') {
        if (isset($p_services[$service_type_key]['pti'])) {
          $out = '<div class="plan">' . $p_services[$service_type_key]['pti'] . '</div>';
        }
        if (isset($p_services[$service_type_key]['weights_' . $service_type_key . '_features'])) {
          $features = $p_services[$service_type_key]['weights_' . $service_type_key . '_features'];
        }
      }
      else {
        
        if ($p_services[$old_service_types[$service_type_key]][$service_type_key . '_basicinfo_title']) {
          $out = '<div class="plan">' . $p_services[$old_service_types[$service_type_key]][$service_type_key . '_basicinfo_title'] . '</div>';
        }
        
        if (isset($p_services[$old_service_types[$service_type_key]]['weights_' . $service_type_key . '_features'])) {
          $features = $p_services[$old_service_types[$service_type_key]]['weights_' . $service_type_key . '_features'];
        }
      }
      
      /*                    
      switch($data['exposed_raw_input']['type']) {
        case 'business':
          if (isset($p_data['services']['s_business']['weights_bu_features'])) {
            $features = $p_data['services']['s_business']['weights_bu_features'];
          }
          if (isset($p_data['services']['s_business']['bu_preface_title'])) {
            $out = '<div class="plan">' . $p_data['services']['s_business']['bu_preface_title'] . '</div>';
          }
          break;
        
        case 'residential':
          if (isset($p_data['services']['s_business']['weights_bu_features'])) {
            $features = $p_data['services']['s_business']['weights_bu_features'];
          }
          if (isset($p_data['services']['s_residential']['re_preface_title'])) {
            $out = '<div class="plan">' . $p_data['services']['s_residential']['re_preface_title'] . '</div>';
          }
          break;
      } // End of switch($data['exposed_raw_input']['type']) {
      */
      
      if (is_array($features)) {
        $out .= '<div class="features">';
        $count = 0;
        foreach ($features as $feature) {
          $out .= '<div class="feature">' . $feature['name'] . '</div>';
          if ($count++ > 1) {
            break;
          }
        }
        $out .= '</div>';
      }
      break; // End of case 'features':
  }
  
  return $out;
}


function gv_misc_refineServiceTypeKey($source_key) {
  if ($source_key == 'residential') {
    return 're';
  }
  elseif ($source_key == 'business') {
    return 'bu';
  }
  else {
    return $source_key;
  }
}


function gv_misc_refineServiceTypeKey_Reverse($source_key) {
  if ($source_key == 're') {
    return 'residential';
  }
  elseif ($source_key == 'bu') {
    return 'business';
  }
  else {
    return $source_key;
  }
}


/**
 * Forms API validation function for email.
 */
function wdg_misc_elementValidate_email($element, &$form_state) {
  if (!valid_email_address($element['#value'])) {
    form_error($element, t('Please enter a valid email address.'));
  }
//  if (empty($element['#value'])) {
//    form_error($element, t('This field is required.'));
//  }
}  


/**
 * Forms API validation function for url.
 */
function wdg_misc_elementValidate_url($element, &$form_state) {
  if (!valid_url($element['#value'])) {
    form_error($element, t('Please enter a valid url address.'));
  }
//  if (empty($element['#value'])) {
//    form_error($element, t('This field is required.'));
//  }
}


/**
 * Helper function for sorting by weight with uasort function.
 * 
 * Example of using:
 * 
 * uasort($array_with_elements_contained_key_weight, 'wdg_misc_sortArrayByWeight');
 */
function wdg_misc_sortArrayByWeight($a, $b) 
{
    if ($a['weight'] == $b['weight']) {
        return 0;
    }
    return ($a['weight'] < $b['weight']) ? -1 : 1;
}


/**
 * Helper function for sorting providers by erating with uasort function.
 * 
 * Example of using:
 * 
 * uasort($array_with_elements_contained_key_name, 'gv_misc_sortArrayProvidersByErating');
 */
function gv_misc_sortArrayProvidersByErating($a, $b) {
  if ($a->erating == $b->erating) {
      return 0;
  }
  return ($a->erating < $b->erating) ? -1 : 1;
}

/**
 * Helper function for sorting by clicks with uasort function.
 * 
 * Example of using:
 * 
 * uasort($array_with_elements_contained_key_name, 'gv_misc_sortArrayByСlicks');
 */
function gv_misc_sortArrayByClicks($a, $b) {
  if ($a['clicks'] == $b['clicks']) {
      return 0;
  }
  return ($a['clicks'] < $b['clicks']) ? -1 : 1;
}
function gv_misc_sortArrayByClicksReverse($a, $b) {
  if ($a['clicks'] == $b['clicks']) {
      return 0;
  }
  return ($a['clicks'] > $b['clicks']) ? -1 : 1;
}


/**
 * Helper function for sorting by clicks_unique with uasort function.
 * 
 * Example of using:
 * 
 * uasort($array_with_elements_contained_key_name, 'gv_misc_sortArrayByClicksUnique');
 */
function gv_misc_sortArrayByClicksUnique($a, $b) {
  if ($a['clicks_unique'] == $b['clicks_unique']) {
      return 0;
  }
  return ($a['clicks_unique'] < $b['clicks_unique']) ? -1 : 1;
}
function gv_misc_sortArrayByClicksUniqueReverse($a, $b) {
  if ($a['clicks_unique'] == $b['clicks_unique']) {
      return 0;
  }
  return ($a['clicks_unique'] > $b['clicks_unique']) ? -1 : 1;
}


/**
 * Helper function for sorting by name with uasort function.
 * 
 * Example of using:
 * 
 * uasort($array_with_elements_contained_key_name, 'gv_misc_sortArrayByName');
 */
function gv_misc_sortArrayByName($a, $b) {
  $aa = strtolower($a['name']); $bb = strtolower($b['name']);
  //if ($a['name'] == $b['name']) {
  if ($aa == $bb) {
      return 0;
  }
  //return ($a['name'] < $b['name']) ? -1 : 1;
  return ($aa < $bb) ? -1 : 1;
}
/**
 * Helper function for sorting by node_title with uasort function.
 * 
 * Example of using:
 * 
 * uasort($array_with_elements_contained_key_name, 'gv_misc_sortArrayByObjectsNodeTitle');
 */
function gv_misc_sortArrayByObjectsNodeTitle($a, $b) {
  $aa = strtolower($a->node_title); $bb = strtolower($b->node_title);
  //if ($a['name'] == $b['name']) {
  if ($aa == $bb) {
      return 0;
  }
  //return ($a['name'] < $b['name']) ? -1 : 1;
  return ($aa < $bb) ? -1 : 1;
}


function gv_misc_sortArrayByNameReverse($a, $b) {
  $aa = strtolower($a['name']); $bb = strtolower($b['name']);
  //if ($a['name'] == $b['name']) {
  if ($aa == $bb) {
      return 0;
  }
  //return ($a['name'] > $b['name']) ? -1 : 1;
  return ($aa > $bb) ? -1 : 1;
}

/**
 * Socialite social buttons.
 */
function gv_blocks_getSocialiteButtons($url = NULL, $title = NULL) {

  if (!$url) {
    $url = 'http://getvoip.com' . ($_GET['q'] == 'home' ? '' : $_SERVER['REQUEST_URI']);
  }
  
  drupal_add_js('sites/all/libraries/jquery.plugins/socialite/socialite.min.js');
  //drupal_add_js('sites/all/libraries/jquery.plugins/socialite/socialite.js');
  
  $path_to_custom_js = drupal_get_path('module', 'gv_misc') . '/js/';
  drupal_add_js($path_to_custom_js . 'addSocialite.js');
  /*
  $out = '
  <ul class="social-buttons cf">
			<li><a href="http://twitter.com/share" class="socialite twitter-share" data-text="' . $title . '" data-url="' . $url . '" data-count="horizontal" rel="nofollow" target="_blank"><span class="vhidden">Share on Twitter</span></a></li>
			<li><a href="https://plus.google.com/share?' . 'url=' . $url . '" class="socialite googleplus-one" data-size="medium" data-href="' . $url . '" rel="nofollow" target="_blank"><span class="vhidden">Share on Google+</span></a></li>
			<li><a href="http://www.facebook.com/sharer.php?' . 'u=' . $url . '&amp;t=' . $title . '" class="socialite facebook-like" data-href="' . $url . '" data-send="false" data-layout="button_count" data-width="60" data-show-faces="false" rel="nofollow" target="_blank"><span class="vhidden">Share on Facebook</span></a></li>
			<li><a href="http://www.linkedin.com/shareArticle?' . 'mini=true&amp;url=' . $url . '&amp;title=' . $title . '" class="socialite linkedin-share" data-url="' . $url . '" data-counter="right" rel="nofollow" target="_blank"><span class="vhidden">Share on LinkedIn</span></a></li>
		</ul>
  ';
  */
  
  /*
  $out = '
  <ul class="social-buttons cf">
			<li><a href="http://twitter.com/share" class="socialite twitter-share" data-text="' . $title . '" data-url="' . $url . '" data-count="horizontal" rel="nofollow" target="_blank"><span class="vhidden">Share on Twitter</span></a></li>
			<li><a href="https://plus.google.com/share?' . 'url=' . urlencode($url) . '" class="socialite googleplus-one" data-size="medium" data-href="' . $url . '" rel="nofollow" target="_blank"><span class="vhidden">Share on Google+</span></a></li>
			<li><a href="http://www.facebook.com/sharer.php?' . 'u=' . urlencode($url . '&t=' . $title) . '" class="socialite facebook-like" data-href="' . $url . '" data-send="false" data-layout="button_count" data-width="60" data-show-faces="false" rel="nofollow" target="_blank"><span class="vhidden">Share on Facebook</span></a></li>
			<li><a href="http://www.linkedin.com/shareArticle?' . 'mini=true&amp;url=' . urlencode($url . '&title=' . $title) . '" class="socialite linkedin-share" data-url="' . $url . '" data-counter="right" rel="nofollow" target="_blank"><span class="vhidden">Share on LinkedIn</span></a></li>
		</ul>
  ';
  */
  
  
  // Horizontal
  /*
  $out = '
  <ul class="social-buttons cf">
			<li><a href="http://twitter.com/share" class="socialite twitter-share" data-text="' . $title . '" data-url="' . $url . '" data-count="horizontal" rel="nofollow" target="_blank"><span class="vhidden">Share on Twitter</span></a></li>
			<li><a href="https://plus.google.com/share?' . 'url=' . urlencode($url) . '" class="socialite googleplus-one" data-size="medium" data-href="' . $url . '" rel="nofollow" target="_blank"><span class="vhidden">Share on Google+</span></a></li>
			<li><a href="http://www.facebook.com/sharer.php?' . 'u=' . urlencode($url) . '&amp;t=' . urlencode($title) . '" class="socialite facebook-like" data-href="' . $url . '" data-send="false" data-layout="button_count" data-width="60" data-show-faces="false" rel="nofollow" target="_blank"><span class="vhidden">Share on Facebook</span></a></li>
			<li><a href="http://www.linkedin.com/shareArticle?' . 'mini=true&amp;url=' . urlencode($url) .  '&amp;title=' . urlencode($title) . '" class="socialite linkedin-share" data-url="' . $url . '" data-counter="right" rel="nofollow" target="_blank"><span class="vhidden">Share on LinkedIn</span></a></li>
		</ul>
  ';
  */
  
  // Vertical
  $out = '
  <ul class="social-buttons cf">
			<li><a href="http://twitter.com/share" class="socialite twitter-share" data-text="' . $title . '" data-url="' . $url . '" data-count="vertical" rel="nofollow" target="_blank"><span class="vhidden">Share on Twitter</span></a></li>
			<li><a href="https://plus.google.com/share?' . 'url=' . urlencode($url) . '" class="socialite googleplus-one" data-size="tall" data-href="' . $url . '" rel="nofollow" target="_blank"><span class="vhidden">Share on Google+</span></a></li>
			<li><a href="http://www.facebook.com/sharer.php?' . 'u=' . urlencode($url . '&t=' . $title) . '" class="socialite facebook-like" data-href="' . $url . '" data-send="false" data-layout="box_count" data-width="70" data-show-faces="false" rel="nofollow" target="_blank"><span class="vhidden">Share on Facebook</span></a></li>
			<li><a href="http://www.linkedin.com/shareArticle?' . 'mini=true&amp;url=' . urlencode($url . '&title=' . $title) . '" class="socialite linkedin-share" data-url="' . $url . '" data-counter="top" rel="nofollow" target="_blank"><span class="vhidden">Share on LinkedIn</span></a></li>
		</ul>
  ';
  

  
  
  return $out;
}


/**
 * AddThis social Like buttons set.
 */
function gv_blocks_getAddThisButtonsLike() {

  $out = '
    <!-- AddThis Button BEGIN -->
  <div class="addthis_toolbox addthis_default_style ">
  <a class="addthis_button_linkedin_counter"></a>
  <a class="addthis_button_google_plusone" g:plusone:size="medium"></a>
  <a class="addthis_button_facebook_like" fb:like:layout="button_count" fb:like:locale="en_US"></a>
  <a class="addthis_button_tweet"></a>
  </div>
  <script type="text/javascript">var addthis_config = {"data_track_addressbar":true, ui_language:"en", locale:"en_US"};</script>
  <script type="text/javascript" src="http://s7.addthis.com/js/250/addthis_widget.js#pubid=ra-50253baf64925d35"></script>
  <!-- AddThis Button END -->
  ';
  
  return $out;
}


/**
 * Implements hook_form().
 *
 * @return $form
 *   Return nothing.
 */
function gv_misc_newsletterSubscribe_form($form, &$form_state) {
  
  global $user;
  
  $form['title'] = array(
    //'#markup' => '<div class="title">Sign up to receive weekly updates</div>',
    '#markup' => '<div class="title"><div>Stay informed - </div>Sign up for our newsletter.</div>',
      
  );
  
  $form['email'] = array(
    '#type' => 'textfield',
    //'#title' => 'Sign up to receive weekly updates',
    //'#default_value' => $user->uid ? $user->mail : NULL,
    //'#description' => '',
    //'#element_validate' => array('gv_misc_validate_email'),
    '#required' => TRUE,
    //'#access' => $user->uid ? FALSE : TRUE,
    '#attributes' => array('title' => 'EMAIL'),
  );
  
  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Sign Up'),
  ); 
  
  
  // Add stars widgets to a Rating block
  $module_path = drupal_get_path('module', 'gv_misc');

  $form['#attached']['js'] = array(
    // Add hints inside some fields
    $module_path . '/js/gv_newsletterSubscribe_fieldHints.js',
  );

  
  return $form;
}


/**
 * Element Validate for email.
 */
function gv_misc_validate_email($element, &$form_state) {
   if (!preg_match('/^[_a-z0-9-]+(\.[_a-z0-9-]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,3})$/', $element['#value'])) {
     form_error($element, 'Wrong email format!');
   }
}


/**
 * Implements hook_form_validate().
 *
 * @return $form
 *   Return nothing.
 */
function gv_misc_newsletterSubscribe_form_validate(&$form, &$form_state) {

  //drupal_set_message('In Validate!', 'warning');
  //dpm($form_state['values']);
  //dpm($form);
    
  global $user;
  
  // Clear hints, if any.
  $fields_to_clear_hints = array('email' => array('hint' => @$form['email']['#attributes']['title']));
  foreach ($fields_to_clear_hints as $fname => $fdata) {
   
    if ($form_state['values'][$fname] == $fdata['hint']) {
      
      // This clear the field.
      $form[$fname]['#value'] = NULL;
      
      // Just in case.
      // BUT! It causes fatal eror with #parent index absence
      //form_set_value($form[$fdata['set']][$fname], array('#value' => NULL), $form_state);
      
      // Just in case on more.
      $form_state['values'][$fname] = NULL;
      
      if (isset($form[$fname]['#required']) && $form[$fname]['#required']) {
        form_set_error($fname, t('Please fill the field "' . $fname . '"'));
        return;
      }
      
    }
    elseif ($fname == 'email' && !preg_match('/^[_a-z0-9-]+(\.[_a-z0-9-]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,3})$/', $form_state['values'][$fname])) {
      form_set_error($fname, 'Wrong email format!');
      return;
    }
    
  }
  
  // Check if submitted email was submitted previously.
  $query = db_select('gv_emails_subscribed', 'e')  
        ->fields('e', array('email'));
  $query->condition('e.email', $form_state['values']['email']);
  $email = $query->execute()->fetchField();
  if ($email) {
    form_set_error('email', 'Email ' . $form_state['values']['email'] . ' has been submitted already!');
    return;
  }
  
}


/**
 * Implements hook_form_submit().
 *
 * @return $form
 *   Return nothing.
 */
function gv_misc_newsletterSubscribe_form_submit(&$form, &$form_state) {
  
  $verification_code = md5(time());
  db_insert('gv_emails_subscribed')
    ->fields(array(
      'email'=> $form_state['values']['email'],
      'timestamp'=> time(),
      'code' => $verification_code,
    ))
    ->execute();
    
  //gv_misc_sendMessage('email_verification', array('verification_code' => $verification_code . '=' . urlencode($form_state['values']['email']), 'email' => $form_state['values']['email']));
  
  drupal_set_message('Thank you for subscribing to our newsletter.');
  drupal_goto(ltrim(@$_SERVER['REDIRECT_URL'], '/'), array('query' => array('nocache' => 1)));
}



/**
 * Loads an image object from a file.
 *
 */
function gv_misc_loadImage($imgname, $type = null) {

    if(!$type)
    {
        $type = explode('.', $imgname);
        $type = $type[count($type)-1];
    }

    switch(strtolower($type))
    {

        case 'png':
            $im = @imagecreatefrompng($imgname);
            break;

        case 'jpg':
        case 'jpeg':
            $im = @imagecreatefromjpeg($imgname);
            break;
          
        case 'gif':
            $im = @imagecreatefromgif($imgname);
            break;
       
       default:
         $im = NULL;
    }

    if(!$im)
    {
        /*

        // an image with error message

        $im= imagecreate (150, 30);
        $bgc = imagecolorallocate ($im, 255, 255, 255);
        $tc= imagecolorallocate ($im, 0, 0, 0);
        imagefilledrectangle ($im, 0, 0, 150, 30, $bgc);
        imagestring ($im, 1, 5, 5, "Error loading $imgname", $tc);

        */
    }

    return $im;
}


/**
 * Sets breadcrumbs to a current page.
 *
 */
function gv_misc_setBreadcrumbs(&$variables) {
  
  $tags_cloud_pages = array('/articles/tags', '/blog/tags', '/news/tags');
  $not_teasers_types = array('preface', 'admin_page', 'page', 'quote', 'webform');
  
  //dpm($_SERVER);
  //dpm(arg());
  
  if(@$_SERVER['REQUEST_URI'] == '/') {
    $variables['breadcrumb'] = ''; // Home page has no bredcrumb.
  }
  elseif(isset($variables['node']) && !in_array($variables['node']->type, $not_teasers_types) ) {
    //dpm($variables['node']);
    //dpm('teasers node------------');
    switch ($variables['node']->type) {
      case 'provider':
        $variables['breadcrumb'] = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), l('Reviews', 'reviews'), $variables['node']->field_p_name['und'][0]['value']/* . ' Reviews'*/)));
        break;
      case 'review':
        if (!empty($variables['node']->field_ref_provider['und'][0]['target_id'])) {
          $variables['breadcrumb'] = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), l('Reviews', 'reviews'), l($variables['node']->field_r_provider_name['und'][0]['value'] /*. ' Reviews'*/, 'node/' . $variables['node']->field_ref_provider['und'][0]['target_id']), $variables['node']->title )));
        }
        else {
          $variables['breadcrumb'] = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), l('Reviews', 'reviews'), $variables['node']->title )));
        }
        break;
      case 'phone':
        //dpm($variables['node']);
        $variables['breadcrumb'] = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), l('Reviews', 'reviews'), l('Phones', 'reviews/phone'), $variables['node']->title )));
        break;
      case 'phone_review':
        //dpm($variables['node']);
        $variables['breadcrumb'] = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), l('Reviews', 'reviews'), l('Phones', 'reviews/phone'), l($variables['node']->field_p_name['und'][0]['value'], 'node/' . $variables['node']->field_ref_phone['und'][0]['target_id']), $variables['node']->title )));
        break;
      
      case 'article':
        //$variables['breadcrumb'] = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), l('Articles', 'articles'), l('Library', 'about-voip-services'), $variables['node']->title )));
        $variables['breadcrumb'] = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), l('Library', 'about-voip-services'), $variables['node']->title )));
        break;
      case 'blog_post':
        //$variables['breadcrumb'] = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), l('Articles', 'articles'), l('Blog', 'blog'), $variables['node']->title )));
        $variables['breadcrumb'] = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), l('Blog', 'blog'), $variables['node']->title )));
        break;
      case 'news_post':
        //$variables['breadcrumb'] = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), l('Articles', 'articles'), l('News', 'news'), $variables['node']->title )));
        $variables['breadcrumb'] = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), l('News', 'news'), $variables['node']->title )));
        break;
    }
  }
  /**/
  elseif(in_array($_SERVER['REQUEST_URI'], $tags_cloud_pages)) {
    //dpm('Tags cloud page ------------');
    switch ($_SERVER['REQUEST_URI']) {
      case '/articles/tags':
        $variables['breadcrumb'] = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), l('Library articles', 'about-voip-services'), 'Library tags' )));
        break;
      case '/blog/tags':
        $variables['breadcrumb'] = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), l('Blog', 'blog'), 'Blog tags' )));
        break;
      case '/news/tags':
        $variables['breadcrumb'] = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), l('News', 'news'), 'News tags' )));
        break;
    }
  }
  /**/
  elseif(strpos($_SERVER['REQUEST_URI'], '/tags/') != FALSE) {
    //dpm('Tag page ------------');
    
    // Don't show anything yet.
    //$variables['breadcrumb'] = '';
    
    // Defined in
    global $current_tag_title;
    
    /**/
    if(strpos($_SERVER['REQUEST_URI'], 'articles/tags/') != FALSE) {
      $variables['breadcrumb'] = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), l('Library articles', 'about-voip-services'), l('Articles tags', 'articles/tags'), $current_tag_title )));
    }
    elseif (strpos($_SERVER['REQUEST_URI'], 'blog/tags/') != FALSE) {
      $variables['breadcrumb'] = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), l('Blog', 'blog'), l('Blog tags', 'blog/tags'), $current_tag_title )));
    }
    else {
      $variables['breadcrumb'] = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), l('News', 'news'), l('News tags', 'news/tags'), $current_tag_title )));
    }
    /**/
  }
  elseif ($breadcrumb = gv_misc_getMenuTrail()) {
    //dpm('Page VIA MENU------------');
    $variables['breadcrumb'] = $breadcrumb;
  }
  elseif (isset($variables['node'])) {
    //dpm('Any other NODE page------------');
    $variables['breadcrumb'] = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), $variables['node']->title )));
  }
  elseif (@$_SERVER['REDIRECT_URL'] == '/voip-provider-submit-user-review') {
    //dpm('Any other NODE page------------');
    $variables['breadcrumb'] = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), 'Submit Review' )));
  }
  elseif (@$_SERVER['REDIRECT_URL'] == '/voip-phone-submit-user-review') {
    //dpm('Any other NODE page------------');
    $variables['breadcrumb'] = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), 'Submit Phone Review' )));
  }
  elseif (arg(0) == 'user' && is_int($arg_uid = arg(1))) {
    //dpm('User profile page------------');
    $userExtendedData = gv_misc_loadUserExtendedData($arg_uid);
    $variables['breadcrumb'] = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), l('About Us', 'about-us'), l('Our Team', 'our-team'), $userExtendedData->realname )));
  }
  else {
    //dpm('Any other NOT node page------------');
    $variables['breadcrumb'] = '';
  }

}


/**
 * Find all combinationa of an array's elements.
 *
 */
function gv_misc_findAllArrayElementsCombinations($arr, $level, &$result, $curr=array()) {
    for($i = 0; $i < count($arr); $i++) {
        $new = array_merge($curr, array($arr[$i]));
        if($level == 1) {
            sort($new);
            if (!in_array($new, $result)) {
                $result[] = $new;          
            }
        } else {
            gv_misc_findAllArrayElementsCombinations($arr, $level - 1, $result, $new);
        }
    }
}



/**
 * Find all related articles (based on similar tags) divided in groups by Index (amount of similar tags ).
 *
 */
function gv_misc_get_relatedArticles_dividedByIndex($article_nid, $node_type) {
  
  //return array();
  
  $max_articles = 10;
  $articles = array();
  $articles_by_index = array();

  $map_nodeType_to_tagsTable = array('blog_post' => 'blog', 'news_post' => 'news', 'article' => 'articles',);

  // Get the article's tags
  /*
  // via taxonomy_index, not effective, bec don't contain some tags for some reason...
  $query = db_select('taxonomy_index', 'ti')
      ->fields('ti', array('tid'));
  $query->leftJoin('taxonomy_term_data', 'td', 'td.tid = ti.tid');
  //$query->fields('td');
  $query->condition('ti.nid', $article_nid);
  $query->condition('td.vid', 2, '!=');
  //$a_tags = $query->execute()->fetchAllAssoc('tid');
  $arr = $query->execute()->fetchCol();
  //dpm($a_tags);
  //$arr = array_keys($a_tags);
  */
  
  $query = db_select('field_data_field_tags_' . $map_nodeType_to_tagsTable[$node_type], 'ti')
      ->fields('ti', array('field_tags_'. $map_nodeType_to_tagsTable[$node_type] . '_tid'));
  //$query->leftJoin('taxonomy_term_data', 'td', 'td.tid = ti.tid');
  //$query->fields('td');
  $query->condition('ti.entity_id', $article_nid);
  //$a_tags = $query->execute()->fetchAllAssoc('tid');
  $arr = $query->execute()->fetchCol();
  
  
  
  if (empty($arr)) {
    return array();
  }
  
  //dpm($arr);

  // If count($arr) > 6, the system will hang up... So we go another way in this case...
  if (count($arr) > 6) {
    
    // Find singles
    
    foreach ($arr as $key => $tag) {
      $query = db_select('node', 'n')
            ->fields('n', array('nid', 'created'));

      //$query->join('taxonomy_index', 'ti', 'ti.nid = n.nid AND ti.tid = ' . $tag);
      //$query->fields('ti', array('tid'));
      
      //$query->join('field_data_field_tags_' . $map_nodeType_to_tagsTable[$node_type], 'ti', 'ti.entity_id = n.nid AND ti.field_tags_'. $map_nodeType_to_tagsTable[$node_type] . '_tid = ' . $tag);
      //$query->fields('ti', array('field_tags_'. $map_nodeType_to_tagsTable[$node_type] . '_tid'));
      
      $query->join('field_data_field_tags_' . $map_nodeType_to_tagsTable[$node_type], 'ti', 'ti.entity_id = n.nid AND ti.field_tags_'. $map_nodeType_to_tagsTable[$node_type] . '_tid = ' . $tag);
      $query->addField('ti', 'field_tags_'. $map_nodeType_to_tagsTable[$node_type] . '_tid', 'tid');

      $query->join('taxonomy_term_data', 'td', 'td.tid = ti.field_tags_'. $map_nodeType_to_tagsTable[$node_type] . '_tid');
      $query->addField('td', 'name', 'term');
      
      $query->condition('n.nid', $article_nid, '!=');
      
      $query->condition('n.status', 1);
      
      $query->orderBy('n.created', 'DESC');
      $results = $query->execute()->fetchAllAssoc('nid');
      
      //dpm($result);
      if (empty($results)) {
        //dpm('tag ' . $tag . ' has no related');
        unset($arr[$key]);
      }
      else {
        foreach($results as $key => $value) {
          $value->similar_tags_count = 1;
          $all_nids_sets[1][$value->created] = $value;
        }
      }
    }
    
    // Normalize array for the case if it was cut
    $arr = $all_tags_sets[1] = array_values($arr);
    
    //dpm($arr);
    
    
    
    
    
    
    
    // If still > 6, search related by 3, 2 and 1 similar tags
    if (count($arr) > 6) {
      
      $articles = $all_nids_sets[1]; 
      
      $len = count($arr);
      // Find trinities.
      $i = 0; $j = 0; $k = 0;
      for ($i = 0; $i < $len - 2; $i++) {
        for ($j = $i + 1; $j < $len - 1; $j++) {
          for ($k = $j + 1; $k < $len; $k++) {
            $all_tags_sets[3][] = array($arr[$i], $arr[$j], $arr[$k]);
          }
        }
      }

      // Find couples
      $i = 0; $j = 0; $k = 0;
      for ($j = 0; $j < $len - 1; $j++) {
        for ($k = $j + 1; $k < $len; $k++) {
          $all_tags_sets[2][] = array($arr[$j], $arr[$k]);
        }
      }


      //dpm($all_tags_sets);


      /*
      // Find couples
      $tags_set = array();
      foreach ($arr as $a_tag) {
        foreach ($arr as $a_tag_2) {
          if ($a_tag_2 == $a_tag || (isset($tags_set[$a_tag_2]) && in_array($a_tag, $tags_set[$a_tag_2]) )) {
            continue;
          }
          $tags_set[$a_tag][] = $a_tag_2;
        }
      }

      //dpm($tags_sets);
      foreach ($tags_set as $root => $leaves) {
        foreach ($leaves as $leave) {
          $all_tags_sets['couples'][] = array($root, $leave);
        }
      }
      */

      
      foreach ($all_tags_sets as $index => $set ) {
      
        // We have found articles for singles already.
        if ($index == 1) {
          continue;
        }
        
        foreach ($set as $key => $tags_set) {  

          //dpm('$tags_set ' . $tags_set[0] . ', ' . $tags_set[1] . ', ' . @$tags_set[2]);

          $query = db_select('node', 'n')
                ->fields('n', array('nid', 'created'));

          foreach ($tags_set as $key2 => $tag) {
            //$query->join('field_data_field_tags_' . $map_nodeType_to_tagsTable[$node_type], 'ti_' . $key2, 'ti_' . $key2 . '.entity_id = n.nid AND ti_' . $key2 . '.field_tags_' . $map_nodeType_to_tagsTable[$node_type] . '_tid = ' . $tag);
            //$query->fields('ti_' . $key2, array('field_tags_'. $map_nodeType_to_tagsTable[$node_type] . '_tid'));
            
            
            $query->join('field_data_field_tags_' . $map_nodeType_to_tagsTable[$node_type], 'ti_' . $key2, 'ti_' . $key2 . '.entity_id = n.nid AND ti_' . $key2 . '.field_tags_'. $map_nodeType_to_tagsTable[$node_type] . '_tid = ' . $tag);
            $query->addField('ti_' . $key2, 'field_tags_'. $map_nodeType_to_tagsTable[$node_type] . '_tid', 'tid_' . $key2);

            $query->leftJoin('taxonomy_term_data', 'td_' . $key2, 'td_' . $key2 . '.tid = ti_' . $key2 . '.field_tags_'. $map_nodeType_to_tagsTable[$node_type] . '_tid');
            $query->addField('td_' . $key2, 'name', 'term_' . $key2);


          }
          
          $query->condition('n.status', 1);
          
          $query->condition('n.nid', $article_nid, '!=');
          //$result = $query->execute()->fetchAllAssoc('nid');
          $results = $query->execute()->fetchAllAssoc('created');
          
          
          
          if (!empty($results)) {
            foreach($results as $key => $result) {
              //if (!in_array($result, $articles)) {
              if (isset($articles[$key]) && $articles[$key]->similar_tags_count > $index) {
                unset($results[$key]);
              }
              else {
                if (isset($all_nids_sets[1][$key])) {
                  // Clear this tag from 1 tags array.
                  unset($all_nids_sets[1][$key]); 
                }
                $result->similar_tags_count = $index;
                $all_nids_sets[$index][$result->created] = $result;
                $articles[$result->created] = $result;
              }
              //}
            }
          }
        }

      }
      
      // Sort by created time (by keys).
      foreach($all_nids_sets as $key => $value) {
        krsort($all_nids_sets[$key]);
      }
    
      //dpm($all_nids_sets);
      
      // Build $articles_by_index and Leave nly 10 elements.
      $max_index = count($all_nids_sets);
      for ($i = $max_index; $i >= 1; $i--) {
        
        foreach ($all_nids_sets[$i] as $key => $value) {
          if ($max_articles <= 0) {
            break 2;
          }
          --$max_articles;
          $articles_by_index[$i][$key] = $value;
        }
      }
      
      //dpm($articles_by_index);
      
      return $articles_by_index;
      
    } // End of if still > 6 after filtering.
  
    
  } // End of if (count($arr) > 6) {
  
  
  
  // Amountof tags is less than 7 (original or filtered by excluding 0ne tag)
  $current_article_index = count($arr);

  $results = array();

  for ($i = 0; $i<count($arr); $i++) {
    gv_misc_findAllArrayElementsCombinations($arr, $i+1, $results);
  }

  $min_index = 1; //$current_article_index > 1 ? 2 : 1;
  $max_index = 0;

  
  foreach ($results as $key => $array) {
    $temp_array = array();
    foreach ($array as $key2 => $item) {
      if (in_array($item, $temp_array)) {
        unset($results[$key]);
        break;
      }
      $temp_array[] = $item;
    }

    if (isset($results[$key])) {
      $index = count($results[$key]);
      $tags[$index][] = $results[$key];
      if ($max_index < $index) {
        $max_index = $index;
      }
    }
  }


  //dpm($tags);

  // TEST
//            foreach ($result as $arr) {
//                dpm(join(" - ", $arr));
//            }


  for ($i = $max_index; $i >= $min_index; $i--) {

    //dpm('i = ' . $i);
    
    foreach ($tags[$i] as $index => $index_tags) {
      
      
      if (!$max_articles) {
        break;
      }

      $query = db_select('node', 'n')
          ->fields('n', array('nid', 'created'));

      foreach ($index_tags as $key => $index_tag) {
        
        /*
        
        $query = db_select('field_data_field_tags_' . $map_nodeType_to_tagsTable[$node_type], 'ti')
            ->fields('ti', array('field_tags_'. $map_nodeType_to_tagsTable[$node_type] . '_tid'));
        //$query->leftJoin('taxonomy_term_data', 'td', 'td.tid = ti.tid');
        //$query->fields('td');
        $query->condition('ti.entity_id', $article_nid);
        //$query->condition('td.vid', 2, '!=');
        //$a_tags = $query->execute()->fetchAllAssoc('tid');
        $arr = $query->execute()->fetchCol();

        
        */
        
        
        ////$query->join('taxonomy_index', 'ti_' . $key, 'ti_' . $key . '.nid = n.nid AND ti_' . $key . '.tid = ' . $index_tag);
        ////$query->fields('ti_' . $key, array('tid'));
        
        
        $query->join('field_data_field_tags_' . $map_nodeType_to_tagsTable[$node_type], 'ti_' . $key, 'ti_' . $key . '.entity_id = n.nid AND ti_' . $key . '.field_tags_'. $map_nodeType_to_tagsTable[$node_type] . '_tid = ' . $index_tag);
        //$query->fields('ti_' . $key, array('field_tags_'. $map_nodeType_to_tagsTable[$node_type] . '_tid'));
        $query->addField('ti_' . $key, 'field_tags_'. $map_nodeType_to_tagsTable[$node_type] . '_tid', 'tid_' . $key);
        
        $query->join('taxonomy_term_data', 'td_' . $key, 'td_' . $key . '.tid = ti_' . $key . '.field_tags_'. $map_nodeType_to_tagsTable[$node_type] . '_tid');
        $query->addField('td_' . $key, 'name', 'term_' . $key);
      }
      
      $query->condition('n.status', 1);
      
      $query->condition('n.nid', $article_nid, '!=');
      if (!empty($articles)) {
        $query->condition('n.nid', array_keys($articles), 'NOT IN');
      }
      //$query->orderBy('n.created', 'DESC');
      //$query->range(0, $max_articles);
      
      //$result = $query->execute()->fetchAllAssoc('nid');
      $results = $query->execute()->fetchAllAssoc('created');
      
      //if ($i == 1)
//      if (!empty($result))
//      {
//        dpm('$max_articles = ' . $max_articles);
//        dpm('$map_nodeType_to_tagsTable[$node_type] = ' . $map_nodeType_to_tagsTable[$node_type]);
//        dpm ('$index_tag = ' . $index_tag);
//        dpm($result);
//      }
      
      if ($results) {

//        foreach ($results as $key => $result) {
//          if (isset($articles[$key])) {
//            unset($results[$key]);
//          }
//          elseif ($max_articles) {
//            $articles_by_index[$i][$key] = $result;
//            $articles[$key] = $result;
//            --$max_articles;
//          }
//        }
        
        foreach ($results as $key => $result) {
          //if (in_array($result, $articles)) {
          if (isset($articles[$key])) {
            unset($results[$key]);
          }
          elseif ($max_articles) {
            $result->similar_tags_count = $i;
            $articles_by_index[$i][$result->created] = $result;
            $articles[$result->created] = $result;
            --$max_articles;
          }
        }
        

      }
    }
  }

  
  foreach($articles_by_index as $key => $value) {
    krsort($articles_by_index[$key]);
  }
  //dpm($articles_by_index);
  
  return $articles_by_index;
}


/**
 * Define if the article has an image field.
 */
function gv_misc_articleHasMainImageField($nid) {
  
  $query = db_select('node', 'n')
    ->fields('n', array('title'));

  $query->join('field_data_field_main_image', 'mi', 'mi.entity_id = n.nid');
  $query->fields('mi', array('field_main_image_value'));
  $query->condition('n.nid', $nid);

  $result = $query->execute()->fetchObject();
  //dpm($result);
  
  if ($result) {
    $result->field_main_image_value = unserialize($result->field_main_image_value);
    if(!empty($result->field_main_image_value)) {
      return TRUE;
    }
  }
  return FALSE;              
}


/**
 * Add related articles variable to an article node.
 */
function gv_misc_addRelatedArticlesToNode($node) {
  
    // Set Related articles section data.

    if (!$node || !is_object($node)) {
      return NULL;
    }
  
    $max_articles_on_front = 4;
    
    $field_extra_data = is_array($node->field_extra_data)? @$node->field_extra_data['und'][0]['value'] : @$node->field_extra_data;
    $extra_data = unserialize($field_extra_data);

    //dpm($extra_data);

    
    //'related_articles_timestamp' => time()

    // If the article hasn't been yet resaved with set related articles
    // we then set it here by default the first 4 most relative articles from all found related articles.

    //$time_elapsed = time() - @$extra_data['related_articles_timestamp'];
    //dpm('$time_elapsed = ' . $time_elapsed);
    
//    global $user;
//    if ($user->uid) {
//      $cache_time = 120;
//      dpm('time = ' . time());
//    }
//    else 
      {
      $cache_time = (3600*24*3); // 3 days before the next related articles update.
    }
    

    //dpm('now time = ' . time());
    //$extra_data['related_articles_timestamp'] < 1380644802 -----> assure that there is used a new calculation version.
    
    
    if (!isset($extra_data['related_articles']) || $extra_data['related_articles_timestamp'] < 1390117881 || (isset($extra_data['related_articles']) && (time() - @$extra_data['related_articles_timestamp']) > $cache_time ) ) // 60s*60 = 3600s = 1h     //Comment this line to ignore srelected by admin related articled.
    {
      //exec('echo "$(date ' . "'+%Y-%m-%d %H:%M:%S'" . ') ---->RELATED START n' . $node->nid . '--->'. escapeshellarg($extra_data['title']) . '" >>~/gv_image_optimize.log');
      
      dpm('Recaclulate related...');
      //dpm($extra_data);
      
      // Use already calculated related articles teasers.
      
      // TO-DO !!!!!!!!!!!!!!!!!!!!!!  Let to work condition below later (in a month or so), when there will be recalculated all old teaser with wrongly built images beautiful images urls (contained content/all)
//      if ($extra_data['related_articles_timestamp'] == -1) 
      {
        $old_extra_data_related_articles = array();
      }
//      else {
//        $old_extra_data_related_articles = @$extra_data['related_articles'];
//      }
      
      
      // Reset the related_articles array. Just in case.
      $extra_data['related_articles'] = array();
      
      
      
      $articles_by_index = gv_misc_get_relatedArticles_dividedByIndex($node->nid, $node->type);
      //dpm($articles_by_index);
      
      if (!empty($articles_by_index)) {

        // Recreate $extra_data['related_articles'] element
        $related_count = 0;
        $cached_image_flag = FALSE;
        $cached_image_flag_updated = FALSE;
        
        foreach ($articles_by_index as $index => $data) {
          foreach ($data as $created => $related_article) {
            
            // Use already prepared related article section from previous found related articles.

            //dpm('Processing ' . $related_article->nid);
            if (isset($old_extra_data_related_articles['index_' . $index][$related_article->nid])) {
              $extra_data['related_articles']['index_'. $index][$related_article->nid] = $old_extra_data_related_articles['index_' . $index][$related_article->nid];
              //dpm($related_article->nid . ' is defined already. We use it on step ' . $related_count);
              if ($related_count++ >= $max_articles_on_front - 1) {
                break 2;
              }
              continue;
            }        
            
            // Or recalculate if it wasn't found before.
            //dpm('New article is found on ' . $related_count . ' step!');

            
            //if (gv_misc_articleHasMainImageField($related_article->nid)) 
            {

              $query = db_select('node', 'n')
                ->fields('n', array('title', 'created'));
//              $query->leftJoin('field_data_field_main_image', 'mi', 'mi.entity_id = n.nid');
//              $query->fields('mi', array('field_main_image_value'));
              
              $query->leftJoin('field_data_field_extra_data', 'ed', 'ed.entity_id = n.nid');
              $query->fields('ed', array('field_extra_data_value'));
              
              $query->leftJoin('field_data_body', 'b', 'b.entity_id = n.nid');
              $query->addField('b', 'body_value', 'teaser');
              
              $query->condition('n.nid', $related_article->nid);

              if ($result = $query->execute()->fetchObject()) {
                
                
                $result = gv_misc_calculateDataForRelatedArticlesBlock($result->title, $result->teaser, unserialize($result->field_extra_data_value), $result->created, array('title_not_normalized' => TRUE, 'body_not_stripped' => TRUE));

                
                
                /*
                $teaser_lenght = 780; // without pic
                //$teaser_lenght = 900;
                
                $result->field_main_image_value = unserialize($result->field_main_image_value);
                if(!empty($result->field_main_image_value)) {
                  
                  dpm(unserialize($result->field_extra_data_value));
                  
                  $result->field_main_image_value['src_themed_related'] = image_style_url('related_article_thumb', $result->field_main_image_value['uri']);
                  $result->field_main_image_value['src_themed_related_sideblock'] = image_style_url('related_article_thumb_sideblock', $result->field_main_image_value['uri']);
                  
                  //dpm($result->field_main_image_value['src_themed_related_sideblock']);
                  //dpm(getimagesize($result->field_main_image_value['src_themed_related_sideblock']));
                  
                  // Assure that the imagecache file is created already, or recreate it.
                  //dpm($result->field_main_image_value);
                  //dpm($result->field_main_image_value['src_themed_related_sideblock']);
                  
                  $cached_image_flag = gv_misc_createCachedImageIfNotExists($result->field_main_image_value['src_themed_related_sideblock']);
                  if (!$cached_image_flag_updated && $cached_image_flag == 'updated')  {
                    $cached_image_flag_updated = TRUE;
                    //exec('echo "$(date ' . "'+%Y-%m-%d %H:%M:%S'" . ') ---->RELATED START n' . $node->nid . '--->'. escapeshellarg($extra_data['title']) . '" >>~/gv_image_optimize.log');
                  }
                  
                  $sizes = getimagesize($result->field_main_image_value['src_themed_related_sideblock']);
                  
                  $image_height = $sizes[1];
                  if ($image_height >= 212) {
                    $teaser_lenght = 390; // with pic 215px and 2 lines of a title.
                  }
                  else {
                    
                    //$teaser_lenght = 300 + (215 - $sizes[1])
                    $ratio = 1 - (($image_height*100)/215)/100;
                    $teaser_lenght = 390 + 390*$ratio;
//                    dpm('$image_height = ' . $image_height);
//                    dpm('$ratio = ' . $ratio);
//                    dpm('$teaser_lenght = ' . $teaser_lenght);
                  }
                }
                
                //dpm('$teaser_lenght = ' . $teaser_lenght);
                
                // Shirten a teaser a little bit.
                $teaser_lenght -= 175;
                
                $result->teaser = drupal_substr(strip_tags($result->teaser), 0, $teaser_lenght);
                // Remove the last broken word.
                $last_pos = strrpos($result->teaser, ' ');
                $result->teaser = substr_replace ($result->teaser, '... ', $last_pos);
                */
                
                
                //dpm($related_article);
                $similar_tags = '';
                foreach ($related_article as $key => $value) {
                  if (strpos($key, 'term') !== FALSE) {
                    $similar_tags .= ($similar_tags ? ', ' : '') . $value;
                  }
                }
                $result->similar_tags = $similar_tags;
                $result->similar_tags_count = @$related_article->similar_tags_count;
                
                
                
                $extra_data['related_articles']['index_'. $index][$related_article->nid] = $result;
                                
                if ($related_count++ >= $max_articles_on_front - 1) {
                  break 2;
                }
                
                

              } // End of if ($result = $query->execute()->fetchObject()) {

//                  $extra_data['related_articles']['index_'. $index][$related_article->nid] = 1;
//                  if ($related_count++ >= $max_articles_on_front - 1) {
//                    break 2;
//                  }

            }
            
          } // End of foreach ($data as $created => $related_article) {
          
        } // End of foreach ($articles_by_index as $index => $data) {
        
      } // End of if (!empty($articles_by_index)) {
      
      $extra_data['related_articles_timestamp'] = time();

      //dpm($extra_data);
      // Save found related articles to the article's extra_data field to set it as default related articles.
      // After that there will not be need to recalculate it avery time the article being viewed.

      gv_misc_fieldSave('extra_data', $node->nid, serialize($extra_data), 'node', $node->type);
      
      //exec('echo "$(date ' . "'+%Y-%m-%d %H:%M:%S'" . ') ---->RELATED STOP n' . $node->nid . '--->'.'" >>~/gv_image_optimize.log');

    }

    
    
    
    // Add loaded related articles to a node.
    
    if (!isset($extra_data['related_articles'])) {
      $extra_data['related_articles'] = array();
    }
    
    foreach ($extra_data['related_articles'] as $group) {
      
      foreach ($group as $nid => $data) {

        if ($data) {

          // Fix related articles data if it's an integer value (checked), replace it with the data object.
          if (is_int($data)) {

            unset($node->related_articles[$nid]);
            /*
            $query = db_select('node', 'n')
              ->fields('n', array('title'));

            $query->join('field_data_field_main_image', 'mi', 'mi.entity_id = n.nid');
            $query->fields('mi', array('field_main_image_value'));

            $query->condition('n.nid', $nid);

            
//            // Skip articles without thumbnails.
//            if ($result = $query->execute()->fetchObject()) {
//
//              $result->field_main_image_value = unserialize($result->field_main_image_value);
//              if(!empty($result->field_main_image_value)) {
//                $result->field_main_image_value['src_themed'] = image_style_url('related_article_thumb', $result->field_main_image_value['uri']);
//                $node->related_articles[$nid] = $result;
//                if (--$max_articles < 1) {
//                  break 2;
//                }
//              }
//            }

              

            if ($result = $query->execute()->fetchObject()) {

              $result->field_main_image_value = unserialize($result->field_main_image_value);
              if(!empty($result->field_main_image_value)) {
                $result->field_main_image_value['src_themed_related'] = image_style_url('related_article_thumb', $result->field_main_image_value['uri']);
              }
              $node->related_articles[$nid] = $result;

              if (--$max_articles_on_front < 1) {
                break 2;
              }
            }
             */
          } // End of if_int
          else {

            $node->related_articles[$nid] = $data;
            if (--$max_articles_on_front < 1) {
              break 2;
            }
          }

        } // End of if($data)
        
      } // End of foreach ($group as $nid => $data) {
      
    } // End of foreach ($extra_data['related_articles'] as $group) {

}


/**
 * Allow contextual links for all view_modes.
 */
function gv_misc_node_view_alter(&$build) {
  // Allow contextual links even on full view mode on node pages.
  //$build['#contextual_links']['node'] = array('node', array($build['#node']->nid));
}


/**
 * Calculate for the article its Data For Related Articles Block.
 */
function gv_misc_calculateDataForRelatedArticlesBlock($title, $body, $extra_data, $created, $options = array()) {
              
  static $cached_image_flag_updated;
  
  $result = new stdClass();
  
  $teaser_lenght = 780; // without pic
  //$teaser_lenght = 900;
  
  $result->title = empty($options['title_not_normalized']) ? $title : htmlspecialchars_decode($title, ENT_QUOTES);
  $result->teaser = empty($options['body_not_stripped']) ? $body : strip_tags($body);
  $result->created = $created;
  
  if(!empty($extra_data['main_image'])) {

    $result->src_themed_related = image_style_url('related_article_thumb', $extra_data['main_image']['uri']);
    $result->src_themed_related_sideblock = image_style_url('related_article_thumb_sideblock', $extra_data['main_image']['uri']);
    $result->src_themed_related_sideblock_beautify = gv_pages_convertBeautifulUrls('from_originals_to_beautiful', $result->src_themed_related_sideblock);
    
    $cached_image_flag = gv_misc_createCachedImageIfNotExists($result->src_themed_related_sideblock);
//    if (!$cached_image_flag_updated && $cached_image_flag == 'updated')  {
//      $cached_image_flag_updated = TRUE;
//      exec('echo "$(date ' . "'+%Y-%m-%d %H:%M:%S'" . ') ---->RELATED START n' . $node->nid . '--->'. escapeshellarg($extra_data['title']) . '" >>~/gv_image_optimize.log');
//    }

    $sizes = getimagesize($result->src_themed_related_sideblock);

    $image_height = $sizes[1];
    if ($image_height >= 212) {
      $teaser_lenght = 390; // with pic 215px and 2 lines of a title.
    }
    else {
      //$teaser_lenght = 300 + (215 - $sizes[1])
      $ratio = 1 - (($image_height*100)/215)/100;
      $teaser_lenght = 390 + 390*$ratio;
//      dpm('$image_height = ' . $image_height);
//      dpm('$ratio = ' . $ratio);
//      dpm('$teaser_lenght = ' . $teaser_lenght);
    }
  }

  //dpm('$teaser_lenght = ' . $teaser_lenght);

  // Shorten a teaser a little bit.
  $teaser_lenght -= 175;

  

  $result->teaser = drupal_substr($result->teaser, 0, $teaser_lenght);
  // Remove the last broken word.
  $last_pos = strrpos($result->teaser, ' ');
  $result->teaser = substr_replace ($result->teaser, '... ', $last_pos);

  return $result;
}





//--------------------------------------------------------------------------------------------------

function gv_misc_forms($form_id, $args) {

  $forms = array();
  if (strpos($form_id, 'gv_misc_sendCapturedQuotesToProviders_form_') === 0) {
    $forms[$form_id] = array(
      'callback' => 'gv_misc_sendCapturedQuotesToProviders_form',
      'callback arguments' => array($args[0]),
    );
  }
  return $forms;
}


/**
 * Implements hook_form().
 *
 * @return $form
 *   Return nothing.
 */
function gv_misc_sendCapturedQuotesToProviders_form($form, &$form_state, $quote_request_data) {
  
  $form = array();
  $form['quote_request_data'] = array(
    '#type' => 'hidden',
    '#value' => serialize($quote_request_data),
  );
  
  $remoteProvidersSubmissionsSettings = unserialize(REMOTE_PROVIDERS_SUBMISSIONS_SETTINGS);
  $class_submitted = 'all-submitted';
  if (!empty($quote_request_data['sentToRemoteProviders'])) {
    foreach ($remoteProvidersSubmissionsSettings as $provider => $provider_data) {
      if (empty($quote_request_data['sentToRemoteProviders'][$provider])) {
        $class_submitted = 'some-not-submitted';
      }
    }
  }
  else {
    $class_submitted = 'not-tracked';
  }
  
  $form['remoteSubmittions'] = array(
    '#type' => 'fieldset',
    '#title' => 'Submit to providers',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#attributes' => array('class' => array($class_submitted)),
  );
      $form['remoteSubmittions']['providers'] = array(
        '#type' => 'container',
        '#tree' => TRUE,
      );

          foreach ($remoteProvidersSubmissionsSettings as $provider => $provider_data) {
            $form['remoteSubmittions']['providers'][$provider] = array(
              '#type' => 'checkbox',
              '#default_value' => !empty($quote_request_data['sentToRemoteProviders'][$provider]) ? TRUE : FALSE,
              '#title' => $provider,
              '#disabled' => !empty($quote_request_data['sentToRemoteProviders'][$provider]) ? TRUE : FALSE,
            );
          }
  
      $form['remoteSubmittions']['actions'] = array('#type' => 'actions');
      $form['remoteSubmittions']['actions']['submit'] = array(
      //$form['actions'] = array('#type' => 'actions');
      //$form['actions']['submit'] = array(
        '#type' => 'submit',
        '#value' => 'Submit',
        //'#submit' => array('gv_misc_sendCapturedQuotesToProviders_form_submit'),
        //'#base' => 'gv_misc_sendCapturedQuotesToProviders_form',
        '#disabled' => $class_submitted == 'all-submitted' ? TRUE : FALSE,
      ); 
  
 
  return $form;
}


/**
 * Implements hook_form_validate().
 *
 * @return $form
 *   Return nothing.
 */
function gv_misc_sendCapturedQuotesToProviders_form_validate(&$form, &$form_state) {
  
  //drupal_set_message('In Validate!', 'warning');
  //dpm($form_state['values']);
  //dpm($form);
    
  //global $user;
  
  
//  if (!$form_state['values']['message']) {
//    form_set_error('message', 'You have to enter a Message, if don\'t want to just subscribe to newsletters');
//  }
}


/**
 * Implements hook_form_submit().
 *
 * @return $form
 *   Return nothing.
 */
function gv_misc_sendCapturedQuotesToProviders_form_submit(&$form, &$form_state) {
 
  //dpm($form_state['values']);
  
  $remoteProvidersSubmissionsSettings = unserialize(REMOTE_PROVIDERS_SUBMISSIONS_SETTINGS);
  $quote_request_data = unserialize($form_state['values']['quote_request_data']);
  
  //dpm($quote_request_data);
  //dpm($form_state['values']['providers']);
  
  unset($quote_request_data['submission']['sentToRemoteProviders']);
  //dpm($quote_request_data['submission']);
  
  $providers_just_sent = NULL;
  
  $quote_request_data['submission']['sent_via'] = isset($quote_request_data['submission']['sent_via']) ? $quote_request_data['submission']['sent_via'] : '';
  foreach ($remoteProvidersSubmissionsSettings as $provider => $provider_data) {
    if (empty($quote_request_data['sentToRemoteProviders'][$provider]) && !empty($form_state['values']['providers'][$provider])) {
      $quote_request_data['submission']['sent_via'] .= $provider . ': Admin panel; ';
      $provider_data['function']($quote_request_data['submission'], 'mustBeSent');
      //dpm($provider_function);
      $providers_just_sent .= ($providers_just_sent ? ', ' : '') . $provider;
    }
  }
  
  if ($providers_just_sent) {
      $quote_request_data['submission']['sentToRemoteProviders'] = $form_state['values']['providers'];
      
      // Update the submissions data history.
      $result = db_update('gv_quote_requests')
        ->fields(array(
          'data' => serialize($quote_request_data['submission']),
          'status' => 2, // Submitted and sent.
          'checked' => 1, // Reviewed, because is sent.
        ))
        ->condition('timestamp', $quote_request_data['timestamp'])
        ->condition('ip', $quote_request_data['ip'])
        ->execute();
      
      drupal_set_message('The submission from ip ' . $quote_request_data['ip'] . ' (submitted at ' . date('Y-m-d, H:i:s', $quote_request_data['timestamp']) . ') has been just now sent to ' . $providers_just_sent, 'status');
  }
  else {
    drupal_set_message('The submission from  ' . $quote_request_data['ip'] . ' (submitted at ' . date('Y-m-d, H:i:s', $quote_request_data['timestamp']) . ') has not been sent to anywhere.', 'warning');
  }
  
  // Redirect back to the current page.
  $get = $_GET;
  unset($get['q']);
  //$get['filter'] = $form_state['values']['filter'];
  drupal_goto($_GET['q'], array('query' => $get));
}


/**
 * Check if  a node exists.
 *
 */
function gv_misc_nodeExists($nid) {
  if (!$nid) {
    return FALSE;
  }
  
  $query = db_select('node', 'n')
    ->fields('n', array('nid'));
  $query->condition('n.nid', $nid);

  if (!$nid = $query->execute()->fetchField()) {
    return FALSE;
  }
  
  return TRUE;
}




// ------------------------------------------------------------------------------
// Define an alternative filter, based oon the drupal's original one.
// Make links only from web-addresses, not from emails.

/**
 * Implementation of hook_filter_info()
 */
function gv_misc_filter_info () {
  $filters['gv_misc_filter_url'] = array(
    'title' => t('Convert URLs into links, ONLY web addresses, no email links'),
    'process callback' => 'gv_misc_filter_url_onlywebaddresses',
    'settings callback' => 'gv_misc_filter_urlfilter_url_onlywebaddresses_settings',
    'default settings' => array(
      'filter_url_length' => 72,
    ),
    'tips callback' => 'gv_misc_filter_url_onlywebaddresses_tips',
  );
  return $filters;
}


/**
 * Settings callback for URL filter.
 */
function gv_misc_filter_url_onlywebaddresses_settings($form, &$form_state, $filter, $format, $defaults) {
  $filter->settings += $defaults;

  $settings['filter_url_length'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum link text length'),
    '#default_value' => $filter->settings['filter_url_length'],
    '#size' => 5,
    '#maxlength' => 4,
    '#field_suffix' => t('characters'),
    '#description' => t('URLs longer than this number of characters will be truncated to prevent long strings that break formatting. The link itself will be retained; just the text portion of the link will be truncated.'),
  );
  return $settings;
}

/**
 * URL filter. Automatically converts text into hyperlinks.
 *
 * This filter identifies and makes clickable three types of "links".
 * - URLs like http://example.com.
 * - E-mail addresses like name@example.com.
 * - Web addresses without the "http://" protocol defined, like www.example.com.
 * Each type must be processed separately, as there is no one regular
 * expression that could possibly match all of the cases in one pass.
 */
function gv_misc_filter_url_onlywebaddresses($text, $filter) {
  // Tags to skip and not recurse into.
  $ignore_tags = 'a|script|style|code|pre';

  // Pass length to regexp callback.
  gv_misc_filter_url_onlywebaddresses_trim(NULL, $filter->settings['filter_url_length']);

  // Create an array which contains the regexps for each type of link.
  // The key to the regexp is the name of a function that is used as
  // callback function to process matches of the regexp. The callback function
  // is to return the replacement for the match. The array is used and
  // matching/replacement done below inside some loops.
  $tasks = array();

  // Prepare protocols pattern for absolute URLs.
  // check_url() will replace any bad protocols with HTTP, so we need to support
  // the identical list. While '//' is technically optional for MAILTO only,
  // we cannot cleanly differ between protocols here without hard-coding MAILTO,
  // so '//' is optional for all protocols.
  // @see filter_xss_bad_protocol()
  $protocols = variable_get('filter_allowed_protocols', array('http', 'https', 'ftp', 'news', 'nntp', 'telnet', 'mailto', 'irc', 'ssh', 'sftp', 'webcal', 'rtsp'));
  $protocols = implode(':(?://)?|', $protocols) . ':(?://)?';

  // Prepare domain name pattern.
  // The ICANN seems to be on track towards accepting more diverse top level
  // domains, so this pattern has been "future-proofed" to allow for TLDs
  // of length 2-64.
  $domain = '(?:[A-Za-z0-9._+-]+\.)?[A-Za-z]{2,64}\b';
  $ip = '(?:[0-9]{1,3}\.){3}[0-9]{1,3}';
  $auth = '[a-zA-Z0-9:%_+*~#?&=.,/;-]+@';
  $trail = '[a-zA-Z0-9:%_+*~#&\[\]=/;?!\.,-]*[a-zA-Z0-9:%_+*~#&\[\]=/;-]';

  // Prepare pattern for optional trailing punctuation.
  // Even these characters could have a valid meaning for the URL, such usage is
  // rare compared to using a URL at the end of or within a sentence, so these
  // trailing characters are optionally excluded.
  $punctuation = '[\.,?!]*?';

  // Match absolute URLs.
  $url_pattern = "(?:$auth)?(?:$domain|$ip)/?(?:$trail)?";
  $pattern = "`((?:$protocols)(?:$url_pattern))($punctuation)`";
  $tasks['gv_misc_filter_url_onlywebaddresses_parse_full_links'] = $pattern;

  
  
  // a4s fix, here we wxclude emails handling.
  // 
  // Match e-mail addresses.
  $url_pattern = "[A-Za-z0-9._-]+@(?:$domain)";
  $pattern = "`($url_pattern)`";
  //$tasks['gv_misc_filter_url_onlywebaddresses_parse_email_links'] = $pattern;

  // Match www domains.
  $url_pattern = "www\.(?:$domain)/?(?:$trail)?";
  $pattern = "`($url_pattern)($punctuation)`";
  $tasks['gv_misc_filter_url_onlywebaddresses_parse_partial_links'] = $pattern;

  // Each type of URL needs to be processed separately. The text is joined and
  // re-split after each task, since all injected HTML tags must be correctly
  // protected before the next task.
  foreach ($tasks as $task => $pattern) {
    // HTML comments need to be handled separately, as they may contain HTML
    // markup, especially a '>'. Therefore, remove all comment contents and add
    // them back later.
    gv_misc_filter_url_onlywebaddresses_escape_comments('', TRUE);
    $text = preg_replace_callback('`<!--(.*?)-->`s', 'gv_misc_filter_url_onlywebaddresses_escape_comments', $text);

    // Split at all tags; ensures that no tags or attributes are processed.
    $chunks = preg_split('/(<.+?>)/is', $text, -1, PREG_SPLIT_DELIM_CAPTURE);
    // PHP ensures that the array consists of alternating delimiters and
    // literals, and begins and ends with a literal (inserting NULL as
    // required). Therefore, the first chunk is always text:
    $chunk_type = 'text';
    // If a tag of $ignore_tags is found, it is stored in $open_tag and only
    // removed when the closing tag is found. Until the closing tag is found,
    // no replacements are made.
    $open_tag = '';

    for ($i = 0; $i < count($chunks); $i++) {
      if ($chunk_type == 'text') {
        // Only process this text if there are no unclosed $ignore_tags.
        if ($open_tag == '') {
          // If there is a match, inject a link into this chunk via the callback
          // function contained in $task.
          $chunks[$i] = preg_replace_callback($pattern, $task, $chunks[$i]);
        }
        // Text chunk is done, so next chunk must be a tag.
        $chunk_type = 'tag';
      }
      else {
        // Only process this tag if there are no unclosed $ignore_tags.
        if ($open_tag == '') {
          // Check whether this tag is contained in $ignore_tags.
          if (preg_match("`<($ignore_tags)(?:\s|>)`i", $chunks[$i], $matches)) {
            $open_tag = $matches[1];
          }
        }
        // Otherwise, check whether this is the closing tag for $open_tag.
        else {
          if (preg_match("`<\/$open_tag>`i", $chunks[$i], $matches)) {
            $open_tag = '';
          }
        }
        // Tag chunk is done, so next chunk must be text.
        $chunk_type = 'text';
      }
    }

    $text = implode($chunks);
    // Revert back to the original comment contents
    gv_misc_filter_url_onlywebaddresses_escape_comments('', FALSE);
    $text = preg_replace_callback('`<!--(.*?)-->`', 'gv_misc_filter_url_onlywebaddresses_escape_comments', $text);
  }

  return $text;
}

/**
 * preg_replace callback to make links out of absolute URLs.
 */
function gv_misc_filter_url_onlywebaddresses_parse_full_links($match) {
  // The $i:th parenthesis in the regexp contains the URL.
  $i = 1;

  $match[$i] = decode_entities($match[$i]);
  $caption = check_plain(gv_misc_filter_url_onlywebaddresses_trim($match[$i]));
  $match[$i] = check_plain($match[$i]);
  return '<a href="' . $match[$i] . '">' . $caption . '</a>' . $match[$i + 1];
}

/**
 * preg_replace callback to make links out of e-mail addresses.
 * 
 * Excluded here to leave emails intact!
 */
function gv_misc_filter_url_onlywebaddresses_parse_email_links($match) {
  // The $i:th parenthesis in the regexp contains the URL.
  $i = 0;

  $match[$i] = decode_entities($match[$i]);
  $caption = check_plain(gv_misc_filter_url_onlywebaddresses_trim($match[$i]));
  $match[$i] = check_plain($match[$i]);
  return '<a href="mailto:' . $match[$i] . '">' . $caption . '</a>';
}

/**
 * preg_replace callback to make links out of domain names starting with "www."
 */
function gv_misc_filter_url_onlywebaddresses_parse_partial_links($match) {
  // The $i:th parenthesis in the regexp contains the URL.
  $i = 1;

  $match[$i] = decode_entities($match[$i]);
  $caption = check_plain(gv_misc_filter_url_onlywebaddresses_trim($match[$i]));
  $match[$i] = check_plain($match[$i]);
  return '<a href="http://' . $match[$i] . '">' . $caption . '</a>' . $match[$i + 1];
}

/**
 * preg_replace callback to escape contents of HTML comments
 *
 * @param $match
 *   An array containing matches to replace from preg_replace_callback(),
 *   whereas $match[1] is expected to contain the content to be filtered.
 * @param $escape
 *   (optional) Boolean whether to escape (TRUE) or unescape comments (FALSE).
 *   Defaults to neither. If TRUE, statically cached $comments are reset.
 */
function gv_misc_filter_url_onlywebaddresses_escape_comments($match, $escape = NULL) {
  static $mode, $comments = array();

  if (isset($escape)) {
    $mode = $escape;
    if ($escape){
      $comments = array();
    }
    return;
  }

  // Replace all HTML coments with a '<!-- [hash] -->' placeholder.
  if ($mode) {
    $content = $match[1];
    $hash = md5($content);
    $comments[$hash] = $content;
    return "<!-- $hash -->";
  }
  // Or replace placeholders with actual comment contents.
  else {
    $hash = $match[1];
    $hash = trim($hash);
    $content = $comments[$hash];
    return "<!--$content-->";
  }
}

/**
 * Shortens long URLs to http://www.example.com/long/url...
 */
function gv_misc_filter_url_onlywebaddresses_trim($text, $length = NULL) {
  static $_length;
  if ($length !== NULL) {
    $_length = $length;
  }

  // Use +3 for '...' string length.
  if ($_length && strlen($text) > $_length + 3) {
    $text = substr($text, 0, $_length) . '...';
  }

  return $text;
}

/**
 * Filter tips callback for URL filter.
 */
function gv_misc_filter_url_onlywebaddresses_tips($filter, $format, $long = FALSE) {
  return t('Web page addresses (BUT NO e-mail addresses) turn into links automatically.');
}



/**
 * Adding possibility to get total result count from a paged query without qeriing it again without pager.
 * 
 * http://drupal.stackexchange.com/questions/80381/can-we-get-full-count-of-result-from-a-query-that-is-extended-by-pagerdefault
 * 
 * Example of call:
 * 
 * $query = db_select('gv_track_links', 'tl')->extend('GvPager'); // Instead of $query = db_select('gv_track_links', 'tl')->extend('PagerDefault');
 * ...
 * $result = $query->orderBy($sort, $order)->limit(20)->execute();
 * $total_items = $query->getTotalItemCount();
 */
// 
class GvPager extends PagerDefault {

  /**
   * Overrides PagerDefault::execute().
   */
  public function execute() {
    // Add convenience tag to mark that this is an extended query. We have to
    // do this in the constructor to ensure that it is set before preExecute()
    // gets called.
    if (!$this->preExecute($this)) {
      return NULL;
    }

    // A NULL limit is the "kill switch" for pager queries.
    if (empty($this->limit)) {
      return;
    }
    $this->ensureElement();

    // Get the total items from our new statically cached function.
    $total_items = $this->getTotalItemCount();

    $current_page = pager_default_initialize($total_items, $this->limit, $this->element);
    $this->range($current_page * $this->limit, $this->limit);

    // Now that we've added our pager-based range instructions, run the query normally.
    return $this->query->execute();
  }

  /**
   * Cache the result of PagerDefault::getCountQuery().
   */
  public function getTotalItemCount() {
    static $total_items = NULL;

    if ($total_items === NULL) {
      $total_items = $this->getCountQuery()->execute()->fetchField();
    }

    return $total_items;
  }

}


/**
 * Prepare login data for poopup and loginza.
 */
function gv_misc_initLogin() {
  
  global $gv_login_initiated;
  
  if (!$gv_login_initiated) {
    
    $gv_login_initiated = TRUE;
    
    // ajax_login module functionality for popup ajax login.
    _ajax_register_include_modal();
    
    
    // V1, no need to launch drupal_add_library('system', 'drupal.ajax');
    //$out = ctools_modal_text_button(t('Login'), 'ajax_register/login/nojs', t('Login'), 'ctools-modal-ctools-ajax-register-style');
    // V2, need to launch drupal_add_library('system', 'drupal.ajax') in zp_user_initLogin(), but possible to set more params in l()...
    //$out = l(t('Login'), 'ajax_register/login/nojs', array('html' => TRUE, 'attributes' => array('class' => array('ctools-use-modal', 'ctools-modal-ctools-ajax-register-style'), 'title' => t('Login'))));
    
    // So, comment if plan to use without ctools_modal_text_button()
    drupal_add_library('system', 'drupal.ajax');
    
    
  }
}


/**
 * Alter the user info for the user being created by HybridAuth.
 * @param array $userinfo
 *   Information to create a new user.
 * @param array $data
 *   HybridAuth identity data.
 */
function gv_misc_hybridauth_userinfo_alter(&$userinfo, $data) {
  
  //dpm($userinfo);
  //dpm($data);
  
  
  //$userinfo['name'] = 'aaa';  
  if ($data['provider'] == 'Twitter') {
    $name = explode(' ', $data['firstName'], 2);
    $userinfo['field_u_fname']['und'][0]['value'] = $name[0];
    $userinfo['field_u_lname']['und'][0]['value'] = $name[1];
  } 
  else {
    $userinfo['field_u_fname']['und'][0]['value'] = $data['firstName'];
    $userinfo['field_u_lname']['und'][0]['value'] = $data['lastName'];
  }
  
  $userinfo['roles'][9] = 'reviewer';
}



/*
 * 
 * Add contextual links to a block contextual menu...
 * 
 * Specificly, add edit link to a home preface bottoms bloxk to allow editing the preface node itself via the block contextual links.
 * 
 * http://bleen.net/blog/easier-way-add-contextual-links-drupal-7
 * 
 * http://drupal.stackexchange.com/questions/33855/how-to-add-contextual-links-to-the-main-content-block
 * 
 * http://dominiquedecooman.com/blog/drupal-7-tip-add-contextual-links-anything
 * 
 * 
 * 
 */
function gv_misc_contextual_links_view_alter(&$element, &$items) {
  // This hook is called for EVERY set of contextual links
  // on a page.  We first want to check the $element to make
  // sure we are adding a link to the correct list of contextual
  // links. In this case we only want to add a link to blocks
  // created by the "search" module. We just add links using the
  // same array structure as is used by theme_links.
//  if (isset($element['#element']['#block']) && $element['#element']['#block']->delta == "site_tweets-site_tweets_block") {
//    $element['#links']['social-networks'] = array(
//      'title' => 'Edit social network links',
//      'href' => url('/admin/config/system/site-information', array('absolute' => TRUE)),
//    );
//  }
  

  if (isset($element['#element']['#block']) && $element['#element']['#block']->delta == 'home_bottom_rotated') {
    //dpm($element);
    $element['#links']['social-networks'] = array(
      'title' => 'Edit home preface and its bottoms',
      //'href' => url('/node/79/edit', array('query' => array('destination' => '/'))),
      //'href' => urlencode('node/79/edit?destination=/'),  
      //'href' => 'node/79/edit?' . urlencode('destination=/'),  
      //'href' => url('node/79/edit'),//, array('query' => array('destination' => 'home'))),
      'href' => 'node/79/edit',
      'query' => array('destination' => 'home'),
    );
  }
  
}


/**
 * Return conferences for autoselect via ajax request.. 
 */
function gv_misc_getConferences_autocomplete_ajax() {
  
  $post = array();
  $out_array = array();
  $cache_name = 'gv_conf_get';
  
  foreach ($_GET as $key => $value) {
    //$post[$key] = $value; // check_plain(strip_tags($value));
    $post[$key] = strip_tags($value); // check_plain(strip_tags($value));
    
    $cache_name .= '-' . $key . ':' . $value;
  }
  
//  $post['term_decoded2'] = utf8_decode($post['term']); //urldecode($post['term']);
//  $post['term_decoded3'] = html_entity_decode($post['term']);
//  //$post['term'] = str_replace('\u0026amp;', '&', $post['term']);
//  $post['term2'] = str_replace('0026', '&', $post['term']);

  if (!empty($post['results_num'])) {
    $results_num = $post['results_num'];
  }
  else {
    $results_num = NULL; //1000; // Default autocomplete results number.
  }
  
  $states = array(
              'AL' => 'Alabama',
              'AK' => 'Alaska',
              'AZ' => 'Arizona',
              'AR' => 'Arkansas',
              'CA' => 'California',
              'CO' => 'Colorado',
              'CT' => 'Connecticut',
              'DE' => 'Delaware',
              'FL' => 'Florida',
              'GA' => 'Georgia',
              'HI' => 'Hawaii',
              'ID' => 'Idaho',
              'IL' => 'Illinois',
              'IN' => 'Indiana',
              'IA' => 'Iowa',
              'KS' => 'Kansas',
              'KY' => 'Kentucky',
              'LA' => 'Louisiana',
              'ME' => 'Maine',
              'MD' => 'Maryland',
              'MA' => 'Massachusetts',
              'MI' => 'Michigan',
              'MN' => 'Minnesota',
              'MS' => 'Mississippi',
              'MO' => 'Missouri',
              'MT' => 'Montana',
              'NE' => 'Nebraska',
              'NV' => 'Nevada',
              'NH' => 'New Hampshire',
              'NJ' => 'New Jersey',
              'NM' => 'New Mexico',
              'NY' => 'New York',
              'NC' => 'North Carolina',
              'ND' => 'North Dakota',
              'OH' => 'Ohio',
              'OK' => 'Oklahoma',
              'OR' => 'Oregon',
              'PA' => 'Pennsylvania',
              'RI' => 'Rhode Island',
              'SC' => 'South Carolina',
              'SD' => 'South Dakota',
              'TN' => 'Tennessee',
              'TX' => 'Texas',
              'UT' => 'Utah',
              'VT' => 'Vermont',
              'VA' => 'Virginia',
              'WA' => 'Washington',
              'WV' => 'West Virginia',
              'WI' => 'Wisconsin',
              'WY' => 'Wyoming',
          );
  
  
  
  
    
  $cache_content = cache_get($cache_name);
  if ($cache_content && !empty($cache_content->data) && $cache_content->expire > time()) {
    $out_array = $cache_content->data;
    //watchdog($cache_name, print_r($out_array, TRUE), NULL, WATCHDOG_WARNING);
  }
  elseif ($post['op'] == 'auto') {
      
        // Db queries doc
        // https://www.drupal.org/node/310086
        // https://api.drupal.org/api/drupal/includes!database!database.inc/function/db_like/7
  
        if ($post['type'] == 'industry') {
          $vid = 8;

          $query = db_select('taxonomy_term_data', 't');
          $query->fields('t', array('tid', 'name'));
          $query->condition('t.vid', $vid);
          $query->condition('t.name', '%' . db_like($post['term']) . '%', 'LIKE');
      //    $query->leftJoin('field_data_field_invisible', 'i', 'i.entity_id = n.nid');
      //    $query->condition('i.field_invisible_value', 1, '!='); 
          $query->orderBy('t.name', 'ASC');
          // 4 pages
          //$query->range(0, 8);
          // 3 pages
          //$query->range(0, 6);

          if ($results_num) {
            $query->range(0, $results_num);
          }


          $result = $query->execute()->fetchAllAssoc('tid');
          foreach ($result as $result) {
            $out_array[] = array(
                'value' => $result->tid,
                'label' => $result->name,
            );
          }

        }
        elseif ($post['type'] == 'title') {
            /*
            $out_array = array(
                 0 => array(
                     'value' => "jquery",
                  'label' => "jQuery",
                  'desc' => "the 222 write less, do more, JavaScript library",

                ),
                1 => array(
                  'value' => "jquery-ui",
                  'label' => "jQuery UI",
                  'desc' => "the official user interface library for jQuery",
                ),
                2 => array (
                  'value' => "sizzlejs",
                  'label' => "Sizzle JS",
                  'desc' => "a... pure-JavaScript CSS selector engine",
                ),
            );
            */

            $query = db_select('node', 'n');
            $query->fields('n', array('nid', 'title'));
            $query->condition('n.status', 1);
            $query->condition('n.type', 'conference', '=');
            $query->condition('n.title', '%' . db_like($post['term']) . '%', 'LIKE');
        //    $query->leftJoin('field_data_field_invisible', 'i', 'i.entity_id = n.nid');
        //    $query->condition('i.field_invisible_value', 1, '!='); 
            $query->orderBy('n.title', 'ASC');
            
            if ($results_num) {
              $query->range(0, $results_num);
            }


            $result = $query->execute()->fetchAllAssoc('nid');
            foreach ($result as $result) {
              $out_array[] = array(
                  'value' => $result->nid,
                  'label' => $result->title,
              );
            }

        }
        elseif ($post['type'] == 'city-state') {
          
          // Combined citites/staes/countries search

          //$vid = 9 || 10; // Cities or states/countries

          $query = db_select('taxonomy_term_data', 't');
          $query->fields('t', array('tid', 'name', 'vid'));
          
          //$query->condition('t.vid', $vid);
          
          $or = db_or()->condition('t.vid', 9) // cities
                       ->condition('t.vid', 10) // states and countries
                       ;
          $query->condition($or);
          
          $query->condition('t.name', '%' . db_like($post['term']) . '%', 'LIKE');
          
          $query->orderBy('t.name', 'ASC');

          if ($results_num) {
            $query->range(0, $results_num);
          }

          $result = $query->execute()->fetchAllAssoc('tid');
          
          $collected_terms_temp = array();
          
          
          $post_term = strtoupper($post['term']);
          if (isset($states[$post_term])) {
            $collected_terms_temp[] = $states[$post_term];
            $out_array[] = array(
                  'value' => NULL,
                  'label' => $states[$post_term],
              );
          }
          
          foreach ($result as $result) {
            if ($result->name == 'New York' && $result->vid == 9) {
              $result->name = 'New York City';
            }
            $in_array = in_array($result->name, $collected_terms_temp);
            //if (!in_array($result->name, $collected_terms_temp)) {
            if (!$in_array) {
              $out_array[] = array(
                  'value' => $result->tid,
                  'label' => $result->name,
              );
              $collected_terms_temp[] = $result->name;
            }
          }
          
          
          
          
          // Splitted search for cities, then for states/countries with marking states and countries
          /*
          
          // Search for citiesfirst.
          
          $vid = 9; // Cities.

          $query = db_select('taxonomy_term_data', 't');
          $query->fields('t', array('tid', 'name'));
          $query->condition('t.vid', $vid);
          $query->condition('t.name', '%' . db_like($post['term']) . '%', 'LIKE');
      //    $query->leftJoin('field_data_field_invisible', 'i', 'i.entity_id = n.nid');
      //    $query->condition('i.field_invisible_value', 1, '!='); 
          $query->orderBy('t.name', 'ASC');
          // 4 pages
          //$query->range(0, 8);
          // 3 pages
          //$query->range(0, 6);

          if ($results_num) {
            $query->range(0, $results_num);
          }


          $result = $query->execute()->fetchAllAssoc('tid');
          
          foreach ($result as $result) {
            $out_array[] = array(
                'value' => $result->tid,
                'label' => $result->name,
            );
          }
          
          
          
          // Now search for states/countries.
          
          $vid = 10; // States and Countries.

          $query = db_select('taxonomy_term_data', 't');
          $query->fields('t', array('tid', 'name'));
          $query->condition('t.vid', $vid);
          $query->condition('t.name', '%' . db_like($post['term']) . '%', 'LIKE');
          $query->leftJoin('field_data_field_abbreviation', 'abbr', "abbr.bundle = 'states_and_countries' AND abbr.entity_id = t.tid");
          //$query->fields('abbr', array('field_abbreviation_value'));
          $query->addField('abbr', 'field_abbreviation_value', 'abbr');
      //    $query->condition('i.field_invisible_value', 1, '!='); 
          
          $query->orderBy('t.name', 'ASC');
          // 4 pages
          //$query->range(0, 8);
          // 3 pages
          //$query->range(0, 6);

          if ($results_num) {
            $query->range(0, $results_num);
          }


          $result = $query->execute()->fetchAllAssoc('tid');
          
          foreach ($result as $result) {
            $out_array[] = array(
                'value' => $result->tid,
                'label' => $result->name  . (!empty($result->abbr) ? ' (US state)' : ' (country)') ,
            );
          }
          
          
//          foreach ($states as $key => $state) {
//            if (strpos(drupal_strtolower($state), drupal_strtolower($post['term'])) !== FALSE) {
//              
//              $out_array[] = array(
//                'value' => $key,
//                'label' => $state . ' (state)',
//              );  
//            }
//          }
          
          */
          
          
        } // End of elseif ($post['type'] == 'city-state') {
        
  } // End of elseif ($post['op'] == 'auto') {
  elseif ($post['op'] == 'get') {
    
        if ($post['type'] == 'title') {
          
          
          
          //return NULL;
          
//              $out_array[] = array(
//                  'value' => 'aaa',
//                  'label' => 'bbb',
//              );
            
            // Search by an exact conference title.
            
            $query = db_select('node', 'n');
            $query->fields('n', array('nid', 'title'));
            $query->condition('n.status', 1);
            $query->condition('n.type', 'conference', '=');
            $query->condition('n.title', $post['term']);
            $query->leftJoin('field_data_body', 'b', 'b.entity_id = n.nid');
            $query->fields('b', array('body_value'));
            
            // State via list (deprecated)
            //$query->leftJoin('field_data_field_state', 'st', 'st.entity_id = n.nid');
            //$query->fields('st', array('field_state_value'));
            
            // State/country via taxonomy
            $query->leftJoin('field_data_field_state_or_country', 'st2', 'st2.entity_id = n.nid');
            $query->fields('st2', array('field_state_or_country_tid'));

            $query->leftJoin('taxonomy_term_data', 'tdt2', 'tdt2.tid = st2.field_state_or_country_tid');
            $query->addField('tdt2', 'name', 'state_or_country');
            
            $query->leftJoin('field_data_field_abbreviation', 'abbr', 'abbr.entity_id = st2.field_state_or_country_tid');
            $query->addField('abbr', 'field_abbreviation_value', 'abbr');
            
            // City via text field
            //$query->leftJoin('field_data_field_conf_city', 'ci', 'ci.entity_id = n.nid');
            //$query->fields('ci', array('field_conf_city_value'));
            
            // City via taxonomy
            $query->leftJoin('field_data_field_city', 'ci2', 'ci2.entity_id = n.nid');
            $query->fields('ci2', array('field_city_tid'));

            $query->leftJoin('taxonomy_term_data', 'tdt', 'tdt.tid = ci2.field_city_tid');
            $query->addField('tdt', 'name', 'city');

            
            $query->leftJoin('field_data_field_conf_price', 'pr', 'pr.entity_id = n.nid');
            $query->fields('pr', array('field_conf_price_value'));
            $query->leftJoin('field_data_field_conf_date', 'da', 'da.entity_id = n.nid');
            $query->fields('da', array('field_conf_date_value', 'field_conf_date_value2'));
            
            // Site link
            //$query->leftJoin('field_data_field_conf_link', 'li', 'li.entity_id = n.nid');
            //$query->fields('li', array('field_conf_link_value'));
            $query->leftJoin('field_data_field_conf_site', 'li', 'li.entity_id = n.nid');
            $query->fields('li', array('field_conf_site_url', 'field_conf_site_title'));
            
            
            // Twitter
            // Twitter page
            //$query->leftJoin('field_data_field_conf_twitter', 'tw', 'tw.entity_id = n.nid');
            $query->leftJoin('field_data_field_conf_twitter', 'tw', 'tw.entity_id = n.nid');
            $query->fields('tw', array('field_conf_twitter_url', 'field_conf_twitter_title'));
            
            // Twitter hashtag
            $query->leftJoin('field_data_field_conf_twitter_hashtag', 'th', 'th.entity_id = n.nid');
            //$query->fields('th', array('field_conf_twitter_hashtag_value'));
            $query->fields('th', array('field_conf_twitter_hashtag_url', 'field_conf_twitter_hashtag_title'));
            
            // TBD fields
            // Doesn't work...
            //$query->addExpression("GROUP_CONCAT( (SELECT field_tbd_fields_value FROM field_data_field_tbd_fields AS tbd WHERE tbd.entity_id = n.nid) SEPARATOR ',')", 'tbd_fields');
            // Doesn't work...
            //$query->leftJoin('field_data_field_tbd_fields', 'tbd1', 'tbd1.entity_id = n.nid');
            //$query->addExpression("GROUP_CONCAT( (SELECT field_tbd_fields_value FROM field_data_field_tbd_fields AS tbd2 WHERE tbd2.entity_id = tbd1.entity_id) SEPARATOR ',')", 'tbd_fields');
            
            // Working example... strange, it works, and above - not...
            //$query->leftJoin('taxonomy_index', 'ti', 'ti.nid = n.nid');
            //$query->addExpression("GROUP_CONCAT( (SELECT name FROM taxonomy_term_data AS td WHERE td.tid = ti.tid AND vid = 8) SEPARATOR ',')", 'terms');
              
            $query->leftJoin('field_data_field_tbd_fields_str', 'tbd', 'tbd.entity_id = n.nid');
            $query->fields('tbd', array('field_tbd_fields_str_value'));  
            
            
            if($result = $query->execute()->fetchObject()) {
              
              // Found by an exact conference title.

//              global $user;
//              if ($user->uid == 1) {
//                $result->field_conf_twitter_value = '@Conference';
//                $result->field_conf_twitter_hashtag_value = '#Hashtag';
//                $result->field_conf_city_value = 'New York';
//                $result->field_state_value = 'NY';
//                $result->body_value = 'This is Photoshop\'s version  of Lorem Ipsum. Proin gravida nibh vel velit auctor aliquet. Aenean sollicitudin, lorem quis bibendum auctor, nisi elit consequat ipsum, nec sagittis sem nibh id elit. Duis sed odio sit amet nibh vulputate cursus a sit amet mauris. Morbi accumsan ipsum velit. Nam nec tellus a odio tincidunt auctor a ornare odio. Sed non  mauris vitae erat consequat auctor eu in elit. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Mauris in erat justo. Nullam ac urna eu felis dapibus condimentum sit amet a augue. Sed non neque elit. Sed ut imperdiet nisi. Proin condimentum fermentum nunc. Etiam pharetra, erat sed fermentum feugiat, velit mauris egestas quam, ut aliquam massa nisl quis neque. Suspendisse in orci enim.';
//                $result->field_conf_price_value = '99.99';
//              }
              
              // Get TBD fields info
              $tbd_fields = gv_misc_parseTBDfieldsFromStr($result);
              
              if (isset($tbd_fields['Upcoming Date'])) {
                $dates = 'Upcoming Date: ' . $tbd_fields['Upcoming Date'];
              }
              else {
                $dates = gv_misc_dateRangeFormatter($result->field_conf_date_value, $result->field_conf_date_value2);
                //$dates = $result->field_conf_date_value . ' - ' . $result->field_conf_date_value2;
              }
              
              
              $url = NULL;
              $more_details_button = NULL;
              if (isset($tbd_fields['Site'])) {
                $url = $tbd_fields['Site'];
              }
              elseif ($result->field_conf_site_url) {
                if ($result->field_conf_site_title) {
                  $url_title = $result->field_conf_site_title;
                }
                elseif(strpos($result->field_conf_site_url, '//')) {
                  $url_title = explode('//', $result->field_conf_site_url);
                  $url_title = $url_title[1];
                }
                else {
                  $url_title = $result->field_conf_site_url;
                }
                
                $url_title = rtrim($url_title, '/');
                $url_value = strpos($result->field_conf_site_url, '//') ? $result->field_conf_site_url : 'http://' . $result->field_conf_site_url;
                
                $url = l($url_title, $url_value, array('external' => TRUE, 'absolute' => TRUE, 'attributes' => array('target' => '_blank', 'rel' => 'nofollow')));
                $more_details_button = l('More Details', $url_value, array('external' => TRUE, 'absolute' => TRUE, 'attributes' => array('target' => '_blank', 'rel' => 'nofollow')));
              }
             
    
              
              if (isset($tbd_fields['Twitter Page'])) {
                $twitter = $tbd_fields['Twitter Page'];
              }
              elseif ($result->field_conf_twitter_title) {
                $twitter = (strpos($result->field_conf_twitter_title, '@') !== FALSE ? '' : '@') . $result->field_conf_twitter_title;
                if ($result->field_conf_twitter_url) {
                  $twitter = l($twitter, $result->field_conf_twitter_url, array('external' => TRUE, 'absolute' => TRUE, 'attributes' => array('target' => '_blank', 'rel' => 'nofollow')));
                }
              }
              else {
                $twitter = NULL;
              }
              
              if (isset($tbd_fields['Hashtag'])) {
                $hash = $tbd_fields['Hashtag'];
              }
              elseif ($result->field_conf_twitter_hashtag_title) {
                $hash = (strpos($result->field_conf_twitter_hashtag_title, '#') !== FALSE ? '' : '#') . $result->field_conf_twitter_hashtag_title;
                if ($result->field_conf_twitter_hashtag_url) {
                  $hash = l($hash, $result->field_conf_twitter_hashtag_url, array('external' => TRUE, 'absolute' => TRUE, 'attributes' => array('target' => '_blank', 'rel' => 'nofollow')));
                }
              }
              else {
                $hash = NULL;
              }
              
              if ($twitter || $hash) {
                $twitter = '<span class="nick">' . $twitter . '</span>'. ($twitter && $hash ? '<span> - </span>' : '') . '<span class="hash">' . $hash . '</span>';
              }
              
              
              
              
              //$location = $result->field_conf_city_value . ( ($result->field_conf_city_value && $result->field_state_value) ? ', ' : '' ) . $result->field_state_value;
              //$state_or_country = $result->field_state_value;
              
              if (isset($tbd_fields['Upcoming Location'])) {
                $location = $tbd_fields['Upcoming Location'];
              }
              else {
                if (isset($tbd_fields['City'])) {
                  $result->city = $tbd_fields['City'];
                }
                if (isset($tbd_fields['State or Country'])) {
                  $state_or_country = $tbd_fields['State or Country'];
                }
                else {
                  $state_or_country = $result->abbr ? $result->abbr : $result->state_or_country;
                }

                $location = $result->city . ( ($result->city && $state_or_country) ? ', ' : '' ) . $state_or_country;
              }
              // style="width: 480px; height: 90px; background: red; margin: auto;"
              // style="left: inherit !important; top: inherit !important; white-space: inherit !important; width: 470px !important; margin: auto !important;"
              $out_html = '
                    <div class="top">
                      <table><tbody>
                      <tr><td class="first" style="padding: 10px 0 5px;"><div class="title"  style="width: 480px; margin: auto; "><span class="textfill" style="/*width: 470px;*//*line-height: 1;*/">' . $result->title . '</span></div></td></tr>
                      <tr><td><div class="date">' . $dates . '</div></td></tr>'
                      . ($twitter ? '<tr><td><span class="twitter">' . $twitter . '</span></td></tr>' : '')
                    . '</tbody></table></div>
                    <div class="middle">
                      <table><tbody><tr>'
                      . ($url ? '<td><span class="url">' . $url . '</span></td>' : '')
                      . ( ($result->field_conf_price_value && $result->field_conf_price_value != '0' && $result->field_conf_price_value != '0.00') ? '<td class="price"><span>' . (strpos($result->field_conf_price_value, '$') !== FALSE ? '' : '$') . $result->field_conf_price_value . '</span></td>' : '')
                      . ($location ? '<td class="place"><span>' . $location .  '</span></td>' : '')
                      . '</tr></tbody></table>
                    </div>
                    <div class="main">
                      <div class="descr">' . $result->body_value . '</div>
                      <div class="more">' . $more_details_button . '</div>
                    </div>
                      ';
              
              $out_array = array(
                  'type' => 'conference',
                  'out' => $out_html,
              );
              
              
            }
            else {
              // Search for all conferences (a list) containing a term in titles.

              // Doc on group_concast
              /*
                http://drupal.stackexchange.com/questions/39672/drupal-dynamic-query-with-group-concat

                http://www.percona.com/blog/2013/10/22/the-power-of-mysqls-group_concat/

                http://www.zimplicit.se/en/knowledge/mysql-group-concat-join-select

                http://stackoverflow.com/questions/276927/can-i-concatenate-multiple-mysql-rows-into-one-field




                http://drupal.stackexchange.com/questions/19032/d7-bug-with-db-select-addexpression-and-having-conditions
                http://drupal.stackexchange.com/questions/100229/what-is-the-difference-between-havingcondition-and-having
                http://drupal.stackexchange.com/questions/33609/how-to-write-a-drupal-7-query-with-count-and-having-properties

                http://bugs.mysql.com/bug.php?id=3543

                http://stackoverflow.com/questions/19311679/sql-group-concat-and-subquery

                http://www.dbforums.com/showthread.php?1655801-Subquerry-inside-GROUP_CONCAT

                http://forums.devshed.com/mysql-help-4/howto-count-items-group_concat-812213.html
              */  
               

              $query = db_select('node', 'n');
              $query->fields('n', array('nid', 'title'));
              $query->condition('n.status', 1);
              $query->condition('n.type', 'conference', '=');
              $query->condition('n.title', '%' . db_like($post['term']) . '%', 'LIKE');
              
              // State via list (deprecated)
              //$query->leftJoin('field_data_field_state', 'st', 'st.entity_id = n.nid');
              //$query->fields('st', array('field_state_value'));

              // State/country via taxonomy
              $query->leftJoin('field_data_field_state_or_country', 'st2', 'st2.entity_id = n.nid');
              $query->fields('st2', array('field_state_or_country_tid'));

              $query->leftJoin('taxonomy_term_data', 'tdt2', 'tdt2.tid = st2.field_state_or_country_tid');
              $query->addField('tdt2', 'name', 'state_or_country');

              $query->leftJoin('field_data_field_abbreviation', 'abbr', 'abbr.entity_id = st2.field_state_or_country_tid');
              $query->addField('abbr', 'field_abbreviation_value', 'abbr');

              // City via text field
              //$query->leftJoin('field_data_field_conf_city', 'ci', 'ci.entity_id = n.nid');
              //$query->fields('ci', array('field_conf_city_value'));

              // City via taxonomy
              $query->leftJoin('field_data_field_city', 'ci2', 'ci2.entity_id = n.nid');
              $query->fields('ci2', array('field_city_tid'));

              $query->leftJoin('taxonomy_term_data', 'tdt', 'tdt.tid = ci2.field_city_tid');
              $query->addField('tdt', 'name', 'city');

              
              
              
              $query->leftJoin('field_data_field_conf_date', 'da', 'da.entity_id = n.nid');
              $query->fields('da', array('field_conf_date_value', 'field_conf_date_value2'));

              
              
              
              // TBD fields
              // Doesn't work...
              //$query->addExpression("GROUP_CONCAT( (SELECT field_tbd_fields_value FROM field_data_field_tbd_fields AS tbd WHERE tbd.entity_id = n.nid) SEPARATOR ',')", 'tbd_fields');
              // Doesn't work...
              //$query->leftJoin('field_data_field_tbd_fields', 'tbd1', 'tbd1.entity_id = n.nid');
              //$query->addExpression("GROUP_CONCAT( (SELECT field_tbd_fields_value FROM field_data_field_tbd_fields AS tbd2 WHERE tbd2.entity_id = tbd1.entity_id) SEPARATOR ',')", 'tbd_fields');

              // Working example... strange, it works, and above - not...
              //$query->leftJoin('taxonomy_index', 'ti', 'ti.nid = n.nid');
              //$query->addExpression("GROUP_CONCAT( (SELECT name FROM taxonomy_term_data AS td WHERE td.tid = ti.tid AND vid = 8) SEPARATOR ',')", 'terms');

              $query->leftJoin('field_data_field_tbd_fields_str', 'tbd', 'tbd.entity_id = n.nid');
              $query->fields('tbd', array('field_tbd_fields_str_value'));  
            
            
              $query->leftJoin('taxonomy_index', 'ti', 'ti.nid = n.nid');

              $query->groupBy('n.nid');
              // V0
              // Works!
              //$query->addExpression("GROUP_CONCAT(ti.tid SEPARATOR ',')", 'terms');
              // Works!
              //$query->addExpression("GROUP_CONCAT(CONCAT( 'tid:', ti.tid, 'x' ) SEPARATOR ', ')", 'terms');
              // V1
              // Works!
              $query->addExpression("GROUP_CONCAT( (SELECT name FROM taxonomy_term_data AS td WHERE td.tid = ti.tid AND vid = 8) SEPARATOR ',')", 'terms');
              // V2
              // Works excellently!
              //$query->addExpression("GROUP_CONCAT( CONCAT( (SELECT name FROM taxonomy_term_data AS td WHERE td.tid = ti.tid), ':', ti.tid) SEPARATOR ';')", 'terms');

              $query->orderBy('n.title', 'ASC');
              
              if ($results_num) {
                $query->range(0, $results_num);
              }

              if ($results = $query->execute()->fetchAllAssoc('nid')) {
              
                  $conferences_list = '<table id="side-table"><thead><th class="name"><div class="icon"></div>NAME</th><th class="industry"><div class="icon"></div>INDUSTRY</th><th class="dates"><div class="icon"></div>DATES</th><th class="location"><div class="icon"></div>LOCATION</th></thead><tbody>';
                  
                  foreach ($results as $result) {
//                    $conferences_list[] = array(
//                        'value' => $result->nid,
//                        'label' => $result->title,
//                    );
                    
                    
                      // Get TBD fields info
                      $tbd_fields = gv_misc_parseTBDfieldsFromStr($result);

                      
                      
                      $term_links = NULL;
                      // V2
                      // Works
//                      $terms = explode(';', $result->terms);
//                      foreach ($terms as $term) {
//                        $term_data = explode(':', $term);
//                        $term_links .= ($term_links ? ', ' : '') . l($term_data[0], 'taxonomy/term/' . $term_data[1]);
//                      }
                      // V1
                      $terms = explode(',', $result->terms);
                      foreach ($terms as $term) {
                        $term_links .= ($term_links ? ', ' : '') . '<span class="term-link">' . $term . '</span>';
                      }

                      if (isset($tbd_fields['Upcoming Date'])) {
                        $dates = $tbd_fields['Upcoming Date'];
                      }
                      else {
                        $dates = gv_misc_dateRangeFormatter($result->field_conf_date_value, $result->field_conf_date_value2);
                      }
                      
                      
                      //$state_or_country = $result->abbr ? $result->abbr : $result->state_or_country;
                      //$location = $result->city . ( ($result->city && $state_or_country) ? ', ' : '' ) . $state_or_country;
                      
                      if (isset($tbd_fields['Upcoming Location'])) {
                        $location = $tbd_fields['Upcoming Location'];
                      }
                      else {
                        if (isset($tbd_fields['City'])) {
                          $result->city = $tbd_fields['City'];
                        }
                        if (isset($tbd_fields['State or Country'])) {
                          $state_or_country = $tbd_fields['State or Country'];
                        }
                        else {
                          $state_or_country = $result->abbr ? $result->abbr : $result->state_or_country;
                        }

                        $location = $result->city . ( ($result->city && $state_or_country) ? ', ' : '' ) . $state_or_country;
                      }
                      
                      $conferences_list .= '<tr><td><span class="conf-title" id="' . $result->nid . '">' . $result->title . '</span></td><td>' . $term_links . '</td><td>' . $dates . '</td><td>' . $location . '</td></tr>';
                  }
                  
                  $conferences_list .= '</tbody></table>'
                          // Dummy table for vertical columns lines all over the result section under the main result table.
                          . '<table id="side-table-bottom"><tbody><tr><td></td><td></td><td></td><td></td></tr></tbody></table>';
                  
                  $out_array = array(
                      'type' => 'list',
                      'out' => $conferences_list,
                  );
              } // End of if ($result = $query->execute()->fetchAllAssoc('nid')) {
              
            }
            
            
        } // End of if ($post['type'] == 'title') {
        elseif ($post['type'] == 'industry' || $post['type'] == 'city-state') {
          
              $post_term = strtoupper($post['term']);
              
              if ($post['type'] == 'industry') {
                $vid = 8;
                $target = 'industry';
              }
              else {
                
                // Splitted search by  city or state/country
                /*
                if (strpos($post['term'], ')') == FALSE) {
                  $vid = 9;
                  $target = 'city';
                }
                else {
                  
                  $post['term'] = explode(' (', $post['term']);
                  //$target = 'state';
                  $target = 'state_or_country';
                  //$target = srtolower(trim($post['term'][1], ')')); // 'state' or 'country'
                  $vid = 10; // states_and_countries
                  //$post['term'] = array_search(strtolower($post['term'][0]),array_map('strtolower', $states));  //array_search($post['term'][0], $states);
                  $post['term'] = $post['term'][0];
                }
                */
                
                // Combined search by city/state/country
                
                $target = 'city_state_country';
                //$vid = 9 || 10;
                $vid = NULL;
                if ($post_term == 'NEW YORK CITY') {
                  $vid = 9;
                  $post_term = $post['term'] = 'NEW YORK';
                }
                elseif (strpos($post['term'], ')') != FALSE) {
                  $post['term'] = explode(' (', $post['term']);
                  $post['term'] = $post['term'][0];
                }
                
              }
          
              if ($target == 'industry' || $target == 'city' || $target == 'state_or_country' || $target == 'city_state_country') {
                
                  // Search for all conferences (a list) with a tag $post['term'].
                  $query = db_select('taxonomy_term_data', 'td');
                  
                  
                  //$post_term = strtoupper($post['term']);
                  if (isset($states[$post_term])) {
                    $or2 = db_or()->condition('td.name', $post['term'], '=')
                                  ->condition('td.name', $states[$post_term], '=')
                                 ;
                    $query->condition($or2);
                  }
                  else {
                    $query->condition('td.name', $post['term'], '=');
                  }
                  
                  //if ($target == 'city_state_country') {
                  if (!$vid) {
                    $or = db_or()->condition('td.vid', 9) // cities
                                 ->condition('td.vid', 10) // states and countries
                                 ;
                    $query->condition($or);
                  }
                  else {
                    $query->condition('td.vid', $vid);
                  }
                  
                  
                  $query->leftJoin('taxonomy_index', 't', 't.tid = td.tid');

                  $query->leftJoin('node', 'n', 'n.nid = t.nid');
                  $query->fields('n', array('nid', 'title'));
                  $query->condition('n.status', 1);
                  $query->condition('n.type', 'conference', '=');
                  //$query->condition('n.title', '%' . db_like($post['term']) . '%', 'LIKE');
                  
                  // State via list (deprecated)
                  //$query->leftJoin('field_data_field_state', 'st', 'st.entity_id = n.nid');
                  //$query->fields('st', array('field_state_value'));

                  // State/country via taxonomy
                  $query->leftJoin('field_data_field_state_or_country', 'st2', 'st2.entity_id = n.nid');
                  $query->fields('st2', array('field_state_or_country_tid'));

                  $query->leftJoin('taxonomy_term_data', 'tdt2', 'tdt2.tid = st2.field_state_or_country_tid');
                  $query->addField('tdt2', 'name', 'state_or_country');

                  $query->leftJoin('field_data_field_abbreviation', 'abbr', 'abbr.entity_id = st2.field_state_or_country_tid');
                  $query->addField('abbr', 'field_abbreviation_value', 'abbr');
              
              
                  // City via text field
    //              $query->leftJoin('field_data_field_conf_city', 'ci', 'ci.entity_id = n.nid');
    //              $query->fields('ci', array('field_conf_city_value'));
    //              
                  // City via taxonomy
                  $query->leftJoin('field_data_field_city', 'ci2', 'ci2.entity_id = n.nid');
                  $query->fields('ci2', array('field_city_tid'));

                  $query->leftJoin('taxonomy_term_data', 'tdt', 'tdt.tid = ci2.field_city_tid');
                  $query->addField('tdt', 'name', 'city');


                  $query->leftJoin('field_data_field_conf_date', 'da', 'da.entity_id = n.nid');
                  $query->fields('da', array('field_conf_date_value', 'field_conf_date_value2'));

                  
                  // TBD fields
                  // Doesn't work...
                  //$query->addExpression("GROUP_CONCAT( (SELECT field_tbd_fields_value FROM field_data_field_tbd_fields AS tbd WHERE tbd.entity_id = n.nid) SEPARATOR ',')", 'tbd_fields');
                  // Doesn't work...
                  //$query->leftJoin('field_data_field_tbd_fields', 'tbd1', 'tbd1.entity_id = n.nid');
                  //$query->addExpression("GROUP_CONCAT( (SELECT field_tbd_fields_value FROM field_data_field_tbd_fields AS tbd2 WHERE tbd2.entity_id = tbd1.entity_id) SEPARATOR ',')", 'tbd_fields');

                  // Working example... strange, it works, and above - not...
                  //$query->leftJoin('taxonomy_index', 'ti', 'ti.nid = n.nid');
                  //$query->addExpression("GROUP_CONCAT( (SELECT name FROM taxonomy_term_data AS td WHERE td.tid = ti.tid AND vid = 8) SEPARATOR ',')", 'terms');

                  $query->leftJoin('field_data_field_tbd_fields_str', 'tbd', 'tbd.entity_id = n.nid');
                  $query->fields('tbd', array('field_tbd_fields_str_value'));  
                  
                  
                  $query->leftJoin('taxonomy_index', 'ti', 'ti.nid = n.nid');


                  $query->groupBy('n.nid');
                  // V0
                  // Works!
                  //$query->addExpression("GROUP_CONCAT(ti.tid SEPARATOR ',')", 'terms');
                  // Works!
                  //$query->addExpression("GROUP_CONCAT(CONCAT( 'tid:', ti.tid, 'x' ) SEPARATOR ', ')", 'terms');
                  // V1
                  // Works!
                  $query->addExpression("GROUP_CONCAT( (SELECT name FROM taxonomy_term_data AS td WHERE td.tid = ti.tid AND vid = 8) SEPARATOR ',')", 'terms');
                  // V2
                  // Works excellently!
                  //$query->addExpression("GROUP_CONCAT( CONCAT( (SELECT name FROM taxonomy_term_data AS td WHERE td.tid = ti.tid), ':', ti.tid) SEPARATOR ';')", 'terms');

                  $query->orderBy('n.title', 'ASC');

                  if ($results_num) {
                    $query->range(0, $results_num);
                  }

              } // End of City or Industry
              /*
              else {
                // State or country

                // Search for all conferences (a list) with a tag $post['term'].
//                  $query = db_select('taxonomy_term_data', 'td');
//                  $query->condition('td.name', $post['term'], '=');
//                  $query->condition('td.vid', $vid);
//                  $query->leftJoin('taxonomy_index', 't', 't.tid = td.tid');

                  
                
                
                  //$query = db_select('field_data_field_state', 'st');
                  //$query->condition('st.field_state_value', $post['term'], '=');
                
                  $query = db_select('taxonomy_term_data', 'td1');
                  $query->condition('td1.name', $post['term'], '=');
                  
                  $query->leftJoin('field_data_field_state_or_country', 'st2', 'st2.field_state_or_country_tid = td1.tid');
                  $query->fields('st2', array('field_state_or_country_tid'));
                  
                  //$query->leftJoin('node', 'n', 'n.nid = t.nid');
                  $query->leftJoin('node', 'n', 'n.nid = st2.entity_id');
                  $query->fields('n', array('nid', 'title'));
                  $query->condition('n.status', 1);
                  $query->condition('n.type', 'conference', '=');
                  //$query->condition('n.title', '%' . db_like($post['term']) . '%', 'LIKE');
                  
                  
                  
                  // State via list (deprecated)
                  //$query->leftJoin('field_data_field_state', 'st', 'st.entity_id = n.nid');
                  //$query->fields('st', array('field_state_value'));

                  // Set above...
                  // State/country via taxonomy
                  $query->leftJoin('field_data_field_state_or_country', 'st2', 'st2.entity_id = n.nid');
                  $query->fields('st2', array('field_state_or_country_tid'));

                  $query->leftJoin('taxonomy_term_data', 'tdt2', 'tdt2.tid = st2.field_state_or_country_tid');
                  $query->addField('tdt2', 'name', 'state_or_country');

                  $query->leftJoin('field_data_field_abbreviation', 'abbr', 'abbr.entity_id = st2.field_state_or_country_tid');
                  $query->addField('abbr', 'field_abbreviation_value', 'abbr');
              
                  
                  // City via text field
    //              $query->leftJoin('field_data_field_conf_city', 'ci', 'ci.entity_id = n.nid');
    //              $query->fields('ci', array('field_conf_city_value'));
    //              
                  // City via taxonomy
                  $query->leftJoin('field_data_field_city', 'ci2', 'ci2.entity_id = n.nid');
                  $query->fields('ci2', array('field_city_tid'));

                  $query->leftJoin('taxonomy_term_data', 'tdt', 'tdt.tid = ci2.field_city_tid');
                  $query->addField('tdt', 'name', 'city');


                  $query->leftJoin('field_data_field_conf_date', 'da', 'da.entity_id = n.nid');
                  $query->fields('da', array('field_conf_date_value', 'field_conf_date_value2'));

                  $query->leftJoin('taxonomy_index', 'ti', 'ti.nid = n.nid');


                  $query->groupBy('n.nid');
                  // V0
                  // Works!
                  //$query->addExpression("GROUP_CONCAT(ti.tid SEPARATOR ',')", 'terms');
                  // Works!
                  //$query->addExpression("GROUP_CONCAT(CONCAT( 'tid:', ti.tid, 'x' ) SEPARATOR ', ')", 'terms');
                  // V1
                  // Works!
                  $query->addExpression("GROUP_CONCAT( (SELECT name FROM taxonomy_term_data AS td WHERE td.tid = ti.tid) SEPARATOR ',')", 'terms');
                  // V2
                  // Works excellently!
                  //$query->addExpression("GROUP_CONCAT( CONCAT( (SELECT name FROM taxonomy_term_data AS td WHERE td.tid = ti.tid), ':', ti.tid) SEPARATOR ';')", 'terms');

                  $query->orderBy('n.title', 'ASC');

                  if ($results_num) {
                    $query->range(0, $results_num);
                  }
              } // Else of // State
              */

              if ($results = $query->execute()->fetchAllAssoc('nid')) {
              
                  if ($post['type'] == 'industry') {
                    // Exclude the Industries if the reauest is filtered by Industry
                    $conferences_list = '<table class="col-3" id="side-table"><thead><th class="name"><div class="icon"></div>NAME</th><th class="dates"><div class="icon"></div>DATES</th><th class="location"><div class="icon"></div>LOCATION</th></thead><tbody>';
                  }
                  else {
                    $conferences_list = '<table id="side-table"><thead><th class="name"><div class="icon"></div>NAME</th><th class="industry"><div class="icon"></div>INDUSTRY</th><th class="dates"><div class="icon"></div>DATES</th><th class="location"><div class="icon"></div>LOCATION</th></thead><tbody>';
                  }
                  
                  foreach ($results as $result) {
//                    $conferences_list[] = array(
//                        'value' => $result->nid,
//                        'label' => $result->title,
//                    );
                    
                    
                      // Get TBD fields info
                      $tbd_fields = gv_misc_parseTBDfieldsFromStr($result);

                    
                      $term_links = NULL;
                      // V2
                      // Works
//                      $terms = explode(';', $result->terms);
//                      foreach ($terms as $term) {
//                        $term_data = explode(':', $term);
//                        $term_links .= ($term_links ? ', ' : '') . l($term_data[0], 'taxonomy/term/' . $term_data[1]);
//                      }
                      // V1
                      $terms = explode(',', $result->terms);
                      $terms_duplicate_exclude = array();
                      foreach ($terms as $term) {
                        if (!in_array($term, $terms_duplicate_exclude)) {
                          $term_links .= ($term_links ? ', ' : '') . '<span class="term-link">' . $term . '</span>';
                          $terms_duplicate_exclude[] = $term;
                        }
                      }
                     
                      if (isset($tbd_fields['Upcoming Date'])) {
                        $dates = $tbd_fields['Upcoming Date'];
                      }
                      else {
                        $dates = gv_misc_dateRangeFormatter($result->field_conf_date_value, $result->field_conf_date_value2);
                      }
                      
                      //$state_or_country = $result->abbr ? $result->abbr : $result->state_or_country;
                      //$location = $result->city . ( ($result->city && $state_or_country) ? ', ' : '' ) . $state_or_country;
                      
                      if (isset($tbd_fields['Upcoming Location'])) {
                        $location = $tbd_fields['Upcoming Location'];
                      }
                      else {
                        if (isset($tbd_fields['City'])) {
                          $result->city = $tbd_fields['City'];
                        }
                        if (isset($tbd_fields['State or Country'])) {
                          $state_or_country = $tbd_fields['State or Country'];
                        }
                        else {
                          $state_or_country = $result->abbr ? $result->abbr : $result->state_or_country;
                        }

                        $location = $result->city . ( ($result->city && $state_or_country) ? ', ' : '' ) . $state_or_country;
                      }
                      
                      //$conferences_list .= '<tr><td>' . l( $result->title, 'node/' . $result->nid) . '</td><td>' . $term_links . '</td><td>' . $result->field_conf_date_value . '</td><td>' . $result->field_conf_city_value . ', ' . $result->field_state_value . '</td></tr>';
                      if ($post['type'] == 'industry') {
                        // Exclude the Industries if the reauest is filtered by Industry
                        $conferences_list .= '<tr><td><span class="conf-title" id="' . $result->nid . '">' . $result->title . '</span></td><td>' . $dates . '</td><td>' . $location . '</td></tr>';
                      }
                      else {
                        $conferences_list .= '<tr><td><span class="conf-title" id="' . $result->nid . '">' . $result->title . '</span></td><td>' . $term_links . '</td><td>' . $dates . '</td><td>' . $location . '</td></tr>';
                      }
                    
                  }
                  
                  // Close the table block
                  if ($post['type'] == 'industry') {
                        // Exclude the Industries if the reauest is filtered by Industry
                        // Minus a one column
                        $conferences_list .= '</tbody></table>'
                          // Dummy table for vertical columns lines all over the result section under the main result table.
                          . '<table id="side-table-bottom"><tbody><tr><td></td><td></td><td></td></tr></tbody></table>';
                  }
                  else {
                        // Exclude the Industries if the reauest is filtered by Industry
                        $conferences_list .= '</tbody></table>'
                          // Dummy table for vertical columns lines all over the result section under the main result table.
                          . '<table id="side-table-bottom"><tbody><tr><td></td><td></td><td></td><td></td></tr></tbody></table>';
                  }
                  
                  
                  $out_array = array(
                      'sw' => $post['type'],
                      'type' => 'list',
                      'out' => $conferences_list,
                  );
                  
              } // End of if ($result = $query->execute()->fetchAllAssoc('nid')) {
                       
              
        } // End of elseif ($post['type'] == 'industry' || $post['type'] == 'city-state') {
       
        ////$out_array['in'] = $post;
        ////$out_array['in_2'] = $_GET;
        
//        $post['term_decoded2'] = utf8_decode($post['term']); //urldecode($post['term']);
//  $post['term_decoded3'] = html_entity_decode($post['term']);
//  //$post['term'] = str_replace('\u0026amp;', '&', $post['term']);
//  $post['term2'] = str_replace('0026', '&', $post['term']);
  
  } // End of elseif ($post['op'] == 'get') {
  
  
  cache_set($cache_name, $out_array, 'cache', time() + '7 days');
  
  drupal_json_output($out_array);

}





/* It disables the default upload button that comes with this #managed_file form */
function gv_misc_import_my_file_element_process($element, &$form_state, $form) {
  $element = file_managed_file_process($element, $form_state, $form);
  $element['upload_button']['#access'] = FALSE;
 
  return $element;
}

// ---------------------------------------------

function gv_misc_conferenceAlreadyExists($conference) {
  $query = db_select('node', 'n')
          ->fields('n', array('nid'))
          ->condition('n.type', 'conference')
          ->condition('n.title', $conference['Conference Name'])
          ->execute();
  
  $nid = $query->fetchField();
  //dpm($nid);
  return $nid;
}


function gv_misc_findOutTids($source_tags, $voc_name = 'Industries') {
  
  $source_tags = trim($source_tags);
  
  if (empty($source_tags)) {
    return NULL;
  }
  
  $tids = NULL;
  $tags = explode(',', $source_tags);
  if (empty($tags[1])) {
    $tags[0] = trim($source_tags); 
  }
  
  $voc_name_to_vid = array(
      'Industries' => 8,
      'Cities' => 9,
      'States and Countries' => 10,
  );

  $vid = $voc_name_to_vid[$voc_name]; //8; // industries
  
  $states = array(
      'AL' => 'Alabama',
      'AK' => 'Alaska',
      'AZ' => 'Arizona',
      'AR' => 'Arkansas',
      'CA' => 'California',
      'CO' => 'Colorado',
      'CT' => 'Connecticut',
      'DE' => 'Delaware',
      'FL' => 'Florida',
      'GA' => 'Georgia',
      'HI' => 'Hawaii',
      'ID' => 'Idaho',
      'IL' => 'Illinois',
      'IN' => 'Indiana',
      'IA' => 'Iowa',
      'KS' => 'Kansas',
      'KY' => 'Kentucky',
      'LA' => 'Louisiana',
      'ME' => 'Maine',
      'MD' => 'Maryland',
      'MA' => 'Massachusetts',
      'MI' => 'Michigan',
      'MN' => 'Minnesota',
      'MS' => 'Mississippi',
      'MO' => 'Missouri',
      'MT' => 'Montana',
      'NE' => 'Nebraska',
      'NV' => 'Nevada',
      'NH' => 'New Hampshire',
      'NJ' => 'New Jersey',
      'NM' => 'New Mexico',
      'NY' => 'New York',
      'NC' => 'North Carolina',
      'ND' => 'North Dakota',
      'OH' => 'Ohio',
      'OK' => 'Oklahoma',
      'OR' => 'Oregon',
      'PA' => 'Pennsylvania',
      'RI' => 'Rhode Island',
      'SC' => 'South Carolina',
      'SD' => 'South Dakota',
      'TN' => 'Tennessee',
      'TX' => 'Texas',
      'UT' => 'Utah',
      'VT' => 'Vermont',
      'VA' => 'Virginia',
      'WA' => 'Washington',
      'WV' => 'West Virginia',
      'WI' => 'Wisconsin',
      'WY' => 'Wyoming',
  );
  
  foreach ($tags as $tag) {
    
    $tag = trim($tag);
    
    // Set if this is a State or a Country?
    if ($voc_name == 'States and Countries' && isset($states[$tag])) {
      $abbreviation = $tag;
      $tag = $states[$tag];
    }
    else {
      $abbreviation = NULL;
    }
    
    
    
    // Find out tids.
    $query = db_select('taxonomy_term_data', 'td')
        ->fields('td', array('tid'))
        ->condition('td.vid', $vid)
        ->condition('td.name', $tag)
        ->execute();

    if ($tid = $query->fetchField()) {
      $tids[] = $tid;
    }
    else {
      drupal_set_message('No term "' . $tag . '" defined. Will be added to the system.', 'warning');
      $term = (object) array('name' => $tag, 'vid' => $vid);
      if (taxonomy_term_save($term)) {
        $tids[] = $term->tid;
        // Add abbreviation if it is a state.
        if ($abbreviation) {
          gv_misc_fieldSave('abbreviation', $term->tid, $abbreviation, 'taxonomy_term', 'states_and_countries');
        }
      }
    }


  }
  
  //dpm($tids);
  return $tids;
}


function gv_misc_findOutConferenceTids($source_tags) {
  
  if (empty($source_tags)) {
    return NULL;
  }
  
  $tids = NULL;
  $tags = explode(',', $source_tags);
  if (empty($tags[1])) {
    $tags[0] = $source_tags; 
  }

  $vid = 8; // industries
  foreach ($tags as $tag) {
    // Find out tids.
    $query = db_select('taxonomy_term_data', 'td')
        ->fields('td', array('tid'))
        ->condition('td.vid', $vid)
        ->condition('td.name', trim($tag))
        ->execute();

    if ($tid = $query->fetchField()) {
      $tids[] = $tid;
    }
    else {
      drupal_set_message('No term "' . $tag . '" defined. Will be added to the system.', 'warning');
      $term = (object) array('name' => $tag, 'vid' => $vid);
      if (taxonomy_term_save($term)) {
        $tids[] = $term->tid;
      }
    }


  }
  
  //dpm($tids);
  return $tids;
}



/**
 * Creates conferences from a var (loaded from csv).
 */
function gv_misc_addConferences_fromVar($conferences) { 
  
  $form_states = array();
  
  dpm($conferences);
  
  //return; 
  
  module_load_include('inc', 'pathauto');
  
  foreach ($conferences as $conference) {
    
    if ($existing_nid = gv_misc_conferenceAlreadyExists($conference)) {
    //if ($existing_nid = gv_misc_conferenceAlreadyExists(array('Conference Name' => 'NetApp Insight 14'))) {
      drupal_set_message('Conference "' . $conference['Conference Name'] .  '" already ' . l('exists', 'node/' . $existing_nid) . '!', 'error');
      continue;
    }
    /*
    $form_state['values'] = array(
      'title' => $conference['Conference Name'],
//      'post_date' => $result->post_date,
      'created' => time(), //strtotime($result->post_date),
      'changed' => time(), //strtotime($result->post_modified),
      //'category' => @$drupal_categories[$wp_categories[$result->term_taxonomy_id]],
      //'category_name' => @$wp_categories[$result->term_taxonomy_id],
      //'url_alias' => date('Y\/m', strtotime($result->post_date)) . '/' . $result->post_name,
      //'url_alias' => 'tech-conferences-finder/' . $result->post_name,
//      'ID' => $result->ID,
//      'categories' => $cats,
//      'tags' => $tags,
    );
    
    $form_state['values']['body']['und'][0]['value'] = $conference['Description'];
    $form_state['values']['body']['und'][0]['summary'] = '';
    */
    
    //$form_states[] = $form_state;
    //$form_states[] = $conference;
    // Add only one node.
    //gv_misc_createNode_conference($form_state);
    gv_misc_createNode_conference($conference);
    
    // Break on the first iteration.
    //return;
  }
  
  //dpm($form_states);
}


/**
 * Creates a node conference.
 */
function gv_misc_createNode_conference($conference) { 

  //dpm($conference);
  //return;
  // Creating a node via drupal_form_submit()
  // http://api.drupal.org/api/drupal/includes%21form.inc/function/drupal_form_submit/7
  
  /*
  

  
  define('DRUPAL_ROOT', getcwd());
  include_once 

  DRUPAL_ROOT . '/includes/bootstrap.inc';
  drupal_bootstrap(DRUPAL_BOOTSTRAP_FULL);
  bootstrap_invoke_all('init');
  ini_set('memory_limit', '512M');
  //Authenticate as user 1
  user_authenticate('user', 'password');
  module_load_include('inc', 'node', 'node.pages');  // new for Drupal 6


  $form_state = array();
  $nodeTmp = array('type' => testimonial); // a variable holding the content type
   

   $form_state['values']['type'] = 'testimonial';
   $form_state['values']['status'] = 1;
   $form_state['values']['title'] = 'test1';   // the node's title
   $form_state['values']['body'] = 'just my test node'; // the body, not required
   $form_state['values']['field_name'] =  t('adham allam');
   $form_state['values']['status'] = 1; //publish all imported nodes
   $form_state['values']['promote'] = 1; //promote all imported nodes
   $form_state['values']['sticky'] = 0; //remove sticky from imported nodes
   $form_state['values']['image'] = array();
   $form_state['values']['name'] = 'adham';
   $form_state['values']['op'] = t('Save');  // this seems to be a required value
  
   drupal_form_submit('testimonial_node_form', $form_state, (object)$nodeTmp);
  
  */
  
  
  global $user;
  
  $tbd_fields = array();
  $tbd_fields_options = array('TBD', 'N/A');
  $node = new stdClass();
  $node->type = 'conference';
  node_object_prepare($node);
  
  //$node->date = $form_state['values']['post_date'];
  $time = time();
  $node->created = $time; //$form_state['values']['created'];
  $node->changed = $time; //$form_state['values']['changed'];
  
          
  $node->title = $conference['Conference Name']; //$form_state['values']['title'];
  $node->language = LANGUAGE_NONE;
  $node->uid = $user->uid;
  $node->status = 1;
  $node->promote = 0;
  $node->sticky = 0;
  $node->comment = 0;
  
  $node->body[$node->language][0]['format'] = 'full_html';
  $node->body[$node->language][0]['value'] = $conference['Description'];
  $node->body[$node->language][0]['summary'] = '';
  $node->body[$node->language][0]['safe_summary'] = '';
  $node->body[$node->language][0]['safe_value'] = check_plain($conference['Description']);
  
  if (!empty($conference['Site'])) {
    
    if (!is_array($conference['Site']) && in_array(strtoupper($conference['Site']), $tbd_fields_options)) {
        $tbd_fields['Site'] = strtoupper($conference['Site']);
      }
      else {
          $node->field_conf_site[$node->language][0] = array(
            'url' => is_array($conference['Site']) ? $conference['Site'][0] : $conference['Site'],
            'title' => is_array($conference['Site']) ? $conference['Site'][1] : NULL,
            'attributes' => array(),
          );
      }
  }
  /*
  $node->field_conf_link[$node->language][0] = array(
    'value' => $conference['Site'],
    'safe_value' => l($conference['Site'], $conference['Site'], array('absolute' => TRUE, 'external' => TRUE)),
    'format' => 'plain_text',
  );
  */
  

  if (!empty($conference['Upcoming Location'])) {
    
      if (!is_array($conference['Upcoming Location']) && in_array(strtoupper($conference['Upcoming Location']), $tbd_fields_options)) {
        $tbd_fields['Upcoming Location'] = strtoupper($conference['Upcoming Location']);
      }
      else {
    
            $city = $state_or_country = NULL;

            $location = explode(',', $conference['Upcoming Location']);
            if (empty($location[1])) {
              $city = $conference['Upcoming Location'];
            }
            else {
              $city = trim($location[0]); 
              $state_or_country = trim($location[1]);
              
              if (in_array(strtoupper($city), $tbd_fields_options)) {
                $tbd_fields['City'] = strtoupper($city);
                $city = NULL;
              }
              if (in_array(strtoupper($state_or_country), $tbd_fields_options)) {
                $tbd_fields['State or Country'] = strtoupper($state_or_country);
                $state_or_country = NULL;
              }
            } 

            if($city && $tids = gv_misc_findOutTids($city, 'Cities')) {
              foreach ($tids as $tid) {
                $node->field_city[$node->language][] = array(
                  'tid' => $tid,
                );
              }
            }

            if($state_or_country && $tids = gv_misc_findOutTids($state_or_country, 'States and Countries')) {
              foreach ($tids as $tid) {
                $node->field_state_or_country[$node->language][] = array(
                  'tid' => $tid,
                );
              }
            }

      } // End of Else of if (in_array(strtoupper($conference['Upcoming Location']), $tbd_fields_options)) {
      
  } // End of if (!empty($conference['Upcoming Location'])) {
  
  if($conference['Applicable Industry'] && $tids = gv_misc_findOutTids($conference['Applicable Industry'], 'Industries')) {
    foreach ($tids as $tid) {
      $node->field_industry[$node->language][] = array(
        'tid' => $tid,
      );
    }
    
  } // End of if (!empty($conference['Upcoming Location'])) {
  
  /*
  {
    $node->field_conf_city[$node->language][0] = array(
      'value' => $conference['Upcoming Location'],
      'safe_value' => check_plain($conference['Upcoming Location']),
      'format' => NULL,
    );
  }
  {
    $node->field_state[$node->language][0] = array(
      'value' => trim($location[1]),
    );

    $node->field_conf_city[$node->language][0] = array(
      'value' => $location[0],
      'safe_value' => check_plain($location[0]),
      'format' => NULL,
    );
  }
  */
  
  
  if (!empty($conference['Twitter Page'])) {
    
    if (!is_array($conference['Twitter Page']) && in_array(strtoupper($conference['Twitter Page']), $tbd_fields_options)) {
        $tbd_fields['Twitter Page'] = strtoupper($conference['Twitter Page']);
      }
      else {
          $node->field_conf_twitter[$node->language][0] = array(
            'url' => is_array($conference['Twitter Page']) ? $conference['Twitter Page'][0] : NULL,
            'title' => is_array($conference['Twitter Page']) ? $conference['Twitter Page'][1] : $conference['Twitter Page'],
            'attributes' => array(),
          );
      }
      
  }
//  $node->field_conf_twitter[$node->language][0] = array(
//    'value' => $conference['Twitter Page'],
//    'safe_value' => check_plain($conference['Twitter Page']),
//    'format' => NULL,
//  );
  
  if (!empty($conference['Hashtag'])) {
    
    if (!is_array($conference['Hashtag']) && in_array(strtoupper($conference['Hashtag']), $tbd_fields_options)) {
        $tbd_fields['Hashtag'] = strtoupper($conference['Hashtag']);
      }
      else {
          $node->field_conf_twitter_hashtag[$node->language][0] = array(
            'url' => is_array($conference['Hashtag']) ? $conference['Hashtag'][0] : NULL,
            'title' => is_array($conference['Hashtag']) ? $conference['Hashtag'][1] : $conference['Hashtag'],
            'attributes' => array(),
          );
      }
  }
//  $node->field_conf_twitter_hashtag[$node->language][0] = array(
//    'value' => $conference['Hashtag'],
//    'safe_value' => check_plain($conference['Hashtag']),
//    'format' => NULL,
//  );
  
  
  if (!empty($conference['Price']) && $conference['Price'] != '0.00') {
    $node->field_conf_price[$node->language][0] = array(
      'value' => $conference['Price'],
    );
  }
  
  if (!empty($conference['Upcoming Date'])) {
    
    if (!is_array($conference['Upcoming Date']) && in_array(strtoupper($conference['Upcoming Date']), $tbd_fields_options)) {
        $tbd_fields['Upcoming Date'] = strtoupper($conference['Upcoming Date']);
      }
      else {
        
          $dates = gv_misc_parseDateRange($conference['Upcoming Date']);
          /*
          $dates = explode(' - ', $conference['Upcoming Date']);
          if (!empty($dates[1])) {
            $date1 = date('Y-m-d', strtotime($dates[0])) . '  00:00:00';
            $date2 = date('Y-m-d', strtotime($dates[1])) . '  00:00:00';
          }
          else {
            $date1 = $date2 = date('Y-m-d', strtotime($conference['Upcoming Date'])) . '  00:00:00';
          }
          */
          $node->field_conf_date[$node->language][0] = array(
            'value' => date('Y-m-d', strtotime($dates['first']['month'] . ' ' . $dates['first']['day'] . ', ' . $dates['first']['year'])) . '  00:00:00', //$dates['first']['year'] . '-' . $dates['first']['month'] . '-' . $dates['first']['day'] . ' 00:00:00', //$date1,
            'value2' => date('Y-m-d', strtotime($dates['second']['month'] . ' ' . $dates['second']['day'] . ', ' . $dates['second']['year'])) . '  00:00:00', //$dates['second']['year'] . '-' . $dates['second']['month'] . '-' . $dates['second']['day'] . ' 00:00:00', //$date2,
            'timezone' => 'America/New York',
            'timezone_db' => 'America/New York',
            'date_type' => 'datetime',
          );
      }
    
  } // End of if (!empty($conference['Upcoming Date'])) {
  
  /*
  $node->field_extra_data[$node->language][0] = array(
    'value' => NULL,
    'safe_value' => NULL,
    'format' => 'full_html',
  );
  $node->field_main_image[$node->language][0] = array(
    'value' => NULL,
    'safe_value' => NULL,
    'format' => 'full_html',
  );
  $node->field_a_teaser[$node->language][0] = array(
    'value' => NULL,
    'safe_value' => NULL,
    'format' => 'full_html',
  );
  
  $node->field_old_id[$node->language][0]['value'] = $form_state['values']['ID'];
  */
  //$node->field_categories[$node->language][0]['tid'] = $form_state['values']['category'];
  /*
  foreach ($form_state['values']['categories'] as $key => $value) {
    $node->field_categories[$node->language][] = array('tid' => $value->drupal_tid);
  }
  
  foreach ($form_state['values']['tags'] as $key => $value) {
    $node->field_tags[$node->language][] = array('tid' => $value->drupal_tid);
  }
  */
  if (!empty($tbd_fields)) {
    $tbd_fields_str = NULL;
    foreach ($tbd_fields as $key => $value) {
      $node->field_tbd_fields[$node->language][] = array('value' => $key . ' - ' . $value); 
      $tbd_fields_str .= ($tbd_fields_str ? ',' : '') . $key . ' - ' . $value;
    }
    $node->field_tbd_fields_str[$node->language][0] = array(
      'value' => $tbd_fields_str,
      'safe_value' => $tbd_fields_str,
      'format' => NULL,
    );
  }
  
  
  //$alias = pathauto_create_alias('node', 'return', 'node/' . $node->nid, array('node' => $node), $node->type);
  $alias = pathauto_create_alias('node', 'return', NULL, array('node' => $node), $node->type);
  //dpm($alias);
  
  $node->path = array(
    'alias' => $alias,
    'language' => $node->language,
    'pathauto' => 0,
  );
  
  //dpm($node);
  //return;
  
  if ($node = node_submit($node)) {
    node_save($node);
    drupal_set_message('Conference "' . l($node->title, 'node/' . $node->nid) .  '" has been imported!');
  }
  
}



/**
 * Update Boost cached SIP page.
 * To be called via exec(
 */
function gv_misc_updateCachedSIPpage() {
  
   //unlink('cache/normal/getvoip.com/sip-trunking___.html');
   array_map('unlink', glob("cache/normal/getvoip.com/sip-trunking*.html"));
  
   gv_misc_curl_file_from_remote_site_likeBrowser('http://getvoip.com/sip-trunking');
   
   return '.';
}


/**
 * Update Boost cached SIP page.
 * Middle function, To be called via ajax
 */
function gv_misc_updateCachedSIPpage_ajax() {
  
  $status = TRUE;
  
  // launch and leave in background, let make everything in background
  exec('wget -O - -q -t 1 http://getvoip.com/update-cached-sip-page > /dev/null &');
  
  // Problems with boost that doesn't cache pages if there are POST request from ajax on them.
  // So make it GET somehow solve the problem.
  // Here some discussing related to DRUPAL_UID set for anonimous users...
  // https://www.drupal.org/node/1807818
  
  
  drupal_json_output(array('status' => $status /*, 'data' => $output*/));
}




/**
 * Update Boost cached SIP page.
 * To be called via exec(
 */
function gv_misc_updateCachedPPCpage() {
  
   //unlink('cache/normal/getvoip.com/ppc/business-voip___.html');
   array_map('unlink', glob("cache/normal/getvoip.com/ppc/business-voip*.html"));
  
   gv_misc_curl_file_from_remote_site_likeBrowser('http://getvoip.com/ppc/business-voip');
   
   return '.';
}


/**
 * Update Boost cached SIP page.
 * Middle function, To be called via ajax
 */
function gv_misc_updateCachedPPCpage_ajax() {
  
  $status = TRUE;
  global $user;
  
  // Clear cache only for anonimous, for avoiding double regeneration
  if (!$user->uid) {
    // launch and leave in background, let make everything in background
    exec('wget -O - -q -t 1 http://getvoip.com/update-cached-ppc-page > /dev/null &');

    // Problems with boost that doesn't cache pages if there are POST request from ajax on them.
    // So make it GET somehow solve the problem.
    // Here some discussing related to DRUPAL_UID set for anonimous users...
    // https://www.drupal.org/node/1807818
  }
  
  drupal_json_output(array('status' => $status, 'u' => $user->uid /*, 'data' => $output*/));
}


/**
 * Hook init.
 * 
 */
function gv_misc_init() {
  
  gv_misc_writeGvAccessLog('init');
 
}


/**
 * Hook init.
 * 
 */
function gv_misc_exit() {
  
  gv_misc_writeGvAccessLog('exit');
  
}


function gv_misc_videoToken_getOneSnippetVideoData_parseVideoIdLocally_and_PullVideoParamsFromRemoteProvider($videoToken_html_url_fragment) {
 
  $snippetVideoData = NULL;
  
    // YouTube.com
  //if (preg_match('/.*\?v=(.*)\s?.*\]/is', $videoToken_html_url_fragment, $matches_2)) {
  if (
         preg_match('/.*\?v=(.*)\s?.*/is', $videoToken_html_url_fragment, $matches_2)
         ||
         preg_match('/.*youtube\.com\/embed\/(.*)/is', $videoToken_html_url_fragment, $matches_2) 
      ) {
    //dpm($matches_2);
    $video_id = $matches_2[1];

    //if($thumbnail_src = gv_misc_getYoutubeVideoThumb($video_id)) {
    if($thumbnail_src = gv_misc_getVideoThumb($video_id)) {

      // Get YouTube video info via Google API REST
      if ($data_from = gv_misc_getVideoInfo($video_id, 'YouTube')) {
        
          $snippetVideoData = array (
              'title' => $data_from->entry->{'media$group'}->{'media$title'}->{'$t'},
              //'descr' => htmlspecialchars($data_from->entry->{'media$group'}->{'media$description'}->{'$t'}, ENT_QUOTES),
              'descr' => $data_from->entry->{'media$group'}->{'media$description'}->{'$t'},
              'duration' => $data_from->entry->{'media$group'}->{'yt$duration'}->{'seconds'},
              'contentUrl' => $data_from->entry->{'media$group'}->{'media$content'}[0]->url,
              'thumbnail_src' => $thumbnail_src,
          );

          //dpm($data_from);
          //dpm($data_from->entry->{'media$group'});
          //dpm($data_from->entry->{'media$group'}->{'media$description'}->{'$t'});
        
      }


      ////$body_full_markup = preg_replace('|\[video:.*(http.*)\]|', '<a href="$1"> [Watch a video] </a>', $body_full_markup);
      ////////$body_full_markup = preg_replace('|(\[video:.*http.*\])|', '<div class="gv-video" itemprop="video" itemscope itemtype="http://schema.org/VideoObject"><span itemprop="name" content="Cisco SPA 303"></span><span itemprop="description" content="Unboxing Cisco SPA 303"></span><meta itemprop="thumbnailUrl" content="/images/posts/CiscoSPA303_outofthebox_0.PNG" ></meta>$1</div>', $body_full_markup);

    }
  }
  // Wistia.com
  //elseif (preg_match('/.*\/medias\/(.*)\?(.*)\]/is', $videoToken_html_url_fragment, $matches_2)) {
  elseif (
          preg_match('/.*\/medias\/(.*)\?(.*)/is', $videoToken_html_url_fragment, $matches_2)
          ||
          preg_match('/.*\/fast\.wistia\.net\/embed\/iframe\/(.*)/is', $videoToken_html_url_fragment, $matches_2)
          ) {

    $video_id = $matches_2[1];
    
    //dpm('id = ' . $video_id);
    //dpm($matches_2);

    // Get Video info via Wistia API
    if ($video_data = gv_misc_getVideoInfo($video_id, 'Wistia')) {

        if ($thumbnail_src = gv_misc_getVideoThumb($video_id, 'Wistia', $video_data->thumbnail->url)) {
          
          $snippetVideoData = array( 
            'title' => $video_data->name,
            'descr' => $video_data->description,
            'duration' => /*(int)*/ $video_data->duration,
            'contentUrl' => $video_data->assets[3]->url,
            'thumbnail_src' => $thumbnail_src,
          );
          //dpm($thumbnail_src);
          //dpm($video_data);
          
        }
    }

  }
    
  return $snippetVideoData;
}

/**
 * Wrap a video with Google rich snippet elements for Video.
  */
function gv_misc_addGvVideoGoogleVideoSnippet_toVideoToken_ifPresented($body_full_markup) {
  // $form_state['values']['body']['und'][0]['value']
  // form_set_value($form['field_main_image'], array('und' => array(0 => array('value' => serialize($teaser_data['main_image']), 'format' => 'full_html') )), $form_state);
  
  //$found_image = FALSE;
  //$title = $descr = $duration = $contentUrl = NULL;
  
  
  //global $user;
  
  if (preg_match_all('/\[video:(.*)\]/isU', $body_full_markup, $matches_all)) {
    
    //dpm($matches_all);
    
    // Go through Every url
    foreach ($matches_all[1] as $key => $match_url) {
      
      if ($snippetVideoData = gv_misc_videoToken_getOneSnippetVideoData_parseVideoIdLocally_and_PullVideoParamsFromRemoteProvider($match_url)) {
    
        
        // Google video rich snippet
        /*
         https://support.google.com/webmasters/answer/2413309?hl=en&ref_topic=4603851

         http://www.google.com/webmasters/tools/richsnippets?q=http%3A%2F%2Fgetvoip.com%2Freviews%2Fphone%2Fcisco-spa303

         http://stackoverflow.com/questions/18886947/schema-org-having-video-object-nested-inside-product
         http://googlewebmastercentral.blogspot.ru/2012/02/using-schemaorg-markup-for-videos.html
        */

        //dpm($thumbnail_src);
        /*
        $body_full_markup = preg_replace('|(\[video:.*http.*\])|is', 
                '<div class="gv-video" itemprop="video" itemscope itemtype="http://schema.org/VideoObject">' 
                  . '<span itemprop="name" content="' . $snippetVideoData['title'] . '"></span>' 
                  . '<span itemprop="description" content="' . $snippetVideoData['descr'] . '"></span>' 
                  . '<meta itemprop="thumbnailUrl" content="http://getvoip.com/' . $snippetVideoData['thumbnail_src'] . '" ></meta>'
                  . '<meta itemprop="duration" content="T' . $snippetVideoData['duration'] . 'S" ></meta>'
                  . '<meta itemprop="contentUrl" content="' . $snippetVideoData['contentUrl'] . '" ></meta>' 
                  . '$1' 
              . '</div>', $body_full_markup);
        */
        
        $body_full_markup = str_replace($matches_all[0][$key], 
                '<div class="gv-video" itemprop="video" itemscope itemtype="http://schema.org/VideoObject">' 
                  . '<span itemprop="name" content="' . $snippetVideoData['title'] . '"></span>' 
                  . '<span itemprop="description" content="' . $snippetVideoData['descr'] . '"></span>' 
                  . '<meta itemprop="thumbnailUrl" content="http://getvoip.com/' . $snippetVideoData['thumbnail_src'] . '" ></meta>'
                  . '<meta itemprop="duration" content="T' . $snippetVideoData['duration'] . 'S" ></meta>'
                  . '<meta itemprop="contentUrl" content="' . $snippetVideoData['contentUrl'] . '" ></meta>' 
                  . $matches_all[0][$key] 
              . '</div>', $body_full_markup);

      }
      else {
        dpm('No rich snippet added to the [video:...] token with the url ' . $match_url . ', because a video provider wasn\'t  identified');
      }
      
      
    }
  }
  
  
  
  if (preg_match_all('/<iframe.*src=\"(.*)\".*><\/iframe>/isU', $body_full_markup, $matches)) {
    //dpm($matches);
    //$a = $body_full_markup;
    foreach($matches[0] as $key => $match) {
      
      //dpm($matches[1][$key]);
      //dpm($match);
          
      if ($snippetVideoData = gv_misc_videoToken_getOneSnippetVideoData_parseVideoIdLocally_and_PullVideoParamsFromRemoteProvider($matches[1][$key])) {
        //dpm($snippetVideoData);
        
        $body_full_markup = preg_replace('|' . $match . '|is', 
              '<div class="gv-video-iframe" itemprop="video" itemscope itemtype="http://schema.org/VideoObject">' 
                  . '<span itemprop="name" content="' . $snippetVideoData['title'] . '"></span>' 
                  . '<span itemprop="description" content="' . $snippetVideoData['descr'] . '"></span>' 
                  . '<meta itemprop="thumbnailUrl" content="http://getvoip.com/' . $snippetVideoData['thumbnail_src'] . '" ></meta>'
                  . '<meta itemprop="duration" content="T' . $snippetVideoData['duration'] . 'S" ></meta>'
                  . '<meta itemprop="contentUrl" content="' . $snippetVideoData['contentUrl'] . '" ></meta>'  
                . $match 
            . '</div>', $body_full_markup);
      }
      else {
      
          dpm('No rich snippet added to the <iframe...> tag with the url ' . $matches[1][$key] . ', because a video provider wasn\'t  identified');
          
//          $body_full_markup = preg_replace('|' . $match . '|is', 
//              '<div class="gv-video-iframe" itemprop="video" itemscope itemtype="http://schema.org/VideoObject">' 
//                . '<span itemprop="name" content="' . /*$title .*/ '"></span>' 
//                . '<span itemprop="description" content="' . /*$descr .*/ '"></span>' 
//                . '<meta itemprop="thumbnailUrl" content="http://getvoip.com/' . /*$thumbnail_src .*/ '" ></meta>'
//                . '<meta itemprop="duration" content="T' . /*$duration .*/ 'S" ></meta>'
//                . '<meta itemprop="contentUrl" content="' . /*$contentUrl .*/ '" ></meta>' 
//                . $match 
//            . '</div>', $body_full_markup);
          
      }
      
    }
    //dpm($a);
  }
  
  return $body_full_markup;
}


/*
 * Update a node body with added gv-video wrapper tags
 * return False - not updated
 * return Body - updated
 */
function gv_misc_UpdateNodeBody_add_GvVideoGoogleSnippetWrapper_ifVideoPresented($node, $update_timestamp = NULL, $extra_data = NULL) {
  //dpm($node);
  //return;
  $current_body_full_markup = @$node->body[0]['value'];
  
  $extra_data = unserialize($node->field_extra_data[0]['value']);
  
  // If not all image url beautify are regenerated, regenerate it and save to the node after that.
  if ($current_body_full_markup && (!$update_timestamp || @$extra_data['update_video_timestamp'] < $update_timestamp)) {
    // Update $extra_data['update_timestamp'] in the db so the next time it won't be tested again.
    $extra_data['update_video_timestamp'] = time();
    //gv_misc_fieldSave('extra_data', $node->nid, serialize($extra_data));
  
    // Find out if there is already video snippet(s) added
    if (!gv_misc_isVideoRichSnippetAdded($current_body_full_markup)) {
      
      $node->body[0]['value'] = gv_misc_addGvVideoGoogleVideoSnippet_toVideoToken_ifPresented($current_body_full_markup);
      if ($current_body_full_markup != $node->body[0]['value']) {
        dpm('Video snippet was added.');
        // if there are any video tokens or iframe, add snippets to them
        // and update the body field
        ////gv_misc_fieldBodyUpdate($node->nid, $node->body['und'][0]['value']);
        return TRUE; 
      }
      else {
        dpm('No Video in the article has been found');
        return FALSE; 
      }
    }
    else {
      dpm('Video snippet was already added before.');
      return FALSE;
    }
  }

  dpm('Video snippet - not processed because of smaller timestamp');
  return FALSE;
}


function gv_misc_isVideoRichSnippetAdded($body_full_markup) {
  return gv_misc_removeGvVideoGoogleSnippetWrapper_fromVideoToken_ifPresented($body_full_markup, TRUE);
}

/**
 * Remove GvVideo Wrapper with Google rich snippet from video tokens.
 * OR
 * only_check_if_the body contains_snippet
 */
function gv_misc_removeGvVideoGoogleSnippetWrapper_fromVideoToken_ifPresented($body_full_markup, $only_check_if_contains_snippet = FALSE) {
  
  
  //global $user;
  
  $contains_snippet = FALSE;

  if (preg_match_all('/<div class="gv-video".*(\[.*\])<\/div>/isU', $body_full_markup, $matches)) {
    
    
    $contains_snippet = TRUE;
    
    //dpm($matches);
    //dpm('a1');
    foreach($matches[0] as $key => $match){
      //dpm($match);
      //dpm($matches[1][$key]);
      // Doesn't work!
      //$body_full_markup = preg_replace('|' . $match . '|is', $matches[1][$key], $body_full_markup);
      $body_full_markup = str_replace($match, $matches[1][$key], $body_full_markup);
    }
    //dpm('a2');
  }
 
  // form_set_value($form['field_main_image'], array('und' => array(0 => array('value' => serialize($teaser_data['main_image']), 'format' => 'full_html') )), $form_state);
  
  
  
  // Wrong way!, replace just first occurance
//  //if (preg_match('/\[video:.*v=(.*)\]/i', $body_full_markup, $matches)) {
//  elseif (preg_match('/\<div class="gv-video".*(\[.*\])\<\/div\>/is', $body_full_markup, $matches)) {
//    dpm('c1');
//    // [video: https://www.youtube.com/watch?v=H1vdPJzzzAY]
//    $body_full_markup = preg_replace('|\<div class="gv-video".*(\[.*\])\<\/div\>|is', '$1', $body_full_markup);
//  }
  
  
  
  if(preg_match_all('/<div class="gv-video-iframe".*(<iframe.*src=\"(.*)\".*><\/iframe>)<\/div>/isU', $body_full_markup, $matches)) {
    
    $contains_snippet = TRUE;
    
    //dpm($matches);
    //dpm('xxx');
    foreach($matches[0] as $key => $match){
      // Works!
      //$body_full_markup = preg_replace('|' . $match . '|isU', $matches[1][$key], $body_full_markup);
      $body_full_markup = str_replace($match, $matches[1][$key], $body_full_markup);
    }
  }
  
  
  if ($only_check_if_contains_snippet) {
    return $contains_snippet;
  }
  else {
    return $body_full_markup;
  }
}



/**
 * Get Wistia video data by video_id (medias hash)
 */
function gv_misc_getVideoInfo($video_id, $provider) {
  
  if ($provider == 'Wistia') {
    // Get Video info via Wistia API
    // https://getvoip.wistia.com/projects/ke00milhl6
    // http://wistia.com/doc/data-api
    // http://wistia.com/doc/data-api#medias_show

    // read token gv_read is managed via https://getvoip.wistia.com/account/access_tokens
    $url = 'https://api.wistia.com/v1/medias/' . $video_id . '.json?api_password=4edb66be76e45f63784ddb6f955380ece99a7674e85846cbcd3b6f075d181ef5';
  }
  elseif ($provider == 'YouTube') {
    // Get YouTube video info via Google API REST  
    // https://developers.google.com/youtube/2.0/developers_guide_protocol_video_entries

    $url = 'https://gdata.youtube.com/feeds/api/videos/' . $video_id . '?v=2&alt=json';
  }
  
  $data_from = gv_misc_curlGET($url);

  
  if ($data_from) {
    $data_from = json_decode($data_from);
    
    if ($provider == 'Wistia') {
      // correct size param
      $thumb_url = explode('image_crop_resized=', $data_from->thumbnail->url);
      //dpm($thumb_url);
      $data_from->thumbnail->url = $thumb_url[0] . 'image_crop_resized=300x180';
    }
    
    //dpm($data_from);
  }

  return $data_from;
}

/**
 * Get YouTube video thumbnail by video_id
 */
function gv_misc_getYoutubeVideoThumb($video_id) {
  
  $file_default_scheme = file_default_scheme();
  $default_file_path = variable_get('file_' . $file_default_scheme . '_path', conf_path() . '/files');
  
  $url = 'http://img.youtube.com/vi/' . $video_id . '/0.jpg'; //'/maxresdefault.jpg';
  $file_local = $default_file_path . '/vthumbs/' . $video_id . '.jpg';
  $file_local_abs = DRUPAL_ROOT . '/' . $file_local;
  if (!gv_misc_curl_file_from_remote_site_likeBrowser($url, $file_local_abs)) {
    return $file_local;
  }
  else {
    return NULL; // Failed.
  }
}

/**
 * Get video thumb from different providers by video_id
 */
function gv_misc_getVideoThumb($video_id, $provider = 'YouTube', $thumb_url = NULL) {
  
  $url = NULL;
  $file_default_scheme = file_default_scheme();
  $default_file_path = variable_get('file_' . $file_default_scheme . '_path', conf_path() . '/files');
  
  if ($provider == 'YouTube') {
    $url = 'http://img.youtube.com/vi/' . $video_id . '/0.jpg'; //'/maxresdefault.jpg';
  }
  elseif ($provider == 'Wistia') {
    if ($thumb_url) {
      $url = $thumb_url;
    }
    elseif ($video_data = gv_misc_getVideoInfo($video_id, 'Wistia')) {
      // Get video thumb url via Wistia API
      $url = $video_data->thumbnail->url;
    }
  }
  
  if (!$url) {
    return NULL;
  }
  
  $file_local = $default_file_path . '/vthumbs/' . $video_id . '.jpg';
  $file_local_abs = DRUPAL_ROOT . '/' . $file_local;
  if (!gv_misc_curl_file_from_remote_site_likeBrowser($url, $file_local_abs)) {
    if ($provider == 'Wistia'){
      // Doubled request from Wistia to get correct altered sized thumbnail.
      gv_misc_curl_file_from_remote_site_likeBrowser($url, $file_local_abs);
    }
    return $file_local;
  }
  else {
    return NULL; // Failed.
  }
}

/**
 * Hook to register the CKEditor plugin - it would appear in the plugins list on the profile setting page.
 */
/*
function hook_ckeditor_plugin() {
  return array(
    'plugin_name' => array(
      // Name of the plugin used to write it.
      'name' => 'plugin_name',
      // Description of the plugin - it would be displayed in the plugins management section of profile settings.
      'desc' => t('Plugin description'),
      // The full path to the CKEditor plugins directory, with the trailing slash.
      'path' => drupal_get_path('module', 'my_module') . '/plugin_dir/',
      'buttons' => array(
        'button_name' => array(
          'icon' => 'path to button icon',
          'label' => 'Button Label',
        )
      )
    )
  );
}
*/

/**
 * Hook to register the CKEditor plugin.
 */
function gv_misc_ckeditor_plugin() {
  return array(
    'dragresize' => array(
      'name'    => 'dragresize',
      'desc'    => t('Image DragResize with CKeditor in Chrome  (added via gv_misc)'),
      'path'    => 'sites/all/libraries/ckeditor_plugins/ck-dragresize/',
      'buttons' => array(
        'dragResize' => array(
          'icon'  => 'icon.png', //'icons/tabber.png',
          'label' => t('Image DragResize with CKeditor in Chrome'),
        ),
      )
    ),
    
    'oembed' => array(
      'name'    => 'oembed',
      'desc'    => t('Place oEmbed media (added via gv_misc)'),
      'path'    => 'sites/all/libraries/ckeditor_plugins/ckeditor_oembed/',
      'buttons' => array(
        'oEmbed' => array(
          'icon'  => 'icons/oembed.png', //'icons/tabber.png',
          'label' => t('Place oEmbed media'),
        ),
      )
    ),
    
    'widget' => array(
      'name'    => 'widget',
      'desc'    => t('Widget (added via gv_misc)'),
      'path'    => 'sites/all/libraries/ckeditor_plugins/widget/',
//      'buttons' => array(
//        'addTab' => array(
//          //'icon'  => '', //'icons/tabber.png',
//          //'label' => t(''),
//        ),
//      )
    ),
    'dialog' => array(
      'name'    => 'dialog',
      'desc'    => t('Dialog (added via gv_misc)'),
      'path'    => 'sites/all/libraries/ckeditor_plugins/dialog/',
//      'buttons' => array(
//        'addTab' => array(
//          //'icon'  => '', //'icons/tabber.png',
//          //'label' => t(''),
//        ),
//      )
    ),
    'lineutils' => array(
      'name'    => 'lineutils',
      'desc'    => t('Lineutils, needed for Widget plugin (added via gv_misc)'),
      'path'    => 'sites/all/libraries/ckeditor_plugins/lineutils/',
//      'buttons' => array(
//        'addTab' => array(
//          //'icon'  => '', //'icons/tabber.png',
//          //'label' => t(''),
//        ),
//      )
    ),
    
  );
}


function gv_misc_dateRangeFormatter($date1 /*str*/, $date2/*str*/) {
  
  if (empty($date1)) {
    return NULL;
  }
  
  $settings = array(
        'single' => 'F j, Y',
        'one_month' => 'F j-{j}, Y',
        'several_months' => 'F j - {F} {j}, Y',
        'several_years' => 'F j, Y - {F} {j}, {Y}',
      );
  
  if (empty($date2) || $date1 == $date2) {
    $date_str = htmlspecialchars(format_date(strtotime($date1), 'custom', $settings['single']));
  }
  else {
    $date1 = strtotime($date1);
    $date2 = strtotime($date2);

    $format = $settings['several_years'];
    if (date('Y', $date1) === date('Y', $date2)) {
      $format = $settings['several_months'];
    }
    if (date('m.Y', $date1) === date('m.Y', $date2)) {
      $format = $settings['one_month'];
    }

    $date_str = format_date($date1, 'custom', preg_replace('/\{([a-zA-Z])\}/', '{\\\$1}', $format));

    $matches = array();
    if (preg_match_all('/\{([a-zA-Z])\}/', $date_str, $matches)) {
      foreach ($matches[1] as $match) { // Letter itself.
        $date_str = preg_replace('/\{' . $match . '\}/', format_date($date2, 'custom', $match), $date_str);
      }
    }

  }

  return $date_str;
}


/*
 * Get TBD fields info.
 */
function  gv_misc_parseTBDfieldsFromStr($query_result) {
  $tbd_fields = array();
  if (!empty($query_result->field_tbd_fields_str_value)) {
  $tbd_fields_str = explode(',', $query_result->field_tbd_fields_str_value);
    foreach ($tbd_fields_str as $tbd) {
      $tbd = explode(' - ', $tbd);
      $tbd_fields[$tbd[0]] = $tbd[1];
    }
    //watchdog('GV TBD for nid ' . $query_result->nid, $query_result->field_tbd_fields_str_value, NULL, WATCHDOG_WARNING);
  }

  
  return $tbd_fields;
   /*
    Site - TBD|Site - TBD
    Site - N/A
    Twitter Page - TBD
    Twitter Page - N/A
    Hashtag - TBD
    Hashtag - N/A
    Upcoming Date - TBD
    Upcoming Date - N/A
    Upcoming Location - TBD
    Upcoming Location - N/A
    City - TBD
    City - N/A
    State or Country - TBD
    State or Country - N/A
  */
}


/*
 * GV custom access log on page load via get.
 */
function gv_misc_writeGvAccessLog($action) {
  
  
    // Comment to start logging.
    return;
  
  
    global $start_time, $user, $user_name, $no_log;
    
    switch ($action) {
      
      case 'init':
        $excluded_paths = array('/referer', '/rss.xml', '/blog/rss.xml', '/news/rss.xml', '/library/rss.xml', '/about-voip-services/rss.xml');
        if (!in_array($_SERVER['REQUEST_URI'], $excluded_paths)) {
          $no_log = FALSE;
          $start_time = time();
          $user_name = $user->uid ? ' [' . $user->name . ']' : '';
          file_put_contents(DRUPAL_ROOT . '/tmp/gv_requests.log', date('m-d-Y H:i:s', $start_time) . ' ' . $_SERVER['REMOTE_ADDR'] . $user_name . ' + -> ' . $_SERVER['REQUEST_URI'] . '
      ', FILE_APPEND | LOCK_EX);
        }
        else {
          $no_log = TRUE;
        }
        
        break;
      
      case 'exit':
        if ($no_log) {
          return;
        }
        $finish_time = time();
        if ($finish_time > $start_time + 1) {
          file_put_contents(DRUPAL_ROOT . '/tmp/gv_requests.log', date('m-d-Y H:i:s', $finish_time) . ' ' . $_SERVER['REMOTE_ADDR']  . $user_name . ' - -> ' . $_SERVER['REQUEST_URI'] . '
      ', FILE_APPEND | LOCK_EX);
        }
        break;
      
      case '404':
        file_put_contents(DRUPAL_ROOT . '/tmp/gv_requests.log', date('m-d-Y H:i:s', $start_time) . ' ' . $_SERVER['REMOTE_ADDR']  . $user_name . ' * -> ' . $_SERVER['REQUEST_URI'] . ' {404 PAGE NOT FOUND}
', FILE_APPEND | LOCK_EX);
        break;
    }
  }