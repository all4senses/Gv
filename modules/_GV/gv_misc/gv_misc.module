<?php

/**
 * @file
 * Module contained miscelanious helper functions and hooks.
 */


/**
 * Implements hook_form_alter().
 *
 * @param array &$form
 *   Array with declared form.
 *
 * @param array &$form_state
 *   Array with current form state.
 *
 * @param string $form_id
 *   Form ID.
 *
 * @return void
 *   Return nothing.
 */
function gv_misc_form_alter(&$form, &$form_state, $form_id) {
  // dpm($form_id);dpm($form);
  // Unlink Ckeditor from the comment input form.
  if($form['#id'] == 'comment-form') {
    $form['comment_body']['und'][0]['#type'] = 'textarea';
  }
  if (isset($form['#node']) && $form_id == $form['#node']->type .'_node_form') {
    $form['body']['und']['0']['#format'] = "full_html";
    //$form['field_custom_php_code']['und']['0']['#format'] = "php_code";
  }
}


/**
 * Returns topics list for a specific content type. 
 * 
 * Allows to use same topics for News, articles, etc.
 */
function gv_misc_getTopics($content_type, $base_url = NULL, $limit = NULL) {
  $topics = NULL;
  $voc = taxonomy_vocabulary_machine_name_load(TOPICS);
  
  // Old style query, for reference.
  // $results = db_query("SELECT td.name, COUNT(n.nid) AS count FROM {taxonomy_term_data} td LEFT JOIN {taxonomy_index} ti ON ti.tid = td.tid INNER JOIN {node} n ON (n.nid = ti.nid AND n.type = :type) WHERE td.vid = :vid GROUP BY td.name LIMIT $limit", array(':vid' => $voc->vid, ':type' => $content_type));
    
  $types = array();

  $query = db_select('taxonomy_term_data', 'td')
        ->fields('td', array('name', 'tid'));
  $query->leftJoin('taxonomy_index', 'ti', 'ti.tid = td.tid');
  $query->leftJoin('node', 'n', 'n.nid = ti.nid');
  $query->where('n.nid = ti.nid AND n.type = :type', array(':type' => $content_type))
        ->addExpression('COUNT(n.nid)', 'count');
  $query->groupBy('td.name');
  if ($limit) {
    $query->range(0, $limit);
  }
  $results = $query->execute();

  foreach($results as $result) {
    // Translate terms to the current language.
    // $result->name = i18n_string_translate(array('taxonomy', 'term', $result->tid, 'name'), $result->name);
    $base_url = trim($base_url, '/');
    $result->link = array('link_title' => $result->name, 'href' => $base_url . '/' . urldecode(drupal_strtolower($result->name)));
    $topics[] = (array) $result;
  }
  return $topics;
}


/**
 * Implements hook_theme().
 */
function gv_misc_theme($existing, $type, $theme, $path) {
  return array(
    'gv_misc_submenuSimple' => array(
      'variables' => array('vars' => null),
      //'template' => 'gv_misc_home',
    ),
    // Fivestar REPLACING theme functions.
    'gv_mics_fivestar_static' => array(
      'variables' => array('rating' => NULL, 'stars' => 5, 'tag' => 'vote', 'widget' => array('name' => 'default', 'css' => '')),
    ),
  );
}


/**
 * Simple theming of nested submenu.
 */
function theme_gv_misc_submenuSimple($vars) {
  if(empty($vars['submenu']['below'])) {
    return NULL;
  }
  $level = isset($vars['level']) ? $vars['level'] : 0;
  $class = isset($vars['class']) ? $vars['class'] : 'om-links';
  $delimiter = isset($vars['delimiter']) ? $vars['delimiter'] : '';
  $out = '<ul class="gv ' . $class . ' lvl-' . $level . '">';
  $count = 0;
  foreach ($vars['submenu']['below'] as $submenu) {
    if (isset($submenu['link']['hidden']) && $submenu['link']['hidden']) {
      continue;
    }
    $out .= ($count ? $delimiter : '') . '<li>';
    if($level) {
      for ($i = 0; $i < $level; $i++ ) {
        $out .= '--';
      }
    }
    $title = t($submenu['link']['link_title']);
    if(isset($submenu['count']) && $submenu['count']) {
      $title .= ' (' . $submenu['count'] . ')';
    }
    // If the field Description has '<nolink>' don't show link for this item
    if(isset($submenu['link']['localized_options']['attributes']['title']) && strtolower($submenu['link']['localized_options']['attributes']['title']) == '<nolink>') {
      $out .= $title;
    }
    else {
      $out .= l($title, $submenu['link']['href']);
    }
    $out .= '</li>';
    if (!empty($submenu['below'])) {
      // Recursion call.
      $out .= theme('gv_misc_submenuSimple', array('submenu' => $submenu, 'level' => ($level + 1), 'class' => $class, 'delimiter' => $delimiter ));
    }
    $count++;
  }
  $out .= '</ul>';
  return $out;
}


/**
 * REPLACE FOR ORIGINAL fivestar module theming function. Just to use only its theming functionality.
 * 
 * Display a plain HTML view-only version of the widget with a specified rating.
 *
 * @param $rating
 *   The desired rating to display out of 100 (i.e. 80 is 4 out of 5 stars).
 * @param $stars
 *   The total number of stars this rating is out of.
 * @param $tag
 *   Allows multiple ratings per node.
 * @return
 *   A themed HTML string representing the star widget.
 */
function theme_gv_misc_fivestar_static($variables) {
  $rating  = $variables['rating'];
  $stars = $variables['stars'];
  $tag = $variables['tag'];
  $widget = $variables['widget'];

  // GV Intrusion!!!!
  $path = drupal_get_path('module', 'gv_misc') . '/css/fivestar';
  drupal_add_css($path . '/css/fivestar.css');
  // END of intrusion.
  
  if($widget['name'] != 'default') {
    // GV changes.
    //drupal_add_css($widget['css']);
    drupal_add_css($path . '/widgets/' . $widget['name'] . '/' . $widget['css']);
  }
  
  $output = '<div class="fivestar-' . $widget['name'] . '">';
  $output .= '<div class="fivestar-widget-static fivestar-widget-static-'. $tag .' fivestar-widget-static-'. $stars . ' clearfix">';
  if (empty($stars)) {
    $stars = 5;
  }
  $numeric_rating = $rating/(100/$stars);
  for ($n=1; $n <= $stars; $n++) {
    $star_value = ceil((100/$stars) * $n);
    $prev_star_value = ceil((100/$stars) * ($n-1));
    $zebra = ($n % 2 == 0) ? 'even' : 'odd';
    $first = $n == 1 ? ' star-first' : '';
    $last = $n == $stars ? ' star-last' : '';
    $output .= '<div class="star star-'. $n .' star-'. $zebra . $first . $last .'">';
    if ($rating < $star_value && $rating > $prev_star_value) {
      $percent = (($rating - $prev_star_value) / ($star_value - $prev_star_value)) * 100;
      $output .= '<span class="on" style="width: '. $percent .'%">';
    }
    elseif ($rating >= $star_value) {
      $output .= '<span class="on">';
    }
    else {
      $output .= '<span class="off">';
    }
    if ($n == 1)$output .= $numeric_rating;
    $output .= '</span></div>';
  }
  $output .= '</div></div>';
  return $output;
}


/**
 * Returns all available providers aray with nid => title.
 */
function gv_misc_getProviders(&$providers, $scope = 'all') {
  if ($scope == 'all') {
    $data = db_select('node', 'n')
          ->fields('n', array('nid', 'title'))
          ->condition('type', 'provider')
          ->execute();
    foreach($data as $provider) {
      $providers[$provider->nid] = $provider->title;
    }
  }
}


/**
 * Implements hook_token_info().
 */
function gv_misc_token_info() {
  // Defines new token 'Provider name' in the node torens group.
  $info['tokens']['node']['provider-name-for-current-review'] = array(
    'name' => t('Provider name for a current review'),
    'description' => t('Name of the provider chosen from a select list or from a custom field if its provided...'),
  );

  return $info;
}


/**
 * Implements hook_tokens().
 * 
 * Provides token for a current review's provider name. It set to selected from a list or from a manually filled field (if not selected from a list).
 */
function gv_misc_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  $sanitize = !empty($options['sanitize']);

  // Add new token 'provider-name-for-current-review' to a 'node' tokens group.
  if ($type == 'node' && !empty($data['node'])) {
    $node = $data['node'];

    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'provider-name-for-current-review':
          if ($node->type == 'review') {
            if (isset($node->field_ref_provider['und'][0]['target_id']) && $node->field_ref_provider['und'][0]['target_id']) {
              
              $provider_title = db_select('node', 'n')
                ->fields('n', array('title'))
                ->condition('nid', $node->field_ref_provider['und'][0]['target_id'])
                ->execute()->fetchField();
              
              $replacements[$original] = $provider_title;
            }
            else {
              $replacements[$original] = check_plain($node->field_r_oprovider['und'][0]['value']);
            }

          }
          
          break;
      }
    }
  }
  
  return $replacements;
}



/**
 * Implements hook_TYPE_alter().
 * 
 * Provides custom tags for the Votes API via votingapi_metadata alter (defined in ).
 */
function gv_misc_votingapi_metadata_alter(&$data) {
  $data['tags'] += array(
    'features' => array(
      'name' => t('Features Rating'),
      'description' => t('Features Rating for a provider.'),
    ),
    'sound' => array(
      'name' => t('Sound Quality Rating'),
      'description' => t('Sound Quality Rating for a provider.'),
    ),
    'rely' => array(
      'name' => t('Reliability Rating'),
      'description' => t('Reliability Rating for a provider.'),
    ),
    'money' => array(
      'name' => t('Value for Money Rating'),
      'description' => t('Value for Money Rating for a provider.'),
    ),
    'service' => array(
      'name' => t('Value for Customer Service Rating'),
      'description' => t('Value for Customer Service Rating for a provider.'),
    ),
    'recommend' => array(
      'name' => t('Value for Would you recommend this VoIP provider'),
      'description' => t('Value for Would you recommend this VoIP provider. Yes or No.'),
    ),
  );
}

