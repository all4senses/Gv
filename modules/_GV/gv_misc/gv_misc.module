<?php

/**
 * @file
 * Module contained miscelanious helper functions and hooks.
 */


/**
 * Constants for ratins titles, etc.
 */
module_load_include('inc', 'gv_misc', 'inc/constants');


/**
 * Implements hook_menu().
 */
function gv_misc_menu() {
 
  gv_misc_setPagesToShow410($items);
  
  $items['get-sectionarticles'] = array(
    'title' => 'Get Section Articles',
    'page callback' => 'gv_misc_get_sectionArticles_ajax',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
  $items['r-share'] = array(
    'title' => 'Share reviews',
    'page callback' => 'gv_misc_rShareReviews_rest',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
  $items['securimage_show'] = array(
    'title' => 'Securimage',
    'page callback' => 'gv_misc_securimage_show_ajax',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
  $items['check_ctcaptcha'] = array(
    'title' => 'Check CT Captcha',
    'page callback' => 'gv_misc_checkCtCaptcha_ajax',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  
  
  $items['cc'] = array(
    'title' => 'Flush the cache and redirect to the Home page',
    'page callback' => 'gv_misc_flushCache',
    //'access arguments' => array('access content'),
    'access callback' => 'gv_misc_userIsAdmin',
    'type' => MENU_CALLBACK,
  );
  
  $items['go/%'] = array(
    'title' => 'Redirect to an external link',
    'page callback' => 'gv_misc_goToExternalUrl2',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
  // Old version, left for old existing links.
  $items['goto'] = array(
    'title' => 'Redirect to an external link',
    'page callback' => 'gv_misc_goToExternalUrl',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  ); 
  
   
  
  $items['click'] = array(
    'title' => 'Track a click',
    'page callback' => 'gv_misc_trackClick_ajax',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
  $items['referer'] = array(
    'title' => 'Set user external referer',
    'page callback' => 'gv_misc_setReferer_ajax',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  ); 
  
  $items['request'] = array(
    'title' => 'Make a request',
    'page callback' => 'gv_misc_makeRequest_ajax',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  ); 
  
  $items['get-disqus-users'] = array(
    'title' => 'Get new Disqus users',
    'page callback' => 'gv_misc_disqus_getNewUsers',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  ); 
  
  $items['get/iframe/business-voip-chart'] = array(
    'title' => 'Top Business VoIP Providers',
    'page callback' => 'gv_misc_getIframe_TopProvidersBu',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
  $items['get/iframe/quote-request-block'] = array(
    'title' => 'Quote Request Block',
    'page callback' => 'gv_misc_getIframe_QuoteRequestBlock',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
  $items['iframe-test'] = array(
    'page callback' => 'gv_misc_testPage_iframe',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
  
  
  /*
  $items['request-test'] = array(
    'page callback' => 'gv_misc_testPage_requestTest',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  */

  $items['request/capture'] = array(
    'title' => 'Capture users data on the fly before submitting a request',
    'page callback' => 'gv_misc_makeRequestCapture_ajax',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
    
  $items['test'] = array(
    'title' => 'Test page',
    'page callback' => 'gv_misc_testPage',
    //'access arguments' => array('administer content'),
    'access arguments' => array('administer taxonomy'), 
    'type' => MENU_CALLBACK,
  );
  
  
  $items['admin/content/rebuild-providers-sprites'] = array(
    'title' => 'Regenerate providers sprites',
    'page callback' => 'gv_misc_rebuildProvidersLogosSprites',
    //'access arguments' => array('administer content'),
    'access callback' => 'gv_misc_userIsAdmin',
    'type' => MENU_NORMAL_ITEM,
  );
  
  $items['admin/content/reviews-to-approve'] = array(
    'title' => 'Reviews to Approve',
    'page callback' => 'gv_misc_gotoReviewsToApprove',
    //'access arguments' => array('administer content'),
    'access callback' => 'gv_misc_userIsAdmin',
    'type' => MENU_NORMAL_ITEM,
  );
  
  $items['admin/content/phone-reviews-to-approve'] = array(
    'title' => 'Phone reviews to Approve',
    'page callback' => 'gv_misc_gotoPhoneReviewsToApprove',
    //'access arguments' => array('administer content'),
    'access callback' => 'gv_misc_userIsAdmin',
    'type' => MENU_NORMAL_ITEM,
  );
  
  $items['approve/%/%'] = array(
    'title' => 'Approve content',
    'page callback' => 'gv_misc_approveContent',
    'page arguments' => array(1,2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}


/**
 * Define pages (urls) that should be shown as Gone 410 (instead of 404)
 */
function gv_misc_setPagesToShow410(&$items) {
  
  $pages410 = unserialize(PAGES_410);
  // best-voip-service-providers is now best-voip-service-providers-old OR node/453
  
  
  foreach ($pages410 as $page) {
    $items[$page] = array(
      'title' => 'The Page is Gone (410)',
      'page callback' => 'gv_misc_410gone',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
    );
  }
 
}


/**
 * Return 410 gone for the current page.
 */
function gv_misc_410gone() {
  gv_misc_drupal_410_gone();
  drupal_exit();
}


/**
 * Implements hook_boost_is_cacheable().
 *
 * Disable caching for 410 gone pages to preserv the server response.
 * 
 * @return $parts
 */
//function gv_misc_boost_is_cacheable($parts, $request_type = 'normal') {
//
//  $pages410 = unserialize(PAGES_410);
//  
//  if (in_array($_GET['q'], $pages410)) {
//    $parts['is_cacheable'] = FALSE;
//    $parts['is_cacheable_reason'] = 'This page is gone. No cache for preserving the page status 410 gone.';
//  }
//  
//  return $parts;
//}



/**
 * Custom page not found 404.
 * Fix for a standard drupal_not_found
 */
function gv_misc_drupal_410_gone() {
  
  
  // Disable boost caching for custom gv page not found pages.
  // First part, initialization.
  // See the second part at gv_misc_process_html(),
  // where $_boost variable  will be corrected to prevent the current page caching.
  global $gv_page_not_found;
  $gv_page_not_found = TRUE;
  
  
  
  
  
  // Emit the correct charset HTTP header, but not if the page callback
  // result is NULL, since that likely indicates that it printed something
  // in which case, no further headers may be sent, and not if code running
  // for this page request has already set the content type header.

  drupal_add_http_header('Content-Type', 'text/html; charset=utf-8');

  // Send appropriate HTTP-Header for browsers and search engines.
  global $language;
  drupal_add_http_header('Content-Language', $language->language);

  drupal_add_http_header('Status', '410 Gone');

  watchdog('page is gone', check_plain($_GET['q']), NULL, WATCHDOG_WARNING);

  // Check for and return a fast 404 page if configured.
  ////drupal_fast_404();

  // Keep old path for reference, and to allow forms to redirect to it.
  if (!isset($_GET['destination'])) {
    $_GET['destination'] = $_GET['q'];
  }

  $path = drupal_get_normal_path(variable_get('site_404', ''));
  if ($path && $path != $_GET['q']) {
    // Custom 404 handler. Set the active item in case there are tabs to
    // display, or other dependencies on the path.
    menu_set_active_item($path);
    $return = menu_execute_active_handler($path, FALSE);
  }

  if (empty($return) || $return == MENU_NOT_FOUND || $return == MENU_ACCESS_DENIED) {
    // Standard 404 handler.
    ////drupal_set_title(t('Page not found'));
    ////$return = t('The requested page "@path" could not be found.', array('@path' => request_uri()));
    
    drupal_set_title('Page Is Gone');
    
    $return = gv_mics_page404CustomContent();

    
  }

  
  drupal_set_page_content($return);
  $page = element_info('page');
  print drupal_render_page($page);

  // Perform end-of-request tasks.
  drupal_page_footer();
}



function gv_mics_page404CustomContent() {
  
    $sitemap_body = cache_get('gv_sitemap_body');
    if (!$sitemap_body || empty($sitemap_body->data)) {
      $key = 'view-sitemap-page';
      $query = db_select('node', 'n');
      $query->join('field_data_field_preface_key', 'pk', "pk.entity_id = n.nid"); 
      $query->join('field_data_body', 'fb', "fb.entity_id = n.nid"); 
      $query->fields('fb', array('body_value'))
            ->condition('n.type', 'preface')
            ->condition('pk.field_preface_key_value', $key);
      $sitemap_body = $query->execute()->fetchField(); 

      // Remove preface text from a Sitemap body.
      if(preg_match('/.*(<table.*)/s', $sitemap_body, $matches)) {
        $sitemap_body = $matches[1];
      }
            
      cache_set('gv_sitemap_body', $sitemap_body);
    }
    else {
      $sitemap_body = $sitemap_body->data;
    }
    
    $page404_body = cache_get('gv_page404');
    if (!$page404_body || empty($page404_body->data)) {
      $key = 'page-not-found';
      $query = db_select('node', 'n');
      $query->join('field_data_field_preface_key', 'pk', "pk.entity_id = n.nid"); 
      $query->join('field_data_body', 'fb', "fb.entity_id = n.nid"); 
      $query->fields('fb', array('body_value'))
            ->condition('n.type', 'preface')
            ->condition('pk.field_preface_key_value', $key);
      $page404_body = $query->execute()->fetchField(); 

      cache_set('gv_page404', $page404_body);
    }
    else {
      $page404_body = $page404_body->data;
    }
    
    return '<div class="main-content page404"> 
      <div class="content page preface">' . $page404_body 
            . gv_blocks_getBlockThemed(array('module' => 'search', 'delta' => 'search-form', 'no_subject' => TRUE, 'class' => 'search-on-404', 'shadow' => FALSE)) 
            . '<br/><p>Or, try one of the links below.</p>'
            . '<div class="sitemap field-name-body">' . $sitemap_body . '</div>
      </div>
  </div>';

}


/**
 * Return section articles via ajax request.. 
 */
function gv_misc_get_sectionArticles_ajax() {
  $status = TRUE;
  $output = '';
  
  $post = array();
  foreach ($_POST as $key => $value) {
    $post[$key] = check_plain(strip_tags($value));
  }

  if ($post['op'] != 'get' || empty($post['section'])) {
    return FALSE;
  }
  
  $articles = gv_misc_get_sectionArticles($post['section']);
  
  drupal_json_output(array('status' => $status, 'articles' => $articles));
}


/**
 * Return section articles. 
 */
function gv_misc_get_sectionArticles($section, $limit = NULL) {
    
    global $language;
    $cache_name = 'gv_section_' . $section . '_' . $limit;

    $cache_content = cache_get($cache_name);
    if ($cache_content && !empty($cache_content->data) && $cache_content->expire > time()) {
      return $cache_content->data;
    }

  
  
    $articles = NULL;
    
    $query = db_select('field_data_field_funnel_sections', 's')
        ->fields('s', array('entity_id'));
    $query->leftJoin('node', 'n', 'n.nid = s.entity_id ');
    $query->fields('n', array('title'));
    $query->condition('field_funnel_sections_value', $section);
    $query->orderBy('title', 'asc');
    if ($limit) {
      $query->range(0, $limit);
    }
    $results = $query->execute()->fetchAllAssoc('entity_id');
    
    $max_len = 37;
    
    if (!empty($results)) {
      foreach ($results as $nid => $article) {
        $len = strlen($article->title);
        if ($len > $max_len) {
          $title = drupal_substr($article->title, 0, $max_len);
          $last_pos = strrpos($title, ' ');
          $title = substr_replace($title, '...', $last_pos);
          $articles .= '<div class="article">' . l($title, 'node/' . $article->entity_id, array('attributes' => array('title' => $article->title))) . '</div>';
        }
        else {
          $articles .= '<div class="article">' . l($article->title, 'node/' . $article->entity_id) . '</div>';
        }
      }
      $articles = '<div class="articles">' . $articles . '</div>';
    }
    
    cache_set($cache_name, $articles, 'cache', time() + 14400);
    
    return $articles;
}


/**
 * Test page function for url /test. 
 */
function gv_misc_getOlderUrlForSharing($current_url) {

  $older_urls = array(
      '/business' => '/compare-business-voip-providers',
      //'/hosted-pbx' => '/hosted-pbx-providers',
      //'/sip-trunking' => '/sip-trunking-providers',
      '/residential' => '/compare-residential-voip-providers',
      //'/reviews/business' => '/business-voip-reviews',
      //'/reviews/residential' => '/residential-voip-reviews',
      //'/reviews/phone' => '/voip-phone-reviews',
      //'/fax' => '/internet-fax-service-providers',
      //'/canada'=> '/canada-voip',
      //'/speed-test-tool' => '/voip-speed-test',
  );
  
  if (isset($older_urls[$current_url])) {
    return $older_urls[$current_url];
  }
  else {
    return $current_url;
  }
  
}


/**
 * Check if the submission already has been sent.
 */
function gv_misc_isSubmissionAlreadySent($email) {
      
    $query = db_select('gv_quote_requests', 'qr')
      ->fields('qr', array('ip', 'status', 'email_presented'));
    
    $query->condition('qr.status', 2);
    $query->condition('qr.email_presented', $email);
    $not_sents = $query->execute()->fetchAllAssoc('ip');
    if (!empty($not_sents)) {
      return TRUE;
    }
    else {
      return FALSE;
    }
}


/**
 * Test page function for url /test. 
 */
function gv_misc_testPage() {
  $out = '<div>'; //'<div>Start test...</div>';

  
  $query = db_select('node', 'n');
  $query->leftJoin('field_data_field_p_name', 'pn', 'pn.entity_id = n.nid');
  $query->fields('pn', array('field_p_name_value'));
  $query->condition('n.type', 'provider')
        ->condition('n.status', 1); 

  $query->leftJoin('field_data_field_r_provider_name', 'rpn', 'rpn.field_r_provider_name_value = pn.field_p_name_value');
  $query->join('node', 'rn', 'rn.nid = rpn.entity_id AND rn.status = 1');
  //$query->condition('rn.status', 1); 

  $query->distinct();
          
  $query->orderBy('field_p_name_value');
  $providers = $query->execute()->fetchCol();

  dpm($providers);
  
  foreach ($providers as $provider_name) {
    $query = db_select('field_data_field_r_provider_name', 'rpn');
    $query->leftJoin('node', 'n', 'n.nid = rpn.entity_id');
    $query->fields('n', array('changed'));
    $query->fields('rpn', array('entity_id'));
    $query->condition('rpn.field_r_provider_name_value', $provider_name)
          ->condition('n.status', 1);
    //$providers[$provider_name] = $query->execute()->fetchAllAssoc('n.nid');
    $result = $query->execute()->fetchAllAssoc('entity_id');
    if (!empty($result)) {
      $r_providers[$provider_name] = $result;
      //$providers[$provider_name]['count'] = count($result);
    }
  }

  dpm($r_providers);
  
  
  $post['op'] = 'get all reviews changed after...';
  $post['changed_after'] = '1367242095';
  
  $query = db_select('node', 'n');
  $query->leftJoin('field_data_field_r_provider_name', 'rpn', 'rpn.entity_id = n.nid');

  //$query->fields('rpn', array('entity_id', 'field_r_provider_name_value'));
  $query->addField('rpn', 'field_r_provider_name_value', 'pname');
  $query->addField('rpn', 'entity_id', 'nid');
  $query->addField('n', 'changed');

  $query->condition('n.type', 'review')
        ->condition('n.status', 1); 

  if ($post['op'] == 'get all reviews changed after...') {
    $query->condition('changed', $post['changed_after'], '>');
  }

  $query->orderBy('field_r_provider_name_value');
  //$out = $query->execute()->fetchAllAssoc('entity_id');
  $out = $query->execute()->fetchAllAssoc('nid');

  foreach ($out as $key => $value) {
    unset($out[$key]->nid);
  }

  dpm($out);
  

  
  
  return $out . '</div>';// . '<br><div>End of Test</div>';
}


/**
 * Share reviews with partners sites.
 */
function gv_misc_rShareReviews_rest() {
  
  $out = NULL;
  $error = FALSE;
  
  $allowed_remote_servers = array('50.62.82.224' /* voiprater.com */);
  
  global $user;
  watchdog('Request for reviews', check_plain($_GET['q']) . ' '. print_r($_SERVER, TRUE) . ' ' . print_r($user, TRUE), NULL, WATCHDOG_WARNING);
  
  
  //if (!in_array($_SERVER['HTTP_X_FORWARDED_FOR'], $allowed_remote_servers)) {
  if (!in_array($_SERVER['REMOTE_ADDR'], $allowed_remote_servers)) {
    exit('Access denied for your IP!');
  }
  
  
  $post = array();
  foreach ($_POST as $key => $value) {
    $post[$key] = check_plain(strip_tags($value));
  }

  switch ($post['op']) {
    
    case 'get providers having reviews':
    case 'get providers having reviews changed after...':
      
      $query = db_select('node', 'n');
      $query->leftJoin('field_data_field_p_name', 'pn', 'pn.entity_id = n.nid');
      $query->fields('pn', array('field_p_name_value'));
      $query->condition('n.type', 'provider')
            ->condition('n.status', 1); 

      $query->leftJoin('field_data_field_r_provider_name', 'rpn', 'rpn.field_r_provider_name_value = pn.field_p_name_value');
      
      if ($post['op'] == 'get providers having reviews changed after...') {
        $query->join('node', 'rn', 'rn.nid = rpn.entity_id AND rn.status = 1 AND rn.changed > ' . $post['changed_after']);
      }
      else {
        $query->join('node', 'rn', 'rn.nid = rpn.entity_id AND rn.status = 1');
      }
      
      $query->distinct();

      $query->orderBy('field_p_name_value');
      
      $out = $query->execute()->fetchCol();

      break;
    
    
    
    case 'get all reviews':
    case 'get all reviews changed after...':
      
      $query = db_select('node', 'n');
      $query->leftJoin('field_data_field_r_provider_name', 'rpn', 'rpn.entity_id = n.nid');

      //$query->fields('rpn', array('entity_id', 'field_r_provider_name_value'));
      $query->addField('rpn', 'field_r_provider_name_value', 'pname');
      $query->addField('rpn', 'entity_id', 'nid');
      $query->addField('n', 'changed');

      $query->condition('n.type', 'review')
            ->condition('n.status', 1); 
      
      if ($post['op'] == 'get all reviews changed after...') {
        $query->condition('changed', $post['changed_after'], '>');
      }
      
      $query->orderBy('field_r_provider_name_value');
      //$out = $query->execute()->fetchAllAssoc('entity_id');
      $out = $query->execute()->fetchAllAssoc('nid');

      foreach ($out as $key => $value) {
        unset($out[$key]->nid);
      }
      
      break;
    
    
    
    case 'get all reviews grouped by providers':
    case 'get all reviews grouped by providers changed after...':
      
      $query = db_select('node', 'n');
      $query->leftJoin('field_data_field_p_name', 'pn', 'pn.entity_id = n.nid');
      $query->fields('pn', array('field_p_name_value'));
      $query->condition('n.type', 'provider')
            ->condition('n.status', 1); 

      $query->leftJoin('field_data_field_r_provider_name', 'rpn', 'rpn.field_r_provider_name_value = pn.field_p_name_value');
      
      if ($post['op'] == 'get all reviews grouped by providers changed after...') {
        $query->join('node', 'rn', 'rn.nid = rpn.entity_id AND rn.status = 1 AND rn.changed > ' . $post['changed_after']);
      }
      else {
        $query->join('node', 'rn', 'rn.nid = rpn.entity_id AND rn.status = 1');
      }
      
      $query->distinct();

      $query->orderBy('field_p_name_value');
      $providers = $query->execute()->fetchCol();

      foreach ($providers as $provider_name) {
        $query = db_select('field_data_field_r_provider_name', 'rpn');
        $query->leftJoin('node', 'n', 'n.nid = rpn.entity_id');
        $query->fields('n', array('changed'));
        //$query->fields('rpn', array('entity_id'));
        $query->addField('rpn', 'entity_id', 'nid');
        $query->condition('rpn.field_r_provider_name_value', $provider_name)
              ->condition('n.status', 1);
        
        if ($post['op'] == 'get all reviews grouped by providers changed after...') {
          $query->condition('changed', $post['changed_after'], '>');
        }

        $result = $query->execute()->fetchAllAssoc('nid');
        if (!empty($result)) {
          $r_providers[$provider_name] = $result;
          //$providers[$provider_name]['count'] = count($result);
          
          foreach ($r_providers[$provider_name] as $key => $value) {
            unset($r_providers[$provider_name][$key]->nid);
          }
        }
      }    
      $out = $r_providers;
      break;
    
    
      
    case 'get provider reviews':
    case 'get provider reviews changed after...':
      
      $query = db_select('field_data_field_r_provider_name', 'rpn');
      $query->leftJoin('node', 'n', 'n.nid = rpn.entity_id');
      $query->fields('n', array('changed'));
      //$query->fields('rpn', array('entity_id'));
      $query->addField('rpn', 'entity_id', 'nid');
      $query->condition('rpn.field_r_provider_name_value', $post['pname'])
            ->condition('n.status', 1);

      if ($post['op'] == 'get provider reviews changed after...') {
        $query->condition('changed', $post['changed_after'], '>');
      }

      //$result = $query->execute()->fetchAllAssoc('entity_id');
      $result = $query->execute()->fetchAllAssoc('nid');
      if (!empty($result)) {
        $out = $result;
        
        foreach ($out as $key => $value) {
          unset($out[$key]->nid);
        }
      }

      break;
    
      
      
    case 'get review by nid':
      
      $query = db_select('node', 'n');
        $query->fields('n', array('nid', 'changed', 'uid'));
      $query->leftJoin('field_data_field_r_provider_name', 'rpn', 'rpn.entity_id = n.nid');
        $query->addField('rpn', 'field_r_provider_name_value', 'pname');
      
      $query->leftJoin('field_data_field_p_name', 'pn', 'pn.field_p_name_value = rpn.field_r_provider_name_value');
        $query->addField('pn', 'entity_id', 'p_nid');
        
      $query->leftJoin('field_data_body', 'b', 'b.entity_id = n.nid');
        $query->addField('b', 'body_value', 'review');
      $query->leftJoin('field_data_field_r_fname', 'fn', 'fn.entity_id = n.nid');
        $query->addField('fn', 'field_r_fname_value', 'fname');
      $query->leftJoin('field_data_field_r_lname', 'ln', 'ln.entity_id = n.nid');
        $query->addField('ln', 'field_r_lname_value', 'lname');
      $query->leftJoin('field_data_field_r_email', 'm', 'm.entity_id = n.nid');
        $query->addField('m', 'field_r_email_value', 'r_email');  
      $query->leftJoin('field_data_field_r_data', 'd', 'd.entity_id = n.nid');
        $query->addField('d', 'field_r_data_value', 'r_data');  
      $query->leftJoin('field_data_field_r_rating_overall', 'ro', 'ro.entity_id = n.nid');
        $query->addField('ro', 'field_r_rating_overall_value', 'rating_overall');  
       
      $query->leftJoin('field_data_field_r_notapproved', 'na', 'na.entity_id = n.nid');
        $query->addField('na', 'field_r_notapproved_value', 'r_notapproved');
      
      $query->leftJoin('field_data_field_ratings_oprovider', 'op', 'op.entity_id = n.nid');
        $query->addField('op', 'field_ratings_oprovider_value', 'ratings_oprovider');
      
        
       
            
      $query->condition('n.nid', $post['nid']);

      $review = $query->execute()->fetchObject();
      $review->r_data = unserialize($review->r_data);
              
      $criteria = array(
        'entity_type' => 'node',
        //'entity_id' => $review->field_ref_provider['und'][0]['target_id'],
        'entity_id' => $review->p_nid,
        //'uid' => $node->uid,
        'uid' => $review->uid,
        // Make it possible to count votes of several unauthorized (uid = 0, but with different emails) users.
        //'vote_source' => $node->field_r_email['und'][0]['value'],
        'vote_source' => $review->r_email,
      );
      $votes = gv_misc_getVotesIDs($criteria); // = votingapi_select_votes($criteria);
      gv_pages_addRatingsToNodeThemed($node, $votes);

      $review->votes = $votes;
      
      if (!empty($review)) {
        $out = $review;
      }
      
      break;
    
    
    
    default:
      $out = 'Invalid operation request! Please try another one.';
      $error = TRUE;
      break;
  }
  
  drupal_json_output(array('out' => $out, 'error' => $error));
}


/**
 * Bulk Replace titles metatags.
 */
function gv_misc_bulkReplaceTitlesMetatags() {

  $query = db_select('node', 'n');
  $query->fields('n', array('nid', 'title', 'type'));
  $query->leftJoin('metatag', 'm', 'm.entity_id = n.nid');
  $query->fields('m', array('data'));
  $query->condition('n.status', 1);
  $nodes = $query->execute()->fetchAllAssoc('nid');

  //dpm($nodes);
  
  
  foreach ($nodes as $nid => $node) {
    $nodes[$nid]->metatag = unserialize($node->data);
    unset($nodes[$nid]->data);
    
    // Replace '| GetVoIP.com' with '| GetVoIP'
//    if(empty($nodes[$nid]->metatag['title']['value']) || strpos($nodes[$nid]->metatag['title']['value'], '| GetVoIP.com') === FALSE) {
//      unset($nodes[$nid]);
//    }
//    else {
//      $nodes[$nid]->metatag['title']['value'] = str_replace('| GetVoIP.com', '| GetVoIP', $nodes[$nid]->metatag['title']['value']);
//    }
    
    
    // Replace title without '| GetVoIP.com' with title with '| GetVoIP'
//    if(empty($nodes[$nid]->metatag['title']['value']) || strpos($nodes[$nid]->metatag['title']['value'], '| GetVoIP') !== FALSE || strpos($nodes[$nid]->metatag['title']['value'], '[') !== FALSE) {
//      unset($nodes[$nid]);
//    }
//    else {
//      $nodes[$nid]->metatag['title']['value'] = $nodes[$nid]->metatag['title']['value'] . ' | GetVoIP';
//    }
    
    // Replace '| GetVoIP' with '[site:name]'
//    if(empty($nodes[$nid]->metatag['title']['value']) || strpos($nodes[$nid]->metatag['title']['value'], '| GetVoIP') === FALSE) {
//      unset($nodes[$nid]);
//    }
//    else {
//      $nodes[$nid]->metatag['title']['value'] = str_replace('| GetVoIP', '| [site:name]', $nodes[$nid]->metatag['title']['value']);
//    }
    
    // Replace '| GetVoIP' with '[site:name]'
    if(empty($nodes[$nid]->metatag['title']['value']) || strpos($nodes[$nid]->metatag['title']['value'], '| [site:name]') === FALSE) {
      unset($nodes[$nid]);
    }
    else {
      $nodes[$nid]->metatag['title']['value'] = str_replace('| [site:name]', '- [site:name]', $nodes[$nid]->metatag['title']['value']);
    }

  }
  
  //dpm($nodes);
  
  foreach ($nodes as $nid => $node) {
    $data = serialize($node->metatag);
    //dpm($nodes[$nid]);
    
    db_update('metatag')
        ->fields(array(
          'data' => $data,
        ))
        ->condition('entity_id', $nid)
        ->execute();
    //break;
  }
  
       
}
  

/**
 * Bulk Replace an alias of nodes.
 */
function gv_misc_bulkReplaceAliases() {
  
  
  $query = db_select('node', 'n');
  $query->fields('n', array('nid', 'title'));
  $query->condition('n.type', 'article');
  $nodes = $query->execute()->fetchAllAssoc('nid');

  
  
  foreach ($nodes as $nid => $node) {
    $query = db_select('url_alias', 'a');
    $query->condition('a.source', 'node/' . $nid);
    $query->fields('a', array('alias'));
    $nodes[$nid]->alias = $query->execute()->fetchField();
  }
  
  foreach ($nodes as $nid => $node) {
    
    if (strpos($node->alias, 'what-is-voip') === FALSE) {
      dpm('Wrong Alias for ' . $node->nid);
      continue;
    }
    
    
    
    
    $old_alias = $node->alias;
    $new_alias = str_replace('what-is-voip', 'library', $old_alias);
    
    $redirect = new stdClass();
    redirect_object_prepare($redirect);
    $redirect->source = $old_alias;
    $redirect->redirect = 'node/' . $nid;
    $redirect->language = 'und';
    $hash = redirect_hash($redirect);

    
    db_update('url_alias')
        ->fields(array(
          'alias' => $new_alias,
        ))
        ->condition('source', 'node/' . $nid)
        ->execute();
  
    $query = db_select('redirect', 'r');
    $query->condition('r.source', $old_alias);
    $query->fields('r', array('redirect'));
    $redirect_existing = $query->execute()->fetchField();
    if ($redirect_existing) {
      continue;
    }
    
   
    $redirect_object = array(
      'hash' => $hash,
      'type' => 'redirect',
      'uid' => 1,
      'source' => $old_alias,
      'source_options' => serialize(array()),
      'redirect' => 'node/' . $nid,
      'redirect_options' => serialize(array()),
      'language' => 'und',
      'status_code' => 0,
      'count' => 0,
      'access' => 0
    );
    
    db_insert('redirect')
        ->fields($redirect_object)
        ->execute();
  }
  
}


/**
 * Implements hook_flush_caches(). 
 */
function gv_misc_flush_caches() {
  
  // Remove all minified files from jsmin-gv folder.
  // Uncomment in case of changing any js on the site.
  
//  $dir = 'sites/default/files/jsmin-gv';
//  $objects = scandir($dir);
//  foreach ($objects as $object) {
//    if ($object != "." && $object != "..") {
//      unlink($dir . "/" . $object);
//    }
//  }
//  variable_del('gv_minified_js');
  
  
  gv_misc_recalculateReviewsAmount();
}


/**
 * Recalculate the reviews amount.
 */
function gv_misc_recalculateReviewsAmount() {
  /*
  $query = db_select('votingapi_vote', 'v');
  $query->condition('v.value_type', 'percent')
        ->condition('v.tag', 'overall');
  //$votes = $query->execute();
  $countQuery = $query->countQuery();
  $num_votes = $countQuery->execute()->fetchField();
  variable_set('gv_allReviewsAmount', $num_votes + 100);
  */
  
  $query = db_select('node', 'n');
  $query->condition('n.type', 'review');
  //$votes = $query->execute();
  $countQuery = $query->countQuery();
  $num_votes = $countQuery->execute()->fetchField();
  variable_set('gv_allReviewsAmount', $num_votes);
}


/**
 * Returns a captcha image.
 */
function gv_misc_securimage_show_ajax() {

  //require_once dirname(__FILE__) . '/securimage.php';
  
  // http://www.phpcaptcha.org/documentation/setting-options/
  
  require_once '/home/gvadmin/public_html/sites/all/libraries/jquery.plugins/securimage/securimage.php';

  //$img = new Securimage(array('captcha_type' => Securimage::SI_CAPTCHA_MATHEMATIC /* use math captcha */));
  $img = new Securimage();
  
  $img->code_length = 3;
  $img->num_lines = 0;
  // white bg
  $img->image_bg_color = new Securimage_Color('#ffffff');
  $img->text_color = new Securimage_Color('#000000');
  
  
  //$img->noise_color = new Securimage_Color('#ffffff');
  $img->noise_level = 0;
          
  $img->perturbation = 0.1; // 0.75 default


  $img->show();  // outputs the image and content headers to the browser
}


/**
 * Returns json result data with OK or error.
 */
function gv_misc_checkCtCaptcha_ajax() {
  $status = TRUE;
  $output = '';
  
  $post = array();
  foreach ($_POST as $key => $value) {
    $post[$key] = check_plain(strip_tags($value));
  }

  if ($post['op'] == 'get') {
    $cap = $_SESSION['securimage_code_value']['default'];
  }
  else {
    $cap = NULL;
  }
  
  drupal_json_output(array('status' => $status, 'cap' => $cap));
}



/**
 * Implements Hook Process Html.
 * Minify html on the fly.
 */
function gv_misc_process_html(&$vars) {
  
  // Disable boost caching for custom gv page not found pages.
  // First part, initialization.
  // See the second part at gv_misc_preprocess_page(),
  // where $_boost variable  will be corrected to prevent the current page caching.
  global $_boost;
  global $gv_page_not_found;

  if ($gv_page_not_found) {
    $_boost['cache_this'] = FALSE;
  }

  
  
  
  
  global $user;
//  dpm($_SERVER);
//  dpm($_GET);
  
  // We do not minify the code for logged in users and for quote landing and final pages.
  if (!$user->uid && @$_SERVER['REQUEST_URI'] != '/compare-voip-solutions-final' && @$_SERVER['REQUEST_URI'] != '/compare-voip-solutions') {
    
      // Minify a Html Page content.
      $vars['page'] = preg_replace(
        array(
          '/ {2,}/',
          '/<!--.*?-->|\t|(?:\r?\n[ \t]*)+/s',
        ),
        array(
          ' ',
          '',
        ),
        $vars['page']
      );

  }
  else {
    //dpm($vars);
  }
  
}


/**
 * Implementing hook_js_alter
 * @param $javascript
 */
function gv_misc_js_alter(&$javascript) {

  ////global $user;
  ////if (!$user->uid) {
    
    // Minify all js on the page.
    
    $add_to_minified = NULL;
    $from_scratch = FALSE;
    
    $gv_minified_js = variable_get('gv_minified_js');
    
    if ($gv_minified_js) {
      foreach($javascript as $filename => $attr){
        
        if (isset($gv_minified_js[$filename])) {
          $javascript[$filename]['data'] = $gv_minified_js[$filename];
        }
        elseif (strpos($filename, '.js') && !strpos($attr['data'], 'min.js') && !strpos($attr['data'], 'jsmin-gv')) {
          $add_to_minified[$filename] = $attr;
        }
      }
    }
    else {
      $add_to_minified = $javascript;
      $from_scratch = TRUE;
    }
    
    // Create minified version of js files, not yet created.
    if($add_to_minified) {

      include_once DRUPAL_ROOT . '/sites/all/libraries/minify/min/lib/JSMin.php';
    
      foreach($add_to_minified as $filename => $attr){

        if(!$from_scratch || (strpos($filename, '.js') && !strpos($attr['data'], 'min.js') && !strpos($attr['data'], 'jsmin-gv'))) {

          $source_fpath_short = $attr['data'];
          $source_fpath = DRUPAL_ROOT . '/' . $source_fpath_short;

          if ($source_content = file_get_contents($source_fpath)) {
            if ($minOutput = JSMin::minify($source_content)) {
              $target_path_short = 'sites/default/files/jsmin-gv/' . str_replace('/', '-', $source_fpath_short);
              if (file_put_contents(DRUPAL_ROOT . '/' . $target_path_short, $minOutput)) {
                $gv_minified_js[$filename] = $target_path_short;
                $javascript[$filename]['data'] = $gv_minified_js[$filename];
              }
            }
          }

        } // End of if(strpos($filename, '.js') && !strpos($attr['data'], "min.js") && !strpos($attr['data'], "jsmin-gv")) {

      } // End of foreach($javascript as $filename => $attr){
      
      variable_set('gv_minified_js', $gv_minified_js);
    } // End of if($add_to_minified) {
      
    
    // Replace js with min.js
//    foreach($javascript as $filename => $attr) {
//      if (isset($gv_minified_js[$filename])) {
//        $javascript[$filename]['data'] = $gv_minified_js[$filename];
//      }
//    }
    
    
  ////} // End of if ($user->uid != 1) {

}


/**
 * 
 * User permissions access calback function for the admin.
 * 
 */
function gv_misc_userIsAdmin() {
  global $user;
  if (in_array('administrator', $user->roles)) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}


/**
 * 
 * User permissions access calback function for the admin or writer.
 * 
 */
function gv_misc_userIsAdminOrWriter($user = NULL) {
  if (!$user) {
    global $user;
  }
  
  if (in_array('administrator', $user->roles) || in_array('Writer', $user->roles)) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}


/**
 * Implements a new view_mode.
 */
function gv_misc_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['home_teaser'] = array(
    'label' => t('Home teaser'),
    'custom settings' => TRUE,
  );
  $entity_info['node']['view modes']['side_block_teaser'] = array(
    'label' => t('Side block teaser'),
    'custom settings' => TRUE,
  );
  $entity_info['node']['view modes']['side_block_teaser_latestBlogsOnNews'] = array(
    'label' => t('Side block teaser latest Blogs On News'),
    'custom settings' => TRUE,
  );
}
 

/**
 * Build the tracking url.
 */
function gv_misc_getTrackingUrl($title_or_wrapped_object, $subpath = NULL, $nid = NULL, $target_name = NULL, $a_class = NULL, $a_attr = NULL) {
  
  // v1
  //$trackingUrl = l($title_or_wrapped_object, 'click', array('query' => array('p' => urlencode($target_name)), 'attributes' => array('rel' => 'nofollow', 'target' => '_blank')));
  
  
  // v2
  //$trackingUrl = l($title_or_wrapped_object, 'click' . $subpath, array('attributes' => array('rel' => 'nofollow', 'target' => '_blank')));
  
  if (!$subpath) {
    if ($nid) {
      $query = db_select('url_alias', 'a')
        ->fields('a', array('alias'));
      $query->condition('a.source', 'node/' . $nid);
      $subpath = '/' . $query->execute()->fetchField();
    }
    else {
      $subpath = $_SERVER['REDIRECT_URL'];
    }
  }

  // Make a path looks like /go/nextiva
  $subpath = str_replace('reviews/', '', $subpath);
      
  $trackingUrl = '<a href="/go' . $subpath . '" target = "_blank"' . ($a_attr ? ' ' . $a_attr['key'] . '="' . $a_attr['value'] . '"' : ' rel="nofollow"') . ($a_class ? ' class="' . $a_class . '"' : '') . '>' . $title_or_wrapped_object . '</a>';
  
  return $trackingUrl;
}


/**
 * Redirect to an external url and track the data without params.
 */
function gv_misc_goToExternalUrl2() {

  $args = arg();
  
  //dpm($args);
  
  //if ($args[1] == 'reviews' && !empty($args[2])) {
  if (!empty($args[1])) {
    
    $query = db_select('url_alias', 'a')
        ->fields('a', array('source'));
    //$query->condition('a.alias', $args[1] .  '/' . $args[2]);
    $query->condition('a.alias', 'reviews/' . $args[1]);
    $node_id = str_replace('node/', '', $query->execute()->fetchField());

    $query = db_select('field_data_field_p_data_quick', 'pd');
    $query->condition('pd.entity_id', $node_id);
    $query->fields('pd', array('entity_id', 'field_p_data_quick_value'));
    $p_data_quick = $query->execute()->fetchObject();

    //dpm($p_data_quick);
    
    if ($p_data_quick) {
      
      $object_id = $p_data_quick->entity_id;
      $p_data_quick = unserialize($p_data_quick->field_p_data_quick_value);
      $object_name = $p_data_quick['name'];
      $url = $p_data_quick['i_web'];
    }
    
    
    if (@$url) {
          
            global $user;
            $data = NULL;
//            $data = serialize(array(
//              'referer' => @$_SESSION['gv_current_http_referer'],
//              'click_on_page' => @$_SERVER['HTTP_REFERER'],
//              'user' => array('name' => $user->name, 'hostname' => $user->hostname),
//            ));

            db_insert('gv_track_links')
              ->fields(array(
                'object_id' => $object_id,
                'type' => 'provider_link',
                'object_name' => $object_name,
                'url' => $url,
                'timestamp' => time(),
                  
                'referer' => @$_SESSION['gv_current_http_referer'],
                'click_page' => @$_SERVER['HTTP_REFERER'],
                'uname' => isset($user->name) ? $user->name : '',
                'ip' => $user->hostname,
          
                'data' => $data,
              ))
              ->execute();
            
            drupal_goto( (strpos($url, 'http') !== FALSE ? $url : 'http://' . $url), array('external' => TRUE), 301);
        }
     
    
  }
  
  drupal_goto(@$_SERVER['HTTP_REFERER']);
  
  return '';
}


/**
 * Redirect to an external url and track the data.
 */
function gv_misc_goToExternalUrl() {
  
  //dpm($_SESSION['gv_current_http_referer']);
  //dpm($_GET);
  
  // Save a tracked redirection.
  if (!empty($_GET['t']) && !empty($_GET['n'])/* && !empty($_GET['url'])*/) {
    
    switch ($_GET['t']) {
      
      case 'provider':
    
        // Preserve a compatibility with the old tracking link... goto?t=provider&n=nextiva
        /// but redirect to the new tracking url... /go/nextiva
        
        $query = db_select('field_data_field_p_name', 'pn')
          ->fields('pn', array('entity_id'));
        $query->condition('pn.bundle', 'provider');
        $query->condition('pn.field_p_name_value', urldecode($_GET['n']));
        $node_id = $query->execute()->fetchField();
        
        $query = db_select('url_alias', 'a')
          ->fields('a', array('alias'));
        //$query->condition('a.alias', $args[1] .  '/' . $args[2]);
        $query->condition('a.source', 'node/' . $node_id);
        $path = 'go/' . str_replace('reviews/', '', $query->execute()->fetchField());

        if ($path) {
          drupal_goto($path, array(), 301);
        }
        else {
          drupal_goto(@$_SERVER['HTTP_REFERER']);
        }
        
        
        /*
        $query = db_select('field_data_field_p_name', 'pn');
          //->fields('pn', array(''))
        $query->condition('pn.bundle', 'provider');
        $query->condition('pn.field_p_name_value', urldecode($_GET['n']));
        $query->leftJoin('field_data_field_p_data_quick', 'pd', 'pd.entity_id = pn.entity_id');
        $query->fields('pd', array('entity_id', 'field_p_data_quick_value'));
        $p_data_quick = $query->execute()->fetchObject();
        
        if ($p_data_quick) {
          $object_id = $p_data_quick->entity_id;
          $p_data_quick = unserialize($p_data_quick->field_p_data_quick_value);
          $url = $p_data_quick['i_web'];
        }
    
        if (@$url) {
          
            global $user;
            $data = NULL;
//            $data = serialize(array(
//              'referer' => @$_SESSION['gv_current_http_referer'],
//              'click_on_page' => @$_SERVER['HTTP_REFERER'],
//              'user' => array('name' => $user->name, 'hostname' => $user->hostname),
//            ));

            db_insert('gv_track_links')
              ->fields(array(
                'object_id' => $object_id,
                'type' => 'provider_link',
                'object_name' => urldecode($_GET['n']),
                'url' => $url,
                'timestamp' => time(),
                  
                'referer' => @$_SESSION['gv_current_http_referer'],
                'click_page' => @$_SERVER['HTTP_REFERER'],
                'uname' => isset($user->name) ? $user->name : '',
                'ip' => $user->hostname,
          
                'data' => $data,
              ))
              ->execute();
            
            drupal_goto($url, array('external' => TRUE));
        }
        */
        
        break; // End of case 'provider':
    }
  }
  
  drupal_goto(@$_SERVER['HTTP_REFERER']);
  
  return '';
}


/**
 * Flush the cache and redirect to the Home page.
 */
function gv_misc_flushCache() {
  drupal_flush_all_caches();
  drupal_set_message('Cache is flushed.', 'warning');
  drupal_goto('');
}


/**
 * Track a click.
 */
function gv_misc_trackClick_ajax() {
  
  $status = TRUE;
  $output = '';
  
  $post = array();
  foreach ($_POST as $key => $value) {
    $post[$key] = check_plain(strip_tags($value));
  }
  
  if (!empty($post['type']) && !empty($post['url'])) {
    
      global $user;
      $data = NULL;
//      $data = serialize(array(
//        'referer' => @$_SESSION['gv_current_http_referer'],
//        'click_page' => $post['click_page'],
//        'user' => array('name' => $user->name, 'hostname' => $user->hostname),
//      ));

      db_insert('gv_track_links')
        ->fields(array(
          'object_id' => str_replace('oid', '', $post['oid']),
          'type' => $post['type'],
          'object_name' => $post['title'],
          'url' => $post['url'],
          'timestamp' => time(),
          
          'referer' => @$_SESSION['gv_current_http_referer'],
          'click_page' => $post['click_page'],
          'uname' => isset($user->name) ? $user->name : '',
          'ip' => $user->hostname,
            
          'data' => $data,
        ))
        ->execute();

  }
  
  drupal_json_output(array('status' => $status, /*'data' => $output*/));
}


/**
 * Set a current user external referer.
 */
function gv_misc_setReferer_ajax() {
  
  $status = TRUE;
  $output = '';
  
  $post = array();
  foreach ($_POST as $key => $value) {
    $post[$key] = check_plain(strip_tags($value));
  }
  
  if (!empty($post['referer']) && strpos($post['referer'], 'http://getvoip.com') === FALSE) {
    $_SESSION['gv_current_http_referer'] = $post['referer'];
  }
  
  drupal_json_output(array('status' => $status, /*'data' => $output*/));
}



/**
 * Identify the type of the node.
 * Used in theme_pager() in template.php
 */
function gv_misc_identifyNodeType($nid) {
    
  $query = db_select('node', 'n')  
        ->fields('n', array('type'));
  $query->condition('n.nid', $nid);
  $node_type = $query->execute()->fetchField();

  return $node_type;
}

    
/**
 * Custom page not found 404.
 * Fix for a standard drupal_not_found
 */
function gv_misc_drupal_not_found() {
  
  
  
  // Disable boost caching for custom gv page not found pages.
  // First part, initialization.
  // See the second part at gv_misc_process_html(),
  // where $_boost variable  will be corrected to prevent the current page caching.
  global $gv_page_not_found;
  $gv_page_not_found = TRUE;
  
  
  
  
  
  
  // Emit the correct charset HTTP header, but not if the page callback
  // result is NULL, since that likely indicates that it printed something
  // in which case, no further headers may be sent, and not if code running
  // for this page request has already set the content type header.

  drupal_add_http_header('Content-Type', 'text/html; charset=utf-8');

  // Send appropriate HTTP-Header for browsers and search engines.
  global $language;
  drupal_add_http_header('Content-Language', $language->language);

  drupal_add_http_header('Status', '404 Not Found');

  watchdog('page not found', check_plain($_GET['q']), NULL, WATCHDOG_WARNING);

  // Check for and return a fast 404 page if configured.
  drupal_fast_404();

  // Keep old path for reference, and to allow forms to redirect to it.
  if (!isset($_GET['destination'])) {
    $_GET['destination'] = $_GET['q'];
  }

  $path = drupal_get_normal_path(variable_get('site_404', ''));
  if ($path && $path != $_GET['q']) {
    // Custom 404 handler. Set the active item in case there are tabs to
    // display, or other dependencies on the path.
    menu_set_active_item($path);
    $return = menu_execute_active_handler($path, FALSE);
  }

  if (empty($return) || $return == MENU_NOT_FOUND || $return == MENU_ACCESS_DENIED) {
    // Standard 404 handler.
    ////drupal_set_title(t('Page not found'));
    ////$return = t('The requested page "@path" could not be found.', array('@path' => request_uri()));
    
    drupal_set_title('Page Not Found');
    /*
    $sitemap_body = cache_get('gv_sitemap_body');
    if (!$sitemap_body || empty($sitemap_body->data)) {
      $key = 'view-sitemap-page';
      $query = db_select('node', 'n');
      $query->join('field_data_field_preface_key', 'pk', "pk.entity_id = n.nid"); 
      $query->join('field_data_body', 'fb', "fb.entity_id = n.nid"); 
      $query->fields('fb', array('body_value'))
            ->condition('n.type', 'preface')
            ->condition('pk.field_preface_key_value', $key);
      $sitemap_body = $query->execute()->fetchField(); 

      // Remove preface text from a Sitemap body.
      if(preg_match('/.*(<table.*)/s', $sitemap_body, $matches)) {
        $sitemap_body = $matches[1];
      }

      cache_set('gv_sitemap_body', $sitemap_body);
    }
    else {
      $sitemap_body = $sitemap_body->data;
    }

    $page404_body = cache_get('gv_page404');
    if (!$page404_body || empty($page404_body->data)) {
      $key = 'page-not-found';
      $query = db_select('node', 'n');
      $query->join('field_data_field_preface_key', 'pk', "pk.entity_id = n.nid"); 
      $query->join('field_data_body', 'fb', "fb.entity_id = n.nid"); 
      $query->fields('fb', array('body_value'))
            ->condition('n.type', 'preface')
            ->condition('pk.field_preface_key_value', $key);
      $page404_body = $query->execute()->fetchField(); 

      cache_set('gv_page404', $page404_body);
    }
    else {
      $page404_body = $page404_body->data;
    }

    $return = '<div class="main-content page404"> 
      <div class="content page preface">' . $page404_body . '<div class="sitemap field-name-body">' . $sitemap_body . '</div>
        </div>
      </div>';
    */
    $return = gv_mics_page404CustomContent();
    
  }

  drupal_set_page_content($return);
  $page = element_info('page');
  print drupal_render_page($page);

  // Perform end-of-request tasks.
  drupal_page_footer();
}


/**
 * Return a breadcrumbs for a current page via main_menu.
 */
function gv_misc_getMenuTrail() {
  
  
  if(!$url_aliased = @$_SERVER['REDIRECT_URL']) {
    return FALSE;
  }
    
  //dpm('Target aliased url = ' . $url_aliased);
  
  $breadcrumbs = cache_get('gv_breadcrumbs_for_menu');
  //dpm($breadcrumbs);
  
  $breadcrumbs = !$breadcrumbs ? array() : $breadcrumbs->data;
  if (isset($breadcrumbs[$url_aliased])) {
    //dpm('breadcrumb is found in cache');
    return $breadcrumbs[$url_aliased];
  }
  
  // Search for the url in the menu and define a breadcrumb.
  $main_menu = NULL;
  
  // Check if the url is presented in the menu.
  if($main_menu_all_items = cache_get('gv_main_menu_all_items')) {
    $main_menu_all_items = $main_menu_all_items->data;
  }
  else {
    $main_menu = menu_build_tree('main-menu');
    foreach ($main_menu as $key_top => $value_top) {
      $main_menu_all_items[] = strpos($value_top['link']['href'], 'node/') !== FALSE ? $value_top['link']['href'] : '/' . $value_top['link']['href'];
      if (!empty($value_top['below'])) {
        foreach ($value_top['below'] as $key_below => $value_below) {
          $main_menu_all_items[] = strpos($value_below['link']['href'], 'node/') !== FALSE ? $value_below['link']['href'] : '/' . $value_below['link']['href'];
        }
      }
    }
    //dpm('Define gv_main_menu_all_items');
    cache_set('gv_main_menu_all_items', $main_menu_all_items);
  }
  
  //dpm($main_menu_all_items);
  
  $url_not_aliased = (arg(0) == 'node' ? 'node/' . arg(1) : NULL);
  if (!in_array($url_aliased, $main_menu_all_items) && !in_array($url_not_aliased, $main_menu_all_items)) {
    // Target url is not in the menu.
    //dpm('Target url is not in the menu... Exit');
    return FALSE;
  }
  
  
  //dpm('in the menu! Define breadcrumb...');
  if (!$main_menu) {
    $main_menu = menu_build_tree('main-menu');
  }
  //dpm($main_menu);
  
  
  
  $breadcrumb = '';
  
  
  
  
  //dpm($url_aliased);
  //dpm($url_not_aliased);
  
  foreach ($main_menu as $key_top => $value_top) {
    // Check top link.
    if ($value_top['link']['hidden']) {
      continue;
    }
    if ('/' . $value_top['link']['href'] == $url_aliased || $value_top['link']['href'] == $url_not_aliased) {
      //dpm('Found top url ' . $value_top['link']['link_title']);
      $breadcrumb = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), $value_top['link']['link_title'] )));
    }
    else {
      // Check nested links.
      if (!empty($value_top['below'])) {
        foreach ($value_top['below'] as $key_below => $value_below) {
          if ($value_below['link']['hidden']) {
            continue;
          }
          if ('/' . $value_below['link']['href'] == $url_aliased || $value_below['link']['href'] == $url_not_aliased) {
            //dpm('Found below url ' . $value_below['link']['link_title'] . ' --- ' . $key_top . ' --- ' . $key_below);
            $breadcrumb = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), l($value_top['link']['link_title'], $value_top['link']['href']), $value_below['link']['link_title'] )));
          }
        }
      }
    }
    
  }

  $breadcrumbs[$url_aliased] = $breadcrumb;
  cache_set('gv_breadcrumbs_for_menu', $breadcrumbs);
  
  return $breadcrumb;
}

/**
 * Loads an additional user_data for articles, etc.
 *
 * @param $uid
 *   A user account uid.
 * @return
 *   The user's generated object with additional data.
 */
function gv_misc_loadUserExtendedData($uid) {
  
  $cid = 'gv_userExtendedData_all';
  $cache = cache_get($cid, 'cache');
  
  if ($cache && !empty($cache->data) && !empty($cache->data[$uid]) && $cache->expire > time()) {
    $out = $cache->data[$uid];
  }
  else 
  {
    $userExtendedData_all = $cache ? $cache->data : array();
    
    $query = db_select('realname', 'rn')
      ->fields('rn', array('realname'))
      ->fields('g', array('field_u_gplus_profile_value'));
    $query->condition('uid', $uid);
    $query->leftJoin('field_data_field_u_gplus_profile', 'g', 'g.entity_id = ' . $uid . '');
    $userExtendedData = $query->execute()->fetchObject();
    
    $userExtendedData_all[$uid] = $userExtendedData;

    cache_set($cid, $userExtendedData_all, 'cache', strtotime('+31 day'));
    $out = $userExtendedData_all[$uid];
  }
    
  return $out;
}


/**
 * Implements hook_taxonomy_term_delete().
 * Removes tag's references and its twin tag from a main tag voc references from nodes.
 */
function gv_misc_taxonomy_term_delete($current_term) {

  //dpm($current_term);
  // Define fields names.
  $main_field_name = 'topics';
  
  switch ($current_term->vocabulary_machine_name) {
    
    case 'topics':
      $target_field_name = 'topics';
      break;
    
    case 'blog_tags':
      $target_field_name = 'tags_blog';
      $node_type = 'blog_post';
      break;
    case 'news_tags':
      $target_field_name = 'tags_news';
      $node_type = 'news_post';
      break;
    case 'articles_tags':
      $target_field_name = 'tags_articles';
      $node_type = 'article';
      break;
    
    default:
      return;
  }

  
  if ($current_term->vid != 2) { // vid for 'topics' = 2
    
    // Search for the corresponding main voc term tid.
    $all_vocs_terms = taxonomy_get_term_by_name($current_term->name);
    $found = FALSE;
    $main_term = FALSE;
    $main_vid = 2; // 2 - main voc - Topics tags.
    foreach ($all_vocs_terms as $term) {

      if ($term->vid == $main_vid) {
        // Term exists in the Topics vocabulary.
        $main_term = $term;
        $found = TRUE;
        break;
      }
    }


    if ($main_term) {
      // Get nodes list of the specific type that have this field value.
      $query = db_select('field_data_field_' . $target_field_name, 'f');
      $query->fields('f', array('entity_id'))
        ->condition('f.field_' . $target_field_name . '_tid', $current_term->tid)
        ->condition('f.entity_type', 'node');
      $nids = $query->execute()->fetchAll(PDO::FETCH_COLUMN);

      if (!empty($nids)) {
        // Delete corresponding main tag from fields.
        gv_misc_fieldDelete($main_field_name, NULL, 'field_' . $main_field_name . '_tid', $main_term->tid, $nids);

        // Delete corresponding main tag from taxonomy_index.
        db_delete('taxonomy_index')
          ->condition('tid', $main_term->tid)
          ->condition('nid', $nids, 'IN')
          ->execute();
      }
    }

  }
  // Delete current deleting term from nodes' fields.
  gv_misc_fieldDelete($target_field_name, NULL, 'field_' . $target_field_name . '_tid', $current_term->tid);
  
  // Clear all caches.
  // Commented here, because used at function gv_pages_editTagsPage_formSubmit($form, &$form_state)
  //drupal_flush_all_caches();
}


/**
 * Saves or updates a field.
 */
function gv_misc_fieldDelete($field_name, $entity_id, $target_field_name = NULL, $target_field_id = NULL, $entity_ids = array()) {
  
  if (!$entity_id && $target_field_id) {
    if (empty($entity_ids)) {
      // Delete all nodes fields with set value field.
      db_delete('field_data_field_' . $field_name)
        ->condition($target_field_name, $target_field_id)
        ->execute();
      db_delete('field_revision_field_' . $field_name)
        ->condition($target_field_name, $target_field_id)
        ->execute();
    }
    else {
      // Delete only specific nodes fields with set value field.
      db_delete('field_data_field_' . $field_name)
        ->condition($target_field_name, $target_field_id)
        ->condition('entity_id', $entity_ids, 'IN')
        ->execute();
      db_delete('field_revision_field_' . $field_name)
        ->condition($target_field_name, $target_field_id)
        ->condition('entity_id', $entity_ids, 'IN')
        ->execute();
    }
      
  }
  else {
    db_delete('field_data_field_' . $field_name)
      ->condition('entity_id', $entity_id)
      ->execute();
    db_delete('field_revision_field_' . $field_name)
      ->condition('entity_id', $entity_id)
      ->execute();
  }
  
  
  field_cache_clear();
}


/**
 * Saves or updates a field.
 */
function gv_misc_fieldSave($field_name, $entity_id, $data, $entity_type = 'node', $bundle = NULL) {
  
  if(!$bundle) {
    $bundle = $entity_type;
  }
  
  $query = db_select('field_data_field_' . $field_name, 'f');
  $query->fields('f', array('field_' . $field_name . '_value'))
        ->condition('f.entity_id', $entity_id)
        ->condition('f.entity_type', $entity_type);
  $result = $query->execute(); //->fetchField();
  
  if ($result->rowCount()) {
    // Need update an existing field.
    db_update('field_data_field_' . $field_name)
      ->fields(array(
        //'entity_id' => $entity_id,
        //'delta' => 0,  
        //'revision_id'=> $entity_id,    
        'field_' . $field_name . '_value' => $data,
      ))
      ->condition('entity_id', $entity_id)
      ->condition('entity_type', $entity_type)
      ->execute();

    db_update('field_revision_field_' . $field_name)
      ->fields(array(
        //'entity_id' => $entity_id,
        //'delta' => 0,  
        //'revision_id'=> $entity_id,     
        'field_' . $field_name . '_value' => $data,
      ))
      ->condition('entity_id', $entity_id)
      ->condition('entity_type', $entity_type)
      ->execute();
  }
  else {
    // Need create a new field.
    db_insert('field_data_field_' . $field_name) 
      ->fields(array(
        'entity_type'=> $entity_type,
        'bundle'=> $bundle,
        'deleted'=> 0,                
        'entity_id' => $entity_id,
        'delta' => 0,  
        'revision_id'=> $entity_id,
        'language'=> 'und',  
        'field_' . $field_name . '_value' => $data,
      ))
      ->execute();

    db_insert('field_revision_field_' . $field_name)
      ->fields(array(
        'entity_type'=> $entity_type,
        'bundle'=> $bundle,
        'deleted'=> 0,                
        'entity_id' => $entity_id,
        'delta' => 0,  
        'revision_id'=> $entity_id,
        'language'=> 'und',  
        'field_' . $field_name . '_value' => $data,
      ))
      ->execute();
  }

  field_cache_clear();
}


/**
 * Prevent Enter button on Content_GetVoIP page while inline editing fields.
 */
function gv_misc_preventEnterOnEditField() {
  $path_to_custom_js = drupal_get_path('module', 'gv_misc') . '/js/';
  drupal_add_js($path_to_custom_js . 'gv_preventEnterOnEditField.js');
  
}


/**
 * Hook menu alter.
 *
 */
function gv_misc_menu_alter(&$items) {
  // Example - disable the page at node/add
  //$items['node/add']['access callback'] = FALSE;
  
  // Remove all Tagadelic urls.
  unset($items['tagadelic'], $items['tagadelic/list/%tagadelic_vocs'], $items['tagadelic/chunk/%tagadelic_vocs']);
  
  
   //unset($items['taxonomy/term/%taxonomy_term']);
  unset($items['taxonomy/term/%taxonomy_term/view']);
  unset($items['taxonomy/term/%taxonomy_term/feed']); // If you want to hide the feed as well.
  //unset($items['taxonomy/term/%views_arg']);
  
  /*
  global $user;
  if ($user->uid == 1) {
    $keys = array_keys($items);
    foreach($keys as $key) {
      if (strpos($key, 'taxonomy/term/') !== FALSE) {
        $keys2[] = $key;
      }
    }
    dpm($keys2);
    //exit();
  }
  */
  
}


/**
 * Set (if bigger then 12 hours period) and returns a last updated time stamp
 *
 */
function gv_misc_lastUpdatedStamp($min_hours = 24, $relative_path = NULL) {

  if (!$relative_path) {
    $relative_path = $_SERVER['REQUEST_URI'];
    if ($relative_path == '/home') {
      $relative_path = '/';
    }
  }
  
  $query = db_select('gv_last_updated', 'lu')
      ->fields('lu', array('timestamp'));
  $query->condition('lu.path', $relative_path);
  $last_updated = $query->execute()->fetchfield();
  
  $current_time = time();
  
  if (!$last_updated || ($current_time - $last_updated) > $min_hours * 3600 ) {
    // Update or insert new timestamp
    if ($last_updated) {
      $result = db_update('gv_last_updated')
        ->fields(array(
          'timestamp' => $current_time,
        ))
        ->condition('path', $relative_path)
        ->execute();
    }
    else {
      $result = db_insert('gv_last_updated')
        ->fields(array(
          'path' => $relative_path,
          'timestamp' => $current_time,
        ))
        ->execute();
    }
    return '<div class="ts">' . t('Last Updated: ') . date('F d, Y \a\t g:ia', $current_time) . '</div>';
  }
  else {
    return '<div class="ts">' . t('Last Updated: ') . date('F d, Y \a\t g:ia', $last_updated) . '</div>';
  }
}


/**
 * Get prefaces main section rendered.
 *
 */
function gv_misc_getPrefaceMainSection($key) {
  $node = gv_misc_getPrefaceByKey($key);
  $node->title_no_link = TRUE;
  $node_view = node_view($node, 'full');
  
  return render($node_view/*['body']*/);
}


/**
 * Get prefaces bottom section rendered.
 *
 */
function gv_misc_getPrefaceBottomSection($key) {
  $node = gv_misc_getPrefaceByKey($key);
  $node_view = node_view($node, 'full');

  return render($node_view['field_preface_bottom']);
}


/**
 * Renders metatags array with a new order of tags: description, keywords, the rest...
 *
 */
function gv_misc_getUserRealName($uid) {
  
  $query = db_select('realname', 'rn')
      ->fields('rn', array('realname'));
  $query->condition('rn.uid', $uid);
  $realname = $query->execute()->fetchfield();
  
  return $realname;
}


/**
 * Returns initial (landing) node for a given final request a quote page.
 */
function gv_misc_getInitialQuotePageNode($finalQuotePage_title) {
  
  $title = trim(str_replace(' Final', '', $finalQuotePage_title));
  $query = db_select('node', 'n')
      ->fields('n', array('nid'));
  $query->condition('n.title', $title);
  $query->condition('n.type', 'quote');
  $nid = $query->execute()->fetchfield();
  
  return node_load($nid);
}


/**
 * Renders metatags array with a new order of tags: description, keywords, the rest...
 *
 */
/*
function gv_misc_renderMetatags_newOrder(&$metatags) {
  
  echo render($metatags['description']);
  echo render($metatags['keywords']);
  // The rest...
  echo render($metatags);
}
*/


/**
 * Process variables for search-result.tpl.php.
 *
 * The $variables array contains the following arguments:
 * - $result
 * - $module
 *
 * @see search-result.tpl.php
 */
function gv_misc_preprocess_search_result(&$variables) {
  
  // Original code.
  /*
  global $language;
  
  $result = $variables['result'];
  $variables['url'] = check_url($result['link']);
  $variables['title'] = check_plain($result['title']);
  if (isset($result['language']) && $result['language'] != $language->language && $result['language'] != LANGUAGE_NONE) {
    $variables['title_attributes_array']['xml:lang'] = $result['language'];
    $variables['content_attributes_array']['xml:lang'] = $result['language'];
  }

  $info = array();
  if (!empty($result['module'])) {
    $info['module'] = check_plain($result['module']);
  }
  if (!empty($result['user'])) {
    $info['user'] = $result['user'];
  }
  if (!empty($result['date'])) {
    //$info['date'] = format_date($result['date'], 'short');
    // a4s changes
    //$info['date'] = date('F d, Y \a\t g:ia', $result['date']);
    //$info['date'] = date('F d, Y \a\t g:ia', $result['node']->created);
  }
  if (isset($result['extra']) && is_array($result['extra'])) {
    $info = array_merge($info, $result['extra']);
  }
  // Check for existence. User search does not include snippets.
  $variables['snippet'] = isset($result['snippet']) ? $result['snippet'] : '';
  // Provide separated and grouped meta information..
  $variables['info_split'] = $info;
  $variables['info'] = implode(' - ', $info);
  $variables['theme_hook_suggestions'][] = 'search_result__' . $variables['module'];
  */
  
  
  // a4s changes
  $result = $variables['result'];
  if (!empty($result['date'])) {
    $info = array();
    //$info['date'] = format_date($result['date'], 'short');
    //$info['date'] = date('F d, Y \a\t g:ia', $result['date']);
    $info['date'] = date('F d, Y \a\t g:ia', $result['node']->created);
    
    if (isset($result['extra']) && is_array($result['extra'])) {
      $info = array_merge($info, $result['extra']);
    }
    $variables['info_split'] = $info;
    $variables['info'] = implode(' - ', $info);
  }
}



/**
 * Implements hook_ranking() for Search ranking.
 */
function gv_misc_ranking() {
 // Add relevance based on creation or changed date.
  if ($node_cron_last = variable_get('node_cron_last', 0)) {
    $ranking['recent_created'] = array(
      'title' => t('Recently posted (created)'),
      // Exponential decay with half-life of 6 months, starting at last indexed node
      'score' => 'POW(2.0, (n.created - :node_cron_last) * 6.43e-8)',
      'arguments' => array(':node_cron_last' => $node_cron_last),
    );
  }
  return $ranking;
}


/**
 * Push field tags (topics) to metatags in the Head.
 */
function gv_misc_pushTagsToMetatags($name, $value, $weight = 'NA') {
  switch ($name) {
    case 'keywords':
    case 'news_keywords':
      $t = '';
      $tags = element_children($value);
      foreach ($tags as $tag) {
        $t .= $t ? ', ' . $value[$tag]['#title'] : $value[$tag]['#title'];
      }
      if ($t) {
        gv_misc_addMetatag($name, $t, NULL, $weight);
      }
      break;
  }
}


/**
 * Allow modules to define namespaces for RDF mappings.
 *
 * Many common namespace prefixes are defined in rdf_rdf_namespaces(). However,
 * if a module implements hook_rdf_mapping() and uses a prefix that is not
 * defined in rdf_rdf_namespaces(), this hook should be used to define the new
 * namespace prefix.
 *
 * @return
 *   An associative array of namespaces where the key is the namespace prefix
 *   and the value is the namespace URI.
 *
 * @ingroup rdf
 */
// a4s Seems it didn't work out...
function gv_misc_rdf_namespaces() {
  return array(
    'xmlns:addthis'  => 'http://www.addthis.com/help/api-spec',
    'xmlns:g'  => 'http://base.google.com/ns/1.0',
  );
}


/**
 * Implements hook_TYPE_alter().
 * 
 * Specifically hook_html_head_alter().
 */
function gv_misc_html_head_alter(&$object) {
  //dpm($object);
  if (isset($object['rdf_node_comment_count'])) {
    unset($object['rdf_node_comment_count']['#attributes']['datatype']);
  }
}


/**
 * Implements hook_views_api().
 *
 * @return array
 *   Views api definition.
 */
function gv_misc_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'gv_misc') . '/inc',
  );
} 


/**
 * Form with a fieldset of Add content section for Admin Content GetVoIP page (by Views).
 */
function gv_misc_AddContentSection_form() {
  
  global $user;
  
  $types = node_type_get_types();
  
  // Hide some content tupes if not a root.
  if ($user->uid != 1) {
    unset($types['admin_page'], $types['preface'], $types['quote'], $types['webform']);
  }
  
  $options = array('' => '- Select a content type -');
  foreach ($types as $type => $value) {
    $options[str_replace('_', '-', $type)] = $value->name;
  }
  
  $form['add_content'] = array(
    '#type' => 'fieldset',
    '#title' => t('Add a new content'),
    '#collapsible' => TRUE,
  );
  $form['add_content']['select_type'] = array(
    '#type' => 'select',
    //'#title' => 'Select content type',
    '#options' => $options,
    '#attributes' => array('id' => 'select_type',  'onChange' => "top.location.href='http://getvoip.com/node/add/" . "' + document.getElementById('select_type').options[document.getElementById('select_type').selectedIndex].value"),
  );
  
  return $form;
}


/**
 * Get a picture from a remote server.
 */
function gv_misc_curl_file_from_remote_site_likeBrowser($url, $file_local_abs)
{
	
    $curl = curl_init();

    // Setup headers - I used the same headers from Firefox version 2.0.0.6
    // below was split up because php.net said the line was too long. :/
    $header[0] = "Accept: text/xml,application/xml,application/xhtml+xml,";
    $header[0] .= "text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5";
    $header[] = "Cache-Control: max-age=0";
    $header[] = "Connection: keep-alive";
    $header[] = "Keep-Alive: 300";
    $header[] = "Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7";
    $header[] = "Accept-Language: en-us,en;q=0.5";
    $header[] = "Pragma: ";
    // browsers keep this blank.

    $referers = array("google.com", "yahoo.com", "msn.com", "ask.com", "live.com");
    $choice = array_rand($referers);
  	//if ($referer == "") 
    $referer = "http://www." . $referers[$choice] . "/";

    //$browsers = array("Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.3) Gecko/2008092510 Ubuntu/8.04 (hardy) Firefox/3.0.3", "Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1) Gecko/20060918 Firefox/2.0", "Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US; rv:1.9.0.3) Gecko/2008092417 Firefox/3.0.3", "Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; SLCC1; .NET CLR 2.0.50727; Media Center PC 5.0; .NET CLR 3.0.04506)");
    //$choice2 = array_rand($browsers);
    //$lines = file('/home/xxx/public_html/sites/all/modules/xxx/ua.txt');
    //$browser = trim($lines[$agentid]);

    curl_setopt($curl, CURLOPT_URL, $url);
    //curl_setopt($curl, CURLOPT_USERAGENT, $browser);
    curl_setopt($curl, CURLOPT_HTTPHEADER, $header);
    curl_setopt($curl, CURLOPT_REFERER, $referer);
    //curl_setopt($curl, CURLOPT_AUTOREFERER, true);
    curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($curl, CURLOPT_TIMEOUT, 300);
    curl_setopt($curl, CURLOPT_MAXREDIRS, 7);
    curl_setopt($curl, CURLOPT_FOLLOWLOCATION, true);

    $data = curl_exec($curl);

    if ($data === false) {
      $data = curl_error($curl);
      // close the connection
      curl_close($curl);
      return $data;
    }

    // close the connection
    curl_close($curl);

    // write content to a file
    file_put_contents($file_local_abs, $data);

    return null; //OK
}


/**
 * Return trimmed teaser with right size (cleared from images) and with separated a styled image, cutted off from the body.
 */
function gv_misc_getArticleTeaserData($target, $body_full_markup, $nid, $characters_num = NULL, $only_teaser = FALSE) {
 
  $main_image = NULL;
  $main_image_html = NULL;
  $side_block_image_html = NULL;
  $home_teaser_image_html = NULL;
  $matches = NULL;
  $found_image = NULL;
  
  if (preg_match('/<img[^>]+>/i', $body_full_markup, $matches)) {
    $found_image = TRUE;
    preg_match_all('/(alt|title|src)="([^"]*)"/i',$matches[0], $matches);
    foreach ($matches[1] as $index => $key) {
      $main_image[$key] = $matches[2][$index];
    }
    $body_full_markup = preg_replace('/<img[^>]+>/i', '', $body_full_markup);
  }
  elseif (preg_match('/\[video:.*v=(.*)\]/i', $body_full_markup, $matches)) {
    // [video: https://www.youtube.com/watch?v=H1vdPJzzzAY]
    $video_id = $matches[1];
    if($main_image['src'] = gv_misc_getYoutubeVideoThumb($video_id)) {
      $found_image = TRUE;
    }
    $body_full_markup = preg_replace('|\[video:.*(http.*)\]|', '<a href="$1"> [Watch a video] </a>', $body_full_markup);
  }
  
  
  if ($found_image) {

    $main_image['src'] = urldecode($main_image['src']); //str_replace('%20', ' ', $main_image['src']);
    $stream_path = gv_misc_getStreamUriFromRelativePath($main_image['src']);
    $main_image['uri'] = $stream_path;
    
    $image_size = getimagesize(ltrim($main_image['src'], '/'));

    // Scale and cut.
    /*
    if ($image_size[0] / $image_size[1] > 1.5) {
      $main_image_html = theme('image_style', array( 'path' => $stream_path, 'style_name' => 'article_thumbnail_h'));
    }
    else {
      $main_image_html = theme('image_style', array( 'path' => $stream_path, 'style_name' => 'article_thumbnail_v'));
    }
    */
    // Scale only.
    if ($image_size[0] / $image_size[1] > 1) {
      $style_name = 'article_thumbnail_h';
      ////$main_image_html = theme('image_style', array( 'path' => $stream_path, 'style_name' => $style_name));
      //$main_image['src_themed'] = image_style_url($style_name, $stream_path);
    }
    else {
      $style_name = 'article_thumbnail_v';
      ////$main_image_html = theme('image_style', array( 'path' => $stream_path, 'style_name' => $style_name));
      //$main_image['src_themed'] = image_style_url($style_name, $stream_path);
    }
    
    $main_image_html = theme('image_style', array( 'path' => $stream_path, 'style_name' => $style_name));
    $main_image_html = '<div class="thumb">' . $main_image_html . '</div>';
    
    $side_block_image_html = theme('image_style', array( 'path' => $stream_path, 'style_name' => 'article_thumbnail_side_block'));
    $side_block_image_html = '<div class="thumb">' . $side_block_image_html . '</div>';
    
    $home_teaser_image_html = theme('image_style', array( 'path' => $stream_path, 'style_name' => 'article_thumbnail_home_teaser'));
    $home_teaser_image_html = '<div class="thumb">' . $home_teaser_image_html . '</div>';
  
    
    // Image for sharing.
    if ($image_size[0] / $image_size[1] > 1) {
      // Too wide. will not be cutted.
      $style_name_share = 'share_wide';
      //$main_image['src_themed'] = image_style_url('share_wide', $stream_path);
    }
    elseif ($image_size[1] / $image_size[0] < 1) {
      // Too tall. will not be cutted.
      $style_name_share = 'share_tall';
      //$main_image['src_themed'] = image_style_url('share_tall', $stream_path);
    }
    else {
      //Normal image, will not be cutted.
      $style_name_share = 'share';
      //$main_image['src_themed'] = image_style_url('share', $stream_path);
    }
    $main_image['src_themed'] = image_style_url($style_name_share, $stream_path);
    
    
    //$main_image_html = theme('image_style', array( 'path' => $stream_path, 'style_name' => 'article_thumbnail'));
    
    // Clear existing image_cached files.
    $default_file_path = variable_get('file_' . file_default_scheme() . '_path', conf_path() . '/files');
    $styles_to_delete = array($style_name, $style_name_share, 'block_thumb');
    foreach ($styles_to_delete as $style_to_delete) {
      $to_delete = str_replace($default_file_path, $default_file_path . '/styles/' . $style_to_delete . '/public' , $main_image['src']);
      if (file_exists($to_delete)) {
        unlink($to_delete);
      } 
    }
      
    
  } // End of if ($found_image) {

  $teaser = strip_tags($body_full_markup);
  
  
  if (!$characters_num) {
    /*
    if ($main_image_html) {
      $characters_num = 130;
    }
    else {
      $characters_num = 250;
    }
    */
    $characters_num = 450;
  }
  
  
  $teaser_block_chars = 200;
  $teaser_block = trim(drupal_substr($teaser, 0, $teaser_block_chars));// . '...';
  $last_pos = strrpos($teaser_block, ' ');
  $teaser_block = substr_replace ($teaser_block, '...', $last_pos);
  
  $teaser_home_chars = 200;
  $teaser_home = trim(drupal_substr($teaser, 0, $teaser_home_chars));// . '...';
  $last_pos = strrpos($teaser_home, ' ');
  $teaser_home = substr_replace ($teaser_home, '...', $last_pos);
  
//  if ($found_image) {
//    $teaser_side_block_chars = 75;
//  }
//  else 
  {
    $teaser_side_block_chars = 145; //85;
  }
  $teaser_side_block = trim(drupal_substr($teaser, 0, $teaser_side_block_chars));
  $last_pos = strrpos($teaser_side_block, ' ');
  //$teaser_side_block = '<div class="teaser-content">' . substr_replace ($teaser_side_block, '...' . l('Read more', 'node/' . $nid, array('attributes' => array('class' => array('more')))), $last_pos) . '</div>';
  $teaser_side_block = '<div class="teaser-content">' . substr_replace ($teaser_side_block, '...', $last_pos) . '</div>';
  
  
  // $teaser = text_summary($body_full_markup, 'full_html', $characters_num);
  $teaser = trim(drupal_substr($teaser, 0, $characters_num));
  
  
  // Replace the last word with ...
  // preg_match('/^.*\s(.*)$/i', trim(strip_tags($teaser)), $matches);
  // $last_pos = strrpos($teaser, $matches[1]);
  $last_pos = strrpos($teaser, ' ');
  
  // $teaser = substr_replace ($teaser, '...' . l(t('Read More'), 'node/' . $nid, array('attributes' => array('class' => array('more')))) , $last_pos, strlen($matches[1]));
  $teaser = substr_replace ($teaser, '... ' . l(t('Read More'), 'node/' . $nid, array('attributes' => array('class' => array('more')))), $last_pos);

  if ($only_teaser) {
    return $main_image_html . $teaser;
  }
  else {
    return array('teaser_only' => $teaser, 'teaser_side_block' => $teaser_side_block, 'teaser' => $main_image_html . $teaser, 'teaser_block' => $teaser_block, 'teaser_home' => $main_image_html . $teaser_home, 'main_image' => $main_image,  'teaser_main_image' => $main_image_html, 'main_image_html' => $main_image_html, 'side_block_main_image' => $side_block_image_html, 'home_teaser_image' => $home_teaser_image_html);
  }
  
}


/**
 * Rewrite links like /sites/default/files/pdfs/ to alias /pdfs/ (forward) and vise versa and others.
 */
function gv_misc_rewriteLinks($type, $data, $direction = 'forward') {
  switch ($type) {
    case 'pdfs':
      if ($direction == 'forward') {
        // Converts from /sites/default/files/pdfs/ to /pdfs/
        // the real path will be accessible with .htaccess mod_rewrite settings in the root of the site.

        // $body = $form_state['values']['body'];
        $body = $data['values']['body'];
        $count1 = $count2 = 0;
        if ($body['und'][0]['value']) {
          $body['und'][0]['value'] = preg_replace('|"/sites/default/files/pdfs|', '"/pdfs', $body['und'][0]['value'], -1, $count1);
        }
        if ($body['und'][0]['summary']) {
          $body['und'][0]['summary'] = preg_replace('|/sites/default/files/pdfs|', '"/pdfs', $body['und'][0]['summary'], -1, $count2);
        }
        if ($count1 + $count2 > 0) {
          return $body;
        }
      }
      else {
        // Converts from /pdfs/ to /sites/default/files/pdfs/

        // $body = $form['body']
        $body = $data['body'];
        if ($body['und'][0]['#default_value']) {
          $body['und'][0]['#default_value'] = preg_replace('|"/pdfs|', '"/sites/default/files/pdfs', $body['und'][0]['#default_value'], -1);
        }
        if ($body['und'][0]['summary']['#default_value']) {
          $body['und'][0]['summary']['#default_value'] = preg_replace('|"/pdfs|', '"/sites/default/files/pdfs', $body['und'][0]['summary']['#default_value'], -1);
        }
        return $body;
      }
      break;
  }
  return NULL;
}


/**
 * Convert path from Drupal stream uri.
 */
function gv_misc_getPathFromStreamUri($uri) {
  $file_default_scheme = file_default_scheme();
  $default_file_path = variable_get('file_' . $file_default_scheme . '_path', conf_path() . '/files');
  
  return $default_file_path . str_replace($file_default_scheme . ':/', '', $uri);
}


/**
 * Convert a relative or absolute path to Drupal stream uri.
 */
function gv_misc_getStreamUriFromRelativePath($path) {
  $file_default_scheme = file_default_scheme();
  $default_file_path = variable_get('file_' . $file_default_scheme . '_path', conf_path() . '/files');

  $stream_path = str_replace('http://getvoip.com', '', $path);
  $stream_path = ltrim($stream_path, '/');
  return $file_default_scheme . '://' . str_replace($default_file_path . '/', '', $stream_path);
}


/**
 * Adds js to a page for making all images zoomable.
 */
function gv_misc_addZoomableImagesJs() {
  //1, 3, 4, 
  drupal_add_js('sites/all/libraries/jquery.plugins/colorbox/colorbox/jquery.colorbox.js');
  drupal_add_css('sites/all/libraries/jquery.plugins/colorbox/example1/colorbox.css', array('preprocess' => FALSE)); // array('group' => CSS_THEME, 'preprocess' => FALSE)

  $path_to_module = drupal_get_path('module', 'gv_misc');
  drupal_add_js($path_to_module . '/js/gv_makeImagesZoomable.js');
}


/**
 * Helper function to add metatag to a current page.
 */
function gv_misc_addMetatag($name, $content, $href = NULL, $weight = 'NA', $attr_type = NULL) {
  if ($content) {
    if ($name == 'title') {
      //dpm($content);
      //$content = str_replace('| GetVoIP', '', $content);
      drupal_set_title($content);
    }
    else {
      $meta = array(
        '#type' => 'html_tag',
        '#tag' => 'meta',
        '#attributes' => array(
            'name' => $name,
            'content' => $content,
        )
      );
      if ($weight != 'NA') {
        $meta['#weight'] = $weight;
      }
      drupal_add_html_head($meta, $name);
    }
  } // End of if ($content) {
  elseif($href) {
    $meta = array(
      '#tag' => 'link',
      '#attributes' => array(
          'rel' => $name,
          'href' => $href,
      )
    );
    if ($attr_type) {
      $meta['#attributes']['type'] = $attr_type;
    }
    if ($weight != 'NA') {
      $meta['#weight'] = $weight;
    }
    drupal_add_html_head($meta, $name);
  } // End of elseif($href) {
}


/**
 * Get the title metatag for the front page from the Metatag module's settings.
 */
function gv_misc_metatag_getFrontTitle() {
  $metatags = metatag_metatags_view('global:frontpage', array());
  return $metatags['title']['#attached']['metatag_set_preprocess_variable'][0][2];
}


/**
 * Helper function to add sharing data (metatags and links) to a current page.
 */
function gv_misc_addSocialShareData_toPage($node) {
  
  global $schema_org_type;
  $image = NULL;
  $og_type = NULL;
  $title = NULL;
  $description = NULL;
  $tags = array();
  
  //$title = $node->title;
  if (@$node->field_preface_key['und'][0]['value'] == 'front') {
    
    $title = gv_misc_metatag_getFrontTitle();
    
    $tags = array(
      
      // Add all rss feeds to the home page (exceot the main rss, which will be added to all pages).
      'articles_rss' => array(
        '#tag' => 'link', 
        '#attributes' => array( 
            'rel' => 'alternate',
            'type' => 'application/rss+xml',
            'title' => 'VoIP Library articles from GetVoIP.com',
            'href' => 'http://getvoip.com/about-voip-services/rss.xml',
        ),
      ),
      'blog_rss' => array(
        '#tag' => 'link', 
        '#attributes' => array( 
            'rel' => 'alternate',
            'type' => 'application/rss+xml',
            'title' => 'GetVoIP.com Blog',
            'href' => 'http://getvoip.com/blog/rss.xml',
        ),
      ),
      'news_rss' => array(
        '#tag' => 'link', 
        '#attributes' => array( 
            'rel' => 'alternate',
            'type' => 'application/rss+xml',
            'title' => 'GetVoIP.com News',
            'href' => 'http://getvoip.com/news/rss.xml',
        ),
      ),
        
        
    );
    
  }
  if (!$title) {
    if (isset($node->metatags['title']['value']) && $node->metatags['title']['value']) {
      $title = $node->metatags['title']['value'];
    }
    else {
      $title = $node->title;
      
      //Set the right title metatag for the page if it's not defined.
      if (isset($node->metatags['title']['value'])) {

          $global_metatags_config = metatag_config_load('node:' . $node->type);
          // Use the upper level config if it's not defined for a specific content type.
          if (!$global_metatags_config || empty($global_metatags_config->config['title']['value'])) {
            $global_metatags_config = metatag_config_load('node');
          }
          
          if (!empty($global_metatags_config->config['title']['value'])) {
            global $language;
            global $altered_head_title;
            $altered_head_title = token_replace($global_metatags_config->config['title']['value'], array('node' => $node), array('language' => $language, 'sanitize' => FALSE));
            gv_misc_addMetatag('title', $altered_head_title);
          }

      }
      
      
    }
  }

  
  
  switch ($node->type) {
    case 'blog_post':
    case 'news_post':
    case 'article':
      if (isset($node->field_main_image['und'][0]['value']) && $node->field_main_image['und'][0]['value']) {
        $image = unserialize($node->field_main_image['und'][0]['value']);
        if (isset($image['src_themed']) && $image['src_themed']) {
          $image = $image['src_themed'];
        }
        elseif (isset($image['src']) && $image['src']) {
          $image = $image['src'];
        }
        else {
          $image = NULL;
        }
      }
    
      /*
      if (!@$node->metatags['description']['value']) {
        $description = $title . '...';
      }
      */
      
      $og_type = 'article';
      $schema_org_type = 'Article';
      
      break;
    
      
      
    case 'provider':
      
      $p_data = unserialize($node->field_p_data['und'][0]['value']);
      if (isset($p_data['share_src_themed']) && $p_data['share_src_themed']) {
        $image = $p_data['share_src_themed'];
      }
      elseif(isset($node->field_p_logo['und'][0]['uri']) && $node->field_p_logo['und'][0]['uri']) {
        $image = gv_misc_getPathFromStreamUri($node->field_p_logo['und'][0]['uri']);
      }
      
      $og_type = 'company';
      $schema_org_type = 'LocalBusiness';
      break;
      
      
    case 'phone':
      
      $extra_data = unserialize($node->field_extra_data['und'][0]['value']);
      if (isset($extra_data['share_src_themed']) && $extra_data['share_src_themed']) {
        $image = $extra_data['share_src_themed'];
      }
      elseif(isset($node->field_p_image['und'][0]['uri']) && $node->field_p_image['und'][0]['uri']) {
        $image = gv_misc_getPathFromStreamUri($node->field_p_image['und'][0]['uri']);
      }
      
      $og_type = 'product';
      $schema_org_type = 'Product';
      break;
      
      
    case 'review':
      global $review_share_src_themed;
      if ($review_share_src_themed) {
        $image = $review_share_src_themed;
      }
      $og_type = 'company';
      $schema_org_type = 'Review';
      // Refresh a title a bit.
      $title = $node->field_r_provider_name['und'][0]['value'] . ' Review - ' . $node->title;
      break;
      
    
    case 'phone_review':
      global $review_share_src_themed;
      if ($review_share_src_themed) {
        $image = $review_share_src_themed;
      }
      $og_type = 'product';
      $schema_org_type = 'Review';
      // Refresh a title a bit.
      $title = $node->field_p_name['und'][0]['value'] . ' Review - ' . $node->title;
      break;
 
    
  }
  
  //$title = str_replace('[site:name]', 'GetVoIP.com', $title);
  $title = token_replace($title);
  
  
  if (!$image){
    // Show default image - the logo.
    //$image = '/sites/all/themes/gv_orange/css/images/getvoip-logo.png';
    $image = '/sites/all/themes/gv_orange/css/images/getvoip-logo4-t.png';
  }

  if (!strpos($image, '//getvoip.com')) {
    $image = 'http://getvoip.com/' . ltrim($image, '/');
  }

  $tags += array(
       /*
      'title' => array(
          '#tag' => 'meta',
          '#attributes' => array(
              'name' => 'title',
              'content' => "Video '" . $node->title . "' by " . $publisher_title,
          ),
      ),
      'DC.title' => array(
          '#tag' => 'meta',
          '#attributes' => array(
              'name' => 'DC.title',
              'content' => $node->title,
          ),
      ),
      'description' => array(
          '#tag' => 'meta',
          '#attributes' => array(
              'name' => 'description',
              'content' => (isset($node->body['und'][0]['summary']) AND $node->body['und'][0]['summary'])?$node->body['und'][0]['summary']:drupal_substr(strip_tags($node->body['und'][0]['value']), 0, 200) . '...',
          ),
      ),
      'author' => array(
          '#tag' => 'meta',
          '#attributes' => array(
              'name' => 'author',
              'content' => $publisher_title,
          ),
      ),



      'medium' => array(
          '#tag' => 'meta',
          '#attributes' => array(
              'name' => 'medium',
              'content' => 'video',
          ),
      ),

      'video_type' => array(
          '#tag' => 'meta',
          '#attributes' => array(
              'name' => 'video_type',
              'content' => 'application/x-shockwave-flash',
          ),
      ),

      'video_height' => array(
          '#tag' => 'meta',
          '#attributes' => array(
              'name' => 'video_height',
              'content' => '300',
          ),
      ),

      'video_width' => array(
          '#tag' => 'meta',
          '#attributes' => array(
              'name' => 'video_height',
              'content' => '500',
          ),
      ),


      'video_src' => array(
          '#tag' => 'link', // The #tag is the html tag - <link />
          '#attributes' => array( 
              'href' => 'http://ripplin.com/sites/all/libraries/flowplayer/flowplayer-3.2.8.swf?config=' . urlencode('http://ripplin.com/video-src?v=' . $node->nid),
              'rel' => 'video_src',
          ),
      ),
      */
  
    'fb:admins' => array(
      '#type' => 'html_tag',
      '#tag' => 'meta',
      '#attributes' => array(
          'property' => 'fb:admins',
          'content' => 'http://www.facebook.com/getvoipservice',
      ),
    ),

    // Title for Facebook.
    'og:title' => array(
      '#type' => 'html_tag',
      '#tag' => 'meta',
      '#attributes' => array(
          'property' => 'og:title',
          'content' => $title,
      ),
    ),
      
    // Title for G+.
    'name' => array(
      '#type' => 'html_tag',
      '#tag' => 'meta',
      '#attributes' => array(
          'itemprop' => 'name',
          'content' => $title,
      ),
    ),
      
    'image_src' => array(
      '#tag' => 'link', // The #tag is the html tag - <link />
      '#attributes' => array( 
          'href' => $image,
          'rel' => 'image_src',
          //'type' => 'text/css',
      ),
    ),
  
    // For Facebook.
    'og:image' => array(
      '#type' => 'html_tag',
      '#tag' => 'meta',
      '#attributes' => array(
          'property' => 'og:image',
          'content' => $image,
      ),
    ),
      
    // For G+.  
    'image' => array(
      '#type' => 'html_tag',
      '#tag' => 'meta',
      '#attributes' => array(
          'itemprop' => 'image',
          'content' => $image,
      ),
    ),
      
      
      
    // Add main rss feed to every page.
    'main_rss' => array(
      '#tag' => 'link', 
      '#attributes' => array( 
          'rel' => 'alternate',
          'type' => 'application/rss+xml',
          'title' => 'Latest Articles from GetVoIP.com',
          'href' => 'http://getvoip.com/rss.xml',
      ),
    ),
      
  );

  /*  
  if ($description) {
    
    $tags['description'] = array(
          '#tag' => 'meta',
          '#attributes' => array(
              'name' => 'description',
              'content' => $description,
          ),
      );
  }
  */
  
  if ($og_type) {
   
    $tags['og:type'] = array(
        '#type' => 'html_tag',
        '#tag' => 'meta',
        '#attributes' => array(
            'property' => 'og:type',
            'content' => $og_type,
        ),
    );
  }
  
  
        
  foreach ($tags as $key => $val)
      drupal_add_html_head($val, $key);
        
}


/**
 * Get img src for Share from Uri.
 */
function gv_misc_getShareSrcThemed_fromUri($uri) {
  
  // Define share pic.
  $image_size = getimagesize(ltrim(gv_misc_getPathFromStreamUri($uri), '/'));
  // Image for sharing.
  if ($image_size[0] / $image_size[1] > 1) {
    // Too wide. will not be cutted.
    $out = image_style_url('share_wide', $uri);
  }
  elseif ($image_size[1] / $image_size[0] < 1) {
    // Too tall. will not be cutted.
    $out = image_style_url('share_tall', $uri);
  }
  else {
    //Normal image, will not be cutted.
    $out = image_style_url('share', $uri);
  }
  
  return $out;
}



/**
 * Returns recommendations counts for pos and neg.
 */
function gv_misc_getVotesRecommendPosVsNeg($nid) {
  
    $query = db_select('votingapi_vote', 'v')
      ->fields('v', array('value'));
    $query->condition('entity_id', $nid);
    $query->condition('value_type', 'percent');
    $query->condition('tag', 'recommend');
    
    $results = $query->execute()->fetchCol();

    $recommend = array('positive' => 0, 'negative' => 0);
    foreach ($results as $result) {
      if ($result) {
        $recommend['positive'] += 1;
      }
      else {
        $recommend['negative'] += 1;
      }
    }
        
    return $recommend;
}


/**
 * Returns votes ids for a specific criteria.
 */
function gv_misc_getVotesIDs($criteria) {
    $query = db_select('votingapi_vote', 'v')
      ->fields('v', array('vote_id', 'tag', 'value'));
    foreach ($criteria as $field => $value) {
      $query->condition($field, $value);
    }
    $results = $query->execute()->fetchAllAssoc('vote_id');
    $votes = array();
    foreach ($results as $result) {
      //$votes[] = array('vote_id' => $result->vote_id);
      $votes[] = (array) $result;
    }
    return $votes;
}


/**
 * Helper function to for administer menu.
 */
function gv_misc_gotoReviewsToApprove() {
  drupal_goto('admin/content/approve-reviews');
}


/**
 * Helper function to for administer menu.
 */
function gv_misc_gotoPhoneReviewsToApprove() {
  drupal_goto('admin/content/approve-phone-reviews');
}


/**
 * Approve content by type and nid.
 */
function gv_misc_approveContent($type, $id) {

  switch ($type) {
    
    case 'review':
      
      global $user;
      if (!in_array('administrator', $user->roles)) {
        drupal_access_denied();
        return;
      }
      /*
      if (!$id || !$node = node_load($id)) {
        return t('Wrong Review Id');
      }
      $node->field_r_notapproved['und'][0]['value'] = 0;
      $node->status = 1;
      node_save($node);
      drupal_set_message('The review ' . l($node->title, 'node/' . $node->nid) . ' is now approved and published.');
      drupal_goto();
      */
      break;
    
    case 'email':
      
      $approve = explode('=', $id);
      if(count($approve) != 2 ) {
        drupal_access_denied();
        return;
      }
      $code = $approve[0];
      $email = $approve[1];
      
      $query = db_select('field_data_field_r_email', 're')
        ->fields('re', array('entity_id'));
      $query->condition('field_r_email_value', $email);
      //$review_nid = $query->execute()->fetchField();
      $results = $query->execute();
      
      //$found_nid = FALSE;
      $error = FALSE;
      foreach ($results as $result) {
        $found_nid = TRUE;
        $review_nid = $result->entity_id;
        
        $query = db_select('node', 'n')
          ->fields('n', array('uid'))
          ->fields('ac', array('field_r_approvecode_value'));
        $query->condition('nid', $review_nid);
        $query->leftJoin('field_data_field_r_approvecode', 'ac', 'ac.entity_id = n.nid');
        $review = $query->execute()->fetchObject();
        
        if ($review->uid) {
            // Wrong request because it's a registered user's email.
            $error = t('Wrong request.');
        }
        elseif (!$review->field_r_approvecode_value) {
          $error = t('This email is already approved.');
        }
        elseif ($review->field_r_approvecode_value != $code) {
          $error = t('Wrong verification code!');
        }
        else {
          $error = FALSE;
          break;
        }
      }
      
      if ($error) {
        // Error.
        return $error;
      }
      
      // We are ready to approve the email now.
      
      //$review = node_load($review_nid);
      //$review->field_r_approvecode['und'][0]['value'] = '';
      //node_save($review);
      
      gv_misc_fieldSave('r_approvecode', $review_nid, '');
      
      return t('Thank you! Your email has been successfully verified! After approving by our administrators, your review will be published on our site.');
  }
  
  drupal_access_denied();
}


/**
 * Implements hook_url_inbound_alter().
 */
function gv_misc_url_inbound_alter(&$path, $original_path, $path_language) {
//Create the path /contact-us from /contact
//if (preg_match('|^contact-us$|', $path, $matches)) {
//  $path = 'contact';
//}
//else
  if ($path == 'voip-provider-submit-user-review') {
    $path = 'node/add/review';
  }
  elseif ($path == 'voip-phone-submit-user-review') {
    $path = 'node/add/phone-review';
  }
//  elseif (preg_match('|^pdfs\/(.*)|', $path, $matches)) {
//    //$path = 'pdfs/voipe911-advisory.pdf';
//    $path = 'sites/default/files/pdfs/' . $matches[1];
//    //$path = '';
//  }
}


/**
 * Implements hook_url_outbound_alter().
 */
function gv_misc_url_outbound_alter(&$path, &$options, $original_path) {
  // Create the path /contact-us from /contact
//  if (preg_match('|^contact$|', $path, $matches)) {
//    $path = 'contact-us';
//  }
//  else

  
  //if (!empty($options['attributes']['rel'])) 
//  global $user;
//  if ($path == 'http://click.websitegear.com/track/1883449')
//  {
//    //$options['attributes']['rel'] = 'nofollow';
//    //dpm($path);
//    //dpm($options);
//    //unset($options['attributes']['rel']);
//    $options['attributes']['rel'] = 'yyy';
//    //$options['attributes']['target'] = '_parent';
//    $options['fragment'] = 'zzz';
//    //dpm($options);
//  }
  
  if ($path == 'node/add/review') {
    $path = 'voip-provider-submit-user-review';
  }
  elseif ($path == 'node/add/phone-review') {
    $path = 'voip-phone-submit-user-review';
  }
  elseif (preg_match('|^sites\/default\/files\/pdfs\/(.*)|', $path, $matches)) {
    //$path = 'sites/default/files/pdfs/voipe911-advisory.pdf';
    $path = 'pdfs/' . $matches[1];
  }
}


/**
 * Loads jquery plugin Colorbox to open videos in popup windows
 */
function gv_misc_loadColorboxForVideoLinks($type = 'YouTube Direct Link') {
  switch ($type) {
    case 'YouTube Direct Link':
        // for links with a class "yt-direct" like <a class="yt-direct" href="http://www.youtube.com/embed/9fWAFw4iSrg?rel=0&amp;wmode=transparent" title="Fonality HUD - Full Demo">Fonality HUD - Full Demo</a>
        
        drupal_add_js('sites/all/libraries/jquery.plugins/colorbox/colorbox/jquery.colorbox-min.js');
        //drupal_add_js('sites/all/libraries/jquery.plugins/colorbox/colorbox/jquery.colorbox.js');
        
        drupal_add_css('sites/all/libraries/jquery.plugins/colorbox/example1/colorbox.css');
        $path_to_custom_js = drupal_get_path('module', 'gv_misc') . '/js/';
        drupal_add_js($path_to_custom_js . 'gv_colorbox_p_video.js');
        break;
  }
}



/**
 * Loads jquery plugin Colorbox to open sharing links in popup windows.
 */
function gv_misc_loadPopupForShareLinks() {

  drupal_add_js('sites/all/libraries/jquery.plugins/colorbox/colorbox/jquery.colorbox-min.js');
  //drupal_add_js('sites/all/libraries/jquery.plugins/colorbox/colorbox/jquery.colorbox.js');

  drupal_add_css('sites/all/libraries/jquery.plugins/colorbox/example1/colorbox.css');
  
  $path_to_custom_js = drupal_get_path('module', 'gv_misc') . '/js/';
  drupal_add_js($path_to_custom_js . 'gv_popup_share_links.js');
}


/**
 * Implements on the fly capturing of a users' data before they have submit requests.
 * 
 * Returns nothing.
 */
function gv_misc_makeRequestCapture_ajax() {
  $status = TRUE;
  $output = '';
  
  $post = array();
  foreach ($_POST as $key => $value) {
    $post[$key] = check_plain(strip_tags($value));
  }
  
  
  if (@$post['op'] == 'exit') {
    
    if (isset($_SESSION['ucaptured_timestamp'])) {
      
      // If a row in the DB has been created already
      $query = db_select('gv_quote_requests', 'qr')
        ->fields('qr', array('data'));
      $query->condition('qr.timestamp', $_SESSION['ucaptured_timestamp']);
      $ucaptured = $query->execute()->fetchField();
      $ucaptured = unserialize($ucaptured);  
      
      $ucaptured = gv_misc_setUcapturedVariable($post, $ucaptured);
      /*
      $ucaptured['Email'] = (isset($post['email']) && $post['email']) ? $post['email'] : $ucaptured['Email'];
      $ucaptured['First Name'] = (isset($post['fname']) && $post['fname']) ? $post['fname'] : $ucaptured['First Name'];
      $ucaptured['Last Name'] = (isset($post['lname']) && $post['lname']) ? $post['lname'] : $ucaptured['Last Name'];
      */
      if ($ucaptured['Email']) {
      
            // Send alert email.
            $ucaptured_data = gv_misc_setUcapturedVariable(NULL, $ucaptured, TRUE);
            $ucaptured_data += array(
              'User IP' => isset($_SERVER['REMOTE_ADDR']) ? $_SERVER['REMOTE_ADDR'] : '',
              'Start Submission Time' => date('Y-m-d, H:i:s', $_SESSION['ucaptured_timestamp']),
            );
            
            if (isset($_SERVER['HTTP_REFERER']) && $_SERVER['HTTP_REFERER'] && !strpos($_SERVER['HTTP_REFERER'], '://getvoip.com')) {
              $ucaptured_data['Referrer'] = $_SERVER['HTTP_REFERER'];
            }
            
            $params['ucaptured_data'] = $ucaptured_data;
            global $language;
            
            // Normal send if not a test from a4s
            drupal_mail('gv_misc', 'request_quote', 'leads@getvoip.com', $language->language, $params);
            // Test letter to the root
            drupal_mail('gv_misc', 'request_quote_ucaptured_data', 'all4senses@gmail.com', $language->language, $params);
            
            // Update DB.
            $result = db_update('gv_quote_requests')
              ->fields(array(
                'data' => serialize($ucaptured),
                'status' => 1, // Unsubmitted, sent.
                'checked' => 1, // Reviewed, because is sent.
                'email_presented' => $ucaptured['Email'] ? $ucaptured['Email'] : NULL,
              ))
              ->condition('timestamp', $_SESSION['ucaptured_timestamp'])
              ->execute();

          } // End of if ($ucaptured['email']) {
          else {

            // Remove the row from DB (if it is there) because it's useless without an email.
            /*
            if (isset($_SESSION['ucaptured_timestamp'])) {
              $result = db_delete('gv_quote_requests')
                ->condition('timestamp', $_SESSION['ucaptured_timestamp'])
                ->execute();
            }
            */
          } // End of Else of if ($ucaptured['email']) {

          unset($_SESSION['ucaptured_timestamp']);
    
    } // End of if (isset($_SESSION['ucaptured_timestamp'])) {

    
    
    
  } // End of if (@$post['op'] == 'exit') {
  else {
    
    // Op = set
    
    if (isset($_SESSION['ucaptured_timestamp'])) {
      
      // A row has been already created.
      
      $query = db_select('gv_quote_requests', 'qr')
        ->fields('qr', array('data'));
      $query->condition('qr.timestamp', $_SESSION['ucaptured_timestamp']);
      $ucaptured = $query->execute()->fetchField();
      
      if ($ucaptured) {
        $ucaptured = unserialize($ucaptured);
        
        $ucaptured = gv_misc_setUcapturedVariable($post, $ucaptured);
        /*
        $ucaptured['Email'] = (isset($post['email']) && $post['email']) ? $post['email'] : $ucaptured['Email'];
        $ucaptured['First Name'] = (isset($post['fname']) && $post['fname']) ? $post['fname'] : $ucaptured['First Name'];
        $ucaptured['Last Name'] = (isset($post['lname']) && $post['lname']) ? $post['lname'] : $ucaptured['Last Name'];
        */
        $result = db_update('gv_quote_requests')
          ->fields(array(
            'data' => serialize($ucaptured),
            'email_presented' => $ucaptured['Email'] ? $ucaptured['Email'] : NULL,
          ))
          ->condition('timestamp', $_SESSION['ucaptured_timestamp'])
          ->execute();

      } // End of if ($ucaptured) {
      else {
        $ucaptured = gv_misc_setUcapturedVariable($post);
        /*
        $ucaptured['Email'] = isset($post['email']) ? $post['email'] : '';
        $ucaptured['First Name'] = isset($post['fname']) ? $post['fname'] : '';
        $ucaptured['Last Name'] = isset($post['lname']) ? $post['lname'] : '';
        */
        $result = db_insert('gv_quote_requests')
          ->fields(array(
            'timestamp' => $_SESSION['ucaptured_timestamp'],
            'status' => 0, // Unsubmitted, not yet sent.
            'ip' =>  isset($_SERVER['REMOTE_ADDR']) ? $_SERVER['REMOTE_ADDR'] : '',
            'data' => serialize($ucaptured),
            'checked' => 0, // Not reviewed by a user or not sent
            'email_presented' => $ucaptured['Email'] ? $ucaptured['Email'] : NULL,
          ))
          ->execute();
      } // End of Else of if ($ucaptured) {
      
    } // End of if (isset($_SESSION['ucaptured_timestamp'])) {
    else {
      
      // A row is not yet created in the DB.
      
      $_SESSION['ucaptured_timestamp'] = time();
      
      // Check if such timestamp alreade exists.
      $query = db_select('gv_quote_requests', 'qr')
        ->fields('qr', array('data'));
      $query->condition('qr.timestamp', $_SESSION['ucaptured_timestamp']);
      $tmp = $query->execute()->fetchField();
       
      if ($tmp) {
        $_SESSION['ucaptured_timestamp'] += 1;
        
          // AGAIN Just in case... Check if such timestamp alreade exists.
        $query = db_select('gv_quote_requests', 'qr')
          ->fields('qr', array('data'));
        $query->condition('qr.timestamp', $_SESSION['ucaptured_timestamp']);
        $tmp = $query->execute()->fetchField();

        if ($tmp) {
          $_SESSION['ucaptured_timestamp'] += 1;
        }
        
      }
      
//      if ($tmp) {
//        do {
//          // It exists, so we'll just increment timestamp, hopely a new one doesn't exist.
//          $_SESSION['ucaptured_timestamp'] += 1;
//          $query = db_select('gv_quote_requests', 'qr')
//            ->fields('qr', array('data'));
//          $query->condition('qr.timestamp', $_SESSION['ucaptured_timestamp']);
//          $tmp = $query->execute()->fetchField();
//        } while ($tmp);
//      }
      
      $ucaptured = gv_misc_setUcapturedVariable($post);
      $result = db_insert('gv_quote_requests')
        ->fields(array(
          'timestamp' => $_SESSION['ucaptured_timestamp'],
          'status' => 0, // Unsubmitted, not yet sent.
          'ip' =>  isset($_SERVER['REMOTE_ADDR']) ? $_SERVER['REMOTE_ADDR'] : '',
          'data' => serialize($ucaptured),
          'checked' => 0, // Not reviewed by a user or not sent
          'email_presented' => $ucaptured['Email'] ? $ucaptured['Email'] : NULL,
        ))
        ->execute();
      
    } // End of Else of if (isset($_SESSION['ucaptured_timestamp'])) {
    
  } // End of Else of if (@$post['op'] == 'exit' && $ucaptured && @$ucaptured['email']) {
  
  drupal_json_output(array('status' => $status/*, 'op' => @$post['op'], 'post' => $_POST, 'ucaptured' => $ucaptured/*, 'token' => $post['token'], 'test_token' => $test_token, 'valid_token' => $valid_token, 'letter' => $letter*/));
}


/**
 * Helper function for loading a data in the ucaptured variable while handling the capturing user data on the request a quote page.
 * 
 */
function gv_misc_setUcapturedVariable($post, $ucaptured = NULL, $combine_phone = FALSE) {
  
  if ($combine_phone) {
    if (isset($ucaptured['Phone 1']) && isset($ucaptured['Phone 2']) && isset($ucaptured['Phone 3'])) {
      $ucaptured['Phone #'] = $ucaptured['Phone 1'] . '-' . $ucaptured['Phone 2'] . '-' . $ucaptured['Phone 3'];
      unset($ucaptured['Phone 1'], $ucaptured['Phone 2'], $ucaptured['Phone 3']);
    }
    return $ucaptured;
  }
  
  $fields = array(
      'Email' => 'email', 
      'First Name' => 'firstname', 
      'Last Name' => 'lastname',
      //'Name' => 'name',
      'Phone #' => 'phone',
      //'Phone 1' => 'phone_1',
      //'Phone 2' => 'phone_2',
      //'Phone 3' => 'phone_3',
      'Website' => 'website', 
      'Company' => 'company',
      //'Monthly budget' => 'budget',
      
      'Phones needed' => 'phones_amt',
      'Quote type' => 'q_type',
      'Buying Time Frame' => 'buying_time',

      //'Quote for' => 'q_for',
      
      'Source' => 'source',
      'Version' => 'version',
      'Sumbission page' => 'url',
  );
  
  if ($ucaptured) {
    foreach ($fields as $key1 => $key2) {
      //$ucaptured['Email'] = (isset($post['email']) && $post['email']) ? $post['email'] : $ucaptured['Email'];
      $ucaptured[$key1] = (isset($post[$key2]) && $post[$key2]) ? $post[$key2] : (isset($ucaptured[$key1]) ? $ucaptured[$key1] : '');
    }
  }
  else {
    foreach ($fields as $key1 => $key2) {
      //$ucaptured['Email'] = isset($post['email']) ? $post['email'] : '';
      $ucaptured[$key1] = isset($post[$key2]) ? $post[$key2] : '';
    }
    
    if(isset($_SERVER['HTTP_USER_AGENT'])) {
      $ucaptured['Browser'] = $_SERVER['HTTP_USER_AGENT'];
    }
    if (isset($post['referrer']) && $post['referrer']) {
      $ucaptured['Referrer'] = $post['referrer'];
    }
    /*
    if (isset($_SERVER['HTTP_REFERER']) && $_SERVER['HTTP_REFERER'] && !strpos($_SERVER['HTTP_REFERER'], '://getvoip.com')) {
      $ucaptured['Referrer'] = $_SERVER['HTTP_REFERER'];
    }
    */
  }
  

  
  return $ucaptured;
}


/**
 * Implements requests from users.
 * 
 * Returns json result data with OK or error.
 */
function gv_misc_makeRequest_ajax() {
  $status = TRUE;
  $output = '';
  
  //$post = $_POST;
  $post = array();
  foreach ($_POST as $key => $value) {
    $post[$key] = check_plain(strip_tags($value));
  }
  
  if (empty($post) 
      || empty($post['source'])
      || empty($post['phones_amt'])
      //|| !isset($post['q_for']) || !$post['q_for']
      //|| !isset($post['buying_time']) || !$post['buying_time']
      || ( (isset($post['firstname']) && !$post['firstname']) || (isset($post['lastname']) && !$post['lastname']) || (isset($post['name']) && !$post['name']) )
      || ( strpos($post['firstname'], '/')  || strpos($post['lastname'], '/') || strpos(@$post['name'], '/') ) // name contains /, like in urls
      || (empty($post['email']) || !strpos($post['email'], '@') )
      || ( (empty($post['phone_1']) || empty($post['phone_2']) || empty($post['phone_3'])) && empty($post['phone']) )
     ) {
    $output = t('<div class="not-verified"><p class="error">The form is not filled!</p><p>Please, reload the page and try again.</p></div>'); 
  }
  elseif ($post['source'] == 'block' && (empty($post['ct_captcha']) || strtolower($post['ct_captcha']) != strtolower($_SESSION['securimage_code_value']['default']) )){
    $output = t('<div class="not-verified"><p class="error">A Captcha code is wrong!</p><p> Please, reload the page and try again.</p><div class="not-verified">'); 
  }
  elseif (!isset($post['token']) /*|| !isset($_SESSION['requestQuoteToken']) || $post['token'] != $_SESSION['requestQuoteToken']*/){
    $output = t('<div class="not-verified"><p class="error">The form is outdated or broken.</p><p> Please, reload the page and try again.</p><div class="not-verified">'); 
  }
  // Filter by the Spammer's phone number.
  elseif (strpos($post['phone'], '3847')  != FALSE ){ // 4023983847, 4023893847
    //$output = '<div class="not-verified"><p class="error">Something worng! ;)</p><p> Please, reload the page and try again.</p><div class="not-verified">' 
    $output = '<a class="guide" href="/pdfs/SMBVOIPAdvantagesWhitePaper.pdf" target="_blank">Download Your Free VoIP Buyer\'s Guide!!!<img src="/sites/all/themes/gv_orange/css/images/click-here-button.png" /></a><div class="quote-final">' . t('<p><strong>Thank you</strong> for taking your time to complete our form. A VoIP Expert will be contacting you shortly to provide you with a personalized VoIP Service quote.</p><p>In the meantime, you can gain a great deal of VoIP information right here at <a href="http://getvoip.com">GetVoIP.com</a></p>') . '</div>';
  }
  else {
    
    $post['email'] = strtolower($post['email']);
    
    
    
    $already_sent = FALSE;
    // allow dublicate of test@test.test address for testing purposes.
    if ($post['email'] != 'test@test.test' && gv_misc_isSubmissionAlreadySent($post['email'])) {
      $already_sent = TRUE;
    }
    // Check if there is already a submission in the DB with such an email.
    
    
//    $query = db_select('gv_quote_requests', 'qr')
//      ->fields('qr', array('data', 'ip', 'timestamp'));
//    $query->condition('qr.status', 0);
//    $query->condition('qr.checked', 0);
//    
//    
//    //$query->condition('qr.email_presented', 1);
//    
//    $query->condition('qr.email_presented', '0', '!=');
//    $query->condition('qr.email_presented', '', '!=');
//    $query->isNotNull('qr.email_presented');
//    
//    $query->condition('qr.timestamp', $current_time - 3600, '<'); // 1 hour old
//    $not_sents = $query->execute();
//    
    
    
    
    

    $current_time = time();
    
    // Mapping form data to right named fields.
    
    $phone = isset($post['phone']) ? $post['phone'] : $post['phone_1'] . '-' . $post['phone_2'] . '-' . $post['phone_3'];
    
    if ($post['source'] == 'page') {
      
      
      
      $submission = array(
        'Phones needed' => $post['phones_amt'],
        'Quote for' => isset($post['q_for']) ? $post['q_for'] : '',
        'Quote type' => isset($post['q_type']) ? $post['q_type'] : '',
        'Buying Time Frame' => (isset($post['buying_time']) && $post['buying_time']) ? $post['buying_time'] : 'ASAP',
        'First Name' => isset($post['firstname']) ? $post['firstname'] : '',
        'Last Name' => isset($post['lastname']) ? $post['lastname'] : '',
        'Name' => isset($post['name']) ? $post['name'] : '',
        
        'Company' => isset($post['company']) ? $post['company'] : '',

        'Email' => $post['email'],
        'Website' => isset($post['website']) ? $post['website'] : '',
        'Phone #' => $phone,
        'Monthly budget' => isset($post['budget']) ? $post['budget'] : '',

        'Source' => $post['source'],
        'Version' => $post['version'],
        //'Sumbission page' => $post['url'],
      );
      
      foreach ($submission as $key => $value) {
        if (!$value || $value == 'Optional' || $key == $value) {
          unset($submission[$key]);
        }
      }
      
      
      
      
      
      // Clear user's captured on the fly data and/or save request to the db.
      
      $save_submission = $submission;
      $save_submission['Submit Time'] = $current_time;
      if (isset($_SERVER['HTTP_USER_AGENT'])) {
        $save_submission['Browser'] = $_SERVER['HTTP_USER_AGENT'];
      }
      if (isset($post['referrer']) && $post['referrer']) {
        $save_submission['Referrer'] = $post['referrer'];
      }
      $save_submission['Sumbission page'] = $post['url'];
      /*
      if (isset($_SERVER['HTTP_REFERER']) && $_SERVER['HTTP_REFERER'] && !strpos($_SERVER['HTTP_REFERER'], '://getvoip.com')) {
        $save_submission['Referrer'] = $_SERVER['HTTP_REFERER'];
      }
      */
      if (isset($_SESSION['ucaptured_timestamp'])) {
        $start_submission_time = $_SESSION['ucaptured_timestamp'];
        //$save_submission['Submission Duration'] = number_format((($current_time - $start_submission_time) / 60), 2, '.', '') . ' min';
        $save_submission['Submission Duration'] = $current_time - $start_submission_time;
        $result = db_update('gv_quote_requests')
          ->fields(array(
            'data' => serialize($save_submission),
            'status' => 2, // Submitted and sent.
            'checked' => 1, // Reviewed, because is sent.
            'email_presented' => $save_submission['Email'],
          ))
          ->condition('timestamp', $_SESSION['ucaptured_timestamp'])
          ->execute();
        unset($_SESSION['ucaptured_timestamp']);
      }
      else {
        // For some reason it wasn't still captured.
        $start_submission_time = $current_time;
        $result = db_insert('gv_quote_requests')
          ->fields(array(
            'timestamp' => $start_submission_time,
            'status' => 2, // Submitted and sent.
            'ip' =>  isset($_SERVER['REMOTE_ADDR']) ? $_SERVER['REMOTE_ADDR'] : '',
            'data' => serialize($save_submission),
            'checked' => 1, // Reviewed, because is sent.
            'email_presented' => $save_submission['Email'],
          ))
          ->execute();
      }  
      
      
      
        
      
    }
    else {
      
      // Quote Blocks...
      
      $submission = array(
        'Phones needed' => $post['phones_amt'],
        'Quote for' => isset($post['q_for']) ? $post['q_for'] : '',
        'Quote type' => isset($post['q_type']) ? $post['q_type'] : '',
        'Buying Time Frame' => (isset($post['buying_time']) && $post['buying_time']) ? $post['buying_time'] : 'ASAP',
        'Connection type' => isset($post['connection']) ? $post['connection'] : '',
        'First Name' => $post['firstname'],
        'Last Name' => $post['lastname'],
          
        'Company' => isset($post['company']) ? $post['company'] : '',
        'Website' => isset($post['website']) ? $post['website'] : '',
        'Email' => $post['email'],
        'Phone #' => $phone,
        'Notes' => isset($post['notes']) ? $post['notes'] : '',
          
        'Source' => $post['source'],
        'Version' => $post['version'],
        //'Sumbission page' => $post['url'],
      );      
      
      foreach ($submission as $key => $value) {
        if (!$value || $value == 'Optional' || $key == $value) {
          unset($submission[$key]);
        }
      }
      
    
      // Save data to db.
      
      $save_submission = $submission;
      $save_submission['Submit Time'] = $current_time;
      if (isset($_SERVER['HTTP_USER_AGENT'])) {
        $save_submission['Browser'] = $_SERVER['HTTP_USER_AGENT'];
      }
      if (isset($post['referrer']) && $post['referrer']) {
        $save_submission['Referrer'] = $post['referrer'];
      }
      $save_submission['Sumbission page'] = @$post['url'];
      
      $start_submission_time = $current_time;
      $result = db_insert('gv_quote_requests')
        ->fields(array(
          'timestamp' => $start_submission_time,
          'status' => 2, // Submitted and sent.
          'ip' =>  isset($_SERVER['REMOTE_ADDR']) ? $_SERVER['REMOTE_ADDR'] : '',
          'data' => serialize($save_submission),
          'checked' => 1, // Reviewed, because is sent.
          'email_presented' => $save_submission['Email'],
          'via_block' => TRUE,
        ))
        ->execute();
      
    } // End of quote block
    
    
    
    $submission['User IP'] = isset($_SERVER['REMOTE_ADDR']) ? $_SERVER['REMOTE_ADDR'] : '';
    $submission['Time'] = date('Y-m-d, H:i:s', time());
    
    $params['request_data'] = $submission;
    
    

    // Add an extra data.
    
    $submission_with_extra = $submission;
    
    $submission_with_extra['Sumbission page'] = $post['url'];
    if (isset($post['referrer']) && $post['referrer']) {
      $submission_with_extra['Referrer'] = $post['referrer'];
    }
    if(isset($_SERVER['HTTP_USER_AGENT'])) {
      $submission_with_extra['Browser'] = $_SERVER['HTTP_USER_AGENT'];
    }
    
    $params_with_extra['request_data'] = $submission_with_extra;
    
    /*
    $admins = db_query("SELECT u.uid FROM {users_roles} u INNER JOIN {role} r ON r.name = :role AND r.rid = u.rid WHERE 1", array(':role' => 'administrator')); 
    foreach ($admins as $admin) {
      // Comment to go live!
      //if($admin->uid != 1) continue;
      
      $recipient = user_load($admin->uid);
      $params['recipient'] = $recipient;
      drupal_mail('gv_misc', 'request_quote', $recipient->mail, user_preferred_language($recipient), $params);
    }
    */
    global $language;
    //$params['recipient'] = $recipient;
    //$letter = theme('gv_misc_requestQuote_mail', $post);//$params['request_data']);
    
    
    
    if (!$already_sent) {
      
        if ($submission['First Name'] == 'RingCentral' || $submission['First Name'] == 'ringcentral' || $submission['Company'] == 'RC') {
          // Test for Nextiva
          drupal_mail('gv_misc', 'request_quote', 'leads@getvoip.com', $language->language, $params);

          // Send a lead to Remote providers.
          if ($submission['Source'] != 'block') {
            gv_misc_SendRequestToRingCentral($submission);
          }
        }
        elseif ($submission['First Name'] == 'Nextiva' || $submission['First Name'] == 'nextiva') {
          // Test for Nextiva
          drupal_mail('gv_misc', 'request_quote', 'leads@getvoip.com', $language->language, $params);

          // Send a lead to Remote providers.
          if ($submission['Source'] != 'block') {
            gv_misc_SendRequestToNextiva($submission);
          }
        }
        elseif ($submission['First Name'] != 'afs' && $submission['First Name'] != 'a4s' && $submission['First Name'] != 'test') {
          // Normal send if not a test from a4s
          drupal_mail('gv_misc', 'request_quote', 'leads@getvoip.com', $language->language, $params);

          // Send a lead to Remote providers.
          if ($submission['Source'] != 'block') {
            gv_misc_SendRequestToVocalocity($submission);
            gv_misc_SendRequestTo8x8($submission);
            gv_misc_SendRequestToNextiva($submission);
            gv_misc_SendRequestToRingCentral($submission);
          }
        }
        // A test letter to the root.
        drupal_mail('gv_misc', 'request_quote', 'all4senses@gmail.com', $language->language, $params_with_extra);
    }
    
    
    
    
    // Check for new captured but not sent data with emails in db, more than 1 hour old

    $query = db_select('gv_quote_requests', 'qr')
      ->fields('qr', array('data', 'ip', 'timestamp'));
    $query->condition('qr.status', 0);
    $query->condition('qr.checked', 0);
    
    
    //$query->condition('qr.email_presented', 1);
    
    $query->condition('qr.email_presented', '0', '!=');
    $query->condition('qr.email_presented', '', '!=');
    $query->isNotNull('qr.email_presented');
    
    $query->condition('qr.timestamp', $current_time - 3600, '<'); // 1 hour old
    $not_sents = $query->execute();

    foreach ($not_sents as $not_sent) {
      $ucaptured = unserialize($not_sent->data);

      // Send email.
      $ucaptured_data = gv_misc_setUcapturedVariable(NULL, $ucaptured, TRUE);
      $ucaptured_data += array(
        'User IP' => $not_sent->ip,
        'Start Submission Time' => date('Y-m-d, H:i:s', $not_sent->timestamp),
      );

      $params['ucaptured_data'] = $ucaptured_data;

      // Normal send
      if ($submission['First Name'] != 'afs') {
        drupal_mail('gv_misc', 'request_quote_ucaptured_data', 'leads@getvoip.com', $language->language, $params);
      }
      // Test letter to the root
      drupal_mail('gv_misc', 'request_quote_ucaptured_data', 'all4senses@gmail.com', $language->language, $params);
      
      // Update a status in DB.
      $result = db_update('gv_quote_requests')
        ->fields(array(
          'status' => 1, // Unsubmitted, sent.
          'checked' => 1, // Reviewed, because is sent.
        ))
        ->condition('timestamp', $not_sent->timestamp)
        ->execute();

    } // foreach ($not_sents as $not_sent) {

    
    
    
    
    $status = TRUE;
         
    if ($submission['Version'] == 5) {
      $output = '<a class="guide" href="/pdfs/SMBVOIPAdvantagesWhitePaper.pdf" target="_blank">Download Your Free VoIP Buyer\'s Guide Here</a><div class="quote-final">' . t('<p><strong>Thank you</strong> for taking your time to complete our form. A VoIP Expert will be contacting you shortly to provide you with a personalized VoIP Service quote.</p><p>In the meantime, you can gain a great deal of VoIP information right here at <a href="http://getvoip.com">GetVoIP.com</a></p>') . '</div>';
    }
    elseif($submission['Version'] == 6) {
      $output = '<a class="guide" href="/pdfs/SMBVOIPAdvantagesWhitePaper.pdf" target="_blank">Download Your Free VoIP Buyer\'s Guide<img src="/sites/all/themes/gv_orange/css/images/click-here-button.png" /></a><div class="quote-final">' . t('<p><strong>Thank you</strong> for taking your time to complete our form. A VoIP Expert will be contacting you shortly to provide you with a personalized VoIP Service quote.</p><p>In the meantime, you can gain a great deal of VoIP information right here at <a href="http://getvoip.com">GetVoIP.com</a></p>') . '</div>';
    }
    else {
      $output = '<p><strong>Thank you</strong> for taking your time to complete our form. A VoIP Expert will be contacting you shortly to provide you with a personalized VoIP Service quote.</p><p>In the meantime, you can gain a great deal of VoIP information right here at <a href="http://getvoip.com">GetVoIP.com</a></p>'; 
    }
    
    if ($post['source'] == 'page') {
      switch ($post['version']) {
        case '1':
          $output .= '<script>top.location.href="http://getvoip.com/request-voip-phone-system-quote-final";</script>';
          break;
        
        case '2':
          $output .= '<script>top.location.href="http://getvoip.com/voip-provider-quotes-final";</script>';
          break;
        
        case '3':
          $output .= '<script>top.location.href="http://getvoip.com/compare-voip-solutions-final";</script>';
          break;
      }
      
    }
    
  }

  drupal_json_output(array('status' => $status, 'data' => $output/*, 'post' => $_POST, 'token' => $post['token'], 'test_token' => $test_token, 'valid_token' => $valid_token, 'letter' => $letter*/));
}

/*
 * 
double triggerring of a submit form because of double launching almost the same code from the Request quote block which actually hasn't appeared on the page anyway (before recent time it was absolutely the same so the problem was autosolved quietly :) 
 */





/*
 * Test server instead of Vocalocity/Nextiva. 
 */
/*
function gv_misc_testPage_requestTest() {
  
  $status = TRUE;
  $output = 'gv_misc_testPage_requestTest()----';
  
  $post = array();
  foreach ($_POST as $key => $value) {
    $post[$key] = check_plain(strip_tags($value));
  }
  
  global $language;
  $params['request_data'] = $post;

  drupal_mail('gv_misc', 'request_quote', 'all4senses@gmail.com', $language->language, $params);

  drupal_json_output(array('status' => $status, 'data' => $output));
}
*/


/**
 * Test page function for url /test.
 */
function gv_misc_getYoutubeVideoThumb($video_id) {
  
  $file_default_scheme = file_default_scheme();
  $default_file_path = variable_get('file_' . $file_default_scheme . '_path', conf_path() . '/files');
  
  $url = 'http://img.youtube.com/vi/' . $video_id . '/0.jpg'; //'/maxresdefault.jpg';
  $file_local = $default_file_path . '/vthumbs/' . $video_id . '.jpg';
  $file_local_abs = DRUPAL_ROOT . '/' . $file_local;
  if (!gv_misc_curl_file_from_remote_site_likeBrowser($url, $file_local_abs)) {
    return $file_local;
  }
  else {
    return NULL; // Failed.
  }
}


/**
 * Test page IFRAME
 */
function gv_misc_testPage_iframe() {
  
// iframes (wide and narrow) for business voip providers chart.
  
  $out = '';
  
  if (@arg(1) == 'narrow') {
    $out .= '<iframe id="bu-chart" src="http://getvoip.com/get/iframe/business-voip-chart/narrow" scrolling="no" width="590px" height="400px" frameborder="0" seamless="seamless"></iframe>';
  }
  else {
    // wide.
    $out .= '<iframe id="bu-chart" src="http://getvoip.com/get/iframe/business-voip-chart" scrolling="no" width="822px" frameborder="0" seamless="seamless"></iframe>';
  }
  
  $out .= '<SCRIPT>
      function setGvIframeSize(pixels){
        /*pixels+=32;*/
        /*alert(document.getElementById("bu-chart").style.height);*/
        /*document.getElementById("bu-chart").style.height=pixels+"px";*/
        
      }
    </SCRIPT>';
  
//  $out = '<SCRIPT>
//      function setGvIframeSize(pixels){
//        /*pixels+=32;*/
//        document.getElementById("bu-chart").style.height=pixels+"px";
//        /*alert(document.getElementById("bu-chart").style.height);*/
//      }
//    </SCRIPT>' . $out;
   
 
  //$out .= '<iframe id="gv-quote-request-block" src="http://getvoip.com/get/iframe/quote-request-block" scrolling="no" width="245px" height="335px" frameborder="0" seamless="seamless"></iframe>';
  
  return $out;
  
}


/**
 * Creates imagecache image if it doesnt exist.
 */
function gv_misc_createCachedImageIfNotExists($relative_path, $style_name = NULL) {
  // Assure that the imagecache file is created already, or recreate it.
  if (!file_exists($relative_path)) {
    
    // Find out the style name from 'sites/default/files/styles/logo_provider_chart_main/public/p/logos/Nextiva-Logo2.png';
    if (!$style_name) {
      $path_part = explode('/styles/', $relative_path);
      $path_part = explode('/public/', $path_part[1]);
      $style_name = $path_part[0];
    }
    $style = image_style_load($style_name);
    //$styled_file_path = 'sites/default/files/styles/logo_provider_chart_main/public/p/logos/Nextiva-Logo2.png';
    //$original_file_path = 'sites/default/files/p/logos/Nextiva-Logo.png';
    $file_path = str_replace('styles/' . $style_name . '/public/', '', $relative_path);
    $source = gv_misc_getStreamUriFromRelativePath($file_path);
    $destination = image_style_path($style_name, $source);
    if (!image_style_create_derivative($style, $source, $destination)) {
      return FALSE;
    }
  }
  
  return TRUE;
}


/**
 * Rebuilds providers logos sprites.
 */
function gv_misc_rebuildProvidersLogosSprites($listing_pos_fields = NULL) {
  
  $providers_logos_sprites = array(
    'home_top_providers' => array('image_style' => 'logo_provider_chart_main', 'providers_views_displays' => array(/*'block'*/ 'block_top_business_cmp', 'block_1'), 'listing_pos_fields' => array('field_p_erating', 'field_p_erating_residential')),
    
    'top_bu_providers' => array('image_style' => 'logo_provider_chart_big', 'providers_views_displays' => array('block_p_bu_page', 'block_p_bu_page_cmp'), 'listing_pos_fields' => array('field_p_erating')),
    'top_re_providers' => array('image_style' => 'logo_provider_vertical_chart', 'providers_views_displays' => array('block_p_re_page'), 'listing_pos_fields' => array('field_p_erating_residential')),
    
    'top_bu_providers_rev' => array('image_style' => 'logo_provider_chart_main', 'providers_views_displays' => array('bl_p_bu_rev_page_cmp'), 'listing_pos_fields' => array('field_p_erating')),
    'top_re_providers_rev' => array('image_style' => 'logo_provider_chart_main', 'providers_views_displays' => array('bl_p_re_rev_page'), 'listing_pos_fields' => array('field_p_erating_residential')),
    
      
    'top_pbx_providers' => array('image_style' => 'logo_provider_vertical_chart', 'providers_views_displays' => array('block_p_pbx_page', 'block_p_pbx_page_cmp'), 'listing_pos_fields' => array('field_p_erating_pbx')),
    'top_sip_providers' => array('image_style' => 'logo_provider_chart_main', 'providers_views_displays' => array('block_p_sip_page'), 'listing_pos_fields' => array('field_p_erating_sip')),
    'top_ifa_providers' => array('image_style' => 'logo_provider_chart_main', 'providers_views_displays' => array('block_p_ifa_page'), 'listing_pos_fields' => array('field_p_erating_ifa')),
    'top_ca_providers' => array('image_style' => 'logo_provider_chart_main', 'providers_views_displays' => array('block_p_bu_ca_page', 'block_p_bu_ca_page_cmp', 'block_p_re_ca_page'), 'listing_pos_fields' => array('field_p_erating_bu_ca', 'field_p_erating_re_ca')),
      
    'all_reviews_providers' => array('image_style' => 'logo_provider_chart_main', 'providers_views_displays' => array('block_top_bu_ar', 'block_top_bu_ar_cmp', 'block_top_re_ar'), 'listing_pos_fields' => array('field_p_erating', 'field_p_erating_residential')), 
  );
  
  
  // Skip refreshing sprites without selected listing fields.
  if($listing_pos_fields && $gv_providers_sprites = variable_get('gv_providers_sprites')) {
    foreach ($providers_logos_sprites as $providers_logos_sprite_title => $providers_logos_sprite_data) {
      $in_array = FALSE;
      foreach($listing_pos_fields as $listing_pos_field) {
        if (in_array($listing_pos_field, $providers_logos_sprite_data['listing_pos_fields'])) {
          $in_array = TRUE;
        }
      }
      if (!$in_array) {
        unset($providers_logos_sprites[$providers_logos_sprite_title]);
      }
    }
  }
  else {
    $gv_providers_sprites = array();
  }
  
  
  
  $all_data_quick = gv_misc_getProvidersDataQuick();
  
  //$image_style_name = 'logo_provider_chart_main';
  
  foreach ($providers_logos_sprites as $providers_logos_sprite_name => $providers_logos_sprite) {
    
    // Decrease width of images for vertical charts pages.
//    if ($providers_logos_sprite_name == 'top_bu_providers') {
//      $image_style_name = 'logo_provider_vertical_chart';
//      dpm('new style used');
//    }
    
    $image_style_name = $providers_logos_sprite['image_style'];
    //dpm($providers_logos_sprite_name . ' => ' . $image_style_name);
    
    foreach ($providers_logos_sprite['providers_views_displays'] as $providers_views_display) {
      
      $view = views_get_view('providers');
      $view->execute($providers_views_display);
      
      if ($view->result) {
        
        foreach ($view->result as $provider) {
          
          $input_providers_data[$providers_logos_sprite_name][$provider->nid]['name'] = $all_data_quick[$provider->nid]['name'];
          
          $input_providers_data[$providers_logos_sprite_name][$provider->nid]['themed_image_src'] = str_replace('http://getvoip.com/', '', image_style_url($image_style_name, $all_data_quick[$provider->nid]['i_logo_uri']));
          $input_providers_data[$providers_logos_sprite_name][$provider->nid]['themed_image_src'] = urldecode($input_providers_data[$providers_logos_sprite_name][$provider->nid]['themed_image_src']); //str_replace('%20', ' ', $input_providers_data[$providers_logos_sprite_name][$provider->nid]['themed_image_src']);
                  
          // Assure that the imagecache file is created already, or recreate it.
          gv_misc_createCachedImageIfNotExists($input_providers_data[$providers_logos_sprite_name][$provider->nid]['themed_image_src']);
          
          $input_providers_data[$providers_logos_sprite_name][$provider->nid]['themed_image_html'] = theme('gv_misc_image_style', array('style_name' => $image_style_name, 'path' => $all_data_quick[$provider->nid]['i_logo_uri'], 'alt' =>  $all_data_quick[$provider->nid]['i_logo_alt'], 'title' =>  $all_data_quick[$provider->nid]['i_logo_title'] ));
          
          //$out .= $input_providers_data[$providers_logos_sprite_name][$provider->nid]['themed_image_html'];
        }
        
      }
      
    }
    
  }
  
  $out_sprite_path = 'sites/default/files/p/';
  $out_sprite_ext = 'png';
  
  foreach ($input_providers_data as $providers_logos_sprite_name => $providers_logos_sprite) {
    
    $out_sprite['file'] = $out_sprite_path . $providers_logos_sprite_name . '.' . $out_sprite_ext;
    $out_size = array();
    
    foreach ($providers_logos_sprite as $nid => $provider) {

      if($input_image['info'] = getimagesize($provider['themed_image_src'])) {
        // Set a height (all providers logos height + 10px between each others).
        if (empty($out_size['h'])) {
          $out_size['h'] = $input_image['info'][1];
        }
        else {
          $out_size['h'] += 10 + $input_image['info'][1];
        }
        // Set once a width of the sprite by the widest one.
        if (empty($out_size['w']) || $out_size['w'] < $input_image['info'][0]) {
          $out_size['w'] = $input_image['info'][0];
        }
      }
    }
    
    $out_sprite['img'] = imagecreatetruecolor($out_size['w'], $out_size['h']);
  
    // Make the background transparent.
    $white = imagecolorallocate($out_sprite['img'], 255, 255, 255);
    $transparent = imagecolortransparent($out_sprite['img'],$white);

    // Set transparency for the output image.
    imagefilledrectangle($out_sprite['img'], 0, 0, $out_size['w'], $out_size['h'], $transparent);
  
    $current_y = 0;
    
    // Reset the sprite data to avoid remaining the old data. 
    $gv_providers_sprites[$providers_logos_sprite_name] = array();
    
    foreach ($providers_logos_sprite as $nid => $provider) {
      if ($input_image['img'] = gv_misc_loadImage($provider['themed_image_src'])) {
        //$input_image['info'] = getimagesize(str_replace('%20', ' ', $provider['themed_image_src']));
        $input_image['info'] = getimagesize(urldecode($provider['themed_image_src']));
        imagecopy($out_sprite['img'], $input_image['img'], 0, $current_y, 0, 0, $input_image['info'][0], $input_image['info'][1]);
        
        $gv_providers_sprites[$providers_logos_sprite_name]['data'][$nid]['y'] = $current_y;
        $gv_providers_sprites[$providers_logos_sprite_name]['data'][$nid]['w'] = $input_image['info'][0];
        $gv_providers_sprites[$providers_logos_sprite_name]['data'][$nid]['h'] = $input_image['info'][1];
        $gv_providers_sprites[$providers_logos_sprite_name]['time'] =  time();
        
        $current_y += 10 + $input_image['info'][1];
      }
    }
  
    // Save a new sprite file.
    imagepng($out_sprite['img'], $out_sprite['file']);

    // Show image.
    //Header("Content-type: image/png");
    //imagepng($out_sprite['img'], NULL, 0);
  }
    
  //dpm($gv_providers_sprites);
  //dpm($input_providers_data);
  
  variable_set('gv_providers_sprites', $gv_providers_sprites);
  
  
  drupal_flush_all_caches();
  drupal_set_message('Cache is flushed after the prividers logos sprites regenerating.', 'warning');
  
  if (!$listing_pos_fields) {
    drupal_set_message('All providers logos sprites have been regenerated!');
    drupal_goto();
  }
  
}


/**
 * Creates time elapsed format.
 */
function gv_misc_elapsed_time($timestamp, $precision = 2) { 
  $time = time() - $timestamp; 
  $a = array('decade' => 315576000, 'year' => 31557600, 'month' => 2629800, 'week' => 604800, 'day' => 86400, 'hour' => 3600, 'min' => 60, 'sec' => 1); 
  $i = 0; 
    foreach($a as $k => $v) { 
      $$k = floor($time/$v); 
      if ($$k) $i++; 
      $time = $i >= $precision ? 0 : $time - $$k * $v; 
      $s = $$k > 1 ? 's' : ''; 
      $$k = $$k ? $$k.' '.$k.$s.' ' : ''; 
      @$result .= $$k; 
    } 
  return $result ? $result.'ago' : '1 sec to go'; 
} 


/**
 * Get new users from Disqus and update local variable/db.
 */
function gv_misc_disqus_getNewUsers() {
  
  $out = 'No new Disqus users this time.';
  
  $gv_disqus_users = unserialize(variable_get('gv_disqus_users', serialize(array())));
  
  $new_gv_disqus_users = gv_misc_disqus_getUsers();
  //dpm($new_gv_disqus_users);
  
  if ($gv_disqus_users != $new_gv_disqus_users) {
    
    $new_users = array_diff_key($new_gv_disqus_users, $gv_disqus_users);
    
    $gv_disqus_users += $new_gv_disqus_users;
    variable_set('gv_disqus_users', serialize($gv_disqus_users));
    $out = 'Something has changed (new users, less users, etc).
 

<pre>' . print_r($new_users, TRUE) . '</pre>';
  }
  
  global $language;
  $params['report'] = $out;
  drupal_mail('gv_misc', 'new_disqus_user', 'all4senses@gmail.com', $language->language, $params);
  //dpm(unserialize(variable_get('gv_disqus_users')));
  
  //return $out;
  echo $out;
}

  
/**
 * Get users from Disqus.
 */
function gv_misc_disqus_getUsers($next_id = NULL) {

  $remote_users = array();
  
  //dpm($next_id);
  
  $url = 'https://disqus.com/api/3.0/forums/listUsers.json?' . 
    'forum=getvoip' .
    '&limit=100' .
    ($next_id ? '&since_id=' . $next_id : '') .
    '&api_secret=IlTOWiFAZGYxGCUdjCEMQqzTRVl9hpG7f9KrSAkSqcbFDH4duZADgQUy0asDTHOW'
    ;
  
  $data_from = gv_misc_curlGET($url);
  
  if ($data_from) {
    $data_from = json_decode($data_from);
    //dpm($data_from);
    if (!$data_from->code) {
      
      foreach ($data_from->response as $remote_user) {
        if (!empty($remote_user->email) && strpos($remote_user->email, 'getvoip') === FALSE ) {
          $remote_users[$remote_user->id] = array('name' => $remote_user->name, 'email' => $remote_user->email);
        }
      }
      
      if ($data_from->cursor->hasNext) {
        $next_id = explode(':', $data_from->cursor->next);
        $next_id = $next_id[0];
        $remote_users += gv_misc_disqus_getUsers($next_id);
        return $remote_users;
      }
      
    } // End of if (!$data_from->code) {
  } // End of if ($data_from) {.
  
  return $remote_users;
}
 

/**
 * Curl - GET.
 */
function gv_misc_curlGET($url) {
  
  // GET.
  $curl = curl_init();
  curl_setopt($curl, CURLOPT_URL, $url);
  curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
  curl_setopt($curl, CURLOPT_TIMEOUT, 300);
  
  // If POST.
  //  curl_setopt($curl, CURLOPT_POST, TRUE);
  //  curl_setopt($curl, CURLOPT_POSTFIELDS, $params);
  
  $data_from = curl_exec($curl);
  curl_close($curl);
  
  return $data_from;
}


/**
 * Returns Quote Request Block for an iframe.
 */
function gv_misc_getIframe_QuoteRequestBlock() {

  $block_data = array('module' => 'gv_blocks', 'delta' => 'request_quote_v6', 'shadow' => FALSE, 'subject' => 'Get Free VoIP Quotes', 'subjectTag' => 'h3', 'replaceUnderlinesWithDashesInID' => TRUE);
  //$block_data['no_subject'] = TRUE;
  $out = '<div class="sidebar">' . gv_blocks_getBlockThemed($block_data) . '</div>';
  
  return $out;
}


/**
 * Returns TopProvidersBu chart for an iframe.
 */
function gv_misc_getIframe_TopProvidersBu() {
  
  // Get block for Top pick business providers chart.
  if (@arg(3) == 'narrow') {
    $block_data = array('module' => 'views', 'delta' => 'providers-block_p_bu_iframe', 'shadow' => FALSE);
  }
  else {
    // wide.
    $block_data = array('module' => 'views', 'delta' => 'providers-block_p_bu_page', 'shadow' => FALSE);
    gv_misc_loadColorboxForVideoLinks();
  }
  $block_data['no_subject'] = TRUE;
  $out = gv_blocks_getBlockThemed($block_data) 
    . '<SCRIPT>
        /*console.log("hi!");*/
        /*parent.setGvIframeSize(document.body.scrollHeight);*/
        
        window.parent.postMessage(document.body.scrollHeight + 32 + "px", "*");
        
        /*alert("h: " + document.body.scrollHeight);*/
        /*console.log("h: " + document.body.scrollHeight);*/
       </SCRIPT>';
  
  return $out;
}


/**
 * Send a request to Vocalocity.
 */
function gv_misc_SendRequestToVocalocity($submission) {
  
  // Skip sending if "More than 50".
  if ($submission['Phones needed'] == 'More than 50') {
    return NULL;
  }
    
      $map_main = array(
        'First Name' => '7772_177925pi_7772_177925',
        'Last Name' => '7772_177935pi_7772_177935',
        'Phones needed' => '7772_178005pi_7772_178005',
        'Buying Time Frame' => '7772_177985pi_7772_177985',
        'Company' => '7772_177965pi_7772_177965',
        'Email' => '7772_177955pi_7772_177955',
        'Website' => '7772_177975pi_7772_177975',
        'Phone #' => '7772_177945pi_7772_177945',
      );
      
      $map_timeframe = array(
        'ASAP' => '3791',
        //'Less than 1 month' => '3681',
        '1-3 Months' => '3691',
        '3-6 Months' => '3701',
        //'More than 6 months' => '3711',
      );
      
      $map_phonesNeeded = array(
        '1' => '58655',
        '2 - 4' => '58655',
        '1 - 4' => '58655',
        '5 - 10' => '58665',
        '11 - 20' => '58675',
        '21 - 50' => '58685',
      );
      
  
  // Map data to remote vars names.
  foreach ($map_main as $getvoip_key => $remote_key) {
    if ($getvoip_key == 'Buying Time Frame') {
      $data_to[$remote_key] = $map_timeframe[$submission[$getvoip_key]];
    }
    elseif ($getvoip_key == 'Phones needed') {
      $data_to[$remote_key] = $map_phonesNeeded[$submission[$getvoip_key]];
    }
    else {
      $data_to[$remote_key] = isset($submission[$getvoip_key]) ? $submission[$getvoip_key] : '';
    }
  }
  
  $url = 'http://ww3.vocalocity.com/l/7772/2012-10-01/36gsq6';
  //$url = 'http://getvoip.com/request-test';
  $curl = curl_init();
  curl_setopt($curl, CURLOPT_URL, $url);
  curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
  curl_setopt($curl, CURLOPT_TIMEOUT, 300);
  curl_setopt($curl, CURLOPT_POST, TRUE);
  curl_setopt($curl, CURLOPT_POSTFIELDS, $data_to);
  $data_from = curl_exec($curl);
  if ($data_from === false) {
    $data_from = 'Error!!! 
' . curl_error($curl);
  }
  curl_close($curl);
 

  // Report to a4s.
  $out = 'Quote Request submission form:

';
  foreach ($submission as $key => $value) {
   if ($value) {
      $out .= "$key = $value
";
    }
  }
 
 
  // Send a report to admin.
  global $language;
  $params['report'] = $out . '
    

' . $data_from;
  drupal_mail('gv_misc', 'vocalocity_send_report', 'all4senses@gmail.com', $language->language, $params);
  
  return $params['report'];
}


/**
 * Send a request to 8x8.
 */
function gv_misc_SendRequestTo8x8($submission) {
  
  // Send only  '5 - 10' and        '11 - 20'
  if ($submission['Phones needed'] != '1 - 4' && $submission['Phones needed'] != '2 - 4' && $submission['Phones needed'] != '5 - 10' && $submission['Phones needed'] != '11 - 20') {
    return NULL;
  }
  
  if ($submission['Phones needed'] == '1 - 4') {
    $submission['Phones needed'] = '2 - 4';
  }
    
  $map_main = array(
    'First Name' => 'first_name',
    'Last Name' => 'last_name',
    'Phones needed' => '00N50000001Pxsf', // Number of Phone Lines  
    'Quote type' => '00N50000001PrEA', // Comments
    'Buying Time Frame' => '00N50000001ya9a',
    'Company' => 'company',
    'Email' => 'email',
    //'Website' => 'URL',
    'Phone #' => 'phone',
  );
 
      
  // Set initial fields.
  $data_to = array(
    'lead_source' => 'LG-GetVoIP',
    'oid' => '00D300000006Mvt', 
    'retURL' =>  'http://go.8x8.com/getvoip', //'http://getvoip.com',
      
    'Campaign_ID' => '70150000000fg2g', //'70150000000g8vF',
    'member_status' => 'Responded',
      
    'debug' => 1,
    'debugEmail' => 'jessica.weimer@8x8.com',//'all4senses@gmail.com',
      
    'title' => 'N/A',
    'industry' => 'N/A',
      
    'city' => 'N/A',
    'state' => 'N/A',
    'street' => 'N/A',
    'zip' => 'N/A', 
    'title' => 'N/A',
    'country' => 'N/A',
    'employees' => 'N/A',
  );
  
  
  // Map data to remote vars names.
  foreach ($map_main as $getvoip_key => $remote_key) {
    $data_to[$remote_key] = isset($submission[$getvoip_key]) ? $submission[$getvoip_key] : '';
  }
  
  $url = 'https://salesforce.ringlead.com/cgi-bin/797/1/dedup.pl';
  //$url = 'https://www.salesforce.com/servlet/servlet.WebToLead?encoding=UTF-8';
  
  //$url = 'http://getvoip.com/request-test';
  
  $curl = curl_init();
  curl_setopt($curl, CURLOPT_URL, $url);
  curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
  curl_setopt($curl, CURLOPT_TIMEOUT, 300);
  curl_setopt($curl, CURLOPT_POST, TRUE);
  curl_setopt($curl, CURLOPT_POSTFIELDS, $data_to);
  $data_from = curl_exec($curl);
  if ($data_from === false) {
    $data_from = 'Error!!! 
' . curl_error($curl);
  }
  curl_close($curl);
 

  // Report to a4s.
  $out = 'Quote Request submission form:

';
  foreach ($submission as $key => $value) {
   if ($value) {
      $out .= "$key = $value
";
    }
  }
 
 
  // Send a report to admin.
  global $language;
  $params['report'] = $out . '
    

' . $data_from;
  drupal_mail('gv_misc', '8x8_send_report', 'all4senses@gmail.com', $language->language, $params);
  
  return $params['report'];
}


/**
 * Send a request to RingCentral.
 */
function gv_misc_SendRequestToRingCentral($submission) {
  
  // Send only  '5 - 10' and        '11 - 20'
//  if ($submission['Phones needed'] != '1 - 4' && $submission['Phones needed'] != '2 - 4' && $submission['Phones needed'] != '5 - 10' && $submission['Phones needed'] != '11 - 20') {
//    return NULL;
//  }
    
  /*
  $map_phonesNeeded = array(
    '1 - 4' => '2-19',
    '5 - 10' => '2-19',
    '11 - 20' => '2-19',
    '21 - 50' => '20-49',
    'More than 50' => '50-99',
  );
  */
  $map_phonesNeeded = array(
    '1 - 4' => '2-4',
    '5 - 10' => '5-9',
    '11 - 20' => '11-20',
    '21 - 50' => '21-49',
    'More than 50' => '50-99',
  );
  
  
  $submission['Phones needed'] = $map_phonesNeeded[$submission['Phones needed']];
  
  
  $map_main = array(
    'First Name' => 'FirstName',
    'Last Name' => 'LastName',
    'Phones needed' => 'NumberOfEmployees__c', 
    //'Quote type' => '', 
    'Buying Time Frame' => 'Time_Frame__c',
    'Company' => 'Company',
    'Email' => 'Email',
    'Phone #' => 'Phone',
  );
 
      
  // Set initial fields.
  $data_to = array(
    'lead_source' => 'Lead Generation',
    'BMID__c' => 'GETVOIPHQL',
    
    //'AID__c' => 'GETVOIPHQL',
    //'PID__c' => 'GETVOIPHQL',
      
    'Number_of_Locations__c_lead' => 1,
      
    //'oid' => '00D80000000aRUX',
    //'Campaign_ID' => '70180000000auP8',
    //'member_status' => 'Responded',
      
    'retURL' =>  'http://marketo.ringcentral.com/LeadGen1-ThankYou.html',
    'returnURL' =>  'http://marketo.ringcentral.com/LeadGen1-ThankYou.html',
      
    //'debug' => 1,
    //'debugEmail' => 'wilson.chu@ringcentral.com',//'all4senses@gmail.com',
    
    'lpId' => '4529',//'IpId' => '4529',
    'subId' => '100',//'subld' => '100',
    'munchkinId' => '075-DTB-715',//'munkchkinld' => '075-DTB-715',
    'lpurl' => 'http://marketo.ringcentral.com/HQLLeadSubmissionform.html?cr={creative}&kw={keyword}',//'Ipurl' => 'http://marketo.ringcentral.com/HQLLeadSubmissionform.html?cr={creative}&kw={keyword}',
    'formid' => '1163',
    'returnLPId' => '1947',//'returnLPld' => '1947',
    '_mkt_disp' => 'return',
      
    '_mkt_trk' => 'id:075-DTB-715',
    //'_mkt_trk' => 'id:075-DTB-715&token:_mch-ringcentral.com-1363383929343-15901',
      
      
    'Title' => 'NA',
    'Industry' => 'Advertising, Marketing, Media, PR',
      
    'City' => 'NA',
    'State' => 'AK',
    'Street' => 'NA',
    //'zip' => 'N/A', 
    'Country' => 'USA',
    'Description_of_Your_Business__c' => 'NA',
    'Notes__c' => 'NA',
    'Number_Of_Locations__c' => 'NA',
      
    //'NumberOfEmployees' => 'N/A',
      
    //'kw' => 'not found',
    //'cr' => 'not found',
  );
    
  
  // Map data to remote vars names.
  foreach ($map_main as $getvoip_key => $remote_key) {
    $data_to[$remote_key] = isset($submission[$getvoip_key]) ? $submission[$getvoip_key] : '';
  }
  
  
  //$url = 'http://marketo.ringcentral.com/HQLLeadSubmissionform.html';
  $url = 'http://marketo.ringcentral.com/index.php/leadCapture/save';
  
  
  $curl = curl_init();
  curl_setopt($curl, CURLOPT_URL, $url);
  curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
  curl_setopt($curl, CURLOPT_TIMEOUT, 300);
  curl_setopt($curl, CURLOPT_POST, TRUE);
  curl_setopt($curl, CURLOPT_POSTFIELDS, $data_to);
  $data_from = curl_exec($curl);
  if ($data_from === false) {
    $data_from = 'Error!!! 
' . curl_error($curl);
  }
  curl_close($curl);
 

  // Report to a4s.
  $out = 'Quote Request submission form:

';
  foreach ($submission as $key => $value) {
   if ($value) {
      $out .= "$key = $value
";
    }
  }
 
 
  // Send a report to admin.
  global $language;
  $params['report'] = $out . '
    

' . $data_from;
  drupal_mail('gv_misc', 'ringcentral_send_report', 'all4senses@gmail.com', $language->language, $params);
  
  return $params['report'];
}


/**
 * Send a request to Nextiva.
 */
function gv_misc_SendRequestToNextiva($submission) {
  
  // Skip sending if "More than 50".
//  if ($submission['Phones needed'] == 'More than 50') {
//    return NULL;
//  }
  
  /*
  $map_main = array(
    'First Name' => 'first_name',
    'Last Name' => 'last_name',
    'Phones needed' => 'employees', // '00N70000002xLFJ', // Number of Locations  ///////////  '00N70000002LdcG', // Number of Phone Lines  
    //'Quote type' => '00N70000002Lgx0', // Comments
    //'Buying Time Frame' => '00N70000002eDO6', 
    'Company' => 'company',
    'Email' => 'email',
    //'Website' => 'URL',
    'Phone #' => 'phone',
  );
 */
  $map_main = array(
    'First Name' => 'FirstName',
    'Last Name' => 'LastName',
    'Phones needed' => 'Number of Phone Lines',
    //'Quote type' => '00N70000002Lgx0', // Comments
    'Buying Time Frame' => 'Notes__c', 
    'Company' => 'Company',
    'Email' => 'Email',
    'Phone #' => 'Phone',
  );
      
  // Set initial fields.
  /*
  $data_to = array(
    'lead_source' => 'GetVoIP',
    'oid' => '00D700000009mLY',
    'retURL' => 'http://getvoip.com',
    'debug' => 1,
    'debugEmail' => 'marketo@nextiva.com', //'all4senses@gmail.com',
      
    'city' => 'N/A',
    'state' => 'N/A',
    'street' => 'N/A',
    'zip' => 'N/A', 
    'title' => 'N/A',
    'country' => 'N/A',
    //'employees' => 'N/A',
      
    //'00N70000002xLFE' => 'Other',
    //'00N70000002xLFT' => 'Other',
    '00N70000002Lgx0' => 'N/A', // Comments
  );
  */
  $data_to = array(
    'LeadSource' => 'Get VoIP',
    'lpId' => '1046',
    'subId' => '209',
    'munchkinId' => '961-FUG-994',
    'kw' => 'not found',
    'cr' => 'not found',
    'searchstr' => 'not found',
    'lpurl' => 'http://business-voip.nextiva.com/getvoip.html?cr={creative}&kw={keyword}',
    'formid' => time(), // 26
    'returnURL' => 'http://business-voip.nextiva.com/ThankYou.html',
    'retURL' => 'http://business-voip.nextiva.com/ThankYou.html',
    'returnLPId' => '21',
    '_mkt_disp' => 'return',
    '_mkt_trk' => 'id:961-FUG-994&token:_mch-nextiva.com-1363692977544-89345',
    
  );
  
  // Map data to remote vars names.
  foreach ($map_main as $getvoip_key => $remote_key) {
    $data_to[$remote_key] = isset($submission[$getvoip_key]) ? $submission[$getvoip_key] : '';
  }
  
  //$url = 'http://getvoip.com/request-test';
  //$url = 'https://www.salesforce.com/servlet/servlet.WebToLead?encoding=UTF-8';
  $url = 'http://business-voip.nextiva.com/index.php/leadCapture/save';
  
  
  $curl = curl_init();
  curl_setopt($curl, CURLOPT_URL, $url);
  curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
  curl_setopt($curl, CURLOPT_TIMEOUT, 300);
  curl_setopt($curl, CURLOPT_POST, TRUE);
  curl_setopt($curl, CURLOPT_POSTFIELDS, $data_to);
  $data_from = curl_exec($curl);
  if ($data_from === false) {
    $data_from = 'Error!!! 
' . curl_error($curl);
  }
  curl_close($curl);
 

  // Report to a4s.
  $out = 'Quote Request submission form:

';
  foreach ($submission as $key => $value) {
   if ($value) {
      $out .= "$key = $value
";
    }
  }
 
 
  // Send a report to admin.
  global $language;
  $params['report'] = $out . '
    

' . $data_from;
  drupal_mail('gv_misc', 'nextiva_send_report', 'all4senses@gmail.com', $language->language, $params);
  
  return $params['report'];
}


/**
 * Implements hook_mail().
 */
function gv_misc_mail($key, &$message, $params) {
  switch ($key) {
    case 'request_quote':
      $message['subject'] = 'GV New request for a quote';
      $message['body'][] = theme('gv_misc_requestQuote_mail', $params['request_data']);
      break;
    
    case 'vocalocity_send_report':
      $message['subject'] = 'GV Report from the Vocalocity request sending.';
      $message['body'][] = $params['report'];
      break;
    case 'nextiva_send_report':
      $message['subject'] = 'GV Report from the Nextiva request sending.';
      $message['body'][] = $params['report'];
      break;
    case 'ringcentral_send_report':
      $message['subject'] = 'GV Report from the RingCentral request sending.';
      $message['body'][] = $params['report'];
      break;
    case '8x8_send_report':
      $message['subject'] = 'GV Report from the 8x8 request sending.';
      $message['body'][] = $params['report'];
      break;
    case 'request_quote_ucaptured_data':
      $message['subject'] = 'GV New captured BUT not submitted user data';
      $message['body'][] = theme('gv_misc_requestQuote_mail', $params['ucaptured_data']);
      break;
    
    case 'new_disqus_user':
      $message['subject'] = 'GV Disqus users check up results';
      $message['body'][] = $params['report'];
      break;
    
    case 'email_verification':
      $message['subject'] = t('Submitted Review Requires One-Click Email Verification');
      $message['body'][] = t('Dear User,

Thank you for taking your time to share your VoIP experience by submitting a review.

To faster verify and publish your review, please click on the email verification link below:

!url

Best Wishes,
GetVoIP Team
', array('!url' => 'http://getvoip.com/approve/email/' . $params['verification_code']));
      
      break;
    
    
    
    case 'new_review_admin_notify':
      $message['subject'] = t('New Provider review for "!provider" has been submitted', array('!provider' => $params['provider_name']));
      $message['body'][] = t('Dear administrator!

A new review for the provider "!provider" just has been submitted. Please approve or discard it at !pending_reviews.

Please, don\'t forget to log in to access this page.

Best wishes,
Get VoIP team
', array('!pending_reviews' => 'http://getvoip.com/admin/content/approve-reviews', '!provider' => $params['provider_name']));
      
      break;
    
    
    
    
    
    case 'new_phone_review_admin_notify':
      $message['subject'] = t('New Phone review for "!phone" has been submitted', array('!phone' => $params['phone_name']));
      $message['body'][] = t('Dear administrator!

A new review for the phone "!phone" just has been submitted. Please approve or discard it at !pending_reviews.

Please, don\'t forget to log in to access this page.

Best wishes,
Get VoIP team
', array('!pending_reviews' => 'http://getvoip.com/admin/content/approve-phone-reviews', '!phone' => $params['phone_name']));
      
      break;
    
    
  }
}  


/**
 * Simple theming of a Request for quote mail content.
 */
function theme_gv_misc_requestQuote_mail($data) {
 $out = 'Quote Request submission form:

';
 foreach ($data as $key => $value) {
   if ($value) {
    $out .= "$key = $value
";
   }
 }
 
 return $out;
}


/**
 * Simple theming of the email with Captured but not submitted by a user data on a Request a quote page.
 */
function theme_gv_misc_requestQuoteCaptured_mail($data) {
 $out = 'Captured (and not submitted by a user) data from a Quote Request submission form:

';
 foreach ($data as $key => $value) {
   if ($value) {
    $out .= "$key = $value
";
   }
 }
 
 return $out;
}


/**
* Implementation of hook_mail_alter().
* Here we allow the site name to be used as the senders name for outgoing email.
* see http://drupal.org/node/209672
* 
* No need for this hook if the smtp module is used.
*/
/*
function gv_misc_mail_alter(&$message){
  $default_from = variable_get('site_mail', ini_get('sendmail_from'));
  
  if($message['from'] == $default_from){
    $message['from'] = '"'. variable_get('site_name', 'GetVoIP.com') .'" <'. $default_from .'>';
    $message['headers']['From'] = $message['headers']['Sender'] = $message['headers']['Return-Path'] = $message['headers']['Errors-To'] = $message['headers']['Reply-To'] = $message['from'];
  }
}
*/


/**
 * Helper function to send preset messages.
 */
function gv_misc_sendMessage($tag, $data = NULL) {
  
  switch ($tag) {
    
    case 'new_phone_review_admin_notify':
      global $language;
      $params['phone_name'] = $data['phone_name'];
      drupal_mail('gv_misc', 'new_phone_review_admin_notify', 'ry@getvoip.com', $language->language, $params);
      drupal_mail('gv_misc', 'new_phone_review_admin_notify', 'all4senses@gmail.com', $language->language, $params);
      
      break;
  
    
    case 'new_review_admin_notify':
      /*
      $admins = gv_misc_getAdmins();
      foreach ($admins as $recipient) {
        $params['recipient'] = $recipient;
        drupal_mail('gv_misc', 'new_review_admin_notify', $recipient->mail, user_preferred_language($recipient), $params);
      }
      */
      global $language;
      $params['provider_name'] = $data['provider_name'];
      drupal_mail('gv_misc', 'new_review_admin_notify', 'ry@getvoip.com', $language->language, $params);
      drupal_mail('gv_misc', 'new_review_admin_notify', 'all4senses@gmail.com', $language->language, $params);
      
      
      break;
  

      
  case 'email_verification':
      
      global $language;
      $params['verification_code'] = $data['verification_code'];
      drupal_mail('gv_misc', 'email_verification', $data['email'], $language, $params, 'GetVoIP.com <contact@getvoip.com>');
      
      break;
  }
}


/**
 * Get site's admins objects.
 */
function gv_misc_getAdmins() {
  $query = db_select('users', 'u')
        ->fields('u');
  $query->leftJoin('users_roles', 'ur', 'ur.uid = u.uid');
  $query->leftJoin('role', 'r', 'r.rid = ur.rid');
  $query->condition('r.name', 'administrator');
  $admins = $query->execute()->fetchAllAssoc('uid');

  return $admins;
}


/**
 * Implements hook_form_alter().
 *
 * @param array &$form
 *   Array with declared form.
 *
 * @param array &$form_state
 *   Array with current form state.
 *
 * @param string $form_id
 *   Form ID.
 *
 * @return void
 *   Return nothing.
 */
function gv_misc_form_alter(&$form, &$form_state, $form_id) {
  
  //dpm($form_id);dpm($form);
  
  // Unlink Ckeditor from the comment input form.
  /*
  if($form['#id'] == 'comment-form') {
    $form['comment_body']['und'][0]['#type'] = 'textarea';
  }
  */
  if (isset($form['#node']) && $form_id == $form['#node']->type .'_node_form') {
    $form['body']['und']['0']['#format'] = "full_html";
    //$form['field_custom_php_code']['und']['0']['#format'] = "php_code";
  }
}


/**
 * Returns topics list for a specific content type. 
 * 
 * Allows to use same topics for News, articles, etc.
 */
function gv_misc_getTopics($content_type, $base_url = NULL, $limit = NULL, $pager = NULL, $pages_per_page = 30, $orderBy = NULL) {
  $topics = NULL;
  
  $main_topics_voc = taxonomy_vocabulary_machine_name_load(TOPICS);
  
  // Old style query, for reference.
  // $results = db_query("SELECT td.name, COUNT(n.nid) AS count FROM {taxonomy_term_data} td LEFT JOIN {taxonomy_index} ti ON ti.tid = td.tid INNER JOIN {node} n ON (n.nid = ti.nid AND n.type = :type) WHERE td.vid = :vid GROUP BY td.name LIMIT $limit", array(':vid' => $voc->vid, ':type' => $content_type));
    
  $types = array();

  if ($pager) {
    $query = db_select('taxonomy_term_data', 'td')->extend('pagerDefault')->limit($pages_per_page);
  }
  else {
    $query = db_select('taxonomy_term_data', 'td');
  }
  
  $query->fields('td', array('name', 'tid', 'description'));
  $query->leftJoin('taxonomy_index', 'ti', 'ti.tid = td.tid');
  $query->leftJoin('node', 'n', 'n.nid = ti.nid');
  $query->where('n.nid = ti.nid AND n.type = :type', array(':type' => $content_type))
        ->addExpression('COUNT(n.nid)', 'count');
  $query->groupBy('td.name');
  // Exclude main topics terms -> choose only terms for specific node type.
  $query->condition('td.vid', $main_topics_voc->vid, '!=');
  if ($orderBy) {
    $query->orderBy($orderBy[0], $orderBy[1]);
  }
  else {
    $query->orderBy('count', 'DESC');
  }
  if ($limit) {
    $query->range(0, $limit);
  }
  $results = $query->execute();

  // Necessary for pathauto_cleanstring().
  module_load_include('inc', 'pathauto');

  foreach($results as $result) {
    
    // Translate terms to the current language.
    // $result->name = i18n_string_translate(array('taxonomy', 'term', $result->tid, 'name'), $result->name);
    $base_url = trim($base_url, '/');
    //$result->link = array('link_title' => $result->name, 'href' => $base_url . '/' . urlencode(drupal_strtolower($result->name)));
    ////$result->link = array('link_title' => $result->name, 'href' => $base_url . '/tags/' . str_replace(array(' ', '.'), array('-', ''), drupal_strtolower($result->name)));
    
    //$result->link = array('link_title' => $result->name, 'href' => $base_url . '/tags/' . pathauto_cleanstring($result->name)); // WRONG WAY!
    $result->link = array('link_title' => $result->name, 'href' => 'taxonomy/term/' . $result->tid);
    
    $topics[$result->tid] = /*(array)*/ $result;
  }
  return $topics;
}


/**
 * Implements hook_theme().
 */
function gv_misc_theme($existing, $type, $theme, $path) {
  return array(
    'gv_misc_submenuSimple' => array(
      'variables' => array('vars' => null),
    ),
    'gv_misc_headerLinks' => array(
      'variables' => array('vars' => null),
    ),
    // Fivestar REPLACING theme functions.
    'gv_misc_fivestar_static' => array(
      'variables' => array('rating' => NULL, 'stars' => 5, 'tag' => 'vote', 'widget' => array('name' => 'default', 'css' => '')),
    ),
    // Compose a mail with a Request for a quote page/block.
    'gv_misc_requestQuote_mail' => array(
      'variables' => array(),
    ),
    // Compose a mail with a Captured but not submitted by a user data from a Request for a quote page/block.
    'gv_misc_requestQuoteCaptured_mail' => array(
      'variables' => array(),
    ),
    
      
    // Altered Tagadelic weighted tag cloud.
    'gv_misc_tagadelicWeighted_acceptPredefinedTermsPaths' => array(
      'variables' => array('terms' => array())
    ),
      
    // A bit altered original Theme functions theme_image
    // Here we add an image dimensions if they are not set.
    'gv_misc_image' => array(
      'variables' => array(
        'path' => NULL,
        'width' => NULL,
        'height' => NULL,
        'alt' => '',
        'title' => NULL,
        'attributes' => array(),
      ),
    ),  
      
    // A bit altered original Theme functions theme_image_style
    // Here we add an image dimensions if they are not set.
    'gv_misc_image_style' => array(
      'variables' => array(
        'style_name' => NULL,
        'path' => NULL,
        'width' => NULL,
        'height' => NULL,
        'alt' => '',
        'title' => NULL,
        'attributes' => array(),
      ),
    ),
      
  );
}


function theme_gv_misc_image_style(array $variables) {
  
  
  // Check if a file exists only for anonymous.
//  global $user;
//  if (!$user->uid && !file_exists($variables['path'])) {
//    return NULL;
//  }
  
  
  if (!empty($variables['src']) && !file_exists(ltrim($variables['src'], '/'))) {
    return NULL;
  }
  
  
  $image_src = image_style_url($variables['style_name'], $variables['path']);
  $image = theme('gv_misc_image', array('path' => $image_src, 'source_path' => $variables['path'], 'alt' =>  $variables['alt'], 'title' => $variables['title'] ));
        
  return $image;
}


function theme_gv_misc_image(array $variables) {
  
//  if (!file_exists(str_replace(array('http://getvoip.com/', '%20'), array('', ' '), $variables['path']))) {
//    return NULL;
//  }
  
  // Make a path relative.
  $variables['path'] = str_replace('http://getvoip.com/', '', $variables['path']);
  $variables['path']= urldecode($variables['path']); // remove %20 (' '), %26 (&), etc

  //dpm('relative = ' . $variables['path']);
  
  if (!gv_misc_createCachedImageIfNotExists($variables['path'])) {
    return NULL;
  }
  
  if (!$variables['width']) {
    $size = getimagesize($variables['path']);
    $image = theme('image', array('width' => $size[0], 'height' => $size[1], 'path' => $variables['path'], 'alt' =>  $variables['alt'], 'title' => $variables['title'] ));  
  }
  else {
    $image = theme('image', array('width' => $variables['width'], 'height' => $variables['height'], 'path' => $variables['path'], 'alt' =>  $variables['alt'], 'title' => $variables['title'] ));
  }
  
  return $image;
}


/**
 * Theme function that renders the HTML for the tags.
 *
 * @ingroup themable
 */
function theme_gv_misc_tagadelicWeighted_acceptPredefinedTermsPaths(array $vars) {
  $terms = $vars['terms'];
  $output = '';

  foreach ($terms as $term) {
    $output .= l($term->name, isset($term->link['href']) ? $term->link['href'] : 'taxonomy/term/' . $term->tid, array(
      'attributes' => array(
        'class' => array("tagadelic", "level" . $term->weight),
        'rel' => 'tag',
        'title'  => $term->description,
        )
      )
    ) . " \n";
  }
  
  
  if(isset($vars['voc'])){
    if (count($terms) >= variable_get('tagadelic_block_tags_' . $vars['voc']->vid, 12)) {
      $output .= theme('more_link', array('title' => t('more tags'), 'url' => "tagadelic/chunk/{$vars['voc']->vid}"));
    }
  }

  return $output;
}
  

/**
 * Simple theming of nested submenu.
 */
function theme_gv_misc_headerLinks($vars) {
  if(empty($vars['submenu']['below'])) {
    return NULL;
  }

  $class = isset($vars['class']) ? $vars['class'] : 'header-links';
  $delimiter = isset($vars['delimiter']) ? $vars['delimiter'] : '';
  $out = '<ul class="' . $class . '">';
  $count = 0;
  foreach ($vars['submenu']['below'] as $submenu) {
    if (isset($submenu['link']['hidden']) && $submenu['link']['hidden']) {
      continue;
    }
    
    if ($submenu['link']['link_title'] == 'GooglePlus') {
      $out .= ($count ? $delimiter : '') . '<li>' . l($submenu['link']['link_title'], $submenu['link']['href'], array('attributes' => array('class' => array($submenu['link']['link_title']), 'title' => $submenu['link']['options']['attributes']['title'], 'target' => '_blank', 'rel' => 'publisher' ))) . '</li>';
    }
    else {
      $out .= ($count ? $delimiter : '') . '<li>' . l($submenu['link']['link_title'], $submenu['link']['href'], array('attributes' => array('class' => array($submenu['link']['link_title']), 'title' => $submenu['link']['options']['attributes']['title'], 'target' => '_blank' ))) . '</li>';
    }
    
    $count++;
  }
  $out .= '</ul>';
  return $out;
}


/**
 * Simple theming of nested submenu.
 */
function theme_gv_misc_submenuSimple($vars) {
  if(empty($vars['submenu']['below'])) {
    return NULL;
  }
  $level = isset($vars['level']) ? $vars['level'] : 0;
  $class = isset($vars['class']) ? $vars['class'] : 'om-links';
  $delimiter = isset($vars['delimiter']) ? $vars['delimiter'] : '';
  $out = '<ul class="gv ' . $class . ' lvl-' . $level . '">';
  $count = 0;
  foreach ($vars['submenu']['below'] as $submenu) {
    if (is_object($submenu)) {
      $submenu = (array) $submenu;
    }
    if (isset($submenu['link']['hidden']) && $submenu['link']['hidden']) {
      continue;
    }
    $out .= ($count ? $delimiter : '') . '<li>';
    if($level) {
      for ($i = 0; $i < $level; $i++ ) {
        $out .= '--';
      }
    }
    $title = t($submenu['link']['link_title']);
    if(isset($submenu['count']) && $submenu['count']) {
      $title .= ' (' . $submenu['count'] . ')';
    }
    // If the field Description has '<nolink>' don't show link for this item
    if(isset($submenu['link']['localized_options']['attributes']['title']) && strtolower($submenu['link']['localized_options']['attributes']['title']) == '<nolink>') {
      $out .= $title;
    }
    else {
      $out .= l($title, $submenu['link']['href']);
    }
    $out .= '</li>';
    if (!empty($submenu['below'])) {
      // Recursion call.
      $out .= '<li>' . theme('gv_misc_submenuSimple', array('submenu' => $submenu, 'level' => ($level + 1), 'class' => $class, 'delimiter' => $delimiter )) . '</li>';
    }
    $count++;
  }
  $out .= '</ul>';
  return $out;
}


/**
 * REPLACE FOR ORIGINAL fivestar module theming function. Just to use only its theming functionality.
 * 
 * Display a plain HTML view-only version of the widget with a specified rating.
 *
 * @param $rating
 *   The desired rating to display out of 100 (i.e. 80 is 4 out of 5 stars).
 * @param $stars
 *   The total number of stars this rating is out of.
 * @param $tag
 *   Allows multiple ratings per node.
 * @return
 *   A themed HTML string representing the star widget.
 */
function theme_gv_misc_fivestar_static($variables) {
  $rating  = $variables['rating'];
  $stars = $variables['stars'];
  $tag = $variables['tag'];
  $widget = $variables['widget'];

  // GV Intrusion!!!!
  $path = drupal_get_path('module', 'gv_misc') . '/css/fivestar';
  drupal_add_css($path . '/css/fivestar.css');
  // END of intrusion.
  
  if($widget['name'] != 'default') {
    // GV changes.
    //drupal_add_css($widget['css']);
    drupal_add_css($path . '/widgets/' . $widget['name'] . '/' . $widget['css']);
  }
  
  $output = '<div class="fivestar fivestar-' . $widget['name'] . '">';
  $output .= '<div class="fivestar-widget-static fivestar-widget-static-'. $tag .' fivestar-widget-static-'. $stars . ' clearfix">';
  if (empty($stars)) {
    $stars = 5;
  }
  $numeric_rating = $rating/(100/$stars);
  for ($n=1; $n <= $stars; $n++) {
    $star_value = ceil((100/$stars) * $n);
    $prev_star_value = ceil((100/$stars) * ($n-1));
    $zebra = ($n % 2 == 0) ? 'even' : 'odd';
    $first = $n == 1 ? ' star-first' : '';
    $last = $n == $stars ? ' star-last' : '';
    $output .= '<div class="star star-'. $n .' star-'. $zebra . $first . $last .'">';
    if ($rating < $star_value && $rating > $prev_star_value) {
      $percent = (($rating - $prev_star_value) / ($star_value - $prev_star_value)) * 100;
      $output .= '<span class="on" style="width: '. $percent .'%">';
    }
    elseif ($rating >= $star_value) {
      $output .= '<span class="on">';
    }
    else {
      $output .= '<span class="off">';
    }
    if ($n == 1)$output .= $numeric_rating;
    $output .= '</span></div>';
  }
  $output .= '</div></div>';
  return $output;
}


/**
 * Returns all available providers aray with nid => title.
 */
function gv_misc_getProviders(&$providers, $scope = 'all', $data = NULL) {

  
  
  global $language;
  $cache_name = 'gv_provider_list_' . $scope . '_' . $language->language;
  
  $cache_content = cache_get($cache_name);
  if ($cache_content && !empty($cache_content->data) && $cache_content->expire > time()) {
    $providers = $cache_content->data;
    return;
  }
  
  //dpm('plist no cache');
  
  
  
  if ($scope == 'all') {
    $query = db_select('node', 'n');
    $query->join('field_data_field_p_name', 'pn', "pn.entity_id = n.nid");
    $query->fields('n', array('nid', 'title'))  
          ->fields('pn', array('field_p_name_value')) 
          ->condition('n.type', 'provider')
          ->condition('n.status', 1); 
    $result = $query->execute(); 

    foreach($result as $provider) {
      $providers[$provider->nid] = $provider->field_p_name_value;// . ' - ' . $provider->field_p_types_value; // = $provider->title;
    }

    // Sort providers alphabetically.
    //SORT_NATURAL | SORT_FLAG_CASE   only for php from 5.4.0
    //asort($providers); 
    natcasesort($providers);
  }
  elseif ($scope == 'all_by_service_type') {
    $query = db_select('node', 'n');
    $query->join('field_data_field_p_types', 'pt', "pt.entity_id = n.nid"); 
    $query->join('field_data_field_p_name', 'pn', "pn.entity_id = n.nid");
    $query->fields('n', array('nid', 'title'))  
          ->fields('pt', array('field_p_types_value'))
          ->fields('pn', array('field_p_name_value')) 
          ->condition('n.type', 'provider')
          ->condition('n.status', 1);
    if (is_array($data)) {
      $query->condition('pt.field_p_types_value', $data, 'IN');
    }
    else {
      $query->condition('pt.field_p_types_value', $data);
    }
    $result = $query->execute(); 

    foreach($result as $provider) {
      $providers[$provider->field_p_name_value] = $provider->field_p_name_value;// . ' - ' . $provider->field_p_types_value; // = $provider->title;
    }

    // Sort providers alphabetically.
    //SORT_NATURAL | SORT_FLAG_CASE   only for php from 5.4.0
    //asort($providers); 
    natcasesort($providers);
  }
  elseif ($scope == 'all_with_reviews_including_others_from_reviews') {
    $query = db_select('field_data_field_r_provider_name', 'pn');
    $query->fields('pn', array('field_r_provider_name_value'))
          ->distinct(); 
    $result = $query->execute(); 
    foreach($result as $provider) {
      $providers[$provider->field_r_provider_name_value] = $provider->field_r_provider_name_value; // = $provider->title;
    }
    // Sort providers alphabetically.
    //SORT_NATURAL | SORT_FLAG_CASE   only for php from 5.4.0
    //asort($providers); 
    natcasesort($providers);
  }

  if (count($providers)> 3) {
    cache_set($cache_name, $providers, 'cache', time() + 14400);
  }
}
    

/**
 * Returns all available phones array with nid => title.
 */
function gv_misc_getPhones(&$phones, $scope = 'all', $data = NULL) {
  
  if ($scope == 'all') {
    $query = db_select('node', 'n');
    //$query->join('field_data_field_p_types', 'pt', "pt.entity_id = n.nid"); 
    $query->join('field_data_field_p_name', 'pn', "pn.entity_id = n.nid");
    $query->fields('n', array('nid', 'title'))  
          //->fields('pt', array('field_p_types_value'))
          ->fields('pn', array('field_p_name_value')) 
          ->condition('n.type', 'phone')
          ->condition('n.status', 1); 
    $result = $query->execute(); 

    foreach($result as $phone) {
      $phones[$phone->nid] = $phone->field_p_name_value;// . ' - ' . $phone->field_p_types_value; // = $phone->title;
    }

    // Sort phones alphabetically.
    //SORT_NATURAL | SORT_FLAG_CASE   only for php from 5.4.0
    //asort($phones); 
    natcasesort($phones);
  }
}


/**
 * Checks if the email is already taken by one of the site's registered user.
 */
function gv_misc_emailIsRegistered($email) {
  $data = db_select('users', 'u')
          ->fields('u', array('uid'))
          ->condition('mail', $email)
          ->execute();
  if ($email = $data->fetchField()) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}




/**
 * Check if a current user already submitted a review for a specific Provider and return it if it exists.
 */
function gv_misc_userHasSubmittedReview($provider_nid, $user_uid, $user_email = NULL, $other_provider_title = NULL, $current_review_nid = NULL) {
  
  if (!$user_uid && !$user_email) {
    // Not full source data...
    // For uid = 0 should be set email also.
    return FALSE;
  }
  
  $data = db_select('node', 'n')
        ->fields('n', array('nid', 'title'))
        ->fields('na', array('field_r_notapproved_value'));
  $data->leftJoin('field_data_field_ref_provider', 'rp', "rp.entity_id = n.nid");
  $data->leftJoin('field_data_field_r_oprovider', 'op', "op.entity_id = n.nid");
  $data->leftJoin('field_data_field_r_email', 'ue', "ue.entity_id = n.nid");
  $data->leftJoin('field_data_field_r_notapproved', 'na', "na.entity_id = n.nid");
  $data->condition('n.type', 'review')
       //->condition('n.uid', $user_uid)
       ;
  
  // For an anonymous user check email as well (we can find a user only that way in this case)
  if ($user_email) {
    // Let's check email instead if uid, as there could exist a review (from other user,  authorized or not) with a such email
    $data->condition('ue.field_r_email_value', $user_email);
  }
  
  // exclude a currently submitted review from the search.
  if ($current_review_nid) {
    $data->condition('n.nid', $current_review_nid, '!=');
  }
  
  if ($provider_nid) {
    $data->condition('rp.field_ref_provider_target_id', $provider_nid);
  }
  elseif ($other_provider_title) {
    $data->condition('op.field_r_oprovider_value', $other_provider_title);
  }
  else {
    // No provider id or title set.
    return FALSE;
  }
  
  $data = $data->execute()->fetchObject();
  
  if (empty($data)) {
    return FALSE;
  }
  else {
    return $data;
  }
}


/**
 * Implements hook_token_info().
 */
function gv_misc_token_info() {
  // Defines new token 'Provider name' in the node torens group.
  $info['tokens']['node']['provider-name-for-current-review'] = array(
    'name' => t('Provider name for a current review'),
    'description' => t('Name of the provider chosen from a select list or from a custom field if its provided...'),
  );

  return $info;
}


/**
 * Implements hook_tokens().
 * 
 * Provides token for a current review's provider name. It set to selected from a list or from a manually filled field (if not selected from a list).
 */
function gv_misc_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  $sanitize = !empty($options['sanitize']);

  // Add new token 'provider-name-for-current-review' to a 'node' tokens group.
  if ($type == 'node' && !empty($data['node'])) {
    $node = $data['node'];

    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'provider-name-for-current-review':
          if ($node->type == 'review') {
            if (isset($node->field_ref_provider['und'][0]['target_id']) && $node->field_ref_provider['und'][0]['target_id']) {
              
//              $provider_title = db_select('node', 'n')
//                ->fields('n', array('title'))
//                ->condition('nid', $node->field_ref_provider['und'][0]['target_id'])
//                ->execute()->fetchField();
              
              
              $query = db_select('node', 'n');
              $query->join('field_data_field_p_name', 'pn', "pn.entity_id = n.nid"); // inner_join file_usage table against file_managed
              //$query->fields('n', array('nid', 'title'))  // specifying fields from file_usage table
              $query->fields('pn', array('field_p_name_value')) // specifying fields from file_managed table
                    ->condition('nid', $node->field_ref_provider['und'][0]['target_id']);
              
              $provider_title = $query->execute()->fetchField();
              
              
              
              
              
              $replacements[$original] = $provider_title;
            }
            else {
              $replacements[$original] = check_plain($node->field_r_oprovider['und'][0]['value']);
            }

          }
          
          break;
      }
    }
  }
  
  return $replacements;
}



/**
 * Implements hook_TYPE_alter().
 * 
 * Provides custom tags for the Votes API via votingapi_metadata alter (defined in ).
 */
function gv_misc_votingapi_metadata_alter(&$data) {
  $data['tags'] += array(
    'sound' => array(
      'name' => t(SOUND),
      'description' => t('Sound Quality Rating for a provider.'),
    ),
    'install' => array(
      'name' => t(INSTALL),
      'description' => t('Installation Process Rating for a provider.'),
    ),
    'service' => array(
      'name' => t(CUSTOMER),
      'description' => t('Value for Customer Service Rating for a provider.'),
    ),
    'rely' => array(
      'name' => t(RELY),
      'description' => t('Reliability Rating for a provider.'),
    ),
    'features' => array(
      'name' => t(FEATURES),
      'description' => t('Features Rating for a provider.'),
    ),
    'money' => array(
      'name' => t(PRICE),
      'description' => t('Value for Money Rating for a provider.'),
    ),
    'recommend' => array(
      'name' => t(RECOMMEND),
      'description' => t('Value for Would you recommend this VoIP provider. Yes or No.'),
    ),
    'overall' => array(
      'name' => t(OVERALL),
      'description' => t('Average overall value for all providers rates.'),
    ),
  );
}



/**
 * Implements hook_views_pre_render().
 */

function gv_misc_views_pre_render(&$view) {
  
  //dpm($view->name); dpm($view->current_display);

  // Add a prefaces for the some views pages.
  $key = 'view-' . $view->name . '-' . $view->current_display;
  $do_attach_preface = FALSE;
  
  switch($key) {
    
    case 'view-providers-block_providers_list': 
    case 'view-providers-block_providers_list_table': 
     
      $view->attachment_before = 'Total: ' . count($view->result) . ' providers';
      //$view->attachment_after = count($view->result) . ' items';
      
      break;
    
    case 'view-providers-page_p_bu': 
      // Business Providers listing page.
    case 'view-providers-page_p_re': 
      // Residential Providers listing page.
    case 'view-reviews-page_all_reviews': 
      // Residential Providers listing page.
      
    case 'view-blog-page': 
    case 'view-blog-page_by_tag':
      
    case 'view-articles-page': 
    case 'view-articles-page_by_tag':
    
    case 'view-news-page': 
    case 'view-news-page_by_tag':
      
    case 'view-sitemap-page': 
   
    case 'view-taxonomy_term-page_by_tag':
      
      $do_attach_preface = TRUE;
      break;
    
    
    case 'view-reviews-block_all_reviews':
      
      $providers = array('' => t('- All Providers -'));
      gv_misc_getProviders($providers, 'all_with_reviews_including_others_from_reviews');

      if (isset($_GET['provider']) && isset($providers[$_GET['provider']])) {
        $provider_isset = TRUE;
      }
      else {
        $provider_isset = FALSE;
      }
      $url = '';
      foreach ($_GET as $key => $value) {
        if ($key == 'q' || $key == 'provider') {
          continue;
        }
        $url .= '&' . $key . '=' . urlencode($value);
      }

      $select_providers['all-reviews-select-providers'] = array(
          '#type' => 'select',
          '#title' => t('Choose a Provider'),
          '#options' => $providers,
          '#default_value' => $provider_isset ? $providers[$_GET['provider']] : $providers[''],
          '#value' => $provider_isset ? $providers[$_GET['provider']] : $providers[''],
          ////'#default_value' => 'VoIPo',
          ////'#value' => 'VoIPo',
          '#attributes' => array('id' => 'select_provider',  'onChange' => "top.location.href='http://getvoip.com/" . $_GET['q'] . "?provider=' + encodeURIComponent(document.getElementById('select_provider').options[document.getElementById('select_provider').selectedIndex].value) + '$url'"),

      ); 
      
      $view->attachment_before = render($select_providers);
      
      break;
      
      
      
    case 'view-reviews-block_all_reviews_bu':
    case 'view-reviews-block_all_reviews_re':
    case 'view-reviews-block_all_reviews_ca':
      
      $providers = array('' => t('- All Providers -'));
      $p_key = $key;
      $r_p_types = array('view-reviews-block_all_reviews_bu' => array('business', 'Business'), 
                         'view-reviews-block_all_reviews_re' => array('residential', 'Residential'),
                         'view-reviews-block_all_reviews_ca' => array(array('re_ca', 'bu_ca'), '') //'Canadian'
                        );
      gv_misc_getProviders($providers, 'all_by_service_type', $r_p_types[$p_key][0]);

      
      if (isset($_GET['provider']) && isset($providers[$_GET['provider']])) {
        $provider_isset = TRUE;
      }
      else {
        $provider_isset = FALSE;
      }
      $url = '';
      foreach ($_GET as $key => $value) {
        if ($key == 'q' || $key == 'provider') {
          continue;
        }
        $url .= '&' . $key . '=' . urlencode($value);
      }

     
      $select_providers['all-reviews-select-providers'] = array(
          '#type' => 'select',
          '#title' => t('Choose a ' . $r_p_types[$p_key][1] .' Provider'),
          '#options' => $providers,
          '#default_value' => $provider_isset ? $providers[$_GET['provider']] : $providers[''],
          '#value' => $provider_isset ? $providers[$_GET['provider']] : $providers[''],
          ////'#default_value' => 'VoIPo',
          ////'#value' => 'VoIPo',
          '#attributes' => array('id' => 'select_provider',  'onChange' => "top.location.href='http://getvoip.com/" . $_GET['q'] . "?provider=' + encodeURIComponent(document.getElementById('select_provider').options[document.getElementById('select_provider').selectedIndex].value) + '$url'"),

      ); 
      
      $view->attachment_before = render($select_providers);
      
      break;
      
  }
  
  // Redefine the $key if on the specific content type.
  if ($key == 'view-taxonomy_term-page_by_tag') {
    $args = arg();
    
    // Disable any pages called with additional arguments after term_id in url, like taxonomy/term/597/feed (feed should be disables)
    if (isset($args[3])) {
      gv_misc_drupal_not_found();
      drupal_exit();
    }
    
    $term = taxonomy_term_load($args[2]);
    
    switch ($term->vocabulary_machine_name) {
      case 'news_tags':
        $key = 'view-news-page_by_tag';
        break;
      case 'blog_tags':
        $key = 'view-blog-page_by_tag';
        break;
      case 'articles_tags':
        $key = 'view-articles-page_by_tag';
        break;
      default:
        // Don't show, hide other vocabularies terms pages!!!
        global $user;
        if ($user->uid == 1) {
          drupal_set_message('Main tags holder Tags content page! Not accessible by regular users.', 'warning');
        }
        else {
          gv_misc_drupal_not_found();
          drupal_exit();
        }
        
    }

  }
  if ($do_attach_preface && $preface_node = gv_misc_getPrefaceByKey($key)) {
   
    if ($view->current_display == 'page_by_tag') {
      
      // No index tags pages, by recomendations of SEO guys.
      gv_misc_addMetatag('robots', 'noindex,follow');
      
      global $current_tag_title;
      $current_tag_title = $preface_node->title . ' "' . htmlspecialchars_decode($view->build_info['substitutions']['%1']) . '"';
      
      // add metatag title for the specific term, if it's set in the Metatags block and not equal to defaults.
      if (isset($term->metatags['title']['value']) && $term->metatags['title']['value']) {
        $metatag_title = token_replace($term->metatags['title']['value']);
        gv_misc_addMetatag('title', $metatag_title);
        // Set the title (not only a metatag title) as well.
        $preface_node->title = htmlspecialchars_decode($metatag_title);
        $view->build_info['title'] = $preface_node->title;
      }
      else {
        //$preface_node->title = $view->get_title();//$view->build_info['title'];
        $preface_node->title .= ' "' . htmlspecialchars_decode($view->build_info['substitutions']['%1']) . '"';
        $view->build_info['title'] = $preface_node->title;
      }
      
      // add metatags for the specific term.
      if (isset($term->metatags['keywords']['value']) && $term->metatags['keywords']['value']) {
        gv_misc_addMetatag('keywords', $term->metatags['keywords']['value']);
      }
      else {
        gv_misc_addMetatag('keywords', $term->name);
      }
      
      if (isset($term->description) && $term->description) {
        gv_misc_addMetatag('description', $term->description);
      }
      else {
        
        $query = db_select('taxonomy_index', 'ti');
        $query->join('node', 'n', "n.nid = ti.nid"); 
        $query->join('field_revision_field_a_teaser', 'tf', "tf.entity_type = 'node' AND tf.entity_id = ti.nid"); 
        $query->fields('tf', array('field_a_teaser_value'))
              ->orderBy('n.created', 'DESC')
              ->condition('n.type', array('article', 'blog_post', 'news_post'), 'IN')
              ->condition('ti.tid', $term->tid); 
        $node_a_teaser = $query->execute()->fetchField(); 

        if ($node_a_teaser) {
          gv_misc_addMetatag('description', $preface_node->title . '. ' . drupal_substr(rtrim(strip_tags($node_a_teaser), 'Read More'), 0, 150));
        }
      } // End of else of if (isset($term->description) && $term->description) {
      
      
    } // End of if ($view->current_display == 'page_by_tag') {
    else {
      // Change the title of the view (main page title actually)
      if (isset($preface_node->metatags['title']['value'])) {
        $view->build_info['title'] = $preface_node->metatags['title']['value'];
      }
      else{
        $view->build_info['title'] = $preface_node->title;
      }
    }
    
    
    // Show plain caption, not a link for a full node as a full node itself will be unpublished and unreachable.
    $preface_node->title_no_link = TRUE;
    // Hide the title of the preface.
    // $preface_node->title = '';
    // Works, but it's shown after exposed filters.
    $view->attachment_before = render(node_view($preface_node, 'full'));
    
//    global $user;
//    if ($user->uid == 1) {
//      $view->attachment_after = "test";
//    }
    
    // DOesn't work.
    /*
    $view->header = array(
        '#type' => 'item',
        '#markup' => '<div class="preface">' . render(node_view($preface_node)) . '</div>',
    );
    */

    
  }
   
} 


/**
 * Returns preface node by key.
 */
function gv_misc_getPrefaceByKey($key) {
    
    $preface_node = NULL;
    
    $query = db_select('node', 'n');
    $query->join('field_data_field_preface_key', 'pk', "pk.entity_id = n.nid"); 
    $query->fields('n', array('nid'))  
          //->fields('pn', array('field_preface_key_value')) 
          ->condition('n.type', 'preface')
          ->condition('pk.field_preface_key_value', $key); 
    $preface_nid = $query->execute()->fetchField(); 
    if ($preface_nid) {
      $preface_node = node_load($preface_nid);
    }
    return $preface_node;
  }
  
  
/**
 * Returns all fees for available providers.
 */
function gv_misc_getProvidersFees($scope = 'all') {
  if ($scope == 'all') {
    $data = db_select('field_revision_field_p_fees_save', 'f')
          ->fields('f', array('entity_id', 'field_p_fees_save_value'))
          ->execute();
    foreach($data as $fee) {
      $fees[$fee->entity_id] = unserialize($fee->field_p_fees_save_value);
    }
  }
  return $fees;
}


/**
 * Returns all quick data for available providers.
 */
function gv_misc_getProvidersDataQuick($scope = 'all', $reset = FALSE, $clear_from_session = FALSE) {
  
  static $var_p_all_data_quick;
  static $request_counter;
  
  if (!$var_p_all_data_quick && !$reset && !$clear_from_session) {
    $var_p_all_data_quick = variable_get('p_all_data_quick');
    //dpm('used from var');
    $request_counter = 0;
  }
  else {
    $request_counter++;
    //dpm('used from static');
    //dpm('$request_counter = ' . $request_counter);
  }
  
  //if ($clear_from_session && isset($_SESSION['p_all_data_quick'])) {
  if ($clear_from_session && $var_p_all_data_quick) {
    // Reset a helper session var with all quick data.
    //unset($_SESSION['p_all_data_quick']);
    variable_set('p_all_data_quick', NULL);
    $var_p_all_data_quick = NULL;
  }
    
  $p_data_quick = NULL;
  if ($scope == 'all') {
    // If data is not in the Session or its age more than 5 hours, reset it.
    
    //if(!$reset && !empty($_SESSION['p_all_data_quick'])) {
    if(!$reset && $var_p_all_data_quick) {
      //$p_data_quick = $_SESSION['p_all_data_quick'];
      $p_data_quick = $var_p_all_data_quick;
    }
    else {
      $p_data_quick = NULL;
    }
    
    
    if ($reset || !$p_data_quick || time() > ($p_data_quick['timestamp'] + 18000) ) {
      $data = db_select('field_revision_field_p_data_quick', 'f')
            ->fields('f', array('entity_id', 'field_p_data_quick_value'))
            ->execute();
      foreach($data as $value) {
        $p_data_quick[$value->entity_id] = unserialize($value->field_p_data_quick_value);
      }

      $p_data_quick['timestamp'] = time();
      //$_SESSION['p_all_data_quick'] = $p_data_quick;
      variable_set('p_all_data_quick', $p_data_quick);
      $var_p_all_data_quick = $p_data_quick;
    }
  }
  return $p_data_quick;  
}
    


/**
 * Return sprite image with link for a provider from certain sprite by nid.
 */
function gv_misc_getProviderLogoFromSprite($nid, $sprite_name, $all_data_quick = NULL) {

  $gv_providers_sprites = variable_get('gv_providers_sprites');
  if (isset($gv_providers_sprites[$sprite_name]['data'][$nid])) {
    $out_sprite_path = 'sites/default/files/p/';
    if (!$all_data_quick) {
      $all_data_quick = gv_misc_getProvidersDataQuick();
    }
    //dpm($gv_providers_sprites[$sprite_name]['data'][$nid]);
    
    if ($gv_providers_sprites[$sprite_name]['data'][$nid]['h'] < 45) {
      //return '<div style="width: 130px; height: ' . (45 - $gv_providers_sprites[$sprite_name]['data'][$nid]['h'])/2 . 'px"></div><div title="' . $all_data_quick[$nid]['name'] . ' site" style="margin: auto; width: 130px; height: ' . $gv_providers_sprites[$sprite_name]['data'][$nid]['h'] . 'px; background: url('. "'/" . $out_sprite_path . $sprite_name . '.png?' . $gv_providers_sprites[$sprite_name]['time'] . "')" . ' no-repeat 0 -' . $gv_providers_sprites[$sprite_name]['data'][$nid]['y'] . 'px transparent;"></div><div style="width: 130px; height: ' . (45 - $gv_providers_sprites[$sprite_name]['data'][$nid]['h'])/2 . 'px"></div>';
      ////return '<div style="width: ' . $gv_providers_sprites[$sprite_name]['data'][$nid]['w'] . 'px; height: ' . (45 - $gv_providers_sprites[$sprite_name]['data'][$nid]['h'])/2 . 'px"></div><div title="' . $all_data_quick[$nid]['name'] . ' site" style="margin: auto; width: 130px; height: ' . $gv_providers_sprites[$sprite_name]['data'][$nid]['h'] . 'px; background: url('. "'/" . $out_sprite_path . $sprite_name . '.png?' . $gv_providers_sprites[$sprite_name]['time'] . "')" . ' no-repeat 0 -' . $gv_providers_sprites[$sprite_name]['data'][$nid]['y'] . 'px transparent;"></div><div style="width: 130px; height: ' . (45 - $gv_providers_sprites[$sprite_name]['data'][$nid]['h'])/2 . 'px"></div>';
      return '<div style="width: ' . $gv_providers_sprites[$sprite_name]['data'][$nid]['w'] . 'px; height: ' . (45 - $gv_providers_sprites[$sprite_name]['data'][$nid]['h'])/2 . 'px"></div><div title="' . $all_data_quick[$nid]['name'] . ' site" style="margin: auto; width: ' . $gv_providers_sprites[$sprite_name]['data'][$nid]['w'] . 'px; height: ' . $gv_providers_sprites[$sprite_name]['data'][$nid]['h'] . 'px; background: url('. "'/" . $out_sprite_path . $sprite_name . '.png?' . $gv_providers_sprites[$sprite_name]['time'] . "')" . ' no-repeat 0 -' . $gv_providers_sprites[$sprite_name]['data'][$nid]['y'] . 'px transparent;"></div><div style="width: ' . $gv_providers_sprites[$sprite_name]['data'][$nid]['w'] . 'px; height: ' . (45 - $gv_providers_sprites[$sprite_name]['data'][$nid]['h'])/2 . 'px"></div>';
    }
    else 
      {
      //return '<div title="' . $all_data_quick[$nid]['name'] . ' site" style="margin: auto; width: 130px; height: ' . $gv_providers_sprites[$sprite_name]['data'][$nid]['h'] . 'px; background: url('. "'/" . $out_sprite_path . $sprite_name . '.png?' . $gv_providers_sprites[$sprite_name]['time'] . "')" . ' no-repeat 0 -' . $gv_providers_sprites[$sprite_name]['data'][$nid]['y'] . 'px transparent;"></div>';
      return '<div title="' . $all_data_quick[$nid]['name'] . ' site" style="margin: auto; width: ' . $gv_providers_sprites[$sprite_name]['data'][$nid]['w'] . 'px; height: ' . $gv_providers_sprites[$sprite_name]['data'][$nid]['h'] . 'px; background: url('. "'/" . $out_sprite_path . $sprite_name . '.png?' . $gv_providers_sprites[$sprite_name]['time'] . "')" . ' no-repeat 0 -' . $gv_providers_sprites[$sprite_name]['data'][$nid]['y'] . 'px transparent;"></div>';
    }
    
  }
  return NULL;
}        
        

/**
 * Wrapper for gv_misc_getProviderQuickData()
 */
function wdg_misc_getProviderQuickData($target, $data) {
  return gv_misc_getProviderQuickData($target, $data);
}


/**
 * Return specific variable value from p_data_quick for a provider depending on the filter value (business OR residential, etc)
 */
function gv_misc_getProviderQuickData($target, $data) {
  
  $out = '';
  
  switch($target) {
    
    
    case 'compare_check':
      
      $all_data_quick = gv_misc_getProvidersDataQuick();
      $out = '<input type="checkbox" class="p-compare" id="' . $data['data']->nid . '" name="' . $all_data_quick[$data['data']->nid]['name'] . '" />';
      
      
      return $out;
      
      
      
    
    case 'name_n_logo_chart':
      //$count = 1;
      //dpm('name_n_logo_chart ' . $count++);
    
      $all_data_quick = gv_misc_getProvidersDataQuick();
      $out = '';
      
      if (!empty($all_data_quick[$data['data']->nid]['i_web'])) {
        $link = $all_data_quick[$data['data']->nid]['i_web'];
      }
      else {
        $link = url('node/' . $data['data']->nid);
      }
      
      if (!empty($all_data_quick[$data['data']->nid]['i_logo_uri'])) {
        
        $image_style_name = 'logo_provider_chart_main';
        $image = theme('gv_misc_image_style', array('style_name' => $image_style_name, 'path' => $all_data_quick[$data['data']->nid]['i_logo_uri'], 'alt' =>  $all_data_quick[$data['data']->nid]['i_logo_alt'], 'title' =>  $all_data_quick[$data['data']->nid]['i_logo_title'] ));

        $out = gv_misc_getTrackingUrl($image, NULL, $data['data']->nid, NULL, 'logo');
      }

      if (!empty($all_data_quick[$data['data']->nid]['name'])) {
        $out .= '<div class="name">' . gv_misc_getTrackingUrl(@$all_data_quick[$data['data']->nid]['name'], NULL, $data['data']->nid) . '</div>';
        //$out .= l(@$all_data_quick[$data['data']->nid]['name'], 'node/' . $data['data']->nid); 
      }
          
      return $out;
      
      
      
    
    case 'logo_chart':
      
      
      //dpm('logo_chart');
      // Render a logo from sprite.

      //dpm($_SERVER);
      
      
      
      $url_to_sprite = array( '/' => 'home_top_providers', 
                              '/providers/reviews' => 'all_reviews_providers', 
                              //'/compare-business-voip-providers' => 'top_bu_providers', 
                              '/business' => 'top_bu_providers', 
                              
                              '/business-voip-reviews' => 'top_bu_providers', 
                              '/reviews/business' => 'top_bu_providers_rev', 
          
                              '/speed-test-tool' => 'top_bu_providers', 
          
                              //'/hosted-pbx-providers' => 'top_pbx_providers', 
                              '/hosted-pbx' => 'top_pbx_providers', 
                              //'/sip-trunking-providers' => 'top_sip_providers',
                              '/sip-trunking' => 'top_sip_providers',
                              //'/internet-fax-service-providers' => 'top_ifa_providers',
                              '/fax' => 'top_ifa_providers',
                              //'/canada-voip' => 'top_ca_providers',
                              '/canada' => 'top_ca_providers',
                              //'/compare-residential-voip-providers' => 'top_re_providers', 
                              '/residential' => 'top_re_providers', 
                              
                              '/residential-voip-reviews' => 'top_re_providers',
                              '/reviews/residential' => 'top_re_providers_rev',
                            );

      $current_url = $_SERVER['REQUEST_URI'];

      
      
      
      if (isset($url_to_sprite[$current_url]) || $_GET['q'] == 'home') {
      
        if ($_GET['q'] == 'home') {
          $sprite_name = 'home_top_providers';
        }
        else {
          $sprite_name = $url_to_sprite[$current_url];
        }

        /*
//        
        
//        if (@$_GET['t'] == 'xxx') {
//          echo '<PRE>' . print_r($_SERVER, TRUE) . '</PRE>';
//          exit;
//          $p_image = gv_misc_getProviderLogoFromSprite($data['data']->nid, $url_to_sprite[$current_url]);
//          return 'xxx ' . $_SERVER['REQUEST_URI'] . ' -> ' . $url_to_sprite[$current_url] . ' -> ' . $data['data']->nid . ' -> ' . $p_image;
//        }
        
//        if ($_SERVER['HTTP_CF_CONNECTING_IP'] == '37.229.182.41') {
//          $p_image = gv_misc_getProviderLogoFromSprite($data['data']->nid, $url_to_sprite[$current_url]);
//          return 'xxx ' . $_SERVER['REQUEST_URI'] . ' -> ' . $url_to_sprite[$current_url] . ' -> ' . $data['data']->nid . ' -> ' . $p_image;
//        }
        
        */
        
        //if ($p_image = gv_misc_getProviderLogoFromSprite($data['data']->nid, $sprite_name)) {
          $p_image = gv_misc_getProviderLogoFromSprite($data['data']->nid, $sprite_name);
          return gv_misc_getTrackingUrl($p_image, NULL, $data['data']->nid);
        //}
      }
        
        
    case 'logo_article':
    case 'logo_chart_iframe':
    
      $all_data_quick = gv_misc_getProvidersDataQuick();
      $out = '';
      
      //dpm($all_data_quick[$data['data']->nid]);
      if (isset($all_data_quick[$data['data']->nid]['i_web']) && $all_data_quick[$data['data']->nid]['i_web']) {
        $link = $all_data_quick[$data['data']->nid]['i_web'];
      }
      else {
        $link = url('node/' . $data['data']->nid);
      }
      
      if (isset($all_data_quick[$data['data']->nid]['i_logo_uri'])) {
        
        if ($target == 'logo_chart') {
          //$image = theme('image_style', array( 'path' =>  $all_data_quick[$data['data']->nid]['i_logo_uri'], 'style_name' => 'logo_provider_chart_main', 'alt' =>  $all_data_quick[$data['data']->nid]['i_logo_alt'], 'title' =>  $all_data_quick[$data['data']->nid]['i_logo_title']));
          $image_style_name = 'logo_provider_chart_main';
        } 
        elseif ($target == 'logo_chart_iframe') {
          //$image = theme('image_style', array( 'path' =>  $all_data_quick[$data['data']->nid]['i_logo_uri'], 'style_name' => 'logo_provider_chart_iframe', 'alt' =>  $all_data_quick[$data['data']->nid]['i_logo_alt'], 'title' =>  $all_data_quick[$data['data']->nid]['i_logo_title']));
          $image_style_name = 'logo_provider_chart_iframe';
        }
        elseif ($target == 'logo_article') {
          //$image = theme('image_style', array( 'path' =>  $all_data_quick[$data['data']->nid]['i_logo_uri'], 'style_name' => 'thumbnail', 'alt' =>  $all_data_quick[$data['data']->nid]['i_logo_alt'], 'title' =>  $all_data_quick[$data['data']->nid]['i_logo_title']));
          $image_style_name = 'thumbnail';
        }
        
        //$image = theme('image_style', array( 'path' =>  $all_data_quick[$data['data']->nid]['i_logo_uri'], 'style_name' => $image_style_name, 'alt' =>  $all_data_quick[$data['data']->nid]['i_logo_alt'], 'title' =>  $all_data_quick[$data['data']->nid]['i_logo_title']));
        $image = theme('gv_misc_image_style', array('style_name' => $image_style_name, 'path' => $all_data_quick[$data['data']->nid]['i_logo_uri'], 'alt' =>  $all_data_quick[$data['data']->nid]['i_logo_alt'], 'title' =>  $all_data_quick[$data['data']->nid]['i_logo_title'] ));
        
        ////$out = '<a href="' . $link . '" target="_blank">' . $image . '</a>';
        
        ///////$out = '<a href="/goto?t=provider&n=' . urlencode($all_data_quick[$data['data']->nid]['name']) . '" rel="nofollow" target="_blank">' . $image . '</a>';
        
        $out = gv_misc_getTrackingUrl($image, NULL, $data['data']->nid);
      }
      else {
        if (isset($all_data_quick[$data['data']->nid]['name'])) {
          /////$out = '<a href="' . $link . '" target="_blank">' . $all_data_quick[$data['data']->nid]['name'] . '</a>';
          
          /////$out = '<a href="/goto?t=provider&n=' . urlencode($all_data_quick[$data['data']->nid]['name']) . '" rel="nofollow" target="_blank">' . $all_data_quick[$data['data']->nid]['name'] . '</a>';
          
          $out = gv_misc_getTrackingUrl($all_data_quick[$data['data']->nid]['name'], NULL, $data['data']->nid);
        }
      }
          
      return $out;
      
      
      
    case 'features':
      
      $out = '';
      $all_data_quick = gv_misc_getProvidersDataQuick();
      //dpm($all_data_quick);
      
      $plan_title = isset($all_data_quick[$data['data']->nid][$data['service_type']]['plan']) ? $all_data_quick[$data['data']->nid][$data['service_type']]['plan'] : '';
      $features = isset($all_data_quick[$data['data']->nid][$data['service_type']]['feat']) ?  $all_data_quick[$data['data']->nid][$data['service_type']]['feat'] : '';
      //dpm($features);
      if ($plan_title) {
        $out .= '<div class="plan">' . $plan_title . '</div>';
      }
      if (!empty($features)) {
        foreach($features as $tid => $term) {
          $out .= '<div class="feature">' . t($term) . '</div>';
        }
      }
      
      return $out; // $all_data_quick[$data['data']->nid][$target];
      
      
      
    
    case 'bottom_line':
      
      $out = '';
      $all_data_quick = gv_misc_getProvidersDataQuick();
      //dpm($all_data_quick);
      
      $plan_title = isset($all_data_quick[$data['data']->nid][$data['service_type']]['plan']) ? $all_data_quick[$data['data']->nid][$data['service_type']]['plan'] : '';
      
      if ($plan_title) {
        $out .= '<div class="plan">' . $plan_title . '</div>';
      }
      
      
      if (isset($all_data_quick[$data['data']->nid]['the_bottom_line'])) {
        $out .= '<div class="feature">' . $all_data_quick[$data['data']->nid]['the_bottom_line'] . '</div>';
      }
                
      
      return $out; // $all_data_quick[$data['data']->nid][$target];
    
      
    
    case 'grade':

      $out = '';
      if (isset($data['data']->votingapi_cache_node_percent_overall_average_value) && $data['data']->votingapi_cache_node_percent_overall_average_value) {
        $out = gv_misc_getProviderGradeFromRating($data['data']->votingapi_cache_node_percent_overall_average_value);
      }
      
      return $out;

      
      
    
    case 'rating':
    
      if (!empty($data['data']->votingapi_cache_node_percent_overall_average_value)) {
                
        $out = theme('gv_misc_fivestar_static', array('rating' => $data['data']->votingapi_cache_node_percent_overall_average_value, 'stars' => 5, 'tag' => 'overall', 'widget' => array('name' => 'stars', 'css' => 'stars.css')));
        
        $out = '<div class="details"><a ' . ( (isset($data['target']) && $data['target'] == 'iframe') ? 'target="_blank" ' : '') . 'href="' . url('node/' . $data['data']->nid) . '"><div>' . format_plural($data['data']->votingapi_cache_node_percent_overall_count_value, '1 Review', '@count Reviews') . '</div></a></div>' . $out . ' <div class="count">(' . number_format( (0.05 * $data['data']->votingapi_cache_node_percent_overall_average_value), 1 ) . ')</div>';
      }
      else {
        $out = '<div class="details"><a ' . ( (isset($data['target']) && $data['target'] == 'iframe') ? 'target="_blank" ' : '') . 'href="' . url('node/' . $data['data']->nid) . '"><div>Write Review</div></a></div>';
      }
      
      return $out;
      
      
      
      
    case 'rating_n_visit':
    
      $all_data_quick = gv_misc_getProvidersDataQuick();

      if (isset($data['data']->votingapi_cache_node_percent_overall_average_value) && $data['data']->votingapi_cache_node_percent_overall_average_value) {
                
        $out = theme('gv_misc_fivestar_static', array('rating' => $data['data']->votingapi_cache_node_percent_overall_average_value, 'stars' => 5, 'tag' => 'overall', 'widget' => array('name' => 'stars', 'css' => 'stars.css')));
        
        $out = '<div class="details"><a ' . ( (isset($data['target']) && $data['target'] == 'iframe') ? 'target="_blank" ' : '') . 'href="' . url('node/' . $data['data']->nid) . '"><div>' . format_plural($data['data']->votingapi_cache_node_percent_overall_count_value, '1 Review', '@count Reviews') . '</div></a></div>' . $out . ' <div class="count">(' . number_format( (0.05 * $data['data']->votingapi_cache_node_percent_overall_average_value), 1 ) . ')</div>';
      }
      else {
        $out = '<div class="details"><a ' . ( (isset($data['target']) && $data['target'] == 'iframe') ? 'target="_blank" ' : '') . 'href="' . url('node/' . $data['data']->nid) . '"><div>Write Review</div></a></div>';
      }
      
      $url = isset($all_data_quick[$data['data']->nid]['i_web']) ? $all_data_quick[$data['data']->nid]['i_web'] : '';

      if ($url) {
        $url = gv_misc_getTrackingUrl('', NULL, $data['data']->nid, NULL, 'reviews visit-site-btn');
        $out .= $url;
      }
      
      return $out;
      
    
      
    case 'details':
      
      $details = NULL;
      
      $all_data_quick = gv_misc_getProvidersDataQuick();
      
      global $user;
      if (empty($all_data_quick[$data['data']->nid]['details']) && $user->uid == 1) {

        $query = db_select('field_data_body', 'b')
          ->fields('b', array('body_value'));
        $query->condition('b.entity_id', $data['data']->nid);
        $body = $query->execute()->fetchField();


        if ($body) {
            $details = trim(drupal_substr(strip_tags($body), 0, 200));  
            
            $last_pos = strrpos($details, ' ');
            $details = substr_replace ($details, '... ', $last_pos);
            $details .= l('Read More', 'node/' . $data['data']->nid, array('attributes' => array('class' => array('more'))));
        }
        else {
          $details = l('Read a Review', 'node/' . $data['data']->nid, array('attributes' => array('class' => array('more'))));
        }
        
        $all_data_quick[$data['data']->nid]['details'] = $details;

        db_update('field_data_field_p_data_quick')
          ->fields(array(
            'field_p_data_quick_value' => serialize($all_data_quick[$data['data']->nid]),
          ))
          ->condition('entity_id', $data['data']->nid)
          ->execute();

        db_update('field_revision_field_p_data_quick')
          ->fields(array(
            'field_p_data_quick_value' => serialize($all_data_quick[$data['data']->nid]),
          ))
          ->condition('entity_id', $data['data']->nid)
          ->execute();




      }
      else {
        //dpm($all_data_quick[$data['data']->nid]);
        $details = @$all_data_quick[$data['data']->nid]['details'];
      }
      
      
      
        
      //return isset($all_data_quick[$data['data']->nid]['details']) ? $all_data_quick[$data['data']->nid]['details'] : '';
      
      return $details;
      
       
    
      
    case 'i_availability':
      
      //dpm($data); 
      $all_data_quick = gv_misc_getProvidersDataQuick();
      //dpm($all_data_quick);
      
      
      $query = db_select('field_data_field_p_data', 'pd')
        ->fields('pd', array('field_p_data_value'));
      $query->condition('pd.entity_id', $data['data']->nid);
      $p_data = $query->execute()->fetchField();
       
      $p_data = unserialize($p_data);
      
      
//      if (isset($all_data_quick[$data['data']->nid]['i_availability'])) {
//        dpm($all_data_quick);
//      }
      
      //return isset($all_data_quick[$data['data']->nid]['i_availability']) ? $all_data_quick[$data['data']->nid]['i_availability'] : '';
    
      return $p_data['info']['i_availability'];
      
      
      
      
    case 'plan':
      
      //dpm($data); 
      $all_data_quick = gv_misc_getProvidersDataQuick();
      //dpm($all_data_quick);
      
      return isset($all_data_quick[$data['data']->nid][$data['service_type']]['plan']) ? $all_data_quick[$data['data']->nid][$data['service_type']]['plan'] : '';
      
      
      
    // Video Review from YouTube
    case 'vr-y':
      
      $all_data_quick = gv_misc_getProvidersDataQuick();
      
      return isset($all_data_quick[$data['data']->nid][$data['service_type']]['vr-y']) 
                //? '<a rel="nofollow" id="oid' . $data['data']->nid . '" class="yt-direct" href="http://www.youtube.com/embed/' . $all_data_quick[$data['data']->nid][$data['service_type']]['vr-y'] . '?rel=0&amp;wmode=transparent" title="' . $all_data_quick[$data['data']->nid]['name'] . ' Video">Watch</a>'
                ? '<a rel="nofollow" id="oid' . $data['data']->nid . '" class="yt-direct" href="http://www.youtube.com/embed/' . $all_data_quick[$data['data']->nid][$data['service_type']]['vr-y'] . '?rel=0&amp;wmode=transparent" title="' . $all_data_quick[$data['data']->nid]['name'] . ' Video"></a><div class="yt-direct-label">Watch</div>'
                : '';
      
            
      
      
    case 'monthly':
    case 'back':
    case 'setup':
      
      $all_data_quick = gv_misc_getProvidersDataQuick();
      $out = isset($all_data_quick[$data['data']->nid][$data['service_type']]['fees'][$target]) ? $all_data_quick[$data['data']->nid][$data['service_type']]['fees'][$target] : '';
      
      if ($target == 'monthly' && $out) {
        $out = '$'. $out;
      }
      return $out;
    
      
    // One of a provider options.
    case 'options':
      
      $all_data_quick = gv_misc_getProvidersDataQuick();
      
      if (isset($all_data_quick[$data['data']->nid][$data['service_type']]['options'][$data['option_name']])) {
        $out = $all_data_quick[$data['data']->nid][$data['service_type']]['options'][$data['option_name']];
      }
      else {
        // Find and add requested options to a provider's quick data field.
        ////if ($data['data']->nid == 12) {
          //dpm($all_data_quick[$data['data']->nid]);
          $out = gv_misc_addProviderSelectedOptionsToItsQuickDataField($data['data']->nid, $data['option_name']);
        ////}
        
      }
      
      if ($out === 1) {
        $out = 'Yes';
      }
      return $out;
    
      
    // Deprecated.
    case 'i_web':
      
      $all_data_quick = gv_misc_getProvidersDataQuick();
      
      $url = isset($all_data_quick[$data['data']->nid][$target]) ? $all_data_quick[$data['data']->nid][$target] : '';
      
      return $url;
      
      
    case 'i_web2':
      
      $all_data_quick = gv_misc_getProvidersDataQuick();
      
     
      $url = isset($all_data_quick[$data['data']->nid]['i_web']) ? $all_data_quick[$data['data']->nid]['i_web'] : '';
      if ($url) {
        ////$url = l('Visit Site', $url, array('attributes' => array(/*'rel' => 'nofollow', */'target' => '_blank', 'class' => 'site')));

//        global $user;
//        if ($user->uid == 1) {

          ////$goto_link_query = array('t' => 'provider', 'n' => urlencode($all_data_quick[$data['data']->nid]['name'])/*, 'url' => urlencode($url)*/);
          ////$url = l('Visit Site', 'goto', array('query' => $goto_link_query, 'attributes' => array('rel' => 'v:url nofollow', 'target' => '_blank'))); 
//        }
          
          
          //$url = gv_misc_getTrackingUrl('Visit Site', NULL, $data['data']->nid, NULL, 'visit-site-btn');
          $url = gv_misc_getTrackingUrl('', NULL, $data['data']->nid, NULL, 'visit-site-btn');
      }
                        
      return $url;

  }
}


/**
 * Add a provider selected options to its quick data field.
 */
function gv_misc_addProviderSelectedOptionsToItsQuickDataField($nid, $option_to_return_name = NULL) {

  $query = db_select('field_data_field_p_data', 'pd');
  $query->fields('pd', array('field_p_data_value'));
  $query->leftJoin('field_data_field_p_data_quick', 'pdq', 'pdq.entity_id = ' . $nid);
  $query->fields('pdq', array('field_p_data_quick_value'));
  $query->condition('pd.entity_id', $nid);
  $data = $query->execute()->fetchObject();
  $p_data = unserialize($data->field_p_data_value);
  $p_data_quick = unserialize($data->field_p_data_quick_value);
  
  $data->field_p_data_value;
  
  //$p_data['provider_options_re']
  $provider_options_to_quick_save = unserialize(PROVIDER_OPTIONS_TO_QUICK_SAVE);
  $map_options_keys_to_provider_types_key = array(
    'bu' => 'provider_options_bu',
    're' => 'provider_options_re',
  );
  
  foreach ($p_data['s'] as $service_type_short => $service) {
    
    // Save some options to quick save.
    if (isset($map_options_keys_to_provider_types_key[$service_type_short]) && isset($p_data[$map_options_keys_to_provider_types_key[$service_type_short]]) && isset($provider_options_to_quick_save[$service_type_short]) ) {
      //dpm($p_data[$map_options_keys_to_provider_types_key[$service_type_short]]);
      foreach ($provider_options_to_quick_save[$service_type_short] as $option_name_to_save) {
        // try to find a specific option among several subarrays of the options array.
        foreach ($p_data[$map_options_keys_to_provider_types_key[$service_type_short]] as $section_key => $section_options) {
          if (isset($section_options[$option_name_to_save])) {
            $p_data_quick[$service_type_short]['options'][$option_name_to_save] = $section_options[$option_name_to_save];
            if ($option_name_to_save == $option_to_return_name) {
              if (!empty($section_options[$option_name_to_save . ' -text-'])) {
                $option_to_return_value = $section_options[$option_name_to_save . ' -text-'];
              }
              else {      
                $option_to_return_value = $section_options[$option_name_to_save];
              }
            }
          }
        }
      }
    }
  }

  //dpm($p_data_quick);
  // gv_misc_fieldSave($field_name, $entity_id, $data, $entity_type = 'node', $bundle = NULL) {
  gv_misc_fieldSave('p_data_quick', $nid, serialize($p_data_quick));
  
  // Reset ProvidersDataQuick in Session/global variable.
  gv_misc_getProvidersDataQuick(NULL, TRUE, TRUE);
  
  if (isset($option_to_return_value)) {
   return $option_to_return_value;
  }
}


/**
 * Gets grade from rating for a provider.
 */
function gv_misc_getProviderGradeFromRating($r) {
  
  if ($r > 5) {
    $r = number_format( (0.05 * $r), 1 );
  }
  
  $grades = array(
    'A+' => array(4.8, 5.0),
    'A' => array(4.4, 4.7),
    'A-' => array(4.2, 4.3),

    'B+' => array(4.0, 4.1),
    'B' => array(3.7, 3.9),
    'B-' => array(3.3, 3.6),

    'C+' => array(3.1, 3.2),
    'C' => array(2.9, 3.0),
    'C-' => array(2.5, 2.8),

    'D+' => array(2.1, 2.4),
    'D' => array(1.9, 2.0),
    'D-' => array(1.6, 1.8),

    'F' => array(1.0, 1.5),
  );
  
  foreach ($grades as $grade => $borders) {
    if ($r >= $borders[0] && $r <= $borders[1]) {
      return $grade;
    }
  }
  
  return '';
}


/**
 * Return themed field content for a view.
 */
function  gv_misc_getFieldThemed_forView($target, $data) {
  
  $out = '';
  
  switch($target) {
    
    case 'blog_post_thumb':
      
      //echo '<div class="logo"><a href="' . $node->p_data['info']['i_web'] . '" target="_blank">' . theme('image_style', array( 'path' =>  $content['field_p_logo'][0]['#item']['uri'], 'style_name' => 'logo_provider_page', 'alt' => $content['field_p_logo'][0]['#item']['alt'], 'title' => $content['field_p_logo'][0]['#item']['title'], 'attributes' => array('rel' => 'v:photo'))) . '</a></div>'; 
      
      //$out = '<a href="#">Test-' . $data['data']->nid . '</a>';
      $out = '';
      $query = db_select('field_data_field_main_image', 'mi')
        ->fields('mi', array('field_main_image_value'));
      $query->condition('entity_id', $data['data']->nid);
      $main_image = unserialize($query->execute()->fetchField());
      
      if (@$main_image['uri']) {
        //$out = '<div class="block-thumb">' . theme('image_style', array( 'path' =>  $main_image['uri'], 'style_name' => 'block_thumb', 'alt' => @$main_image['alt'], 'title' => $data['data']->node_title)) . '</div>';
        $out = '<span class="block-thumb">' . theme('gv_misc_image_style', array('style_name' => 'block_thumb', 'src' => $main_image['src'], 'path' => $main_image['uri'], 'alt' =>  (@$main_image['alt'] ? $main_image['alt'] : $data['data']->node_title), 'title' => $data['data']->node_title )) . '</span>';
      }
      
      //dpm($main_image);
      //dpm($out);

      return $out;
  }
  
}


/**
 * Replace for the original function.
 */
function wdg_misc_getProviderData_fromView($target, $data) {
  return gv_misc_getProviderData_fromView($target, $data);
}


/**
 * Return specific variable value for a provider depending on the filter value (business OR residential, etc)
 */
function gv_misc_getProviderData_fromView($target, $data) {
  
  $out = '';
  
  switch($target) {
    
    case 'service_types':
      $service_types = unserialize(SERVICE_TYPES);
      $p_service_types = $data['data']->_field_data['nid']['entity']->field_p_types['und'];
      $types = '';
      foreach ($p_service_types as $p_service_type) {
        
        $service_type_key = gv_misc_refineServiceTypeKey($p_service_type['value']);
        
        if ($p_service_type['value'] == $data['exposed_raw_input']['type']) {
          //$current_type = '<div class="type main">' . drupal_ucfirst($p_service_type['value']) . '</div>';
          $current_type = '<div class="type main">' . $service_types[$service_type_key] . '</div>';
        }
        else {
          //$types .= '<div class="type">' . drupal_ucfirst($p_service_type['value']) . '</div>';
          $types .= '<div class="type">' . $service_types[$service_type_key] . '</div>';
        }
      }
      
      if ($types) {
        return $current_type . '<div class="descr">' . t('(currently exposed)') . '</div>' . $types;
      }
      else {
        return $current_type;
      }
      
      break; // End of case 'service_types':
    
      
      
    case 'user_rating':
      $out = '';
      if (isset($data['data']->votingapi_cache_node_percent_features_average_value) && $data['data']->votingapi_cache_node_percent_features_average_value) {
                
        $out = theme('gv_misc_fivestar_static', array('rating' => $data['data']->votingapi_cache_node_percent_features_average_value, 'stars' => 5, 'tag' => 'features', 'widget' => array('name' => 'hearts', 'css' => 'hearts.css')))
              //. '<div class="rating">' . $data['data']->votingapi_cache_node_percent_features_average_value . '%</div>'
              . '<div class="voters">' . $data['data']->votingapi_cache_node_percent_features_count_value . ' ' . t('reviews') . '</div>'
              ;
      }
      $out .= '<div class="details">' . l(t('Details'), 'node/' . $data['data']->nid) . '</div>';
      break;
    
      
      
    case 'monthly_fees':
    case 'longdistance_fees':
    case 'setup_fees':
      
      if (!$all_fees = @$_SESSION['all_fees']) {
        $all_fees = gv_misc_getProvidersFees();
        $_SESSION['all_fees'] = $all_fees;
      }
      
      $p_fees = $all_fees[$data['data']->nid];
      
      $service_type_key = gv_misc_refineServiceTypeKey($data['exposed_raw_input']['type']);
      
      // Refine the fee key for the new provider structure.
      if (isset($p_fees['bu']['mon'])) {
        $old_fee_types = array('mon' => 'monthly_fees', 'set' => 'setup_fees', 'shp' => 'shipping_fees', 'can' => 'cancel_fees', 'lng' => 'longdistance_fees', 'oth' => 'other_fees' );
        $target = array_shift(array_keys($old_fee_types, $target));
      }
      
      if (isset($p_fees[$service_type_key][$target]) && $p_fees[$service_type_key][$target]) {
        return '$' . $p_fees[$service_type_key][$target];
      }
      /*                    
      switch($data['exposed_raw_input']['type']) {
        case 'business':
          if (isset($p_fees['bu'][$target]) && $p_fees['bu'][$target]) {
            return '$' . $p_fees['bu'][$target];
          }
          break;
        case 'residential':
          if (isset($p_fees['re'][$target]) && $p_fees['re'][$target]) {
            return '$' . $p_fees['re'][$target];
          }
          break;
      }
      */
      
      /*
      if (!$provider_data = unserialize($data['data']->field_field_p_data[0]['raw']['value'])) {
        return NULL;
      }
      switch($data['exposed_raw_input']['type']) {
        case 'business':
          if (isset($provider_data['services']['s_business']['bu_basicinfo_fees'][$target]) && $provider_data['services']['s_business']['bu_basicinfo_fees'][$target]) {
            return '$' . $provider_data['services']['s_business']['bu_basicinfo_fees'][$target];
          }
          break;
        case 'residential':
          if (isset($provider_data['services']['s_residential']['re_basicinfo_fees'][$target]) && $provider_data['services']['s_residential']['re_basicinfo_fees'][$target]) {
            return '$' . $provider_data['services']['s_residential']['re_basicinfo_fees'][$target];
          }
          break;
      }
      */
      break; // End of case 'monthly_fees':
    
      
      
      
      
    case 'plan':
      
      if (!$p_data = unserialize($data['data']->field_field_p_data[0]['raw']['value'])) {
        return NULL;
      }
      
      $features = NULL;
      
      $service_type_key = gv_misc_refineServiceTypeKey($data['exposed_raw_input']['type']);
      
      $service_types = unserialize(SERVICE_TYPES);
      $service_descriptions = unserialize(SERVICE_DESCRIPTIONS);
      //$fee_types = unserialize(FEE_TYPES);

      $load_key = 's';
      if (!isset($p_data['s'])) {
        $p_services = $p_data['services'];
        $load_key = 'services';
        $old_service_types = array('re' => 's_residential', 'bu' => 's_business');
        $old_service_descriptions = array('pti' => 'preface_title', 'pte' => 'preface_text', 'biti' => 'basicinfo_title', 'bite' => 'basicinfo_text', 'snti' => 'specialnotes_title', 'snte' => 'specialnotes_text', 'mbg' => 'money_back_guarantee');
        //$old_fee_types = array('mon' => 'monthly_fees', 'set' => 'setup_fees', 'shp' => 'shipping_fees', 'can' => 'cancel_fees', 'lng' => 'longdistance_fees', 'oth' => 'other_fees' );
      }
      else {
        $p_services = $p_data['s'];
      }
      
      
      if ($load_key == 's') {
        if (isset($p_services[$service_type_key]['pti'])) {
          $out = '<div class="plan">' . $p_services[$service_type_key]['pti'] . '</div>';
        }
        if (isset($p_services[$service_type_key]['weights_' . $service_type_key . '_features'])) {
          $features = $p_services[$service_type_key]['weights_' . $service_type_key . '_features'];
        }
      }
      else {
        
        if ($p_services[$old_service_types[$service_type_key]][$service_type_key . '_basicinfo_title']) {
          $out = '<div class="plan">' . $p_services[$old_service_types[$service_type_key]][$service_type_key . '_basicinfo_title'] . '</div>';
        }
        
        if (isset($p_services[$old_service_types[$service_type_key]]['weights_' . $service_type_key . '_features'])) {
          $features = $p_services[$old_service_types[$service_type_key]]['weights_' . $service_type_key . '_features'];
        }
      }
      
      /*                    
      switch($data['exposed_raw_input']['type']) {
        case 'business':
          if (isset($p_data['services']['s_business']['weights_bu_features'])) {
            $features = $p_data['services']['s_business']['weights_bu_features'];
          }
          if (isset($p_data['services']['s_business']['bu_preface_title'])) {
            $out = '<div class="plan">' . $p_data['services']['s_business']['bu_preface_title'] . '</div>';
          }
          break;
        
        case 'residential':
          if (isset($p_data['services']['s_business']['weights_bu_features'])) {
            $features = $p_data['services']['s_business']['weights_bu_features'];
          }
          if (isset($p_data['services']['s_residential']['re_preface_title'])) {
            $out = '<div class="plan">' . $p_data['services']['s_residential']['re_preface_title'] . '</div>';
          }
          break;
      } // End of switch($data['exposed_raw_input']['type']) {
      */
      
      if (is_array($features)) {
        $out .= '<div class="features">';
        $count = 0;
        foreach ($features as $feature) {
          $out .= '<div class="feature">' . $feature['name'] . '</div>';
          if ($count++ > 1) {
            break;
          }
        }
        $out .= '</div>';
      }
      break; // End of case 'features':
  }
  
  return $out;
}


function gv_misc_refineServiceTypeKey($source_key) {
  if ($source_key == 'residential') {
    return 're';
  }
  elseif ($source_key == 'business') {
    return 'bu';
  }
  else {
    return $source_key;
  }
}


function gv_misc_refineServiceTypeKey_Reverse($source_key) {
  if ($source_key == 're') {
    return 'residential';
  }
  elseif ($source_key == 'bu') {
    return 'business';
  }
  else {
    return $source_key;
  }
}


/**
 * Forms API validation function for email.
 */
function wdg_misc_elementValidate_email($element, &$form_state) {
  if (!valid_email_address($element['#value'])) {
    form_error($element, t('Please enter a valid email address.'));
  }
//  if (empty($element['#value'])) {
//    form_error($element, t('This field is required.'));
//  }
}  


/**
 * Forms API validation function for url.
 */
function wdg_misc_elementValidate_url($element, &$form_state) {
  if (!valid_url($element['#value'])) {
    form_error($element, t('Please enter a valid url address.'));
  }
//  if (empty($element['#value'])) {
//    form_error($element, t('This field is required.'));
//  }
}


/**
 * Helper function for sorting by weight with uasort function.
 * 
 * Example of using:
 * 
 * uasort($array_with_elements_contained_key_weight, 'wdg_misc_sortArrayByWeight');
 */
function wdg_misc_sortArrayByWeight($a, $b) 
{
    if ($a['weight'] == $b['weight']) {
        return 0;
    }
    return ($a['weight'] < $b['weight']) ? -1 : 1;
}



/**
 * Socialite social buttons.
 */
function gv_blocks_getSocialiteButtons($url = NULL, $title = NULL) {

  if (!$url) {
    $url = 'http://getvoip.com' . ($_GET['q'] == 'home' ? '' : $_SERVER['REQUEST_URI']);
  }
  
  drupal_add_js('sites/all/libraries/jquery.plugins/socialite/socialite.min.js');
  //drupal_add_js('sites/all/libraries/jquery.plugins/socialite/socialite.js');
  
  $path_to_custom_js = drupal_get_path('module', 'gv_misc') . '/js/';
  drupal_add_js($path_to_custom_js . 'addSocialite.js');
  /*
  $out = '
  <ul class="social-buttons cf">
			<li><a href="http://twitter.com/share" class="socialite twitter-share" data-text="' . $title . '" data-url="' . $url . '" data-count="horizontal" rel="nofollow" target="_blank"><span class="vhidden">Share on Twitter</span></a></li>
			<li><a href="https://plus.google.com/share?' . 'url=' . $url . '" class="socialite googleplus-one" data-size="medium" data-href="' . $url . '" rel="nofollow" target="_blank"><span class="vhidden">Share on Google+</span></a></li>
			<li><a href="http://www.facebook.com/sharer.php?' . 'u=' . $url . '&amp;t=' . $title . '" class="socialite facebook-like" data-href="' . $url . '" data-send="false" data-layout="button_count" data-width="60" data-show-faces="false" rel="nofollow" target="_blank"><span class="vhidden">Share on Facebook</span></a></li>
			<li><a href="http://www.linkedin.com/shareArticle?' . 'mini=true&amp;url=' . $url . '&amp;title=' . $title . '" class="socialite linkedin-share" data-url="' . $url . '" data-counter="right" rel="nofollow" target="_blank"><span class="vhidden">Share on LinkedIn</span></a></li>
		</ul>
  ';
  */
  
  /*
  $out = '
  <ul class="social-buttons cf">
			<li><a href="http://twitter.com/share" class="socialite twitter-share" data-text="' . $title . '" data-url="' . $url . '" data-count="horizontal" rel="nofollow" target="_blank"><span class="vhidden">Share on Twitter</span></a></li>
			<li><a href="https://plus.google.com/share?' . 'url=' . urlencode($url) . '" class="socialite googleplus-one" data-size="medium" data-href="' . $url . '" rel="nofollow" target="_blank"><span class="vhidden">Share on Google+</span></a></li>
			<li><a href="http://www.facebook.com/sharer.php?' . 'u=' . urlencode($url . '&t=' . $title) . '" class="socialite facebook-like" data-href="' . $url . '" data-send="false" data-layout="button_count" data-width="60" data-show-faces="false" rel="nofollow" target="_blank"><span class="vhidden">Share on Facebook</span></a></li>
			<li><a href="http://www.linkedin.com/shareArticle?' . 'mini=true&amp;url=' . urlencode($url . '&title=' . $title) . '" class="socialite linkedin-share" data-url="' . $url . '" data-counter="right" rel="nofollow" target="_blank"><span class="vhidden">Share on LinkedIn</span></a></li>
		</ul>
  ';
  */
  
  
  // Horizontal
  /*
  $out = '
  <ul class="social-buttons cf">
			<li><a href="http://twitter.com/share" class="socialite twitter-share" data-text="' . $title . '" data-url="' . $url . '" data-count="horizontal" rel="nofollow" target="_blank"><span class="vhidden">Share on Twitter</span></a></li>
			<li><a href="https://plus.google.com/share?' . 'url=' . urlencode($url) . '" class="socialite googleplus-one" data-size="medium" data-href="' . $url . '" rel="nofollow" target="_blank"><span class="vhidden">Share on Google+</span></a></li>
			<li><a href="http://www.facebook.com/sharer.php?' . 'u=' . urlencode($url) . '&amp;t=' . urlencode($title) . '" class="socialite facebook-like" data-href="' . $url . '" data-send="false" data-layout="button_count" data-width="60" data-show-faces="false" rel="nofollow" target="_blank"><span class="vhidden">Share on Facebook</span></a></li>
			<li><a href="http://www.linkedin.com/shareArticle?' . 'mini=true&amp;url=' . urlencode($url) .  '&amp;title=' . urlencode($title) . '" class="socialite linkedin-share" data-url="' . $url . '" data-counter="right" rel="nofollow" target="_blank"><span class="vhidden">Share on LinkedIn</span></a></li>
		</ul>
  ';
  */
  
  // Vertical
  $out = '
  <ul class="social-buttons cf">
			<li><a href="http://twitter.com/share" class="socialite twitter-share" data-text="' . $title . '" data-url="' . $url . '" data-count="vertical" rel="nofollow" target="_blank"><span class="vhidden">Share on Twitter</span></a></li>
			<li><a href="https://plus.google.com/share?' . 'url=' . urlencode($url) . '" class="socialite googleplus-one" data-size="tall" data-href="' . $url . '" rel="nofollow" target="_blank"><span class="vhidden">Share on Google+</span></a></li>
			<li><a href="http://www.facebook.com/sharer.php?' . 'u=' . urlencode($url . '&t=' . $title) . '" class="socialite facebook-like" data-href="' . $url . '" data-send="false" data-layout="box_count" data-width="70" data-show-faces="false" rel="nofollow" target="_blank"><span class="vhidden">Share on Facebook</span></a></li>
			<li><a href="http://www.linkedin.com/shareArticle?' . 'mini=true&amp;url=' . urlencode($url . '&title=' . $title) . '" class="socialite linkedin-share" data-url="' . $url . '" data-counter="top" rel="nofollow" target="_blank"><span class="vhidden">Share on LinkedIn</span></a></li>
		</ul>
  ';
  

  
  
  return $out;
}


/**
 * AddThis social Like buttons set.
 */
function gv_blocks_getAddThisButtonsLike() {

  $out = '
    <!-- AddThis Button BEGIN -->
  <div class="addthis_toolbox addthis_default_style ">
  <a class="addthis_button_linkedin_counter"></a>
  <a class="addthis_button_google_plusone" g:plusone:size="medium"></a>
  <a class="addthis_button_facebook_like" fb:like:layout="button_count" fb:like:locale="en_US"></a>
  <a class="addthis_button_tweet"></a>
  </div>
  <script type="text/javascript">var addthis_config = {"data_track_addressbar":true, ui_language:"en", locale:"en_US"};</script>
  <script type="text/javascript" src="http://s7.addthis.com/js/250/addthis_widget.js#pubid=ra-50253baf64925d35"></script>
  <!-- AddThis Button END -->
  ';
  
  return $out;
}


/**
 * Implements hook_form().
 *
 * @return $form
 *   Return nothing.
 */
function gv_misc_newsletterSubscribe_form($form, &$form_state) {
  
  global $user;
  
  $form['title'] = array(
    //'#markup' => '<div class="title">Sign up to receive weekly updates</div>',
    '#markup' => '<div class="title">Stay informed - <br>Sign up for our newsletter.</div>',
      
  );
  
  $form['email'] = array(
    '#type' => 'textfield',
    //'#title' => 'Sign up to receive weekly updates',
    //'#default_value' => $user->uid ? $user->mail : NULL,
    //'#description' => '',
    //'#element_validate' => array('gv_misc_validate_email'),
    '#required' => TRUE,
    //'#access' => $user->uid ? FALSE : TRUE,
    '#attributes' => array('title' => 'Email'),
  );
  
  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Sign Up'),
  ); 
  
  
  // Add stars widgets to a Rating block
  $module_path = drupal_get_path('module', 'gv_misc');

  $form['#attached']['js'] = array(
    // Add hints inside some fields
    $module_path . '/js/gv_newsletterSubscribe_fieldHints.js',
  );

  
  return $form;
}


/**
 * Element Validate for email.
 */
function gv_misc_validate_email($element, &$form_state) {
   if (!preg_match('/^[_a-z0-9-]+(\.[_a-z0-9-]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,3})$/', $element['#value'])) {
     form_error($element, 'Wrong email format!');
   }
}


/**
 * Implements hook_form_validate().
 *
 * @return $form
 *   Return nothing.
 */
function gv_misc_newsletterSubscribe_form_validate(&$form, &$form_state) {

  //drupal_set_message('In Validate!', 'warning');
  //dpm($form_state['values']);
  //dpm($form);
    
  global $user;
  
  // Clear hints, if any.
  $fields_to_clear_hints = array('email' => array('hint' => @$form['email']['#attributes']['title']));
  foreach ($fields_to_clear_hints as $fname => $fdata) {
   
    if ($form_state['values'][$fname] == $fdata['hint']) {
      
      // This clear the field.
      $form[$fname]['#value'] = NULL;
      
      // Just in case.
      // BUT! It causes fatal eror with #parent index absence
      //form_set_value($form[$fdata['set']][$fname], array('#value' => NULL), $form_state);
      
      // Just in case on more.
      $form_state['values'][$fname] = NULL;
      
      if (isset($form[$fname]['#required']) && $form[$fname]['#required']) {
        form_set_error($fname, t('Please fill the field "' . $fname . '"'));
        return;
      }
      
    }
    elseif ($fname == 'email' && !preg_match('/^[_a-z0-9-]+(\.[_a-z0-9-]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,3})$/', $form_state['values'][$fname])) {
      form_set_error($fname, 'Wrong email format!');
      return;
    }
    
  }
  
  // Check if submitted email was submitted previously.
  $query = db_select('gv_emails_subscribed', 'e')  
        ->fields('e', array('email'));
  $query->condition('e.email', $form_state['values']['email']);
  $email = $query->execute()->fetchField();
  if ($email) {
    form_set_error('email', 'Email ' . $form_state['values']['email'] . ' has been submitted already!');
    return;
  }
  
}


/**
 * Implements hook_form_submit().
 *
 * @return $form
 *   Return nothing.
 */
function gv_misc_newsletterSubscribe_form_submit(&$form, &$form_state) {
  
  $verification_code = md5(time());
  db_insert('gv_emails_subscribed')
    ->fields(array(
      'email'=> $form_state['values']['email'],
      'timestamp'=> time(),
      'code' => $verification_code,
    ))
    ->execute();
    
  //gv_misc_sendMessage('email_verification', array('verification_code' => $verification_code . '=' . urlencode($form_state['values']['email']), 'email' => $form_state['values']['email']));
  
  drupal_set_message('Thank you for subscribing to our newsletter.');
  drupal_goto(ltrim(@$_SERVER['REDIRECT_URL'], '/'), array('query' => array('nocache' => 1)));
}



/**
 * Loads an image object from a file.
 *
 */
function gv_misc_loadImage($imgname, $type = null) {

    if(!$type)
    {
        $type = explode('.', $imgname);
        $type = $type[count($type)-1];
    }

    switch($type)
    {

        case 'png':
            $im = @imagecreatefrompng($imgname);
            break;

        case 'jpg':
        case 'jpeg':
            $im = @imagecreatefromjpeg($imgname);
            break;
          
        case 'gif':
            $im = @imagecreatefromgif($imgname);
            break;
    }

    if(!$im)
    {
        /*

        // an image with error message

        $im= imagecreate (150, 30);
        $bgc = imagecolorallocate ($im, 255, 255, 255);
        $tc= imagecolorallocate ($im, 0, 0, 0);
        imagefilledrectangle ($im, 0, 0, 150, 30, $bgc);
        imagestring ($im, 1, 5, 5, "Error loading $imgname", $tc);

        */
    }

    return $im;
}


/**
 * Sets breadcrumbs to a current page.
 *
 */
function gv_misc_setBreadcrumbs(&$variables) {
  
  $tags_cloud_pages = array('/articles/tags', '/blog/tags', '/news/tags');
  $not_teasers_types = array('preface', 'admin_page', 'page', 'quote', 'webform');
  
  //dpm($_SERVER);
  //dpm(arg());
  
  if(@$_SERVER['REQUEST_URI'] == '/') {
    $variables['breadcrumb'] = ''; // Home page has no bredcrumb.
  }
  elseif(isset($variables['node']) && !in_array($variables['node']->type, $not_teasers_types) ) {
    //dpm($variables['node']);
    //dpm('teasers node------------');
    switch ($variables['node']->type) {
      case 'provider':
        $variables['breadcrumb'] = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), l('Reviews', 'reviews'), $variables['node']->field_p_name['und'][0]['value']/* . ' Reviews'*/)));
        break;
      case 'review':
        if (!empty($variables['node']->field_ref_provider['und'][0]['target_id'])) {
          $variables['breadcrumb'] = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), l('Reviews', 'reviews'), l($variables['node']->field_r_provider_name['und'][0]['value'] /*. ' Reviews'*/, 'node/' . $variables['node']->field_ref_provider['und'][0]['target_id']), $variables['node']->title )));
        }
        else {
          $variables['breadcrumb'] = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), l('Reviews', 'reviews'), $variables['node']->title )));
        }
        break;
      case 'phone':
        //dpm($variables['node']);
        $variables['breadcrumb'] = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), l('Reviews', 'reviews'), l('Phones', 'reviews/phone'), $variables['node']->title )));
        break;
      case 'phone_review':
        //dpm($variables['node']);
        $variables['breadcrumb'] = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), l('Reviews', 'reviews'), l('Phones', 'reviews/phone'), l($variables['node']->field_p_name['und'][0]['value'], 'node/' . $variables['node']->field_ref_phone['und'][0]['target_id']), $variables['node']->title )));
        break;
      
      case 'article':
        //$variables['breadcrumb'] = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), l('Articles', 'articles'), l('Library', 'about-voip-services'), $variables['node']->title )));
        $variables['breadcrumb'] = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), l('Library', 'about-voip-services'), $variables['node']->title )));
        break;
      case 'blog_post':
        //$variables['breadcrumb'] = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), l('Articles', 'articles'), l('Blog', 'blog'), $variables['node']->title )));
        $variables['breadcrumb'] = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), l('Blog', 'blog'), $variables['node']->title )));
        break;
      case 'news_post':
        //$variables['breadcrumb'] = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), l('Articles', 'articles'), l('News', 'news'), $variables['node']->title )));
        $variables['breadcrumb'] = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), l('News', 'news'), $variables['node']->title )));
        break;
    }
  }
  /**/
  elseif(in_array($_SERVER['REQUEST_URI'], $tags_cloud_pages)) {
    //dpm('Tags cloud page ------------');
    switch ($_SERVER['REQUEST_URI']) {
      case '/articles/tags':
        $variables['breadcrumb'] = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), l('Library articles', 'about-voip-services'), 'Library tags' )));
        break;
      case '/blog/tags':
        $variables['breadcrumb'] = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), l('Blog', 'blog'), 'Blog tags' )));
        break;
      case '/news/tags':
        $variables['breadcrumb'] = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), l('News', 'news'), 'News tags' )));
        break;
    }
  }
  /**/
  elseif(strpos($_SERVER['REQUEST_URI'], '/tags/') != FALSE) {
    //dpm('Tag page ------------');
    
    // Don't show anything yet.
    //$variables['breadcrumb'] = '';
    
    // Defined in
    global $current_tag_title;
    
    /**/
    if(strpos($_SERVER['REQUEST_URI'], 'articles/tags/') != FALSE) {
      $variables['breadcrumb'] = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), l('Library articles', 'about-voip-services'), l('Articles tags', 'articles/tags'), $current_tag_title )));
    }
    elseif (strpos($_SERVER['REQUEST_URI'], 'blog/tags/') != FALSE) {
      $variables['breadcrumb'] = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), l('Blog', 'blog'), l('Blog tags', 'blog/tags'), $current_tag_title )));
    }
    else {
      $variables['breadcrumb'] = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), l('News', 'news'), l('News tags', 'news/tags'), $current_tag_title )));
    }
    /**/
  }
  elseif ($breadcrumb = gv_misc_getMenuTrail()) {
    //dpm('Page VIA MENU------------');
    $variables['breadcrumb'] = $breadcrumb;
  }
  elseif (isset($variables['node'])) {
    //dpm('Any other NODE page------------');
    $variables['breadcrumb'] = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), $variables['node']->title )));
  }
  elseif (@$_SERVER['REDIRECT_URL'] == '/voip-provider-submit-user-review') {
    //dpm('Any other NODE page------------');
    $variables['breadcrumb'] = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), 'Submit Review' )));
  }
  elseif (@$_SERVER['REDIRECT_URL'] == '/voip-phone-submit-user-review') {
    //dpm('Any other NODE page------------');
    $variables['breadcrumb'] = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), 'Submit Phone Review' )));
  }
  elseif (arg(0) == 'user' && is_int($arg_uid = arg(1))) {
    //dpm('User profile page------------');
    $userExtendedData = gv_misc_loadUserExtendedData($arg_uid);
    $variables['breadcrumb'] = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), l('About Us', 'about-us'), l('Our Team', 'our-team'), $userExtendedData->realname )));
  }
  else {
    //dpm('Any other NOT node page------------');
    $variables['breadcrumb'] = '';
  }

}


/**
 * Find all combinationa of an array's elements.
 *
 */
function gv_misc_findAllArrayElementsCombinations($arr, $level, &$result, $curr=array()) {
    for($i = 0; $i < count($arr); $i++) {
        $new = array_merge($curr, array($arr[$i]));
        if($level == 1) {
            sort($new);
            if (!in_array($new, $result)) {
                $result[] = $new;          
            }
        } else {
            gv_misc_findAllArrayElementsCombinations($arr, $level - 1, $result, $new);
        }
    }
}



/**
 * Find all related articles (based on similar tags) divided in groups by Index (amount of similar tags ).
 *
 */
function gv_misc_get_relatedArticles_dividedByIndex($article_nid, $node_type) {
  
  //return array();
  
  $max_articles = 10;
  $articles = array();
  $articles_by_index = array();

  $map_nodeType_to_tagsTable = array('blog_post' => 'blog', 'news_post' => 'news', 'article' => 'articles',);

  // Get the article's tags
  /*
  // via taxonomy_index, not effective, bec don't contain some tags for some reason...
  $query = db_select('taxonomy_index', 'ti')
      ->fields('ti', array('tid'));
  $query->leftJoin('taxonomy_term_data', 'td', 'td.tid = ti.tid');
  //$query->fields('td');
  $query->condition('ti.nid', $article_nid);
  $query->condition('td.vid', 2, '!=');
  //$a_tags = $query->execute()->fetchAllAssoc('tid');
  $arr = $query->execute()->fetchCol();
  //dpm($a_tags);
  //$arr = array_keys($a_tags);
  */
  
  $query = db_select('field_data_field_tags_' . $map_nodeType_to_tagsTable[$node_type], 'ti')
      ->fields('ti', array('field_tags_'. $map_nodeType_to_tagsTable[$node_type] . '_tid'));
  //$query->leftJoin('taxonomy_term_data', 'td', 'td.tid = ti.tid');
  //$query->fields('td');
  $query->condition('ti.entity_id', $article_nid);
  //$a_tags = $query->execute()->fetchAllAssoc('tid');
  $arr = $query->execute()->fetchCol();
  
  
  
  if (empty($arr)) {
    return array();
  }
  
  //dpm($arr);

  // If count($arr) > 6, the system will hang up... So we go another way in this case...
  if (count($arr) > 6) {
    
    // Find singles
    
    foreach ($arr as $key => $tag) {
      $query = db_select('node', 'n')
            ->fields('n', array('nid', 'created'));

      //$query->join('taxonomy_index', 'ti', 'ti.nid = n.nid AND ti.tid = ' . $tag);
      //$query->fields('ti', array('tid'));
      
      //$query->join('field_data_field_tags_' . $map_nodeType_to_tagsTable[$node_type], 'ti', 'ti.entity_id = n.nid AND ti.field_tags_'. $map_nodeType_to_tagsTable[$node_type] . '_tid = ' . $tag);
      //$query->fields('ti', array('field_tags_'. $map_nodeType_to_tagsTable[$node_type] . '_tid'));
      
      $query->join('field_data_field_tags_' . $map_nodeType_to_tagsTable[$node_type], 'ti', 'ti.entity_id = n.nid AND ti.field_tags_'. $map_nodeType_to_tagsTable[$node_type] . '_tid = ' . $tag);
      $query->addField('ti', 'field_tags_'. $map_nodeType_to_tagsTable[$node_type] . '_tid', 'tid');

      $query->join('taxonomy_term_data', 'td', 'td.tid = ti.field_tags_'. $map_nodeType_to_tagsTable[$node_type] . '_tid');
      $query->addField('td', 'name', 'term');
      
      $query->condition('n.nid', $article_nid, '!=');
      $query->orderBy('n.created', 'DESC');
      $results = $query->execute()->fetchAllAssoc('nid');
      
      //dpm($results);
      if (empty($results)) {
        //dpm('tag ' . $tag . ' has no related');
        unset($arr[$key]);
      }
      else {
        foreach($results as $key => $value) {
          $value->similar_tags_count = 1;
          $all_nids_sets[1][$value->created] = $value;
        }
      }
    }
    
    // Normalize array for the case if it was cut
    $arr = $all_tags_sets[1] = array_values($arr);
    
    //dpm($arr);
    
    
    
    
    
    
    
    // If still > 6, search related by 3, 2 and 1 similar tags
    if (count($arr) > 6) {
      
      $articles = $all_nids_sets[1]; 
      
      $len = count($arr);
      // Find trinities.
      $i = 0; $j = 0; $k = 0;
      for ($i = 0; $i < $len - 2; $i++) {
        for ($j = $i + 1; $j < $len - 1; $j++) {
          for ($k = $j + 1; $k < $len; $k++) {
            $all_tags_sets[3][] = array($arr[$i], $arr[$j], $arr[$k]);
          }
        }
      }

      // Find couples
      $i = 0; $j = 0; $k = 0;
      for ($j = 0; $j < $len - 1; $j++) {
        for ($k = $j + 1; $k < $len; $k++) {
          $all_tags_sets[2][] = array($arr[$j], $arr[$k]);
        }
      }


      //dpm($all_tags_sets);


      /*
      // Find couples
      $tags_set = array();
      foreach ($arr as $a_tag) {
        foreach ($arr as $a_tag_2) {
          if ($a_tag_2 == $a_tag || (isset($tags_set[$a_tag_2]) && in_array($a_tag, $tags_set[$a_tag_2]) )) {
            continue;
          }
          $tags_set[$a_tag][] = $a_tag_2;
        }
      }

      //dpm($tags_sets);
      foreach ($tags_set as $root => $leaves) {
        foreach ($leaves as $leave) {
          $all_tags_sets['couples'][] = array($root, $leave);
        }
      }
      */

      
      foreach ($all_tags_sets as $index => $set ) {
      
        // We have found articles for singles already.
        if ($index == 1) {
          continue;
        }
        
        foreach ($set as $key => $tags_set) {  

          //dpm('$tags_set ' . $tags_set[0] . ', ' . $tags_set[1] . ', ' . @$tags_set[2]);

          $query = db_select('node', 'n')
                ->fields('n', array('nid', 'created'));

          foreach ($tags_set as $key2 => $tag) {
            //$query->join('field_data_field_tags_' . $map_nodeType_to_tagsTable[$node_type], 'ti_' . $key2, 'ti_' . $key2 . '.entity_id = n.nid AND ti_' . $key2 . '.field_tags_' . $map_nodeType_to_tagsTable[$node_type] . '_tid = ' . $tag);
            //$query->fields('ti_' . $key2, array('field_tags_'. $map_nodeType_to_tagsTable[$node_type] . '_tid'));
            
            
            $query->join('field_data_field_tags_' . $map_nodeType_to_tagsTable[$node_type], 'ti_' . $key2, 'ti_' . $key2 . '.entity_id = n.nid AND ti_' . $key2 . '.field_tags_'. $map_nodeType_to_tagsTable[$node_type] . '_tid = ' . $tag);
            $query->addField('ti_' . $key2, 'field_tags_'. $map_nodeType_to_tagsTable[$node_type] . '_tid', 'tid_' . $key2);

            $query->leftJoin('taxonomy_term_data', 'td_' . $key2, 'td_' . $key2 . '.tid = ti_' . $key2 . '.field_tags_'. $map_nodeType_to_tagsTable[$node_type] . '_tid');
            $query->addField('td_' . $key2, 'name', 'term_' . $key2);


          }
          $query->condition('n.nid', $article_nid, '!=');
          //$results = $query->execute()->fetchAllAssoc('nid');
          $results = $query->execute()->fetchAllAssoc('created');
          
          
          
          if (!empty($results)) {
            foreach($results as $key => $result) {
              //if (!in_array($result, $articles)) {
              if (isset($articles[$key]) && $articles[$key]->similar_tags_count > $index) {
                unset($results[$key]);
              }
              else {
                if (isset($all_nids_sets[1][$key])) {
                  // Clear this tag from 1 tags array.
                  unset($all_nids_sets[1][$key]); 
                }
                $result->similar_tags_count = $index;
                $all_nids_sets[$index][$result->created] = $result;
                $articles[$result->created] = $result;
              }
              //}
            }
          }
        }

      }
      
      // Sort by created time (by keys).
      foreach($all_nids_sets as $key => $value) {
        krsort($all_nids_sets[$key]);
      }
    
      //dpm($all_nids_sets);
      
      // Build $articles_by_index and Leave nly 10 elements.
      $max_index = count($all_nids_sets);
      for ($i = $max_index; $i >= 1; $i--) {
        
        foreach ($all_nids_sets[$i] as $key => $value) {
          if ($max_articles <= 0) {
            break 2;
          }
          --$max_articles;
          $articles_by_index[$i][$key] = $value;
        }
      }
      
      //dpm($articles_by_index);
      
      return $articles_by_index;
      
    } // End of if still > 6 after filtering.
  
    
  } // End of if (count($arr) > 6) {
  
  
  
  // Amountof tags is less than 7 (original or filtered by excluding 0ne tag)
  $current_article_index = count($arr);

  $result = array();

  for ($i = 0; $i<count($arr); $i++) {
    gv_misc_findAllArrayElementsCombinations($arr, $i+1, $result);
  }

  $min_index = 1; //$current_article_index > 1 ? 2 : 1;
  $max_index = 0;

  
  foreach ($result as $key => $array) {
    $temp_array = array();
    foreach ($array as $key2 => $item) {
      if (in_array($item, $temp_array)) {
        unset($result[$key]);
        break;
      }
      $temp_array[] = $item;
    }

    if (isset($result[$key])) {
      $index = count($result[$key]);
      $tags[$index][] = $result[$key];
      if ($max_index < $index) {
        $max_index = $index;
      }
    }
  }


  //dpm($tags);

  // TEST
//            foreach ($result as $arr) {
//                dpm(join(" - ", $arr));
//            }


  for ($i = $max_index; $i >= $min_index; $i--) {

    //dpm('i = ' . $i);
    
    foreach ($tags[$i] as $index => $index_tags) {
      
      
      if (!$max_articles) {
        break;
      }

      $query = db_select('node', 'n')
          ->fields('n', array('nid', 'created'));

      foreach ($index_tags as $key => $index_tag) {
        
        /*
        
        $query = db_select('field_data_field_tags_' . $map_nodeType_to_tagsTable[$node_type], 'ti')
            ->fields('ti', array('field_tags_'. $map_nodeType_to_tagsTable[$node_type] . '_tid'));
        //$query->leftJoin('taxonomy_term_data', 'td', 'td.tid = ti.tid');
        //$query->fields('td');
        $query->condition('ti.entity_id', $article_nid);
        //$query->condition('td.vid', 2, '!=');
        //$a_tags = $query->execute()->fetchAllAssoc('tid');
        $arr = $query->execute()->fetchCol();

        
        */
        
        
        ////$query->join('taxonomy_index', 'ti_' . $key, 'ti_' . $key . '.nid = n.nid AND ti_' . $key . '.tid = ' . $index_tag);
        ////$query->fields('ti_' . $key, array('tid'));
        
        
        $query->join('field_data_field_tags_' . $map_nodeType_to_tagsTable[$node_type], 'ti_' . $key, 'ti_' . $key . '.entity_id = n.nid AND ti_' . $key . '.field_tags_'. $map_nodeType_to_tagsTable[$node_type] . '_tid = ' . $index_tag);
        //$query->fields('ti_' . $key, array('field_tags_'. $map_nodeType_to_tagsTable[$node_type] . '_tid'));
        $query->addField('ti_' . $key, 'field_tags_'. $map_nodeType_to_tagsTable[$node_type] . '_tid', 'tid_' . $key);
        
        $query->join('taxonomy_term_data', 'td_' . $key, 'td_' . $key . '.tid = ti_' . $key . '.field_tags_'. $map_nodeType_to_tagsTable[$node_type] . '_tid');
        $query->addField('td_' . $key, 'name', 'term_' . $key);
      }
      $query->condition('n.nid', $article_nid, '!=');
      if (!empty($articles)) {
        $query->condition('n.nid', array_keys($articles), 'NOT IN');
      }
      //$query->orderBy('n.created', 'DESC');
      //$query->range(0, $max_articles);
      
      //$results = $query->execute()->fetchAllAssoc('nid');
      $results = $query->execute()->fetchAllAssoc('created');
      
      //if ($i == 1)
//      if (!empty($results))
//      {
//        dpm('$max_articles = ' . $max_articles);
//        dpm('$map_nodeType_to_tagsTable[$node_type] = ' . $map_nodeType_to_tagsTable[$node_type]);
//        dpm ('$index_tag = ' . $index_tag);
//        dpm($results);
//      }
      
      if ($results) {

//        foreach ($results as $key => $result) {
//          if (isset($articles[$key])) {
//            unset($results[$key]);
//          }
//          elseif ($max_articles) {
//            $articles_by_index[$i][$key] = $result;
//            $articles[$key] = $result;
//            --$max_articles;
//          }
//        }
        
        foreach ($results as $key => $result) {
          //if (in_array($result, $articles)) {
          if (isset($articles[$key])) {
            unset($results[$key]);
          }
          elseif ($max_articles) {
            $result->similar_tags_count = $i;
            $articles_by_index[$i][$result->created] = $result;
            $articles[$result->created] = $result;
            --$max_articles;
          }
        }
        

      }
    }
  }

  
  foreach($articles_by_index as $key => $value) {
    krsort($articles_by_index[$key]);
  }
  //dpm($articles_by_index);
  
  return $articles_by_index;
}


/**
 * Define if the article has an image field.
 */
function gv_misc_articleHasMainImageField($nid) {
  
  $query = db_select('node', 'n')
    ->fields('n', array('title'));

  $query->join('field_data_field_main_image', 'mi', 'mi.entity_id = n.nid');
  $query->fields('mi', array('field_main_image_value'));
  $query->condition('n.nid', $nid);

  $result = $query->execute()->fetchObject();
  dpm($result);
  
  if ($result) {
    $result->field_main_image_value = unserialize($result->field_main_image_value);
    if(!empty($result->field_main_image_value)) {
      return TRUE;
    }
  }
  return FALSE;              
}


/**
 * Add related articles variable to an article node.
 */
function gv_misc_addRelatedArticlesToNode($node) {
  
    // Set Related articles section data.

    if (!$node || !is_object($node)) {
      return NULL;
    }
  
    $max_articles_on_front = 4;
    
    $field_extra_data = is_array($node->field_extra_data)? @$node->field_extra_data['und'][0]['value'] : @$node->field_extra_data;
    $extra_data = unserialize($field_extra_data);

    //dpm($extra_data);

    
    //'related_articles_timestamp' => time()

    // If the article hasn't been yet resaved with set related articles
    // we then set it here by default the first 4 most relative articles from all found related articles.

    //$time_elapsed = time() - @$extra_data['related_articles_timestamp'];
    //dpm('$time_elapsed = ' . $time_elapsed);
    
    global $user;
    if ($user->uid == 1) {
      $cache_time = 120;
    }
    else 
      {
      $cache_time = (3600*24*3);
    }
    //dpm('now time = ' . time());
    //$extra_data['related_articles_timestamp'] < 1378438467 -----> assure that there is used a new calculation version.
    if (!isset($extra_data['related_articles']) || $extra_data['related_articles_timestamp'] < 1378438467 || (isset($extra_data['related_articles']) && (time() - @$extra_data['related_articles_timestamp']) > $cache_time ) ) // 60s*60 = 3600s = 1h     //Comment this line to ignore srelected by admin related articled.
    {
      dpm('Recaclulate related...');
      
      // Reset the related_articles array. Just in case.
      $extra_data['related_articles'] = array();
      
      $articles_by_index = gv_misc_get_relatedArticles_dividedByIndex($node->nid, $node->type);
      //dpm($articles_by_index);
      
      if (!empty($articles_by_index)) {

        // Recreate $extra_data['related_articles'] element
        $related_count = 0;
        foreach ($articles_by_index as $index => $data) {
          foreach ($data as $created => $related_article) {

            //if (gv_misc_articleHasMainImageField($related_article->nid)) 
            {


              $query = db_select('node', 'n')
                ->fields('n', array('title', 'created'));
              $query->leftJoin('field_data_field_main_image', 'mi', 'mi.entity_id = n.nid');
              $query->fields('mi', array('field_main_image_value'));
              
              $query->leftJoin('field_data_body', 'b', 'b.entity_id = n.nid');
              $query->addField('b', 'body_value', 'teaser');
              
              $query->condition('n.nid', $related_article->nid);

              $teaser_lenght = 780; // without pic
              //$teaser_lenght = 900;
              
              if ($result = $query->execute()->fetchObject()) {
                
                $result->field_main_image_value = unserialize($result->field_main_image_value);
                if(!empty($result->field_main_image_value)) {
                  $result->field_main_image_value['src_themed_related'] = image_style_url('related_article_thumb', $result->field_main_image_value['uri']);
                  $result->field_main_image_value['src_themed_related_sideblock'] = image_style_url('related_article_thumb_sideblock', $result->field_main_image_value['uri']);
                  
                  //dpm($result->field_main_image_value['src_themed_related_sideblock']);
                  //dpm(getimagesize($result->field_main_image_value['src_themed_related_sideblock']));
                  
                  // Assure that the imagecache file is created already, or recreate it.
                  gv_misc_createCachedImageIfNotExists($result->field_main_image_value['src_themed_related_sideblock']);
                  
                  $sizes = getimagesize($result->field_main_image_value['src_themed_related_sideblock']);
                  
                  $image_height = $sizes[1];
                  if ($image_height >= 212) {
                    $teaser_lenght = 390; // with pic 215px and 2 lines of a title.
                  }
                  else {
                    
                    //$teaser_lenght = 300 + (215 - $sizes[1])
                    $ratio = 1 - (($image_height*100)/215)/100;
                    $teaser_lenght = 390 + 390*$ratio;
//                    dpm('$image_height = ' . $image_height);
//                    dpm('$ratio = ' . $ratio);
//                    dpm('$teaser_lenght = ' . $teaser_lenght);
                  }
                }
                
                //dpm('$teaser_lenght = ' . $teaser_lenght);
                
                // Shirten a teaser a little bit.
                $teaser_lenght -= 150;
                
                $result->teaser = drupal_substr(strip_tags($result->teaser), 0, $teaser_lenght);
                // Remove the last broken word.
                $last_pos = strrpos($result->teaser, ' ');
                $result->teaser = substr_replace ($result->teaser, '... ', $last_pos);
              
                //dpm($related_article);
                $similar_tags = '';
                foreach ($related_article as $key => $value) {
                  if (strpos($key, 'term') !== FALSE) {
                    $similar_tags .= ($similar_tags ? ', ' : '') . $value;
                  }
                }
                $result->similar_tags = $similar_tags;
                $result->similar_tags_count = @$related_article->similar_tags_count;
                $extra_data['related_articles']['index_'. $index][$related_article->nid] = $result;
                                
                if ($related_count++ >= $max_articles_on_front - 1) {
                  break 2;
                }

              }

//                  $extra_data['related_articles']['index_'. $index][$related_article->nid] = 1;
//                  if ($related_count++ >= $max_articles_on_front - 1) {
//                    break 2;
//                  }

            }
          }
        }
        $extra_data['related_articles_timestamp'] = time();

        //dpm($extra_data);
        // Save found related articles to the article's extra_data field to set it as default related articles.
        // After that there will not be need to recalculate it avery time the article being viewed.

        gv_misc_fieldSave('extra_data', $node->nid, serialize($extra_data), 'node', $node->type);

      }

    }

    if (!isset($extra_data['related_articles'])) {
      $extra_data['related_articles'] = array();
    }
    
    
    foreach ($extra_data['related_articles'] as $group) {
      
      foreach ($group as $nid => $checked) {


        if ($checked) {

          if (is_int($checked)) {

            $query = db_select('node', 'n')
              ->fields('n', array('title'));

            $query->join('field_data_field_main_image', 'mi', 'mi.entity_id = n.nid');
            $query->fields('mi', array('field_main_image_value'));

            $query->condition('n.nid', $nid);

            /*
            // Skip articles without thumbnails.
            if ($result = $query->execute()->fetchObject()) {

              $result->field_main_image_value = unserialize($result->field_main_image_value);
              if(!empty($result->field_main_image_value)) {
                $result->field_main_image_value['src_themed'] = image_style_url('related_article_thumb', $result->field_main_image_value['uri']);
                $node->related_articles[$nid] = $result;
                if (--$max_articles < 1) {
                  break 2;
                }
              }
            }

              */

            if ($result = $query->execute()->fetchObject()) {

              $result->field_main_image_value = unserialize($result->field_main_image_value);
              if(!empty($result->field_main_image_value)) {
                $result->field_main_image_value['src_themed_related'] = image_style_url('related_article_thumb', $result->field_main_image_value['uri']);
              }
              $node->related_articles[$nid] = $result;

              if (--$max_articles_on_front < 1) {
                break 2;
              }
            }
          } // End of if_int
          else {

            $node->related_articles[$nid] = $checked;
            if (--$max_articles_on_front < 1) {
              break 2;
            }

          }


        } // End of if(checked)
        
      } // End of foreach ($group as $nid => $checked) {
      
    }
}


/**
 * Allow contextual links for all view_modes.
 */
function gv_misc_node_view_alter(&$build) {
  // Allow contextual links even on full view mode on node pages.
  //$build['#contextual_links']['node'] = array('node', array($build['#node']->nid));
}