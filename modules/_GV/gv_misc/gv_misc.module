<?php

/**
 * @file
 * Module contained miscelanious helper functions and hooks.
 */


/**
 * Implements hook_menu().
 */
function gv_misc_menu() {
 
  $items['request'] = array(
    'title' => 'Make a request',
    'page callback' => 'gv_misc_makeRequest_ajax',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  ); 
  
  $items['test'] = array(
    'title' => 'Test page',
    'page callback' => 'gv_misc_testPage',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
  $items['admin/content/reviews-to-approve'] = array(
    'title' => 'Reviews to Approve',
    'page callback' => 'gv_misc_gotoReviewsToApprove',
    'access arguments' => array('administer content'),
    'type' => MENU_NORMAL_ITEM,
  );
  
  $items['approve/%/%'] = array(
    'title' => 'Approve content',
    'page callback' => 'gv_misc_approveContent',
    'page arguments' => array(1,2),
    'access arguments' => array('administer content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}


/**
 * Helper function to for administer menu.
 */
function gv_misc_gotoReviewsToApprove() {
  drupal_goto('approve/reviews');
}


/**
 * Approve content by type and nid.
 */
function gv_misc_approveContent($type, $nid) {

  switch ($type) {
    case 'review':
      /*
      if (!$nid || !$node = node_load($nid)) {
        return t('Wrong Review Id');
      }
      $node->field_r_notapproved['und'][0]['value'] = 0;
      $node->status = 1;
      node_save($node);
      drupal_set_message('The review ' . l($node->title, 'node/' . $node->nid) . ' is now approved and published.');
      drupal_goto();
      */
      break;
  }
  
  return 'Nothing Done!';
}


/**
 * Implements hook_url_inbound_alter().
 */
function gv_misc_url_inbound_alter(&$path, $original_path, $path_language) {
  // Create the path /contact-us from /contact
  if (preg_match('|^contact-us$|', $path, $matches)) {
    $path = 'contact';
  }
  elseif ($path == 'voip-provider-submit-user-review') {
    $path = 'node/add/review';
  }
}


/**
 * Implements hook_url_outbound_alter().
 */
function gv_misc_url_outbound_alter(&$path, &$options, $original_path) {
  // Create the path /contact-us from /contact
  if (preg_match('|^contact$|', $path, $matches)) {
    $path = 'contact-us';
  }
  elseif ($path == 'node/add/review') {
    $path = 'voip-provider-submit-user-review';
  }
}


/**
 * Test page function for url /test.
 */
function gv_misc_testPage() {
  
  $admins = gv_misc_getAdmins();
  foreach ($admins as $admin) {
    dpm($admin);
  }
  
    return 'End of Test';
}


/**
 * Implements requests from users.
 * 
 * Returns json result data with OK or error.
 */
function gv_misc_makeRequest_ajax() {
  $status = FALSE;
  $output = '';
  $post = $_POST;
  
  if (empty($post)) {
    $output = t('The form is not filled!'); 
  }
  elseif (!isset($post['token']) || !isset($_SESSION['requestQuoteToken']) || $post['token'] != $_SESSION['requestQuoteToken']){
    $output = t('The form is outdated or broken.'); 
  }
  else {
    $params['request_data'] = $post;
    $admins = db_query("SELECT u.uid FROM {users_roles} u INNER JOIN {role} r ON r.name = :role AND r.rid = u.rid WHERE 1", array(':role' => 'administrator')); 
    foreach ($admins as $admin) {
      $recipient = user_load($admin->uid);
      $params['recipient'] = $recipient;
      drupal_mail('gv_misc', 'request_quote', $recipient->mail, user_preferred_language($recipient), $params);
    }
    $status = TRUE;
    $output = t('Your request has been sent. You will be notified as soon as possible!'); 
  }
  $letter = theme('gv_misc_requestQuote_mail', $post);//$params['request_data']);
  drupal_json_output(array('status' => $status, 'data' => $output, 'post' => $_POST, 'token' => $post['token'], 'test_token' => $test_token, 'valid_token' => $valid_token, 'letter' => $letter));
}


/**
 * Implements hook_mail().
 */
function gv_misc_mail($key, &$message, $params) {
  switch ($key) {
    case 'request_quote':
      /*  
      $data = array( 
        'privatemsg_message' => $params['message'],
        'privatemsg_recipient' => $params['recipient'],
      );
      $options = array(
        'language' => user_preferred_language($params['recipient']),
        // Don't sanitize output since this is used in an email, not a browser.
        'sanitize' => FALSE,
        // Custom token to avoid custom token handling.
        'privatemsg-display-invalid' => FALSE,
      );
      
      $message['subject'] = trim(token_replace(variable_get('pm_email_notify_subject', 'New private message at [site:name].'), $data, $options));
      $message['body'][] = trim(token_replace(variable_get('pm_email_notify_body', _pm_email_notify_default_body()), $data, $options));
      */
      $message['subject'] = t('New request for a quote');
      $message['body'][] = theme('gv_misc_requestQuote_mail', $params['request_data']);
      break;
    
    
    
    case 'email_verification':
      $message['subject'] = t('Email verification');
      $message['body'][] = t('Dear user!

To verify your email and make it faster to approve your submitted review, please use this link:

!url

Best wishes,
Get VoIP team
', array('!url' => 'http://getvoip.com/approve/email/' . $params['verification_code']));
      
      break;
    
    
    
    case 'new_review_admin_notify':
      $message['subject'] = t('New review has been submitted');
      $message['body'][] = t('Dear administrator!

A new review just has been subbmitted recently. Please approve or discard it at !pending_reviews.

Best wishes,
Get VoIP team
', array('!pending_reviews' => 'http://getvoip.com/approve/reviews'));
      
      break;
    
  }
}  


/**
 * Simple theming of a Request for quote mail content.
 */
function theme_gv_misc_requestQuote_mail($data) {
 $out = 'Request for a quote data:

';
 foreach ($data as $key => $value) {
   $out .= "$key = $value
";
 }
 
 return $out;
}


/**
 * Helper function to send preset messages.
 */
function gv_misc_sendMessagePresets($preset, $data) {
  switch ($preset) {
    case 'new_review_admin_notify':
      
      $admins = gv_misc_getAdmins();
      foreach ($admins as $recipient) {
        $params['recipient'] = $recipient;
        drupal_mail('gv_misc', 'new_review_admin_notify', $recipient->mail, user_preferred_language($recipient), $params);
      }
      
      break;
  }
}


/**
 * Get site's admins objects.
 */
function gv_misc_getAdmins() {
  $query = db_select('users', 'u')
        ->fields('u');
  $query->leftJoin('users_roles', 'ur', 'ur.uid = u.uid');
  $query->leftJoin('role', 'r', 'r.rid = ur.rid');
  $query->condition('r.name', 'administrator');
  $results = $query->execute();

  return $results;
}


/**
 * Implements hook_form_alter().
 *
 * @param array &$form
 *   Array with declared form.
 *
 * @param array &$form_state
 *   Array with current form state.
 *
 * @param string $form_id
 *   Form ID.
 *
 * @return void
 *   Return nothing.
 */
function gv_misc_form_alter(&$form, &$form_state, $form_id) {
  // dpm($form_id);dpm($form);
  // Unlink Ckeditor from the comment input form.
  if($form['#id'] == 'comment-form') {
    $form['comment_body']['und'][0]['#type'] = 'textarea';
  }
  if (isset($form['#node']) && $form_id == $form['#node']->type .'_node_form') {
    $form['body']['und']['0']['#format'] = "full_html";
    //$form['field_custom_php_code']['und']['0']['#format'] = "php_code";
  }
}


/**
 * Returns topics list for a specific content type. 
 * 
 * Allows to use same topics for News, articles, etc.
 */
function gv_misc_getTopics($content_type, $base_url = NULL, $limit = NULL) {
  $topics = NULL;
  $voc = taxonomy_vocabulary_machine_name_load(TOPICS);
  
  // Old style query, for reference.
  // $results = db_query("SELECT td.name, COUNT(n.nid) AS count FROM {taxonomy_term_data} td LEFT JOIN {taxonomy_index} ti ON ti.tid = td.tid INNER JOIN {node} n ON (n.nid = ti.nid AND n.type = :type) WHERE td.vid = :vid GROUP BY td.name LIMIT $limit", array(':vid' => $voc->vid, ':type' => $content_type));
    
  $types = array();

  $query = db_select('taxonomy_term_data', 'td')
        ->fields('td', array('name', 'tid'));
  $query->leftJoin('taxonomy_index', 'ti', 'ti.tid = td.tid');
  $query->leftJoin('node', 'n', 'n.nid = ti.nid');
  $query->where('n.nid = ti.nid AND n.type = :type', array(':type' => $content_type))
        ->addExpression('COUNT(n.nid)', 'count');
  $query->groupBy('td.name');
  if ($limit) {
    $query->range(0, $limit);
  }
  $results = $query->execute();

  foreach($results as $result) {
    // Translate terms to the current language.
    // $result->name = i18n_string_translate(array('taxonomy', 'term', $result->tid, 'name'), $result->name);
    $base_url = trim($base_url, '/');
    $result->link = array('link_title' => $result->name, 'href' => $base_url . '/' . urldecode(drupal_strtolower($result->name)));
    $topics[] = (array) $result;
  }
  return $topics;
}


/**
 * Implements hook_theme().
 */
function gv_misc_theme($existing, $type, $theme, $path) {
  return array(
    'gv_misc_submenuSimple' => array(
      'variables' => array('vars' => null),
    ),
    'gv_misc_headerLinks' => array(
      'variables' => array('vars' => null),
    ),
    // Fivestar REPLACING theme functions.
    'gv_misc_fivestar_static' => array(
      'variables' => array('rating' => NULL, 'stars' => 5, 'tag' => 'vote', 'widget' => array('name' => 'default', 'css' => '')),
    ),
    // Compose a mail with a Request for a quote.
    'gv_misc_requestQuote_mail' => array(
      'variables' => array(),
    ),
  );
}
  

/**
 * Simple theming of nested submenu.
 */
function theme_gv_misc_headerLinks($vars) {
  if(empty($vars['submenu']['below'])) {
    return NULL;
  }
  $class = isset($vars['class']) ? $vars['class'] : 'header-links';
  $delimiter = isset($vars['delimiter']) ? $vars['delimiter'] : '';
  $out = '<ul class="' . $class . '"><span class="menu-preface">' . t('Follow Us:') . '</span>';
  $count = 0;
  foreach ($vars['submenu']['below'] as $submenu) {
    if (isset($submenu['link']['hidden']) && $submenu['link']['hidden']) {
      continue;
    }
    $out .= ($count ? $delimiter : '') . '<li>' . l(t($submenu['link']['link_title']), $submenu['link']['href'], array('attributes' => array('class' => array($submenu['link']['link_title']) ))) . '</li>';
    $count++;
  }
  $out .= '</ul>';
  return $out;
}


/**
 * Simple theming of nested submenu.
 */
function theme_gv_misc_submenuSimple($vars) {
  if(empty($vars['submenu']['below'])) {
    return NULL;
  }
  $level = isset($vars['level']) ? $vars['level'] : 0;
  $class = isset($vars['class']) ? $vars['class'] : 'om-links';
  $delimiter = isset($vars['delimiter']) ? $vars['delimiter'] : '';
  $out = '<ul class="gv ' . $class . ' lvl-' . $level . '">';
  $count = 0;
  foreach ($vars['submenu']['below'] as $submenu) {
    if (isset($submenu['link']['hidden']) && $submenu['link']['hidden']) {
      continue;
    }
    $out .= ($count ? $delimiter : '') . '<li>';
    if($level) {
      for ($i = 0; $i < $level; $i++ ) {
        $out .= '--';
      }
    }
    $title = t($submenu['link']['link_title']);
    if(isset($submenu['count']) && $submenu['count']) {
      $title .= ' (' . $submenu['count'] . ')';
    }
    // If the field Description has '<nolink>' don't show link for this item
    if(isset($submenu['link']['localized_options']['attributes']['title']) && strtolower($submenu['link']['localized_options']['attributes']['title']) == '<nolink>') {
      $out .= $title;
    }
    else {
      $out .= l($title, $submenu['link']['href']);
    }
    $out .= '</li>';
    if (!empty($submenu['below'])) {
      // Recursion call.
      $out .= theme('gv_misc_submenuSimple', array('submenu' => $submenu, 'level' => ($level + 1), 'class' => $class, 'delimiter' => $delimiter ));
    }
    $count++;
  }
  $out .= '</ul>';
  return $out;
}


/**
 * REPLACE FOR ORIGINAL fivestar module theming function. Just to use only its theming functionality.
 * 
 * Display a plain HTML view-only version of the widget with a specified rating.
 *
 * @param $rating
 *   The desired rating to display out of 100 (i.e. 80 is 4 out of 5 stars).
 * @param $stars
 *   The total number of stars this rating is out of.
 * @param $tag
 *   Allows multiple ratings per node.
 * @return
 *   A themed HTML string representing the star widget.
 */
function theme_gv_misc_fivestar_static($variables) {
  $rating  = $variables['rating'];
  $stars = $variables['stars'];
  $tag = $variables['tag'];
  $widget = $variables['widget'];

  // GV Intrusion!!!!
  $path = drupal_get_path('module', 'gv_misc') . '/css/fivestar';
  drupal_add_css($path . '/css/fivestar.css');
  // END of intrusion.
  
  if($widget['name'] != 'default') {
    // GV changes.
    //drupal_add_css($widget['css']);
    drupal_add_css($path . '/widgets/' . $widget['name'] . '/' . $widget['css']);
  }
  
  $output = '<div class="fivestar-' . $widget['name'] . '">';
  $output .= '<div class="fivestar-widget-static fivestar-widget-static-'. $tag .' fivestar-widget-static-'. $stars . ' clearfix">';
  if (empty($stars)) {
    $stars = 5;
  }
  $numeric_rating = $rating/(100/$stars);
  for ($n=1; $n <= $stars; $n++) {
    $star_value = ceil((100/$stars) * $n);
    $prev_star_value = ceil((100/$stars) * ($n-1));
    $zebra = ($n % 2 == 0) ? 'even' : 'odd';
    $first = $n == 1 ? ' star-first' : '';
    $last = $n == $stars ? ' star-last' : '';
    $output .= '<div class="star star-'. $n .' star-'. $zebra . $first . $last .'">';
    if ($rating < $star_value && $rating > $prev_star_value) {
      $percent = (($rating - $prev_star_value) / ($star_value - $prev_star_value)) * 100;
      $output .= '<span class="on" style="width: '. $percent .'%">';
    }
    elseif ($rating >= $star_value) {
      $output .= '<span class="on">';
    }
    else {
      $output .= '<span class="off">';
    }
    if ($n == 1)$output .= $numeric_rating;
    $output .= '</span></div>';
  }
  $output .= '</div></div>';
  return $output;
}


/**
 * Returns all available providers aray with nid => title.
 */
function gv_misc_getProviders(&$providers, $scope = 'all') {
  if ($scope == 'all') {
    $data = db_select('node', 'n')
          ->fields('n', array('nid', 'title'))
          ->condition('type', 'provider')
          ->execute();
    foreach($data as $provider) {
      $providers[$provider->nid] = $provider->title;
    }
  }
}


/**
 * Returns all fees for available providers.
 */
function gv_misc_getProvidersFees($scope = 'all') {
  if ($scope == 'all') {
    $data = db_select('field_revision_field_p_fees_save', 'f')
          ->fields('f', array('entity_id', 'field_p_fees_save_value'))
          ->execute();
    foreach($data as $fee) {
      $fees[$fee->entity_id] = unserialize($fee->field_p_fees_save_value);
    }
  }
  return $fees;
}


/**
 * Checks if the email is already taken by one of the site's registered user.
 */
function gv_misc_emailIsRegistered($email) {
  $data = db_select('users', 'u')
          ->fields('u', array('uid'))
          ->condition('mail', $email)
          ->execute();
  if ($email = $data->fetchField()) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}


/**
 * Check if a current user already submitted a review for a specific Provider and return it if it exists.
 */
function gv_misc_userHasSubmittedReview($provider_nid, $user_uid, $user_email = NULL, $other_provider_title = NULL, $current_review_nid = NULL) {
  
  $data = db_select('node', 'n')
        ->fields('n', array('nid', 'title'))
        ->fields('na', array('field_r_notapproved_value'));
  $data->leftJoin('field_data_field_ref_provider', 'rp', "rp.entity_id = n.nid");
  $data->leftJoin('field_data_field_r_oprovider', 'op', "op.entity_id = n.nid");
  $data->leftJoin('field_data_field_r_email', 'ue', "ue.entity_id = n.nid");
  $data->leftJoin('field_data_field_r_notapproved', 'na', "na.entity_id = n.nid");
  $data->condition('n.type', 'review')
       //->condition('n.uid', $user_uid)
       ;
  
  // For an anonymous user check email as well (we can find a user only that way in this case)
  //if (!$user_uid && $user_email) {
    // Let's check email instead if uid, as there could exist a review (from other user,  authorized or not) with a such email
    $data->condition('ue.field_r_email_value', $user_email);
  //}
  
  // exclude a currently submitted review from the search.
  if ($current_review_nid) {
    $data->condition('n.nid', $current_review_nid, '!=');
  }
  
  if ($provider_nid) {
    $data->condition('rp.field_ref_provider_target_id', $provider_nid);
  }
  elseif ($other_provider_title) {
    $data->condition('op.field_r_oprovider_value', $other_provider_title);
  }
  else {
    // No provider id or title set.
    return FALSE;
  }
  
  $data = $data->execute()->fetchObject();
  
  if (empty($data)) {
    return FALSE;
  }
  else {
    return $data;
  }
}


/**
 * Implements hook_token_info().
 */
function gv_misc_token_info() {
  // Defines new token 'Provider name' in the node torens group.
  $info['tokens']['node']['provider-name-for-current-review'] = array(
    'name' => t('Provider name for a current review'),
    'description' => t('Name of the provider chosen from a select list or from a custom field if its provided...'),
  );

  return $info;
}


/**
 * Implements hook_tokens().
 * 
 * Provides token for a current review's provider name. It set to selected from a list or from a manually filled field (if not selected from a list).
 */
function gv_misc_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  $sanitize = !empty($options['sanitize']);

  // Add new token 'provider-name-for-current-review' to a 'node' tokens group.
  if ($type == 'node' && !empty($data['node'])) {
    $node = $data['node'];

    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'provider-name-for-current-review':
          if ($node->type == 'review') {
            if (isset($node->field_ref_provider['und'][0]['target_id']) && $node->field_ref_provider['und'][0]['target_id']) {
              
              $provider_title = db_select('node', 'n')
                ->fields('n', array('title'))
                ->condition('nid', $node->field_ref_provider['und'][0]['target_id'])
                ->execute()->fetchField();
              
              $replacements[$original] = $provider_title;
            }
            else {
              $replacements[$original] = check_plain($node->field_r_oprovider['und'][0]['value']);
            }

          }
          
          break;
      }
    }
  }
  
  return $replacements;
}



/**
 * Implements hook_TYPE_alter().
 * 
 * Provides custom tags for the Votes API via votingapi_metadata alter (defined in ).
 */
function gv_misc_votingapi_metadata_alter(&$data) {
  $data['tags'] += array(
    'features' => array(
      'name' => t('Features Rating'),
      'description' => t('Features Rating for a provider.'),
    ),
    'sound' => array(
      'name' => t('Sound Quality Rating'),
      'description' => t('Sound Quality Rating for a provider.'),
    ),
    'rely' => array(
      'name' => t('Reliability Rating'),
      'description' => t('Reliability Rating for a provider.'),
    ),
    'money' => array(
      'name' => t('Value for Money Rating'),
      'description' => t('Value for Money Rating for a provider.'),
    ),
    'service' => array(
      'name' => t('Value for Customer Service Rating'),
      'description' => t('Value for Customer Service Rating for a provider.'),
    ),
    'recommend' => array(
      'name' => t('Value for Would you recommend this VoIP provider'),
      'description' => t('Value for Would you recommend this VoIP provider. Yes or No.'),
    ),
  );
}



/**
 * Implements hook_views_pre_render().
 */

function gv_misc_views_pre_render(&$view) {
  
  // dpm($view->name);

  // Add a preface block for the Providers listing page.
  if($view->name == 'providers' && $view->current_display == 'page') {

      $data = db_select('node', 'n')
          ->fields('n', array('nid'))
          ->condition('n.type', 'preface')
          ->condition('n.title', 'Providers');
      
      if($preface_nid = $data->execute()->fetchField()) {
        $preface_node = node_load($preface_nid);
        // Hide the title of the preface.
        $preface_node->title = '';
        
        // Change the title of the view (main page title actually)
        // $view->build_info['title'] = "My custom title!";
        
        // Works, but it's shown after exposed filters.
        $view->attachment_before = '<div class="preface">' . render(node_view($preface_node)) . '</div>';
        
        // DOesn't work.
        /*
        $view->header = array(
            '#type' => 'item',
            '#markup' => '<div class="preface">' . render(node_view($preface_node)) . '</div>',
        );
        */
        
      } // End of if($preface_nid = $data->execute()->fetchField()) {
  } // End if($view->name == 'providers' && $view->current_display == 'page') {
} 


/**
 * Return specific variable value for a provider depending on the filter value (business OR residential, etc)
 */
function wdg_misc_getProviderData_fromView($target, $data) {
  
  $out = '';
  
  switch($target) {
    
    case 'service_types':
      $service_types = $data['data']->_field_data['nid']['entity']->field_p_types['und'];
      $types = '';
      foreach ($service_types as $service_type) {
        if ($service_type['value'] == $data['exposed_raw_input']['type']) {
          $current_type = '<div class="type main">' . drupal_ucfirst($service_type['value']) . '</div>';
        }
        else {
          $types .= '<div class="type">' . drupal_ucfirst($service_type['value']) . '</div>';
        }
      }
      
      if ($types) {
        return $current_type . '<div class="descr">' . t('(currently exposed)') . '</div>' . $types;
      }
      else {
        return $current_type;
      }
      
      break; // End of case 'service_types':
    
      
      
    case 'user_rating':
      $out = '';
      if (isset($data['data']->votingapi_cache_node_percent_features_average_value) && $data['data']->votingapi_cache_node_percent_features_average_value) {
                
        $out = theme('gv_misc_fivestar_static', array('rating' => $data['data']->votingapi_cache_node_percent_features_average_value, 'stars' => 5, 'tag' => 'features', 'widget' => array('name' => 'hearts', 'css' => 'hearts.css')))
              //. '<div class="rating">' . $data['data']->votingapi_cache_node_percent_features_average_value . '%</div>'
              . '<div class="voters">' . $data['data']->votingapi_cache_node_percent_features_count_value . ' ' . t('reviews') . '</div>'
              ;
      }
      $out .= '<div class="details">' . l(t('Details'), 'node/' . $data['data']->nid) . '</div>';
      break;
    
      
      
    case 'monthly_fees':
    case 'longdistance_fees':
    case 'setup_fees':
      
      if (!$all_fees = @$_SESSION['all_fees']) {
        $all_fees = gv_misc_getProvidersFees();
        $_SESSION['all_fees'] = $all_fees;
      }
      
      $p_fees = $all_fees[$data['data']->nid];
      //dpm($data['data']);
      //dpm($p_fees);
      
      
      
      switch($data['exposed_raw_input']['type']) {
        case 'business':
          if (isset($p_fees['bu'][$target]) && $p_fees['bu'][$target]) {
            return '$' . $p_fees['bu'][$target];
          }
          break;
        case 'residential':
          if (isset($p_fees['re'][$target]) && $p_fees['re'][$target]) {
            return '$' . $p_fees['re'][$target];
          }
          break;
      }
      
      /*
      if (!$provider_data = unserialize($data['data']->field_field_p_data[0]['raw']['value'])) {
        return NULL;
      }
      switch($data['exposed_raw_input']['type']) {
        case 'business':
          if (isset($provider_data['services']['s_business']['bu_basicinfo_fees'][$target]) && $provider_data['services']['s_business']['bu_basicinfo_fees'][$target]) {
            return '$' . $provider_data['services']['s_business']['bu_basicinfo_fees'][$target];
          }
          break;
        case 'residential':
          if (isset($provider_data['services']['s_residential']['re_basicinfo_fees'][$target]) && $provider_data['services']['s_residential']['re_basicinfo_fees'][$target]) {
            return '$' . $provider_data['services']['s_residential']['re_basicinfo_fees'][$target];
          }
          break;
      }
      */
      break; // End of case 'monthly_fees':
    
      
    case 'plan':
      if (!$provider_data = unserialize($data['data']->field_field_p_data[0]['raw']['value'])) {
        return NULL;
      }
      switch($data['exposed_raw_input']['type']) {
        case 'business':
          if (isset($provider_data['services']['s_business']['weights_bu_features'])) {
            $features = $provider_data['services']['s_business']['weights_bu_features'];
          }
          if (isset($provider_data['services']['s_business']['BU_preface_title'])) {
            $out = '<div class="plan">' . $provider_data['services']['s_business']['bu_preface_title'] . '</div>';
          }
          break;
        
        case 'residential':
          if (isset($provider_data['services']['s_business']['weights_bu_features'])) {
            $features = $provider_data['services']['s_business']['weights_bu_features'];
          }
          if (isset($provider_data['services']['s_residential']['re_preface_title'])) {
            $out = '<div class="plan">' . $provider_data['services']['s_residential']['re_preface_title'] . '</div>';
          }
          break;
      } // End of switch($data['exposed_raw_input']['type']) {
      
      if (is_array($features)) {
        $out .= '<div class="features">';
        $count = 0;
        foreach ($features as $feature) {
          $out .= '<div class="feature">' . $feature['name'] . '</div>';
          if ($count++ > 1) {
            break;
          }
        }
        $out .= '</div>';
      }
      break; // End of case 'features':
  }
  
  return $out;
}


/**
 * Forms API validation function for email.
 */
function wdg_misc_elementValidate_email($element, &$form_state) {
  if (!valid_email_address($element['#value'])) {
    form_error($element, t('Please enter a valid email address.'));
  }
//  if (empty($element['#value'])) {
//    form_error($element, t('This field is required.'));
//  }
}  


/**
 * Forms API validation function for url.
 */
function wdg_misc_elementValidate_url($element, &$form_state) {
  if (!valid_url($element['#value'])) {
    form_error($element, t('Please enter a valid url address.'));
  }
//  if (empty($element['#value'])) {
//    form_error($element, t('This field is required.'));
//  }
}


/**
 * Helper function for sorting by weight with uasort function.
 * 
 * Example of using:
 * 
 * uasort($array_with_elements_contained_key_weight, 'wdg_misc_sortArrayByWeight');
 */
function wdg_misc_sortArrayByWeight($a, $b) 
{
    if ($a['weight'] == $b['weight']) {
        return 0;
    }
    return ($a['weight'] < $b['weight']) ? -1 : 1;
}
  