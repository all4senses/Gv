<?php

/**
 * @file
 * Module contained miscelanious helper functions and hooks.
 */


/**
 * Constants for ratins titles, etc.
 */
module_load_include('inc', 'gv_misc', 'inc/constants');


/**
 * Implements hook_menu().
 */
function gv_misc_menu() {
 
  $items['request'] = array(
    'title' => 'Make a request',
    'page callback' => 'gv_misc_makeRequest_ajax',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  ); 
  
  $items['test'] = array(
    'title' => 'Test page',
    'page callback' => 'gv_misc_testPage',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
  $items['admin/content/reviews-to-approve'] = array(
    'title' => 'Reviews to Approve',
    'page callback' => 'gv_misc_gotoReviewsToApprove',
    'access arguments' => array('administer content'),
    'type' => MENU_NORMAL_ITEM,
  );
  
  $items['approve/%/%'] = array(
    'title' => 'Approve content',
    'page callback' => 'gv_misc_approveContent',
    'page arguments' => array(1,2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}



/**
 * Renders metatags array with a new order of tags: description, keywords, the rest...
 *
 */
function gv_misc_getInitialQuotePageNode($finalQuotePage_title) {
  
  $title = trim(str_replace(' Final', '', $finalQuotePage_title));
  $query = db_select('node', 'n')
      ->fields('n', array('nid'));
  $query->condition('n.title', $title);
  $query->condition('n.type', 'quote');
  $nid = $query->execute()->fetchfield();
  
  return node_load($nid);
}


/**
 * Renders metatags array with a new order of tags: description, keywords, the rest...
 *
 */
function gv_misc_renderMetatags_newOrder(&$metatags) {
  
  echo render($metatags['description']);
  echo render($metatags['keywords']);
  // The rest...
  echo render($metatags);
}


/**
 * Process variables for search-result.tpl.php.
 *
 * The $variables array contains the following arguments:
 * - $result
 * - $module
 *
 * @see search-result.tpl.php
 */
function gv_misc_preprocess_search_result(&$variables) {
  global $language;
  
  $result = $variables['result'];
  $variables['url'] = check_url($result['link']);
  $variables['title'] = check_plain($result['title']);
  if (isset($result['language']) && $result['language'] != $language->language && $result['language'] != LANGUAGE_NONE) {
    $variables['title_attributes_array']['xml:lang'] = $result['language'];
    $variables['content_attributes_array']['xml:lang'] = $result['language'];
  }

  $info = array();
  if (!empty($result['module'])) {
    $info['module'] = check_plain($result['module']);
  }
  if (!empty($result['user'])) {
    $info['user'] = $result['user'];
  }
  if (!empty($result['date'])) {
    //$info['date'] = format_date($result['date'], 'short');
    // a4s changes
    $info['date'] = date('F d, Y \a\t g:ia', $result['node']->created);
  }
  if (isset($result['extra']) && is_array($result['extra'])) {
    $info = array_merge($info, $result['extra']);
  }
  // Check for existence. User search does not include snippets.
  $variables['snippet'] = isset($result['snippet']) ? $result['snippet'] : '';
  // Provide separated and grouped meta information..
  $variables['info_split'] = $info;
  $variables['info'] = implode(' - ', $info);
  $variables['theme_hook_suggestions'][] = 'search_result__' . $variables['module'];
}



function gv_misc_pushTagsToMetatags($name, $value) {
  switch ($name) {
    case 'keywords':
      $t = '';
      $tags = element_children($value);
      foreach ($tags as $tag) {
        $t .= $t ? ', ' . $value[$tag]['#title'] : $value[$tag]['#title'];
      }
      if ($t) {
        gv_misc_addMetatag($name, $t);
      }
      break;
  }
}


/**
 * Allow modules to define namespaces for RDF mappings.
 *
 * Many common namespace prefixes are defined in rdf_rdf_namespaces(). However,
 * if a module implements hook_rdf_mapping() and uses a prefix that is not
 * defined in rdf_rdf_namespaces(), this hook should be used to define the new
 * namespace prefix.
 *
 * @return
 *   An associative array of namespaces where the key is the namespace prefix
 *   and the value is the namespace URI.
 *
 * @ingroup rdf
 */
// a4s Seems it didn't work out...
function gv_misc_rdf_namespaces() {
  return array(
    'xmlns:addthis'  => 'http://www.addthis.com/help/api-spec',
    'xmlns:g'  => 'http://base.google.com/ns/1.0',
  );
}


/**
 * Implements hook_TYPE_alter().
 * 
 * Specifically hook_html_head_alter().
 */
function gv_misc_html_head_alter(&$object) {
  //dpm($object);
  if (isset($object['rdf_node_comment_count'])) {
    unset($object['rdf_node_comment_count']['#attributes']['datatype']);
  }
}


/**
 * Implements hook_views_api().
 *
 * @return array
 *   Views api definition.
 */
function gv_misc_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'gv_misc') . '/inc',
  );
} 


/**
 * Form with a fieldset of Add content section for Admin Content GetVoIP page (by Views).
 */
function gv_misc_AddContentSection_form() {
  
  global $user;
  
  $types = node_type_get_types();
  
  // Hide some content tupes if not a root.
  if ($user->uid != 1) {
    unset($types['admin_page'], $types['preface'], $types['quote'], $types['webform']);
  }
  
  $options = array('' => '- Select a content type -');
  foreach ($types as $type => $value) {
    $options[str_replace('_', '-', $type)] = $value->name;
  }
  
  $form['add_content'] = array(
    '#type' => 'fieldset',
    '#title' => t('Add a new content'),
    '#collapsible' => TRUE,
  );
  $form['add_content']['select_type'] = array(
    '#type' => 'select',
    //'#title' => 'Select content type',
    '#options' => $options,
    '#attributes' => array('id' => 'select_type',  'onChange' => "top.location.href='http://getvoip.com/node/add/" . "' + document.getElementById('select_type').options[document.getElementById('select_type').selectedIndex].value"),
  );
  
  return $form;
}


/**
 * Return trimmed teaser with right size (cleared from images) and with separated a styled image, cutted off from the body.
 */
function gv_misc_getArticleTeaserData($target, $body_full_markup, $nid) {
 
  $main_image_html = NULL;
  $main_image = NULL;
  $matches = NULL;

  if (preg_match('/<img[^>]+>/i', $body_full_markup, $matches)) {
    preg_match_all('/(alt|title|src)="([^"]*)"/i',$matches[0], $matches);
    foreach ($matches[1] as $index => $key) {
      $main_image[$key] = $matches[2][$index];
    }
    $main_image['src'] = str_replace('%20', ' ', $main_image['src']);
    $stream_path = gv_misc_getStreamUriFromRelativePath($main_image['src']);
    
    $image_size = getimagesize(ltrim($main_image['src'], '/'));

    // Scale and cut.
    /*
    if ($image_size[0] / $image_size[1] > 1.5) {
      $main_image_html = theme('image_style', array( 'path' => $stream_path, 'style_name' => 'article_thumbnail_h'));
    }
    else {
      $main_image_html = theme('image_style', array( 'path' => $stream_path, 'style_name' => 'article_thumbnail_v'));
    }
    */
    // Scale only.
    if ($image_size[0] / $image_size[1] > 1) {
      $main_image_html = theme('image_style', array( 'path' => $stream_path, 'style_name' => 'article_thumbnail_h'));
    }
    else {
      $main_image_html = theme('image_style', array( 'path' => $stream_path, 'style_name' => 'article_thumbnail_v'));
    }
    
    $main_image_html = '<div class="thumb">' . $main_image_html . '</div>';
    
    //$main_image_html = theme('image_style', array( 'path' => $stream_path, 'style_name' => 'article_thumbnail'));
    
    $body_full_markup = preg_replace('/<img[^>]+>/i', '', $body_full_markup);
  }

  $teaser = strip_tags($body_full_markup);
  
  if ($main_image_html) {
    // $teaser = text_summary($body_full_markup, 'full_html', 145);
    $teaser = trim(substr($teaser, 0, 130));
  }
  else {
    // $teaser = text_summary($body_full_markup, 'full_html', 250);
    $teaser = trim(drupal_substr($teaser, 0, 250));
  }
  
  // Replace the last word with ...
  // preg_match('/^.*\s(.*)$/i', trim(strip_tags($teaser)), $matches);
  // $last_pos = strrpos($teaser, $matches[1]);
  $last_pos = strrpos($teaser, ' ');
  
  // $teaser = substr_replace ($teaser, '...' . l(t('Read More'), 'node/' . $nid, array('attributes' => array('class' => array('more')))) , $last_pos, strlen($matches[1]));
  $teaser = substr_replace ($teaser, '...' . l(t('Read More'), 'node/' . $nid, array('attributes' => array('class' => array('more')))), $last_pos);
    
  return array('teaser' => $main_image_html . $teaser, 'main_image' => $main_image);
}


/**
 * Convert a relative or absolute path to Drupal stream uri.
 */
function gv_misc_getStreamUriFromRelativePath($path) {
  $file_default_scheme = file_default_scheme();
  $default_file_path = variable_get('file_' . $file_default_scheme . '_path', conf_path() . '/files');

  $stream_path = str_replace('http://getvoip.com', '', $path);
  $stream_path = ltrim($stream_path, '/');
  return $file_default_scheme . ':/' . str_replace($default_file_path, '', $stream_path);
}


/**
 * Helper function to add metatag to a current page.
 */
function gv_misc_addMetatag($name, $content) {
  if ($content) {
    
    if ($name == 'title') {
      drupal_set_title($content);
    }
    else {
      $meta = array(
        '#type' => 'html_tag',
        '#tag' => 'meta',
        '#attributes' => array(
            'name' => $name,
            'content' => $content,
        )
      );
      drupal_add_html_head($meta, $name);
    }
  }
}


/**
 * Helper function to add sharing data (metatags and links) to a current page.
 */
function gv_misc_addSocialShareData_toPage($node) {
  
  $image = NULL;
  $og_type = NULL;
  
  switch ($node->type) {
    case 'blog_post':
    case 'news_post':
    case 'article':
      if (isset($node->field_main_image['und'][0]['value']) && $node->field_main_image['und'][0]['value']) {
        $image = unserialize($node->field_main_image['und'][0]['value']);
        $image = $image['src'];
      }
      else {
        // Show default image - the logo.
        $image = '/sites/all/themes/gv_orange/css/images/getvoip-logo.png';
      }
      
      $og_type = 'article';
      
      break;
      
    default: 
      $image = '/sites/all/themes/gv_orange/css/images/getvoip-logo.png';
      break;
      
  }
  
  $tags = array(
       /*
      'title' => array(
          '#tag' => 'meta',
          '#attributes' => array(
              'name' => 'title',
              'content' => "Video '" . $node->title . "' by " . $publisher_title,
          ),
      ),
      'DC.title' => array(
          '#tag' => 'meta',
          '#attributes' => array(
              'name' => 'DC.title',
              'content' => $node->title,
          ),
      ),
      'description' => array(
          '#tag' => 'meta',
          '#attributes' => array(
              'name' => 'description',
              'content' => (isset($node->body['und'][0]['summary']) AND $node->body['und'][0]['summary'])?$node->body['und'][0]['summary']:drupal_substr(strip_tags($node->body['und'][0]['value']), 0, 200) . '...',
          ),
      ),
      'author' => array(
          '#tag' => 'meta',
          '#attributes' => array(
              'name' => 'author',
              'content' => $publisher_title,
          ),
      ),



      'medium' => array(
          '#tag' => 'meta',
          '#attributes' => array(
              'name' => 'medium',
              'content' => 'video',
          ),
      ),

      'video_type' => array(
          '#tag' => 'meta',
          '#attributes' => array(
              'name' => 'video_type',
              'content' => 'application/x-shockwave-flash',
          ),
      ),

      'video_height' => array(
          '#tag' => 'meta',
          '#attributes' => array(
              'name' => 'video_height',
              'content' => '300',
          ),
      ),

      'video_width' => array(
          '#tag' => 'meta',
          '#attributes' => array(
              'name' => 'video_height',
              'content' => '500',
          ),
      ),


      'video_src' => array(
          '#tag' => 'link', // The #tag is the html tag - <link />
          '#attributes' => array( 
              'href' => 'http://ripplin.com/sites/all/libraries/flowplayer/flowplayer-3.2.8.swf?config=' . urlencode('http://ripplin.com/video-src?v=' . $node->nid),
              'rel' => 'video_src',
          ),
      ),
      */
    );
 
  
  if ($image) {
    
    if (!strpos($image, '//getvoip.com')) {
      $image = 'http://getvoip.com' . $image;
    }
    
    $tags['image_src'] = array(
        '#tag' => 'link', // The #tag is the html tag - <link />
        '#attributes' => array( 
            'href' => 'http://getvoip.com' . $image,
            'rel' => 'image_src',
            //'type' => 'text/css',
        ),
    );
  
    $tags['og:image'] = array(
        '#type' => 'html_tag',
        '#tag' => 'meta',
        '#attributes' => array(
            'name' => 'og:image',
            'content' => $image,
        ),
    );
    
  }
  
  
  if ($og_type) {
   
    $tags['og:type'] = array(
        '#type' => 'html_tag',
        '#tag' => 'meta',
        '#attributes' => array(
            'name' => 'og:type',
            'content' => $og_type,
        ),
    );
  }
        
  foreach ($tags as $key => $val)
      drupal_add_html_head($val, $key);
        
}


/**
 * Returns votes ids for a specific criteria.
 */
function gv_misc_getVotesIDs($criteria) {
    $query = db_select('votingapi_vote', 'v')
      ->fields('v', array('vote_id', 'tag', 'value'));
    foreach ($criteria as $field => $value) {
      $query->condition($field, $value);
    }
    $results = $query->execute()->fetchAllAssoc('vote_id');
    $votes = array();
    foreach ($results as $result) {
      //$votes[] = array('vote_id' => $result->vote_id);
      $votes[] = (array) $result;
    }
    return $votes;
}


/**
 * Helper function to for administer menu.
 */
function gv_misc_gotoReviewsToApprove() {
  drupal_goto('approve/reviews');
}


/**
 * Approve content by type and nid.
 */
function gv_misc_approveContent($type, $id) {

  switch ($type) {
    
    case 'review':
      
      global $user;
      if (!in_array('administrator', $user->roles)) {
        drupal_access_denied();
        return;
      }
      /*
      if (!$id || !$node = node_load($id)) {
        return t('Wrong Review Id');
      }
      $node->field_r_notapproved['und'][0]['value'] = 0;
      $node->status = 1;
      node_save($node);
      drupal_set_message('The review ' . l($node->title, 'node/' . $node->nid) . ' is now approved and published.');
      drupal_goto();
      */
      break;
    
    case 'email':
      
      $approve = explode('=', $id);
      if(count($approve) != 2 ) {
        drupal_access_denied();
        return;
      }
      $code = $approve[0];
      $email = $approve[1];
      
      $query = db_select('field_data_field_r_email', 're')
        ->fields('re', array('entity_id'));
      $query->condition('field_r_email_value', $email);
      $review_nid = $query->execute()->fetchField();
      
      if (!$review_nid) {
        //drupal_access_denied();
        return t('Sorry, no review with such an email found.');
      }
      
      $query = db_select('node', 'n')
        ->fields('n', array('uid'))
        ->fields('ac', array('field_r_approvecode_value'));
      $query->condition('nid', $review_nid);
      $query->leftJoin('field_data_field_r_approvecode', 'ac', 'ac.entity_id = n.nid');
      $review = $query->execute()->fetchObject();
      
      if ($review->uid) {
        // Wrong request because it's a registered user's email.
        //drupal_access_denied();
        return t('Wrong request.');
      }
      if (!$review->field_r_approvecode_value) {
        return t('This email is already approved.');
      }
      if ($review->field_r_approvecode_value != $code) {
        return t('Wrong verification code!');
      }
      
      // We are ready to approve the email now.
      $review = node_load($review_nid);
      $review->field_r_approvecode['und'][0]['value'] = '';
      node_save($review);
      return t('Thank you! Your email has been successfully verified! After approving by our administrators, your review will be published on our site.');
  }
  
  drupal_access_denied();
}


/**
 * Implements hook_url_inbound_alter().
 */
function gv_misc_url_inbound_alter(&$path, $original_path, $path_language) {
  // Create the path /contact-us from /contact
//  if (preg_match('|^contact-us$|', $path, $matches)) {
//    $path = 'contact';
//  }
//  else
    if ($path == 'voip-provider-submit-user-review') {
    $path = 'node/add/review';
  }
}


/**
 * Implements hook_url_outbound_alter().
 */
function gv_misc_url_outbound_alter(&$path, &$options, $original_path) {
  // Create the path /contact-us from /contact
//  if (preg_match('|^contact$|', $path, $matches)) {
//    $path = 'contact-us';
//  }
//  else
    if ($path == 'node/add/review') {
    $path = 'voip-provider-submit-user-review';
  }
}


/**
 * Test page function for url /test.
 */
function gv_misc_testPage() {
  
  $admins = gv_misc_getAdmins();
  dpm($admins);
  
  $recipient = $admins[1];
  $params['recipient'] = $recipient;
  drupal_mail('gv_misc', 'new_review_admin_notify', $recipient->mail, user_preferred_language($recipient), $params);
      
      
  
  
  
  
  return 'End of Test';
}


/**
 * Implements requests from users.
 * 
 * Returns json result data with OK or error.
 */
function gv_misc_makeRequest_ajax() {
  $status = TRUE;
  $output = '';
  
  //$post = $_POST;
  $post = array();
  foreach ($_POST as $key => $value) {
    $post[$key] = check_plain($value);
  }
  
  if (empty($post) 
      || !isset($post['source']) || !$post['source']
      || !isset($post['phones_amt']) || !$post['phones_amt']
      //|| !isset($post['q_for']) || !$post['q_for']
      || !isset($post['buying_time']) || !$post['buying_time']
      || ( (!isset($post['firstname']) || !$post['firstname'] || !isset($post['lastname']) || !$post['lastname']) && (!isset($post['name']) || !$post['name']) )
      || !isset($post['email']) || !$post['email']
      || ( (!isset($post['phone_1']) || !$post['phone_1'] || !isset($post['phone_2']) || !$post['phone_2'] || !isset($post['phone_3']) || !$post['phone_3']) && (!isset($post['phone']) || !$post['phone']) )
     ) {
    $output = t('<div class="not-verified"><p class="error">The form is not filled!</p><p>Please, reload the page and try again.</p></div>'); 
  }
  elseif (!isset($post['token']) /*|| !isset($_SESSION['requestQuoteToken']) || $post['token'] != $_SESSION['requestQuoteToken']*/){
    $output = t('<div class="not-verified"><p class="error">The form is outdated or broken.</p><p> Please, reload the page and try again.</p><div class="not-verified">'); 
  }
  else {


    // Mapping form data to right named fields.
    if ($post['source'] == 'page') {
      
      $phone = isset($post['phone']) ? $post['phone'] : $post['phone_1'] . '-' . $post['phone_2'] . '-' . $post['phone_3'];
      
      $submission = array(
        'Phones needed' => $post['phones_amt'],
        'Quote for' => isset($post['q_for']) ? $post['q_for'] : '',
        'Quote type' => $post['q_type'],
        'Buying Time Frame' => $post['buying_time'],
        'First Name' => isset($post['firstname']) ? $post['firstname'] : '',
        'Last Name' => isset($post['lastname']) ? $post['lastname'] : '',
        'Name' => isset($post['name']) ? $post['name'] : '',
        
        'Company' => isset($post['company']) ? $post['company'] : '',

        'Email' => $post['email'],
        'Website' => isset($post['website']) ? $post['website'] : '',
        'Phone #' => $phone,
        'Monthly budget' => isset($post['budget']) ? $post['budget'] : '',

        'Source' => $post['source'],
        'Version' => $post['version'],
      );
      
      foreach ($submission as $key => $value) {
        if (!$value || $value == 'Optional') {
          unset($submission[$key]);
        }
      }
      
    }
    else {
      $submission = array(
        'Phones needed' => $post['phones_amt'],
        'Quote for' => $post['q_for'],
        'Buying Time Frame' => $post['buying_time'],
        'Connection type' => $post['connection'],
        'First Name' => $post['firstname'],
        'Last Name' => $post['lastname'],
          
        'Company' => isset($post['company']) ? $post['company'] : '',
        'Email' => $post['email'],
        'Phone #' => $post['phone_1'] . '-' . $post['phone_2'] . '-' . $post['phone_3'],
        'Notes' => isset($post['notes']) ? $post['notes'] : '',
          
        'Source' => $post['source'],
      );      
    }
    
    $submission['User IP'] = isset($_SERVER['REMOTE_ADDR']) ? $_SERVER['REMOTE_ADDR'] : '';
    
    $params['request_data'] = $submission; // $post;
    /*
    $admins = db_query("SELECT u.uid FROM {users_roles} u INNER JOIN {role} r ON r.name = :role AND r.rid = u.rid WHERE 1", array(':role' => 'administrator')); 
    foreach ($admins as $admin) {
      // Comment to go live!
      //if($admin->uid != 1) continue;
      
      $recipient = user_load($admin->uid);
      $params['recipient'] = $recipient;
      drupal_mail('gv_misc', 'request_quote', $recipient->mail, user_preferred_language($recipient), $params);
    }
    */
    global $language;
    //$params['recipient'] = $recipient;
    if ($post['source'] == 'page') {
      drupal_mail('gv_misc', 'request_quote', 'leads@getvoip.com', $language->language, $params);
    }
    else {
      drupal_mail('gv_misc', 'request_quote', 'ry@getvoip.com', $language->language, $params);
    }
    
    // Test letter to the root
    drupal_mail('gv_misc', 'request_quote', 'all4senses@gmail.com', $language->language, $params);
    
    
    $status = TRUE;
    
    // Doesn't work... needs to place on a separate page.
/*    
    $adwords_conversion_code = '
<!-- Google Code for Landing Page Conversion Page -->
<script type="text/javascript">
var google_conversion_id = 944838791;
var google_conversion_language = "en";
var google_conversion_format = "3";
var google_conversion_color = "ffffff";
var google_conversion_label = "HO_ZCOH81gMQh7HEwgM";
var google_conversion_value = 0;
</script>
<script type="text/javascript" src="http://www.googleadservices.com/pagead/conversion.js">
</script>
<script>alert("Thank You!")</script>
';
*/
         
    $output = t('<p><strong>Thank you</strong> for taking your time to complete our form. A VoIP Expert will be contacting you shortly to provide you with a personalized VoIP Service quote.</p><p>In the meantime, you can gain a great deal of VoIP information right here at <a href="http://getvoip.com">GetVoIP.com</a></p>'); 
    
    if ($post['source'] == 'page') {
      switch ($post['version']) {
        case '1':
          $output .= '<script>top.location.href="http://getvoip.com/request-voip-phone-system-quote-final";</script>';
          break;
        
        case '2':
          $output .= '<script>top.location.href="http://getvoip.com/voip-provider-quotes-final";</script>';
          break;
        
        case '3':
          $output .= '<script>top.location.href="http://getvoip.com/compare-voip-solutions-final";</script>';
          break;
      }
      
    }
    
  }
  //$letter = theme('gv_misc_requestQuote_mail', $post);//$params['request_data']);
  drupal_json_output(array('status' => $status, 'data' => $output/*, 'post' => $_POST, 'token' => $post['token'], 'test_token' => $test_token, 'valid_token' => $valid_token, 'letter' => $letter*/));
}


/**
 * Implements hook_mail().
 */
function gv_misc_mail($key, &$message, $params) {
  switch ($key) {
    case 'request_quote':
      /*  
      $data = array( 
        'privatemsg_message' => $params['message'],
        'privatemsg_recipient' => $params['recipient'],
      );
      $options = array(
        'language' => user_preferred_language($params['recipient']),
        // Don't sanitize output since this is used in an email, not a browser.
        'sanitize' => FALSE,
        // Custom token to avoid custom token handling.
        'privatemsg-display-invalid' => FALSE,
      );
      
      $message['subject'] = trim(token_replace(variable_get('pm_email_notify_subject', 'New private message at [site:name].'), $data, $options));
      $message['body'][] = trim(token_replace(variable_get('pm_email_notify_body', _pm_email_notify_default_body()), $data, $options));
      */
      $message['subject'] = t('New request for a quote');
      $message['body'][] = theme('gv_misc_requestQuote_mail', $params['request_data']);
      break;
    
    
    
    case 'email_verification':
      $message['subject'] = t('Submitted Review Requires One-Click Email Verification');
      $message['body'][] = t('Dear User,

Thank you for taking your time to share your VoIP experience by submitting a review.

To faster verify and publish your review, please click on the email verification link below:

!url

Best Wishes,
GetVoIP Team
', array('!url' => 'http://getvoip.com/approve/email/' . $params['verification_code']));
      
      break;
    
    
    
    case 'new_review_admin_notify':
      $message['subject'] = t('New review has been submitted');
      $message['body'][] = t('Dear administrator!

A new review just has been submitted recently. Please approve or discard it at !pending_reviews.

Please, don\'t forget to log in to access this page.

Best wishes,
Get VoIP team
', array('!pending_reviews' => 'http://getvoip.com/approve/reviews'));
      
      break;
    
  }
}  


/**
 * Simple theming of a Request for quote mail content.
 */
function theme_gv_misc_requestQuote_mail($data) {
 $out = 'Quote Request submission form:

';
 foreach ($data as $key => $value) {
   $out .= "$key = $value
";
 }
 
 return $out;
}


/**
* Implementation of hook_mail_alter().
* Here we allow the site name to be used as the senders name for outgoing email.
* see http://drupal.org/node/209672
* 
* No need for this hook if the smtp module is used.
*/
/*
function gv_misc_mail_alter(&$message){
  $default_from = variable_get('site_mail', ini_get('sendmail_from'));
  
  if($message['from'] == $default_from){
    $message['from'] = '"'. variable_get('site_name', 'GetVoIP.com') .'" <'. $default_from .'>';
    $message['headers']['From'] = $message['headers']['Sender'] = $message['headers']['Return-Path'] = $message['headers']['Errors-To'] = $message['headers']['Reply-To'] = $message['from'];
  }
}
*/


/**
 * Helper function to send preset messages.
 */
function gv_misc_sendMessage($tag, $data = NULL) {
  switch ($tag) {
    case 'new_review_admin_notify':
      /*
      $admins = gv_misc_getAdmins();
      foreach ($admins as $recipient) {
        $params['recipient'] = $recipient;
        drupal_mail('gv_misc', 'new_review_admin_notify', $recipient->mail, user_preferred_language($recipient), $params);
      }
      */
      global $language;
      $params = NULL;
      drupal_mail('gv_misc', 'new_review_admin_notify', 'ry@getvoip.com', $language->language, $params);
      drupal_mail('gv_misc', 'new_review_admin_notify', 'all4senses@gmail.com', $language->language, $params);
      
      
      break;
  

      
  case 'email_verification':
      
      global $language;
      $params['verification_code'] = $data['verification_code'];
      drupal_mail('gv_misc', 'email_verification', $data['email'], $language, $params, 'GetVoIP.com <contact@getvoip.com>');
      
      break;
  }
}


/**
 * Get site's admins objects.
 */
function gv_misc_getAdmins() {
  $query = db_select('users', 'u')
        ->fields('u');
  $query->leftJoin('users_roles', 'ur', 'ur.uid = u.uid');
  $query->leftJoin('role', 'r', 'r.rid = ur.rid');
  $query->condition('r.name', 'administrator');
  $admins = $query->execute()->fetchAllAssoc('uid');

  return $admins;
}


/**
 * Implements hook_form_alter().
 *
 * @param array &$form
 *   Array with declared form.
 *
 * @param array &$form_state
 *   Array with current form state.
 *
 * @param string $form_id
 *   Form ID.
 *
 * @return void
 *   Return nothing.
 */
function gv_misc_form_alter(&$form, &$form_state, $form_id) {
  // dpm($form_id);dpm($form);
  // Unlink Ckeditor from the comment input form.
  if($form['#id'] == 'comment-form') {
    //$form['comment_body']['und'][0]['#type'] = 'textarea';
  }
  if (isset($form['#node']) && $form_id == $form['#node']->type .'_node_form') {
    $form['body']['und']['0']['#format'] = "full_html";
    //$form['field_custom_php_code']['und']['0']['#format'] = "php_code";
  }
}


/**
 * Returns topics list for a specific content type. 
 * 
 * Allows to use same topics for News, articles, etc.
 */
function gv_misc_getTopics($content_type, $base_url = NULL, $limit = NULL) {
  $topics = NULL;
  $voc = taxonomy_vocabulary_machine_name_load(TOPICS);
  
  // Old style query, for reference.
  // $results = db_query("SELECT td.name, COUNT(n.nid) AS count FROM {taxonomy_term_data} td LEFT JOIN {taxonomy_index} ti ON ti.tid = td.tid INNER JOIN {node} n ON (n.nid = ti.nid AND n.type = :type) WHERE td.vid = :vid GROUP BY td.name LIMIT $limit", array(':vid' => $voc->vid, ':type' => $content_type));
    
  $types = array();

  $query = db_select('taxonomy_term_data', 'td')
        ->fields('td', array('name', 'tid'));
  $query->leftJoin('taxonomy_index', 'ti', 'ti.tid = td.tid');
  $query->leftJoin('node', 'n', 'n.nid = ti.nid');
  $query->where('n.nid = ti.nid AND n.type = :type', array(':type' => $content_type))
        ->addExpression('COUNT(n.nid)', 'count');
  $query->groupBy('td.name');
  if ($limit) {
    $query->range(0, $limit);
  }
  $results = $query->execute();

  foreach($results as $result) {
    // Translate terms to the current language.
    // $result->name = i18n_string_translate(array('taxonomy', 'term', $result->tid, 'name'), $result->name);
    $base_url = trim($base_url, '/');
    //$result->link = array('link_title' => $result->name, 'href' => $base_url . '/' . urlencode(drupal_strtolower($result->name)));
    $result->link = array('link_title' => $result->name, 'href' => $base_url . '/tags/' . str_replace(' ', '-', drupal_strtolower($result->name)));
    $topics[] = (array) $result;
  }
  return $topics;
}


/**
 * Implements hook_theme().
 */
function gv_misc_theme($existing, $type, $theme, $path) {
  return array(
    'gv_misc_submenuSimple' => array(
      'variables' => array('vars' => null),
    ),
    'gv_misc_headerLinks' => array(
      'variables' => array('vars' => null),
    ),
    // Fivestar REPLACING theme functions.
    'gv_misc_fivestar_static' => array(
      'variables' => array('rating' => NULL, 'stars' => 5, 'tag' => 'vote', 'widget' => array('name' => 'default', 'css' => '')),
    ),
    // Compose a mail with a Request for a quote.
    'gv_misc_requestQuote_mail' => array(
      'variables' => array(),
    ),
  );
}
  

/**
 * Simple theming of nested submenu.
 */
function theme_gv_misc_headerLinks($vars) {
  if(empty($vars['submenu']['below'])) {
    return NULL;
  }

  $class = isset($vars['class']) ? $vars['class'] : 'header-links';
  $delimiter = isset($vars['delimiter']) ? $vars['delimiter'] : '';
  $out = '<ul class="' . $class . '">';
  $count = 0;
  foreach ($vars['submenu']['below'] as $submenu) {
    if (isset($submenu['link']['hidden']) && $submenu['link']['hidden']) {
      continue;
    }
    $out .= ($count ? $delimiter : '') . '<li>' . l(t($submenu['link']['link_title']), $submenu['link']['href'], array('attributes' => array('class' => array($submenu['link']['link_title']), 'title' => $submenu['link']['options']['attributes']['title'] ))) . '</li>';
    $count++;
  }
  $out .= '</ul>';
  return $out;
}


/**
 * Simple theming of nested submenu.
 */
function theme_gv_misc_submenuSimple($vars) {
  if(empty($vars['submenu']['below'])) {
    return NULL;
  }
  $level = isset($vars['level']) ? $vars['level'] : 0;
  $class = isset($vars['class']) ? $vars['class'] : 'om-links';
  $delimiter = isset($vars['delimiter']) ? $vars['delimiter'] : '';
  $out = '<ul class="gv ' . $class . ' lvl-' . $level . '">';
  $count = 0;
  foreach ($vars['submenu']['below'] as $submenu) {
    if (isset($submenu['link']['hidden']) && $submenu['link']['hidden']) {
      continue;
    }
    $out .= ($count ? $delimiter : '') . '<li>';
    if($level) {
      for ($i = 0; $i < $level; $i++ ) {
        $out .= '--';
      }
    }
    $title = t($submenu['link']['link_title']);
    if(isset($submenu['count']) && $submenu['count']) {
      $title .= ' (' . $submenu['count'] . ')';
    }
    // If the field Description has '<nolink>' don't show link for this item
    if(isset($submenu['link']['localized_options']['attributes']['title']) && strtolower($submenu['link']['localized_options']['attributes']['title']) == '<nolink>') {
      $out .= $title;
    }
    else {
      $out .= l($title, $submenu['link']['href']);
    }
    $out .= '</li>';
    if (!empty($submenu['below'])) {
      // Recursion call.
      $out .= '<li>' . theme('gv_misc_submenuSimple', array('submenu' => $submenu, 'level' => ($level + 1), 'class' => $class, 'delimiter' => $delimiter )) . '</li>';
    }
    $count++;
  }
  $out .= '</ul>';
  return $out;
}


/**
 * REPLACE FOR ORIGINAL fivestar module theming function. Just to use only its theming functionality.
 * 
 * Display a plain HTML view-only version of the widget with a specified rating.
 *
 * @param $rating
 *   The desired rating to display out of 100 (i.e. 80 is 4 out of 5 stars).
 * @param $stars
 *   The total number of stars this rating is out of.
 * @param $tag
 *   Allows multiple ratings per node.
 * @return
 *   A themed HTML string representing the star widget.
 */
function theme_gv_misc_fivestar_static($variables) {
  $rating  = $variables['rating'];
  $stars = $variables['stars'];
  $tag = $variables['tag'];
  $widget = $variables['widget'];

  // GV Intrusion!!!!
  $path = drupal_get_path('module', 'gv_misc') . '/css/fivestar';
  drupal_add_css($path . '/css/fivestar.css');
  // END of intrusion.
  
  if($widget['name'] != 'default') {
    // GV changes.
    //drupal_add_css($widget['css']);
    drupal_add_css($path . '/widgets/' . $widget['name'] . '/' . $widget['css']);
  }
  
  $output = '<div class="fivestar fivestar-' . $widget['name'] . '">';
  $output .= '<div class="fivestar-widget-static fivestar-widget-static-'. $tag .' fivestar-widget-static-'. $stars . ' clearfix">';
  if (empty($stars)) {
    $stars = 5;
  }
  $numeric_rating = $rating/(100/$stars);
  for ($n=1; $n <= $stars; $n++) {
    $star_value = ceil((100/$stars) * $n);
    $prev_star_value = ceil((100/$stars) * ($n-1));
    $zebra = ($n % 2 == 0) ? 'even' : 'odd';
    $first = $n == 1 ? ' star-first' : '';
    $last = $n == $stars ? ' star-last' : '';
    $output .= '<div class="star star-'. $n .' star-'. $zebra . $first . $last .'">';
    if ($rating < $star_value && $rating > $prev_star_value) {
      $percent = (($rating - $prev_star_value) / ($star_value - $prev_star_value)) * 100;
      $output .= '<span class="on" style="width: '. $percent .'%">';
    }
    elseif ($rating >= $star_value) {
      $output .= '<span class="on">';
    }
    else {
      $output .= '<span class="off">';
    }
    if ($n == 1)$output .= $numeric_rating;
    $output .= '</span></div>';
  }
  $output .= '</div></div>';
  return $output;
}


/**
 * Returns all available providers aray with nid => title.
 */
function gv_misc_getProviders(&$providers, $scope = 'all') {
  
  if ($scope == 'all') {
    $query = db_select('node', 'n');
    $query->join('field_data_field_p_types', 'pt', "pt.entity_id = n.nid"); 
    $query->join('field_data_field_p_name', 'pn', "pn.entity_id = n.nid"); // inner_join file_usage table against file_managed
    $query->fields('n', array('nid', 'title'))  // specifying fields from file_usage table
          ->fields('pt', array('field_p_types_value'))
          ->fields('pn', array('field_p_name_value')) // specifying fields from file_managed table
          ->condition('n.type', 'provider'); // specifying the condition where fu.id = 5
    $result = $query->execute(); 

    foreach($result as $provider) {
      $providers[$provider->nid] = $provider->field_p_name_value . ' - ' . $provider->field_p_types_value; // = $provider->title;
    }

    // Sort providers alphabetically.
    //SORT_NATURAL | SORT_FLAG_CASE   only for php from 5.4.0
    //asort($providers); 
    natcasesort($providers);
  }
  elseif ($scope == 'all_including_others_from_reviews') {
    $query = db_select('field_data_field_r_provider_name', 'pn');
    //$query->fields('n', array('nid', 'title'))
    $query->fields('pn', array('field_r_provider_name_value'))
          ->distinct(); 
    $result = $query->execute(); 
    foreach($result as $provider) {
      $providers[$provider->field_r_provider_name_value] = $provider->field_r_provider_name_value; // = $provider->title;
    }
    // Sort providers alphabetically.
    //SORT_NATURAL | SORT_FLAG_CASE   only for php from 5.4.0
    //asort($providers); 
    natcasesort($providers);
  }

}
    

/**
 * Checks if the email is already taken by one of the site's registered user.
 */
function gv_misc_emailIsRegistered($email) {
  $data = db_select('users', 'u')
          ->fields('u', array('uid'))
          ->condition('mail', $email)
          ->execute();
  if ($email = $data->fetchField()) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}




/**
 * Check if a current user already submitted a review for a specific Provider and return it if it exists.
 */
function gv_misc_userHasSubmittedReview($provider_nid, $user_uid, $user_email = NULL, $other_provider_title = NULL, $current_review_nid = NULL) {
  
  if (!$user_uid && !$user_email) {
    // Not full source data...
    // For uid = 0 should be set email also.
    return FALSE;
  }
  
  $data = db_select('node', 'n')
        ->fields('n', array('nid', 'title'))
        ->fields('na', array('field_r_notapproved_value'));
  $data->leftJoin('field_data_field_ref_provider', 'rp', "rp.entity_id = n.nid");
  $data->leftJoin('field_data_field_r_oprovider', 'op', "op.entity_id = n.nid");
  $data->leftJoin('field_data_field_r_email', 'ue', "ue.entity_id = n.nid");
  $data->leftJoin('field_data_field_r_notapproved', 'na', "na.entity_id = n.nid");
  $data->condition('n.type', 'review')
       //->condition('n.uid', $user_uid)
       ;
  
  // For an anonymous user check email as well (we can find a user only that way in this case)
  if ($user_email) {
    // Let's check email instead if uid, as there could exist a review (from other user,  authorized or not) with a such email
    $data->condition('ue.field_r_email_value', $user_email);
  }
  
  // exclude a currently submitted review from the search.
  if ($current_review_nid) {
    $data->condition('n.nid', $current_review_nid, '!=');
  }
  
  if ($provider_nid) {
    $data->condition('rp.field_ref_provider_target_id', $provider_nid);
  }
  elseif ($other_provider_title) {
    $data->condition('op.field_r_oprovider_value', $other_provider_title);
  }
  else {
    // No provider id or title set.
    return FALSE;
  }
  
  $data = $data->execute()->fetchObject();
  
  if (empty($data)) {
    return FALSE;
  }
  else {
    return $data;
  }
}


/**
 * Implements hook_token_info().
 */
function gv_misc_token_info() {
  // Defines new token 'Provider name' in the node torens group.
  $info['tokens']['node']['provider-name-for-current-review'] = array(
    'name' => t('Provider name for a current review'),
    'description' => t('Name of the provider chosen from a select list or from a custom field if its provided...'),
  );

  return $info;
}


/**
 * Implements hook_tokens().
 * 
 * Provides token for a current review's provider name. It set to selected from a list or from a manually filled field (if not selected from a list).
 */
function gv_misc_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  $sanitize = !empty($options['sanitize']);

  // Add new token 'provider-name-for-current-review' to a 'node' tokens group.
  if ($type == 'node' && !empty($data['node'])) {
    $node = $data['node'];

    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'provider-name-for-current-review':
          if ($node->type == 'review') {
            if (isset($node->field_ref_provider['und'][0]['target_id']) && $node->field_ref_provider['und'][0]['target_id']) {
              
//              $provider_title = db_select('node', 'n')
//                ->fields('n', array('title'))
//                ->condition('nid', $node->field_ref_provider['und'][0]['target_id'])
//                ->execute()->fetchField();
              
              
              $query = db_select('node', 'n');
              $query->join('field_data_field_p_name', 'pn', "pn.entity_id = n.nid"); // inner_join file_usage table against file_managed
              //$query->fields('n', array('nid', 'title'))  // specifying fields from file_usage table
              $query->fields('pn', array('field_p_name_value')) // specifying fields from file_managed table
                    ->condition('nid', $node->field_ref_provider['und'][0]['target_id']);
              
              $provider_title = $query->execute()->fetchField();
              
              
              
              
              
              $replacements[$original] = $provider_title;
            }
            else {
              $replacements[$original] = check_plain($node->field_r_oprovider['und'][0]['value']);
            }

          }
          
          break;
      }
    }
  }
  
  return $replacements;
}



/**
 * Implements hook_TYPE_alter().
 * 
 * Provides custom tags for the Votes API via votingapi_metadata alter (defined in ).
 */
function gv_misc_votingapi_metadata_alter(&$data) {
  $data['tags'] += array(
    'sound' => array(
      'name' => t(SOUND),
      'description' => t('Sound Quality Rating for a provider.'),
    ),
    'install' => array(
      'name' => t(INSTALL),
      'description' => t('Installation Process Rating for a provider.'),
    ),
    'service' => array(
      'name' => t(CUSTOMER),
      'description' => t('Value for Customer Service Rating for a provider.'),
    ),
    'rely' => array(
      'name' => t(RELY),
      'description' => t('Reliability Rating for a provider.'),
    ),
    'features' => array(
      'name' => t(FEATURES),
      'description' => t('Features Rating for a provider.'),
    ),
    'money' => array(
      'name' => t(PRICE),
      'description' => t('Value for Money Rating for a provider.'),
    ),
    'recommend' => array(
      'name' => t(RECOMMEND),
      'description' => t('Value for Would you recommend this VoIP provider. Yes or No.'),
    ),
    'overall' => array(
      'name' => t(OVERALL),
      'description' => t('Average overall value for all providers rates.'),
    ),
  );
}



/**
 * Implements hook_views_pre_render().
 */

function gv_misc_views_pre_render(&$view) {
  
  //dpm($view->name); dpm($view->current_display);

  // Add a prefaces for the some views pages.
  $key = 'view-' . $view->name . '-' . $view->current_display;
  switch($key) {
    case 'view-providers-page_p_bu': 
      // Business Providers listing page.
    case 'view-providers-page_p_re': 
      // Residential Providers listing page.
    case 'view-reviews-page_all_reviews': 
      // Residential Providers listing page.
      
    case 'view-blog-page': 
    case 'view-blog-page_by_tag':
      
    case 'view-articles-page': 
    case 'view-articles-page_by_tag':
    
    case 'view-news-page': 
    case 'view-news-page_by_tag':
      
    case 'view-sitemap-page': 
   
    case 'view-taxonomy_term-page_by_tag':
      
      $do_attach_preface = TRUE;
      break;
    
    default:
      $do_attach_preface = FALSE;
      break;
  }
  if ($do_attach_preface && $preface_node = gv_misc_getPrefaceByKey($key)) {
   
    if ($view->current_display == 'page_by_tag') {
      $preface_node->title = $view->get_title();//$view->build_info['title'];
    }
    else {
      // Change the title of the view (main page title actually)
      if (isset($preface_node->metatags['title']['value'])) {
        $view->build_info['title'] = $preface_node->metatags['title']['value'];
      }
      else{
        $view->build_info['title'] = $preface_node->title;
      }
    }
    
    
    // Show plain caption, not a link for a full node as a full node itself will be unpublished and unreachable.
    $preface_node->title_no_link = TRUE;
    // Hide the title of the preface.
    // $preface_node->title = '';
    // Works, but it's shown after exposed filters.
    $view->attachment_before = render(node_view($preface_node, 'full'));
    // DOesn't work.
    /*
    $view->header = array(
        '#type' => 'item',
        '#markup' => '<div class="preface">' . render(node_view($preface_node)) . '</div>',
    );
    */

    
  }
   
} 


/**
 * Returns preface node by key.
 */
function gv_misc_getPrefaceByKey($key) {
    
    $preface_node = NULL;
    
    $query = db_select('node', 'n');
    $query->join('field_data_field_preface_key', 'pk', "pk.entity_id = n.nid"); 
    $query->fields('n', array('nid'))  
          //->fields('pn', array('field_preface_key_value')) 
          ->condition('n.type', 'preface')
          ->condition('pk.field_preface_key_value', $key); 
    $preface_nid = $query->execute()->fetchField(); 
    if ($preface_nid) {
      $preface_node = node_load($preface_nid);
    }
    return $preface_node;
  }
  
  
/**
 * Returns all fees for available providers.
 */
function gv_misc_getProvidersFees($scope = 'all') {
  if ($scope == 'all') {
    $data = db_select('field_revision_field_p_fees_save', 'f')
          ->fields('f', array('entity_id', 'field_p_fees_save_value'))
          ->execute();
    foreach($data as $fee) {
      $fees[$fee->entity_id] = unserialize($fee->field_p_fees_save_value);
    }
  }
  return $fees;
}


/**
 * Returns all quick data for available providers.
 */
function gv_misc_getProvidersDataQuick($scope = 'all', $reset = FALSE, $clear_from_session = FALSE) {
    
  if ($clear_from_session && isset($_SESSION['p_all_data_quick'])) {
    // Reset a helper session var with all quick data.
    unset($_SESSION['p_all_data_quick']);
  }
    
  $p_data_quick = NULL;
  if ($scope == 'all') {
    // If data is not in the Session or its age more than 5 hours, reset it.
    
    //$p_data_quick = @$_SESSION['p_all_data_quick'];
    if(!$reset && isset($_SESSION['p_all_data_quick'])) {
      $p_data_quick = $_SESSION['p_all_data_quick'];
    }
    else {
      $p_data_quick = NULL;
    }
    
    
    if ($reset || !$p_data_quick || time() > ($p_data_quick['timestamp'] + 18000) ) {
      $data = db_select('field_revision_field_p_data_quick', 'f')
            ->fields('f', array('entity_id', 'field_p_data_quick_value'))
            ->execute();
      foreach($data as $value) {
        $p_data_quick[$value->entity_id] = unserialize($value->field_p_data_quick_value);
      }

      $p_data_quick['timestamp'] = time();
      $_SESSION['p_all_data_quick'] = $p_data_quick;
    }
  }
  return $p_data_quick;  
}
    

/**
 * Return specific variable value from p_data_quick for a provider depending on the filter value (business OR residential, etc)
 */
function wdg_misc_getProviderQuickData($target, $data) {
  
  $out = '';
  
  switch($target) {
    
    
    case 'logo_chart':
    case 'logo_article':
    
      $all_data_quick = gv_misc_getProvidersDataQuick();
      $out = '';
      
      //dpm($all_data_quick[$data['data']->nid]);
      if (isset($all_data_quick[$data['data']->nid]['i_web']) && $all_data_quick[$data['data']->nid]['i_web']) {
        $link = $all_data_quick[$data['data']->nid]['i_web'];
      }
      else {
        $link = url('node/' . $data['data']->nid);
      }
      
      if (isset($all_data_quick[$data['data']->nid]['i_logo_uri'])) {
        if ($target == 'logo_chart') {
          $image = theme('image_style', array( 'path' =>  $all_data_quick[$data['data']->nid]['i_logo_uri'], 'style_name' => 'logo_provider_chart_main'));
        } 
        else {
          $image = theme('image_style', array( 'path' =>  $all_data_quick[$data['data']->nid]['i_logo_uri'], 'style_name' => 'thumbnail'));
        }
        $out = '<a href="' . $link . '" target="_blank">' . $image . '</a>';
      }
      else {
        $out = '<a href="' . $link . '" target="_blank">' . $all_data_quick[$data['data']->nid]['name'] . '</a>';
      }
          
      return $out;
      
      
      
    case 'features':
      
      $out = '';
      $all_data_quick = gv_misc_getProvidersDataQuick();
      //dpm($all_data_quick);
      
      $plan_title = isset($all_data_quick[$data['data']->nid][$data['service_type']]['plan']) ? $all_data_quick[$data['data']->nid][$data['service_type']]['plan'] : '';
      $features = isset($all_data_quick[$data['data']->nid][$data['service_type']]['feat']) ?  $all_data_quick[$data['data']->nid][$data['service_type']]['feat'] : '';
      //dpm($features);
      if ($plan_title) {
        $out .= '<div class="plan">' . $plan_title . '</div>';
      }
      if (!empty($features)) {
        foreach($features as $tid => $term) {
          $out .= '<div class="feature">' . t($term) . '</div>';
        }
      }
      
      return $out; // $all_data_quick[$data['data']->nid][$target];
      
    
    
    
    
    case 'rating':
    
      $all_data_quick = gv_misc_getProvidersDataQuick();
      $out = '';
      if (isset($data['data']->votingapi_cache_node_percent_overall_average_value) && $data['data']->votingapi_cache_node_percent_overall_average_value) {
                
        $out = theme('gv_misc_fivestar_static', array('rating' => $data['data']->votingapi_cache_node_percent_overall_average_value, 'stars' => 5, 'tag' => 'overall', 'widget' => array('name' => 'stars', 'css' => 'stars.css')))
              //. '<div class="rating">' . $data['data']->votingapi_cache_node_percent_overall_average_value . '%</div>'
              //. '<div class="voters">' . $data['data']->votingapi_cache_node_percent_overall_count_value . ' ' . t('reviews') . '</div>'
              ;
        
        //$out = '<div class="details"><a href="' . url('node/' . $data['data']->nid) . '">' . $data['data']->votingapi_cache_node_percent_overall_count_value . ' ' . $data['data']->node_title . '<br>' . t('Reviews') . '</a></div>' . $out . ' <div class="count">(' . number_format( (0.05 * $data['data']->votingapi_cache_node_percent_overall_average_value), 1 ) . ')</div>';
        $out = '<div class="details"><a href="' . url('node/' . $data['data']->nid) . '">' . $data['data']->votingapi_cache_node_percent_overall_count_value . ' ' . $all_data_quick[$data['data']->nid]['name'] . '<br>' . t('Reviews') . '</a></div>' . $out . ' <div class="count">(' . number_format( (0.05 * $data['data']->votingapi_cache_node_percent_overall_average_value), 1 ) . ')</div>';
      }
      
      return $out;
      
      
      
      
      
    case 'plan':
      
      //dpm($data); 
      $all_data_quick = gv_misc_getProvidersDataQuick();
      //dpm($all_data_quick);
      
      return isset($all_data_quick[$data['data']->nid][$target]) ? $all_data_quick[$data['data']->nid][$target] : '';
      
      
      
      
    case 'monthly':
    case 'back':
    case 'setup':
      
      $all_data_quick = gv_misc_getProvidersDataQuick();
      $out = isset($all_data_quick[$data['data']->nid][$data['service_type']]['fees'][$target]) ? $all_data_quick[$data['data']->nid][$data['service_type']]['fees'][$target] : '';
      
      if ($target == 'monthly' && $out) {
        $out = '$'. $out;
      }
      return $out;
      
    
      
    case 'i_web':
      
      $all_data_quick = gv_misc_getProvidersDataQuick();
      
      return isset($all_data_quick[$data['data']->nid][$target]) ? $all_data_quick[$data['data']->nid][$target] : '';

  }
}


/**
 * Return specific variable value for a provider depending on the filter value (business OR residential, etc)
 */
function wdg_misc_getProviderData_fromView($target, $data) {
  
  $out = '';
  
  switch($target) {
    
    case 'service_types':
      $service_types = $data['data']->_field_data['nid']['entity']->field_p_types['und'];
      $types = '';
      foreach ($service_types as $service_type) {
        if ($service_type['value'] == $data['exposed_raw_input']['type']) {
          $current_type = '<div class="type main">' . drupal_ucfirst($service_type['value']) . '</div>';
        }
        else {
          $types .= '<div class="type">' . drupal_ucfirst($service_type['value']) . '</div>';
        }
      }
      
      if ($types) {
        return $current_type . '<div class="descr">' . t('(currently exposed)') . '</div>' . $types;
      }
      else {
        return $current_type;
      }
      
      break; // End of case 'service_types':
    
      
      
    case 'user_rating':
      $out = '';
      if (isset($data['data']->votingapi_cache_node_percent_features_average_value) && $data['data']->votingapi_cache_node_percent_features_average_value) {
                
        $out = theme('gv_misc_fivestar_static', array('rating' => $data['data']->votingapi_cache_node_percent_features_average_value, 'stars' => 5, 'tag' => 'features', 'widget' => array('name' => 'hearts', 'css' => 'hearts.css')))
              //. '<div class="rating">' . $data['data']->votingapi_cache_node_percent_features_average_value . '%</div>'
              . '<div class="voters">' . $data['data']->votingapi_cache_node_percent_features_count_value . ' ' . t('reviews') . '</div>'
              ;
      }
      $out .= '<div class="details">' . l(t('Details'), 'node/' . $data['data']->nid) . '</div>';
      break;
    
      
      
    case 'monthly_fees':
    case 'longdistance_fees':
    case 'setup_fees':
      
      if (!$all_fees = @$_SESSION['all_fees']) {
        $all_fees = gv_misc_getProvidersFees();
        $_SESSION['all_fees'] = $all_fees;
      }
      
      $p_fees = $all_fees[$data['data']->nid];
      //dpm($data['data']);
      //dpm($p_fees);
      
      
      
      switch($data['exposed_raw_input']['type']) {
        case 'business':
          if (isset($p_fees['bu'][$target]) && $p_fees['bu'][$target]) {
            return '$' . $p_fees['bu'][$target];
          }
          break;
        case 'residential':
          if (isset($p_fees['re'][$target]) && $p_fees['re'][$target]) {
            return '$' . $p_fees['re'][$target];
          }
          break;
      }
      
      /*
      if (!$provider_data = unserialize($data['data']->field_field_p_data[0]['raw']['value'])) {
        return NULL;
      }
      switch($data['exposed_raw_input']['type']) {
        case 'business':
          if (isset($provider_data['services']['s_business']['bu_basicinfo_fees'][$target]) && $provider_data['services']['s_business']['bu_basicinfo_fees'][$target]) {
            return '$' . $provider_data['services']['s_business']['bu_basicinfo_fees'][$target];
          }
          break;
        case 'residential':
          if (isset($provider_data['services']['s_residential']['re_basicinfo_fees'][$target]) && $provider_data['services']['s_residential']['re_basicinfo_fees'][$target]) {
            return '$' . $provider_data['services']['s_residential']['re_basicinfo_fees'][$target];
          }
          break;
      }
      */
      break; // End of case 'monthly_fees':
    
      
    case 'plan':
      if (!$provider_data = unserialize($data['data']->field_field_p_data[0]['raw']['value'])) {
        return NULL;
      }
      switch($data['exposed_raw_input']['type']) {
        case 'business':
          if (isset($provider_data['services']['s_business']['weights_bu_features'])) {
            $features = $provider_data['services']['s_business']['weights_bu_features'];
          }
          if (isset($provider_data['services']['s_business']['BU_preface_title'])) {
            $out = '<div class="plan">' . $provider_data['services']['s_business']['bu_preface_title'] . '</div>';
          }
          break;
        
        case 'residential':
          if (isset($provider_data['services']['s_business']['weights_bu_features'])) {
            $features = $provider_data['services']['s_business']['weights_bu_features'];
          }
          if (isset($provider_data['services']['s_residential']['re_preface_title'])) {
            $out = '<div class="plan">' . $provider_data['services']['s_residential']['re_preface_title'] . '</div>';
          }
          break;
      } // End of switch($data['exposed_raw_input']['type']) {
      
      if (is_array($features)) {
        $out .= '<div class="features">';
        $count = 0;
        foreach ($features as $feature) {
          $out .= '<div class="feature">' . $feature['name'] . '</div>';
          if ($count++ > 1) {
            break;
          }
        }
        $out .= '</div>';
      }
      break; // End of case 'features':
  }
  
  return $out;
}


/**
 * Forms API validation function for email.
 */
function wdg_misc_elementValidate_email($element, &$form_state) {
  if (!valid_email_address($element['#value'])) {
    form_error($element, t('Please enter a valid email address.'));
  }
//  if (empty($element['#value'])) {
//    form_error($element, t('This field is required.'));
//  }
}  


/**
 * Forms API validation function for url.
 */
function wdg_misc_elementValidate_url($element, &$form_state) {
  if (!valid_url($element['#value'])) {
    form_error($element, t('Please enter a valid url address.'));
  }
//  if (empty($element['#value'])) {
//    form_error($element, t('This field is required.'));
//  }
}


/**
 * Helper function for sorting by weight with uasort function.
 * 
 * Example of using:
 * 
 * uasort($array_with_elements_contained_key_weight, 'wdg_misc_sortArrayByWeight');
 */
function wdg_misc_sortArrayByWeight($a, $b) 
{
    if ($a['weight'] == $b['weight']) {
        return 0;
    }
    return ($a['weight'] < $b['weight']) ? -1 : 1;
}
