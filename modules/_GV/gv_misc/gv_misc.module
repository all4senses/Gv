<?php
// $Id: gv_misc.module

/**
 * Implements hook_form_alter().
 *
 * @param array &$form
 *   Array with declared form.
 *
 * @param array &$form_state
 *   Array with current form state.
 *
 * @param string $form_id
 *   Form ID.
 *
 * @return void
 *   Return nothing.
 */
function gv_misc_form_alter(&$form, &$form_state, $form_id) {
  // dpm($form_id);dpm($form);
  // Unlink Ckeditor from the comment input form.
  if($form['#id'] == 'comment-form') {
    $form['comment_body']['und'][0]['#type'] = 'textarea';
  }
  if (isset($form['#node']) && $form_id == $form['#node']->type .'_node_form') {
    $form['body']['und']['0']['#format'] = "full_html";
    //$form['field_custom_php_code']['und']['0']['#format'] = "php_code";
  }
}


/**
 * Returns topics list for a specific content type. 
 * 
 * Allows to use same topics for News, articles, etc.
 */
function gv_misc_getTopics($content_type, $base_url = NULL, $limit = NULL) {
  $topics = NULL;
  $voc = taxonomy_vocabulary_machine_name_load(TOPICS);
  
  // Old style query.
  // $results = db_query("SELECT td.name, COUNT(n.nid) AS count FROM {taxonomy_term_data} td LEFT JOIN {taxonomy_index} ti ON ti.tid = td.tid INNER JOIN {node} n ON (n.nid = ti.nid AND n.type = :type) WHERE td.vid = :vid GROUP BY td.name LIMIT $limit", array(':vid' => $voc->vid, ':type' => $content_type));
    
  $types = array();

  $query = db_select('taxonomy_term_data', 'td')
        ->fields('td', array('name', 'tid'));
  $query->leftJoin('taxonomy_index', 'ti', 'ti.tid = td.tid');
  $query->leftJoin('node', 'n', 'n.nid = ti.nid');
  $query->where('n.nid = ti.nid AND n.type = :type', array(':type' => $content_type))
        ->addExpression('COUNT(n.nid)', 'count');
  $query->groupBy('td.name');
  if ($limit) {
    $query->range(0, $limit);
  }
  $results = $query->execute();

  foreach($results as $result) {
    // Translate terms to current language
    // $result->name = i18n_string_translate(array('taxonomy', 'term', $result->tid, 'name'), $result->name);
    $base_url = trim($base_url, '/');
    $result->link = array('title' => $result->name, 'href' => $base_url . '/' . urldecode(drupal_strtolower($result->name)));
    $topics[] = (array) $result;
  }
  return $topics;
}